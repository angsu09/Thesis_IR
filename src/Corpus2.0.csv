,Cluster,Title,q_body,Title + Body,Tags,keywords,aa_body1,Duplicate ques,aa_body2
0,3,"What does the ""yield"" keyword do?","<p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>
<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>
<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &gt;= self._median:
        yield self._rightchild  
</code></pre>
<p>And this is the caller:</p>
<pre><code>result, candidates = [], [self]
while candidates:
    node = candidates.pop()
    distance = node._get_dist(obj)
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))
return result
</code></pre>
<p>What happens when the method <code>_get_child_candidates</code> is called?
Is a list returned? A single element? Is it called again? When will subsequent calls stop?</p>
<hr />
<sub>
1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=""https://well-adjusted.de/~jrspieker/mspace/"" rel=""noreferrer"">Module mspace</a>.</sub> 
","What does the ""yield"" keyword do?<p>What is the use of the <code>yield</code> keyword in Python? What does it do?</p>
<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>
<pre><code>def _get_child_candidates(self, distance, min_dist, max_dist):
    if self._leftchild and distance - max_dist &lt; self._median:
        yield self._leftchild
    if self._rightchild and distance + max_dist &gt;= self._median:
        yield self._rightchild  
</code></pre>
<p>And this is the caller:</p>
<pre><code>result, candidates = [], [self]
while candidates:
    node = candidates.pop()
    distance = node._get_dist(obj)
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))
return result
</code></pre>
<p>What happens when the method <code>_get_child_candidates</code> is called?
Is a list returned? A single element? Is it called again? When will subsequent calls stop?</p>
<hr />
<sub>
1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=""https://well-adjusted.de/~jrspieker/mspace/"" rel=""noreferrer"">Module mspace</a>.</sub> 
",<python><iterator><generator><yield><coroutine>,yield keyword called mspace child candidates jrschulz caller happens subsequent,"<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>
<h2>Iterables</h2>
<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>
<pre><code>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; for i in mylist:
...    print(i)
1
2
3
</code></pre>
<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>
<pre><code>&gt;&gt;&gt; mylist = [x*x for x in range(3)]
&gt;&gt;&gt; for i in mylist:
...    print(i)
0
1
4
</code></pre>
<p>Everything you can use &quot;<code>for... in...</code>&quot; on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>
<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>
<h2>Generators</h2>
<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>
<pre><code>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))
&gt;&gt;&gt; for i in mygenerator:
...    print(i)
0
1
4
</code></pre>
<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>
<h2>Yield</h2>
<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>
<pre><code>&gt;&gt;&gt; def create_generator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
&gt;&gt;&gt; mygenerator = create_generator() # create a generator
&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!
&lt;generator object create_generator at 0xb7555c34&gt;
&gt;&gt;&gt; for i in mygenerator:
...     print(i)
0
1
4
</code></pre>
<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>
<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky.</p>
<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>
<p>Now the hard part:</p>
<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>&quot;if/else&quot;</code>.</p>
<hr />
<h2>Your code explained</h2>
<p><em>Generator:</em></p>
<pre><code># Here you create the method of the node object that will return the generator
def _get_child_candidates(self, distance, min_dist, max_dist):

    # Here is the code that will be called each time you use the generator object:

    # If there is still a child of the node object on its left
    # AND if the distance is ok, return the next child
    if self._leftchild and distance - max_dist &lt; self._median:
        yield self._leftchild

    # If there is still a child of the node object on its right
    # AND if the distance is ok, return the next child
    if self._rightchild and distance + max_dist &gt;= self._median:
        yield self._rightchild

    # If the function arrives here, the generator will be considered empty
    # there is no more than two values: the left and the right children
</code></pre>
<p><em>Caller:</em></p>
<pre><code># Create an empty list and a list with the current object reference
result, candidates = list(), [self]

# Loop on candidates (they contain only one element at the beginning)
while candidates:

    # Get the last candidate and remove it from the list
    node = candidates.pop()

    # Get the distance between obj and the candidate
    distance = node._get_dist(obj)

    # If distance is ok, then you can fill the result
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)

    # Add the children of the candidate in the candidate's list
    # so the loop will keep running until it will have looked
    # at all the children of the children of the children, etc. of the candidate
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))

return result
</code></pre>
<p>This code contains several smart parts:</p>
<ul>
<li><p>The loop iterates on a list, but the list expands while the loop is being iterated. It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhaust all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p>
</li>
<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p>
</li>
</ul>
<p>Usually we pass a list to it:</p>
<pre><code>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = [3, 4]
&gt;&gt;&gt; a.extend(b)
&gt;&gt;&gt; print(a)
[1, 2, 3, 4]
</code></pre>
<p>But in your code, it gets a generator, which is good because:</p>
<ol>
<li>You don't need to read the values twice.</li>
<li>You may have a lot of children and you don't want them all stored in memory.</li>
</ol>
<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>
<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>
<h2>Controlling a generator exhaustion</h2>
<pre><code>&gt;&gt;&gt; class Bank(): # Let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield &quot;$100&quot;
&gt;&gt;&gt; hsbc = Bank() # When everything's ok the ATM gives you as much as you want
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])
['$100', '$100', '$100', '$100', '$100']
&gt;&gt;&gt; hsbc.crisis = True # Crisis is coming, no more money!
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # It's even true for new ATMs
&gt;&gt;&gt; print(wall_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # Build a new one to get back in business
&gt;&gt;&gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
</code></pre>
<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>
<p>It can be useful for various things like controlling access to a resource.</p>
<h2>Itertools, your best friend</h2>
<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?
Chain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>
<p>Then just <code>import itertools</code>.</p>
<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>
<pre><code>&gt;&gt;&gt; horses = [1, 2, 3, 4]
&gt;&gt;&gt; races = itertools.permutations(horses)
&gt;&gt;&gt; print(races)
&lt;itertools.permutations object at 0xb754f1dc&gt;
&gt;&gt;&gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]
</code></pre>
<h2>Understanding the inner mechanisms of iteration</h2>
<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).
Iterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>
<p>There is more about it in this article about <a href=""https://web.archive.org/web/20201109034340/http://effbot.org/zone/python-for-statement.htm"" rel=""noreferrer"">how <code>for</code> loops work</a>.</p>
","for x in y(): how does this work?
What is a ""yield"" statement in a function?
What does yield do in python 2.7?
Trouble understanding python generators
How does a function in Python remember its values after it returns?
How Generator expressions work internally in python?
","<p>It's returning a generator. I'm not particularly familiar with Python, but I believe it's the same kind of thing as <a href=""http://csharpindepth.com/Articles/Chapter11/StreamingAndIterators.aspx"" rel=""noreferrer"">C#'s iterator blocks</a> if you're familiar with those.</p>

<p>The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - <em>as if the generator method was paused</em>. Now obviously you can't really ""pause"" a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.</p>
"
1,6,"What does if __name__ == ""__main__"": do?","<p>Given the following code, what does the <code>if __name__ == ""__main__"":</code> do?</p>

<pre><code># Threading example
import time, thread

def myfunction(string, sleeptime, lock, *args):
    while True:
        lock.acquire()
        time.sleep(sleeptime)
        lock.release()
        time.sleep(sleeptime)

if __name__ == ""__main__"":
    lock = thread.allocate_lock()
    thread.start_new_thread(myfunction, (""Thread #: 1"", 2, lock))
    thread.start_new_thread(myfunction, (""Thread #: 2"", 2, lock))
</code></pre>
","What does if __name__ == ""__main__"": do?<p>Given the following code, what does the <code>if __name__ == ""__main__"":</code> do?</p>

<pre><code># Threading example
import time, thread

def myfunction(string, sleeptime, lock, *args):
    while True:
        lock.acquire()
        time.sleep(sleeptime)
        lock.release()
        time.sleep(sleeptime)

if __name__ == ""__main__"":
    lock = thread.allocate_lock()
    thread.start_new_thread(myfunction, (""Thread #: 1"", 2, lock))
    thread.start_new_thread(myfunction, (""Thread #: 2"", 2, lock))
</code></pre>
",<python><namespaces><main><python-module><idioms>,main given following code functional,"<h1>Short Answer</h1>
<p>It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:</p>
<ul>
<li><p>If you import the guardless script in another script (e.g. <code>import my_script_without_a_name_eq_main_guard</code>), then the second script will trigger the first to run <em>at import time</em> and <em>using the second script's command line arguments</em>. This is almost always a mistake.</p>
</li>
<li><p>If you have a custom class in the guardless script and save it to a pickle file, then unpickling it in another script will trigger an import of the guardless script, with the same problems outlined in the previous bullet.</p>
</li>
</ul>
<h1>Long Answer</h1>
<p>To better understand why and how this matters, we need to take a step back to understand how Python initializes scripts and how this interacts with its module import mechanism.</p>
<p>Whenever the Python interpreter reads a source file, it does two things:</p>
<ul>
<li><p>it sets a few special variables like <code>__name__</code>, and then</p>
</li>
<li><p>it executes all of the code found in the file.</p>
</li>
</ul>
<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>
<h2>Code Sample</h2>
<p>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>
<pre><code># Suppose this is foo.py.

print(&quot;before import&quot;)
import math

print(&quot;before functionA&quot;)
def functionA():
    print(&quot;Function A&quot;)

print(&quot;before functionB&quot;)
def functionB():
    print(&quot;Function B {}&quot;.format(math.sqrt(100)))

print(&quot;before __name__ guard&quot;)
if __name__ == '__main__':
    functionA()
    functionB()
print(&quot;after __name__ guard&quot;)
</code></pre>
<h2>Special Variables</h2>
<p>When the Python interpreter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>
<p><strong>When Your Module Is the Main Program</strong></p>
<p>If you are running your module (the source file) as the main program, e.g.</p>
<pre><code>python foo.py
</code></pre>
<p>the interpreter will assign the hard-coded string <code>&quot;__main__&quot;</code> to the <code>__name__</code> variable, i.e.</p>
<pre><code># It's as if the interpreter inserts this at the top
# of your module when run as the main program.
__name__ = &quot;__main__&quot; 
</code></pre>
<p><strong>When Your Module Is Imported By Another</strong></p>
<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>
<pre><code># Suppose this is in some other main program.
import foo
</code></pre>
<p>The interpreter will search for your <code>foo.py</code> file (along with searching for a few other variants), and prior to executing that module, it will assign the name <code>&quot;foo&quot;</code> from the import statement to the <code>__name__</code> variable, i.e.</p>
<pre><code># It's as if the interpreter inserts this at the top
# of your module when it's imported from another module.
__name__ = &quot;foo&quot;
</code></pre>
<h2>Executing the Module's Code</h2>
<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>
<p><strong>Always</strong></p>
<ol>
<li><p>It prints the string <code>&quot;before import&quot;</code> (without quotes).</p>
</li>
<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p>
</li>
</ol>
<pre><code># Find and load a module given its string name, &quot;math&quot;,
# then assign it to a local variable called math.
math = __import__(&quot;math&quot;)
</code></pre>
<ol start=""3"">
<li><p>It prints the string <code>&quot;before functionA&quot;</code>.</p>
</li>
<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>functionA</code>.</p>
</li>
<li><p>It prints the string <code>&quot;before functionB&quot;</code>.</p>
</li>
<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>functionB</code>.</p>
</li>
<li><p>It prints the string <code>&quot;before __name__ guard&quot;</code>.</p>
</li>
</ol>
<p><strong>Only When Your Module Is the Main Program</strong></p>
<ol start=""8"">
<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>&quot;__main__&quot;</code> and it calls the two functions, printing the strings <code>&quot;Function A&quot;</code> and <code>&quot;Function B 10.0&quot;</code>.</li>
</ol>
<p><strong>Only When Your Module Is Imported by Another</strong></p>
<ol start=""8"">
<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>&quot;foo&quot;</code>, not <code>&quot;__main__&quot;</code>, and it'll skip the body of the <code>if</code> statement.</li>
</ol>
<p><strong>Always</strong></p>
<ol start=""9"">
<li>It will print the string <code>&quot;after __name__ guard&quot;</code> in both situations.</li>
</ol>
<p><em><strong>Summary</strong></em></p>
<p>In summary, here's what'd be printed in the two cases:</p>
<pre class=""lang-none prettyprint-override""><code># What gets printed if foo is the main program
before import
before functionA
before functionB
before __name__ guard
Function A
Function B 10.0
after __name__ guard
</code></pre>
<pre class=""lang-none prettyprint-override""><code># What gets printed if foo is imported as a regular module
before import
before functionA
before functionB
before __name__ guard
after __name__ guard
</code></pre>
<h2>Why Does It Work This Way?</h2>
<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>
<ul>
<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p>
</li>
<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p>
</li>
<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p>
</li>
</ul>
<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. &quot;Running&quot; the script is a side effect of importing the script's module.</p>
<h2>Food for Thought</h2>
<ul>
<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it's strange to do so, but the language won't stop you.</p>
</li>
<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is foo2.py.
import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters

def functionA():
    print(&quot;a1&quot;)
    from foo2 import functionB
    print(&quot;a2&quot;)
    functionB()
    print(&quot;a3&quot;)

def functionB():
    print(&quot;b&quot;)

print(&quot;t1&quot;)
if __name__ == &quot;__main__&quot;:
    print(&quot;m1&quot;)
    functionA()
    print(&quot;m2&quot;)
print(&quot;t2&quot;)
      
</code></pre>
<ul>
<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is foo3.py.
import os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters

def functionA():
    print(&quot;a1&quot;)
    from foo3 import functionB
    print(&quot;a2&quot;)
    functionB()
    print(&quot;a3&quot;)

def functionB():
    print(&quot;b&quot;)

print(&quot;t1&quot;)
print(&quot;m1&quot;)
functionA()
print(&quot;m2&quot;)
print(&quot;t2&quot;)
</code></pre>
<ul>
<li>What will this do when used as a script?  When imported as a module?</li>
</ul>
<pre class=""lang-py prettyprint-override""><code># Suppose this is in foo4.py
__name__ = &quot;__main__&quot;

def bar():
    print(&quot;bar&quot;)
    
print(&quot;before __name__ guard&quot;)
if __name__ == &quot;__main__&quot;:
    bar()
print(&quot;after __name__ guard&quot;)
</code></pre>
","
Why use def main()?
Understanding the main method of python
What's the point of a main function and/or __name__ == ""__main__"" check in Python?
Purpose of 'if __name__ == ""__main__"":'
I don't understand Python's main block. What is that thing?
What does `if name == ""__main__""` mean in Python?
Why does it do this ? if - __name__ == '__main__'","<p><code>if __name__ == ""__main__"":</code> is basically the top-level script environment, and it specifies the interpreter that ('I have the highest priority to be executed first').</p>

<p><code>'__main__'</code> is the name of the scope in which top-level code executes. A moduleƒ??s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p>

<pre><code>if __name__ == ""__main__"":
    # Execute only if run as a script
    main()
</code></pre>
"
2,3,Does Python have a ternary conditional operator?,"<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>
","Does Python have a ternary conditional operator?<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>
",<python><operators><ternary-operator><conditional-operator>,ternary conditional operator simulate constructs language possible python using formatwhich,"<p>Yes, it was <a href=""https://mail.python.org/pipermail/python-dev/2005-September/056846.html"" rel=""noreferrer"" title=""[Python-Dev] Conditional Expression Resolution"">added</a> in version 2.5. The expression syntax is:</p>
<pre class=""lang-py prettyprint-override""><code>a if condition else b
</code></pre>
<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=""https://en.wikipedia.org/wiki/Boolean_data_type"" rel=""noreferrer"" title=""Boolean data type"">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>
<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>
<p>For example:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; 'true' if True else 'false'
'true'
&gt;&gt;&gt; 'true' if False else 'false'
'false'
</code></pre>
<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; pass if False else x = 3
  File &quot;&lt;stdin&gt;&quot;, line 1
    pass if False else x = 3
          ^
SyntaxError: invalid syntax
</code></pre>
<p>You can, however, use conditional expressions to assign a variable like so:</p>
<pre class=""lang-py prettyprint-override""><code>x = a if True else b
</code></pre>
<p>Think of the conditional expression as switching between two values. It is very useful when you're in a 'one value or another' situation, it but doesn't do much else.</p>
<p>If you need to use statements, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>
<hr />
<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>
<ul>
<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python's &quot;surprising&quot; behaviour use it (they may reverse the argument order).</li>
<li>Some find it &quot;unwieldy&quot;, since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>
<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>
</ul>
<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>
<p>Official documentation:</p>
<ul>
<li><a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"" rel=""noreferrer"" title=""Conditional expressions"">Conditional expressions</a></li>
<li><a href=""https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator"" rel=""noreferrer"" title=""Is there an equivalent of Cƒ??s ƒ??:ƒ? ternary operator?"">Is there an equivalent of Cƒ??s ƒ??:ƒ? ternary operator?</a></li>
</ul>
","
Putting a simple if-then-else statement on one line
How to condense if/else into one line in Python?
Python if-else short-hand
Python-equivalent of short-form ""if"" in C++
Python ? (conditional/ternary) operator for assignments
Conditional operator in Python?","<p>From <a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"" rel=""noreferrer"" title=""Conditional expressions"">the documentation</a>:</p>

<blockquote>
  <p>Conditional expressions (sometimes called a ƒ??ternary operatorƒ?) have the lowest priority of all Python operations.</p>
  
  <p>The expression <code>x if C else y</code> first evaluates the condition, <em>C</em> (<em>not x</em>); if <em>C</em> is true, <em>x</em> is evaluated and its value is returned; otherwise, <em>y</em> is evaluated and its value is returned.</p>
  
  <p>See <a href=""https://www.python.org/dev/peps/pep-0308/"" rel=""noreferrer"" title=""PEP 308 -- Conditional Expressions"">PEP 308</a> for more details about conditional expressions.</p>
</blockquote>

<p>New since version 2.5.</p>
"
3,3,What are metaclasses in Python?,"<p>In Python, what are metaclasses and what do we use them for?</p>
","What are metaclasses in Python?<p>In Python, what are metaclasses and what do we use them for?</p>
",<python><oop><metaclass><python-class><python-datamodel>,metaclasses python use zone forgotten formatwhich formatting formatted formats format,"<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>

<p>While in Python you can use arbitrary callables for metaclasses (like <a href=""https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037"">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>

<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>

<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>

<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>

<p>Here's an aggregated example of the bits and pieces:</p>

<pre><code>def make_hook(f):
    """"""Decorator to turn 'foo' method into '__foo__'""""""
    f.is_hook = 1
    return f

class MyType(type):
    def __new__(mcls, name, bases, attrs):

        if name.startswith('None'):
            return None

        # Go over attributes and see if they should be renamed.
        newattrs = {}
        for attrname, attrvalue in attrs.iteritems():
            if getattr(attrvalue, 'is_hook', 0):
                newattrs['__%s__' % attrname] = attrvalue
            else:
                newattrs[attrname] = attrvalue

        return super(MyType, mcls).__new__(mcls, name, bases, newattrs)

    def __init__(self, name, bases, attrs):
        super(MyType, self).__init__(name, bases, attrs)

        # classregistry.register(self, self.interfaces)
        print ""Would register class %s now."" % self

    def __add__(self, other):
        class AutoClass(self, other):
            pass
        return AutoClass
        # Alternatively, to autogenerate the classname as well as the class:
        # return type(self.__name__ + other.__name__, (self, other), {})

    def unregister(self):
        # classregistry.unregister(self)
        print ""Would unregister class %s now."" % self

class MyObject:
    __metaclass__ = MyType


class NoneSample(MyObject):
    pass

# Will print ""NoneType None""
print type(NoneSample), repr(NoneSample)

class Example(MyObject):
    def __init__(self, value):
        self.value = value
    @make_hook
    def add(self, other):
        return self.__class__(self.value + other.value)

# Will unregister the class
Example.unregister()

inst = Example(10)
# Will fail with an AttributeError
#inst.unregister()

print inst + inst
class Sibling(MyObject):
    pass

ExampleSibling = Example + Sibling
# ExampleSibling is now a subclass of both Example and Sibling (with no
# content of its own) although it will believe it's called 'AutoClass'
print ExampleSibling
print ExampleSibling.__mro__
</code></pre>
","How to run code when a class is subclassed?
Understanding metaclass and inheritance in Python
How are Python metaclasses different from regular class inheritance?
What is the difference between a 'Type' and an 'Object' in Python
Can we overload behavior of class object","<p><em>Note, this answer is for Python 2.x as it was written in 2008, metaclasses are slightly different in 3.x.</em></p>

<p>Metaclasses are the secret sauce that make 'class' work. The default metaclass for a new style object is called 'type'.</p>

<pre class=""lang-none prettyprint-override""><code>class type(object)
  |  type(object) -&gt; the object's type
  |  type(name, bases, dict) -&gt; a new type
</code></pre>

<p>Metaclasses take 3 args. '<strong>name</strong>', '<strong>bases</strong>' and '<strong>dict</strong>'</p>

<p>Here is where the secret starts. Look for where name, bases and the dict come from in this example class definition.</p>

<pre><code>class ThisIsTheName(Bases, Are, Here):
    All_the_code_here
    def doesIs(create, a):
        dict
</code></pre>

<p>Lets define a metaclass that will demonstrate how '<strong>class:</strong>' calls it.</p>

<pre><code>def test_metaclass(name, bases, dict):
    print 'The Class Name is', name
    print 'The Class Bases are', bases
    print 'The dict has', len(dict), 'elems, the keys are', dict.keys()

    return ""yellow""

class TestName(object, None, int, 1):
    __metaclass__ = test_metaclass
    foo = 1
    def baz(self, arr):
        pass

print 'TestName = ', repr(TestName)

# output =&gt; 
The Class Name is TestName
The Class Bases are (&lt;type 'object'&gt;, None, &lt;type 'int'&gt;, 1)
The dict has 4 elems, the keys are ['baz', '__module__', 'foo', '__metaclass__']
TestName =  'yellow'
</code></pre>

<p>And now, an example that actually means something, this will automatically make the variables in the list ""attributes"" set on the class, and set to None.</p>

<pre><code>def init_attributes(name, bases, dict):
    if 'attributes' in dict:
        for attr in dict['attributes']:
            dict[attr] = None

    return type(name, bases, dict)

class Initialised(object):
    __metaclass__ = init_attributes
    attributes = ['foo', 'bar', 'baz']

print 'foo =&gt;', Initialised.foo
# output=&gt;
foo =&gt; None
</code></pre>

<p><strong>Note that the magic behaviour that <code>Initialised</code> gains by having the metaclass <code>init_attributes</code> is not passed onto a subclass of <code>Initialised</code>.</strong></p>

<p>Here is an even more concrete example, showing how you can subclass 'type' to make a metaclass that performs an action when the class is created. This is quite tricky:</p>

<pre><code>class MetaSingleton(type):
    instance = None
    def __call__(cls, *args, **kw):
        if cls.instance is None:
            cls.instance = super(MetaSingleton, cls).__call__(*args, **kw)
        return cls.instance

class Foo(object):
    __metaclass__ = MetaSingleton

a = Foo()
b = Foo()
assert a is b
</code></pre>
"
4,0,How do I merge two dictionaries in a single expression (take union of dictionaries)?,"<p>I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged (i.e. taking the union).  The <code>update()</code> method would be what I need, if it returned its result instead of modifying a dictionary in-place.</p>
<pre><code>&gt;&gt;&gt; x = {'a': 1, 'b': 2}
&gt;&gt;&gt; y = {'b': 10, 'c': 11}
&gt;&gt;&gt; z = x.update(y)
&gt;&gt;&gt; print(z)
None
&gt;&gt;&gt; x
{'a': 1, 'b': 10, 'c': 11}
</code></pre>
<p>How can I get that final merged dictionary in <code>z</code>, not <code>x</code>?</p>
<p>(To be extra-clear, the last-one-wins conflict-handling of <code>dict.update()</code> is what I'm looking for as well.)</p>
","How do I merge two dictionaries in a single expression (take union of dictionaries)?<p>I have two Python dictionaries, and I want to write a single expression that returns these two dictionaries, merged (i.e. taking the union).  The <code>update()</code> method would be what I need, if it returned its result instead of modifying a dictionary in-place.</p>
<pre><code>&gt;&gt;&gt; x = {'a': 1, 'b': 2}
&gt;&gt;&gt; y = {'b': 10, 'c': 11}
&gt;&gt;&gt; z = x.update(y)
&gt;&gt;&gt; print(z)
None
&gt;&gt;&gt; x
{'a': 1, 'b': 10, 'c': 11}
</code></pre>
<p>How can I get that final merged dictionary in <code>z</code>, not <code>x</code>?</p>
<p>(To be extra-clear, the last-one-wins conflict-handling of <code>dict.update()</code> is what I'm looking for as well.)</p>
",<python><dictionary><merge>,dictionaries merged union expression update single dictionary wins conflict final,"<blockquote>
<h2 id=""how-can-i-merge-two-python-dictionaries-in-a-single-expression-uwzk"">How can I merge two Python dictionaries in a single expression?</h2>
</blockquote>
<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly-merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>
<ul>
<li><p>In Python 3.9.0 or greater (released 17 October 2020): <a href=""https://www.python.org/dev/peps/pep-0584/"" rel=""noreferrer"">PEP-584</a>, <a href=""https://bugs.python.org/issue36144"" rel=""noreferrer"">discussed here</a>, was implemented and provides the simplest method:</p>
<pre class=""lang-py prettyprint-override""><code>z = x | y          # NOTE: 3.9+ ONLY
</code></pre>
</li>
<li><p>In Python 3.5 or greater:</p>
<pre class=""lang-py prettyprint-override""><code>z = {**x, **y}
</code></pre>
</li>
<li><p>In Python 2, (or 3.4 or lower) write a function:</p>
<pre class=""lang-py prettyprint-override""><code>def merge_two_dicts(x, y):
    z = x.copy()   # start with keys and values of x
    z.update(y)    # modifies z with keys and values of y
    return z
</code></pre>
<p>and now:</p>
<pre class=""lang-py prettyprint-override""><code>z = merge_two_dicts(x, y)
</code></pre>
</li>
</ul>
<h3 id=""explanation-9ysq"">Explanation</h3>
<p>Say you have two dictionaries and you want to merge them into a new dictionary without altering the original dictionaries:</p>
<pre class=""lang-py prettyprint-override""><code>x = {'a': 1, 'b': 2}
y = {'b': 3, 'c': 4}
</code></pre>
<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dictionary's values overwriting those from the first.</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; z
{'a': 1, 'b': 3, 'c': 4}
</code></pre>
<p>A new syntax for this, proposed in <a href=""https://www.python.org/dev/peps/pep-0448"" rel=""noreferrer"">PEP 448</a> and <a href=""https://mail.python.org/pipermail/python-dev/2015-February/138564.html"" rel=""noreferrer"">available as of Python 3.5</a>, is</p>
<pre class=""lang-py prettyprint-override""><code>z = {**x, **y}
</code></pre>
<p>And it is indeed a single expression.</p>
<p>Note that we can merge in with literal notation as well:</p>
<pre class=""lang-py prettyprint-override""><code>z = {**x, 'foo': 1, 'bar': 2, **y}
</code></pre>
<p>and now:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; z
{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}
</code></pre>
<p>It is now showing as implemented in the <a href=""https://www.python.org/dev/peps/pep-0478/#features-for-3-5"" rel=""noreferrer"">release schedule for 3.5, PEP 478</a>, and it has now made its way into the <a href=""https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations"" rel=""noreferrer"">What's New in Python 3.5</a> document.</p>
<p>However, since many organizations are still on Python 2, you may wish to do this in a backward-compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>
<pre class=""lang-py prettyprint-override""><code>z = x.copy()
z.update(y) # which returns None since it mutates z
</code></pre>
<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>b</code> will point to <code>3</code> in our final result.</p>
<h2 id=""not-yet-on-python-3.5-but-want-a-single-expression-zmt4"">Not yet on Python 3.5, but want a <em>single expression</em></h2>
<p>If you are not yet on Python 3.5 or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while the correct approach is to put it in a function:</p>
<pre class=""lang-py prettyprint-override""><code>def merge_two_dicts(x, y):
    &quot;&quot;&quot;Given two dictionaries, merge them into a new dict as a shallow copy.&quot;&quot;&quot;
    z = x.copy()
    z.update(y)
    return z
</code></pre>
<p>and then you have a single expression:</p>
<pre class=""lang-py prettyprint-override""><code>z = merge_two_dicts(x, y)
</code></pre>
<p>You can also make a function to merge an arbitrary number of dictionaries, from zero to a very large number:</p>
<pre class=""lang-py prettyprint-override""><code>def merge_dicts(*dict_args):
    &quot;&quot;&quot;
    Given any number of dictionaries, shallow copy and merge into a new dict,
    precedence goes to key-value pairs in latter dictionaries.
    &quot;&quot;&quot;
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result
</code></pre>
<p>This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries <code>a</code> to <code>g</code>:</p>
<pre class=""lang-py prettyprint-override""><code>z = merge_dicts(a, b, c, d, e, f, g) 
</code></pre>
<p>and key-value pairs in <code>g</code> will take precedence over dictionaries <code>a</code> to <code>f</code>, and so on.</p>
<h2 id=""critiques-of-other-answers-fxgc"">Critiques of Other Answers</h2>
<p>Don't use what you see in the formerly accepted answer:</p>
<pre class=""lang-py prettyprint-override""><code>z = dict(x.items() + y.items())
</code></pre>
<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists -</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; c = dict(a.items() + b.items())
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'
</code></pre>
<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>
<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; c = dict(a.items() | b.items())
</code></pre>
<p>This example demonstrates what happens when values are unhashable:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; x = {'a': []}
&gt;&gt;&gt; y = {'b': []}
&gt;&gt;&gt; dict(x.items() | y.items())
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre>
<p>Here's an example where <code>y</code> should have precedence, but instead the value from <code>x</code> is retained due to the arbitrary order of sets:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; x = {'a': 2}
&gt;&gt;&gt; y = {'a': 1}
&gt;&gt;&gt; dict(x.items() | y.items())
{'a': 2}
</code></pre>
<p>Another hack you should not use:</p>
<pre class=""lang-py prettyprint-override""><code>z = dict(x, **y)
</code></pre>
<p>This uses the <code>dict</code> constructor and is very fast and memory-efficient (even slightly more so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.</p>
<p>Here's an example of the usage being <a href=""https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff"" rel=""noreferrer"">remediated in django</a>.</p>
<p>Dictionaries are intended to take hashable keys (e.g. <code>frozenset</code>s or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; c = dict(a, **b)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: keyword arguments must be strings
</code></pre>
<p>From the <a href=""https://mail.python.org/pipermail/python-dev/2010-April/099459.html"" rel=""noreferrer"">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>
<blockquote>
<p>I am fine with
declaring dict({}, **{1:3}) illegal, since after all it is abuse of
the ** mechanism.</p>
</blockquote>
<p>and</p>
<blockquote>
<p>Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call
x.update(y) and return x&quot;. Personally, I find it more despicable than
cool.</p>
</blockquote>
<p>It is my understanding (as well as the understanding of the <a href=""https://mail.python.org/pipermail/python-dev/2010-April/099485.html"" rel=""noreferrer"">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dictionaries for readability purposes, e.g.:</p>
<pre class=""lang-py prettyprint-override""><code>dict(a=1, b=10, c=11)
</code></pre>
<p>instead of</p>
<pre class=""lang-py prettyprint-override""><code>{'a': 1, 'b': 10, 'c': 11}
</code></pre>
<h2 id=""response-to-comments-zkqe"">Response to comments</h2>
<blockquote>
<p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-coming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact, ** was designed precisely to pass dictionaries as keywords.</p>
</blockquote>
<p>Again, it doesn't work for 3 when keys are not strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>
<pre><code>&gt;&gt;&gt; foo(**{('a', 'b'): None})
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: foo() keywords must be strings
&gt;&gt;&gt; dict(**{('a', 'b'): None})
{('a', 'b'): None}
</code></pre>
<p>This inconsistency was bad given other implementations of Python (PyPy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>
<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>
<p>More comments:</p>
<blockquote>
<p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts.</p>
</blockquote>
<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>
<blockquote>
<p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word &quot;merging&quot; these answers describe &quot;updating one dict with another&quot;, and not merging.</p>
</blockquote>
<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <em><strong>two</strong></em> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>
<p>Assuming two dictionaries of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>
<pre class=""lang-py prettyprint-override""><code>from copy import deepcopy

def dict_of_dicts_merge(x, y):
    z = {}
    overlapping_keys = x.keys() &amp; y.keys()
    for key in overlapping_keys:
        z[key] = dict_of_dicts_merge(x[key], y[key])
    for key in x.keys() - overlapping_keys:
        z[key] = deepcopy(x[key])
    for key in y.keys() - overlapping_keys:
        z[key] = deepcopy(y[key])
    return z
</code></pre>
<p>Usage:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; x = {'a':{1:{}}, 'b': {2:{}}}
&gt;&gt;&gt; y = {'b':{10:{}}, 'c': {11:{}}}
&gt;&gt;&gt; dict_of_dicts_merge(x, y)
{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}
</code></pre>
<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href=""https://stackoverflow.com/a/24088493/541136"">my answer to the canonical question on a &quot;Dictionaries of dictionaries merge&quot;</a>.</p>
<h2 id=""less-performant-but-correct-ad-hocs-zrgm"">Less Performant But Correct Ad-hocs</h2>
<p>These approaches are less performant, but they will provide correct behavior.
They will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dictionaries have precedence)</p>
<p>You can also chain the dictionaries manually inside a <a href=""https://www.python.org/dev/peps/pep-0274/"" rel=""noreferrer"">dict comprehension</a>:</p>
<pre class=""lang-py prettyprint-override""><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7
</code></pre>
<p>or in Python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>
<pre class=""lang-py prettyprint-override""><code>dict((k, v) for d in dicts for k, v in d.items()) # iteritems in Python 2
</code></pre>
<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>
<pre class=""lang-py prettyprint-override""><code>from itertools import chain
z = dict(chain(x.items(), y.items())) # iteritems in Python 2
</code></pre>
<h2 id=""performance-analysis-c4us"">Performance Analysis</h2>
<p>I'm only going to do the performance analysis of the usages known to behave correctly. (Self-contained so you can copy and paste yourself.)</p>
<pre class=""lang-py prettyprint-override""><code>from timeit import repeat
from itertools import chain

x = dict.fromkeys('abcdefg')
y = dict.fromkeys('efghijk')

def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z

min(repeat(lambda: {**x, **y}))
min(repeat(lambda: merge_two_dicts(x, y)))
min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))
min(repeat(lambda: dict(chain(x.items(), y.items()))))
min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))
</code></pre>
<p>In Python 3.8.1, NixOS:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; min(repeat(lambda: {**x, **y}))
1.0804965235292912
&gt;&gt;&gt; min(repeat(lambda: merge_two_dicts(x, y)))
1.636518670246005
&gt;&gt;&gt; min(repeat(lambda: {k: v for d in (x, y) for k, v in d.items()}))
3.1779992282390594
&gt;&gt;&gt; min(repeat(lambda: dict(chain(x.items(), y.items()))))
2.740647904574871
&gt;&gt;&gt; min(repeat(lambda: dict(item for d in (x, y) for item in d.items())))
4.266070580109954
</code></pre>
<pre class=""lang-sh prettyprint-override""><code>$ uname -a
Linux nixos 4.19.113 #1-NixOS SMP Wed Mar 25 07:06:15 UTC 2020 x86_64 GNU/Linux
</code></pre>
<h2 id=""resources-on-dictionaries-e74r"">Resources on Dictionaries</h2>
<ul>
<li><a href=""https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302"">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>
<li><a href=""https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535"">Answer on how to add new keys to a dictionary</a></li>
<li><a href=""https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067"">Mapping two lists into a dictionary</a></li>
<li><a href=""https://docs.python.org/3/tutorial/datastructures.html#dictionaries"" rel=""noreferrer"">The official Python docs on dictionaries</a></li>
<li><a href=""https://www.youtube.com/watch?v=66P5FMkWoVU"" rel=""noreferrer"">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>
<li><a href=""https://www.youtube.com/watch?v=npw4s1QTmPg"" rel=""noreferrer"">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>
</ul>
","Merging of two dictionaries
How do I get union keys of `a` and `b` dictionary and 'a' values?
Combine two dictionaries with preference to one of them 
How to merge multiple json objects into a single json object using python                                               Union of dict objects in Python 2","<pre><code>x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())
print z
</code></pre>

<p>For items with keys in both dictionaries ('b'), you can control which one ends up in the output by putting that one last.</p>
"
5,5,How to execute a program or call a system command?,"<p>How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?</p>
","How to execute a program or call a system command?<p>How do you call an external command (as if I'd typed it at the Unix shell or Windows command prompt) from within a Python script?</p>
",<python><shell><terminal><subprocess><command>,command prompt typed external shell unix execute windows program script,"<p>Use the <a href=""https://docs.python.org/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> module in the standard library:</p>
<pre class=""lang-py prettyprint-override""><code>import subprocess
subprocess.run([&quot;ls&quot;, &quot;-l&quot;])
</code></pre>
<p>The advantage of <a href=""https://docs.python.org/library/subprocess.html#subprocess.run"" rel=""noreferrer""><code>subprocess.run</code></a> over <a href=""https://docs.python.org/library/os.html#os.system"" rel=""noreferrer""><code>os.system</code></a> is that it is more flexible (you can get the <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stdout"" rel=""noreferrer""><code>stdout</code></a>, <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.stderr"" rel=""noreferrer""><code>stderr</code></a>, the <a href=""https://docs.python.org/library/subprocess.html#subprocess.CompletedProcess.returncode"" rel=""noreferrer"">&quot;real&quot; status code</a>, better <a href=""https://docs.python.org/library/subprocess.html#subprocess.CalledProcessError"" rel=""noreferrer"">error handling</a>, etc...).</p>
<p>Even <a href=""https://docs.python.org/library/os.html#os.system"" rel=""noreferrer"">the documentation for <code>os.system</code></a> recommends using <code>subprocess</code> instead:</p>
<blockquote>
<p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the <a href=""https://docs.python.org/library/subprocess.html#subprocess-replacements"" rel=""noreferrer"">Replacing Older Functions with the subprocess Module</a> section in the <a href=""https://docs.python.org/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> documentation for some helpful recipes.</p>
</blockquote>
<p>On Python 3.4 and earlier, use <code>subprocess.call</code> instead of <code>.run</code>:</p>
<pre class=""lang-py prettyprint-override""><code>subprocess.call([&quot;ls&quot;, &quot;-l&quot;])
</code></pre>
","Executing command line programs from within python
How to run another Python program without holding up original
Run Rsync from Python
Execute terminal commands in python3
How to run commands on shell through python
Execute shell command and retrieve stdout in Python","<p>I'd recommend using the <a href=""http://docs.python.org/library/subprocess.html"" rel=""noreferrer"">subprocess</a> module instead of os.system because it does shell escaping for you and is therefore much safer.</p>

<pre><code>subprocess.call(['ping', 'localhost'])
</code></pre>
"
6,6,How can I safely create a nested directory?,"<p>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</p>
<pre><code>import os

file_path = &quot;/my/directory/filename.txt&quot;
directory = os.path.dirname(file_path)

try:
    os.stat(directory)
except:
    os.mkdir(directory)

f = file(filename)
</code></pre>
<p>Somehow, I missed <code>os.path.exists</code> (thanks kanja, Blair, and Douglas). This is what I have now:</p>
<pre><code>def ensure_dir(file_path):
    directory = os.path.dirname(file_path)
    if not os.path.exists(directory):
        os.makedirs(directory)
</code></pre>
<p>Is there a flag for <code>open()</code>, that makes this happen automatically?</p>
","How can I safely create a nested directory?<p>What is the most elegant way to check if the directory a file is going to be written to exists, and if not, create the directory using Python? Here is what I tried:</p>
<pre><code>import os

file_path = &quot;/my/directory/filename.txt&quot;
directory = os.path.dirname(file_path)

try:
    os.stat(directory)
except:
    os.mkdir(directory)

f = file(filename)
</code></pre>
<p>Somehow, I missed <code>os.path.exists</code> (thanks kanja, Blair, and Douglas). This is what I have now:</p>
<pre><code>def ensure_dir(file_path):
    directory = os.path.dirname(file_path)
    if not os.path.exists(directory):
        os.makedirs(directory)
</code></pre>
<p>Is there a flag for <code>open()</code>, that makes this happen automatically?</p>
",<python><exception><path><directory><operating-system>,directory exists create safely blair kanja douglas happen nested missed,"<p>On Python ƒ? 3.5, use <a href=""https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir"" rel=""noreferrer""><code>pathlib.Path.mkdir</code></a>:</p>

<pre><code>from pathlib import Path
Path(""/my/directory"").mkdir(parents=True, exist_ok=True)
</code></pre>

<p>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>

<p>Try <a href=""https://docs.python.org/library/os.path.html#os.path.exists"" rel=""noreferrer""><code>os.path.exists</code></a>, and consider <a href=""https://docs.python.org/library/os.html#os.makedirs"" rel=""noreferrer""><code>os.makedirs</code></a> for the creation.</p>

<pre><code>import os
if not os.path.exists(directory):
    os.makedirs(directory)
</code></pre>

<p>As noted in comments and elsewhere, there's a race condition &ndash; if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>

<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href=""https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror"">Is there a cross-platform way of getting information from Pythonƒ??s OSError</a>):</p>

<pre><code>import os, errno

try:
    os.makedirs(directory)
except OSError as e:
    if e.errno != errno.EEXIST:
        raise
</code></pre>

<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one &ndash; we could still be fooled. </p>

<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>

<p>Modern versions of Python improve this code quite a bit, both by exposing <a href=""https://docs.python.org/3.3/library/exceptions.html?#FileExistsError"" rel=""noreferrer""><code>FileExistsError</code></a> (in 3.3+)...</p>

<pre><code>try:
    os.makedirs(""path/to/directory"")
except FileExistsError:
    # directory already exists
    pass
</code></pre>

<p>...and by allowing <a href=""https://docs.python.org/3.2/library/os.html#os.makedirs"" rel=""noreferrer"">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>

<pre><code>os.makedirs(""path/to/directory"", exist_ok=True)  # succeeds even if directory exists.
</code></pre>
","mkdir -p functionality in Python
How can I create directories recursively?
How to create new folder?
Python check if a directory exists, then create it if necessary and save graph to new directory?
Creating a new Folder with given path
Creation and validation of directory using try/except or if else?","<p>Check <a href=""https://docs.python.org/3/library/os.html#os.makedirs"" rel=""noreferrer""><code>os.makedirs</code></a>:  (It makes sure the complete path exists.)<br>
 To handle the fact the directory might exist, catch <code>OSError</code>.
(If <code>exist_ok</code> is <code>False</code> (the default), an <code>OSError</code> is raised if the target directory already exists.)</p>

<pre><code>import os
try:
    os.makedirs('./path/to/somewhere')
except OSError:
    pass
</code></pre>
"
7,3,Accessing the index in 'for' loops?,"<p>How do I access the index in a <code>for</code> loop like the following?</p>

<pre><code>ints = [8, 23, 45, 12, 78]
for i in ints:
    print('item #{} = {}'.format(???, i))
</code></pre>

<p>I want to get this output:</p>

<pre class=""lang-none prettyprint-override""><code>item #1 = 8
item #2 = 23
item #3 = 45
item #4 = 12
item #5 = 78
</code></pre>

<p>When I loop through it using a <code>for</code> loop, how do I access the loop index, from 1 to 5 in this case?</p>
","Accessing the index in 'for' loops?<p>How do I access the index in a <code>for</code> loop like the following?</p>

<pre><code>ints = [8, 23, 45, 12, 78]
for i in ints:
    print('item #{} = {}'.format(???, i))
</code></pre>

<p>I want to get this output:</p>

<pre class=""lang-none prettyprint-override""><code>item #1 = 8
item #2 = 23
item #3 = 45
item #4 = 12
item #5 = 78
</code></pre>

<p>When I loop through it using a <code>for</code> loop, how do I access the loop index, from 1 to 5 in this case?</p>
",<python><loops><list>,loop index access accessing loops case output following using want,"<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>

<p>The better option is to use the built-in function <a href=""https://docs.python.org/3/library/functions.html#enumerate"" rel=""noreferrer"" title=""enumerate""><code>enumerate()</code></a>, available in both Python 2 and 3:</p>

<pre><code>for idx, val in enumerate(ints):
    print(idx, val)
</code></pre>

<p>Check out <a href=""https://www.python.org/dev/peps/pep-0279/"" rel=""noreferrer"" title=""PEP 279"">PEP 279</a> for more.</p>
","Loop through list with both content and index
Python loop counter in a for loop
Python For loop get index
How to get list index and element simultaneously in Python?
How to output an index while iterating over an array in python
How to get the index of the current iterator item in a loop?
How do I display the index of a list element in Python?","<p>fastest safest way to do it is:
it will create if not exists and skip if exists:</p>
<pre class=""lang-py prettyprint-override""><code>from pathlib import Path
Path(&quot;path/with/childs/.../&quot;).mkdir(parents=True, exist_ok=True)
</code></pre>
"
8,4,How to make a flat list out of a list of lists,"<p>Is there a shortcut to make a simple list out of a list of lists in Python?</p>
<p>I can do it in a <code>for</code> loop, but is there some cool &quot;one-liner&quot;?</p>
<p>I tried it with <code>functools.reduce()</code>:</p>
<pre><code>from functools import reduce
l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]
reduce(lambda x, y: x.extend(y), l)
</code></pre>
<p>But I get this error:</p>
<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;lambda&gt;
AttributeError: 'NoneType' object has no attribute 'extend'
</code></pre>
","How to make a flat list out of a list of lists<p>Is there a shortcut to make a simple list out of a list of lists in Python?</p>
<p>I can do it in a <code>for</code> loop, but is there some cool &quot;one-liner&quot;?</p>
<p>I tried it with <code>functools.reduce()</code>:</p>
<pre><code>from functools import reduce
l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]
reduce(lambda x, y: x.extend(y), l)
</code></pre>
<p>But I get this error:</p>
<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;lambda&gt;
AttributeError: 'NoneType' object has no attribute 'extend'
</code></pre>
",<python><list><multidimensional-array><flatten>,list make cool flat liner reduce shortcut functools loop,"<p>Given a list of lists <code>t</code>,</p>
<pre class=""lang-py prettyprint-override""><code>flat_list = [item for sublist in t for item in sublist]
</code></pre>
<p>which means:</p>
<pre><code>flat_list = []
for sublist in t:
    for item in sublist:
        flat_list.append(item)
</code></pre>
<p>is faster than the shortcuts posted so far. (<code>t</code> is the list to flatten.)</p>
<p>Here is the corresponding function:</p>
<pre><code>def flatten(t):
    return [item for sublist in t for item in sublist]
</code></pre>
<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>
<pre><code>$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in t for item in sublist]'
10000 loops, best of 3: 143 usec per loop
$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(t, [])'
1000 loops, best of 3: 969 usec per loop
$ python -mtimeit -s't=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,t)'
1000 loops, best of 3: 1.1 msec per loop
</code></pre>
<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(T**2)</code> when there are T sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have T sublists of k items each: the first k items are copied back and forth T-1 times, the second k items T-2 times, and so on; total number of copies is k times the sum of x for x from 1 to T excluded, i.e., <code>k * (T**2)/2</code>.</p>
<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>
","Flattening a shallow list in Python
join list of lists in python
How to merge multiple lists into one list in python?
Concatenation of many lists in Python
How to unnest a nested list
Python list comprehension to join list of lists
How do I flatten a list of lists/nested lists?
in Python, How to join a list of tuples into one list?","<p><strong>Note from the author</strong>: This is inefficient. But fun, because <a href=""https://en.wikipedia.org/wiki/Monoid#Monoids_in_computer_science"" rel=""noreferrer"">monoids</a> are awesome. It's not appropriate for production Python code.</p>
<pre><code>&gt;&gt;&gt; l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]
&gt;&gt;&gt; sum(l, [])
[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
<p>This just sums the elements of iterable passed in the first argument, treating second argument as the initial value of the sum (if not given, <code>0</code> is used instead and this case will give you an error).</p>
<p>Because you are summing nested lists, you actually get <code>[1,3]+[2,4]</code> as a result of <code>sum([[1,3],[2,4]],[])</code>, which is equal to <code>[1,3,2,4]</code>.</p>
<p>Note that only works on lists of lists. For lists of lists of lists, you'll need another solution.</p>
"
9,5,Difference between staticmethod and classmethod,"<p>What is the difference between a function decorated with <a href=""http://docs.python.org/library/functions.html#staticmethod"" rel=""noreferrer""><code>@staticmethod</code></a> and one decorated with <a href=""http://docs.python.org/library/functions.html#classmethod"" rel=""noreferrer""><code>@classmethod</code></a>?</p>
","Difference between staticmethod and classmethod<p>What is the difference between a function decorated with <a href=""http://docs.python.org/library/functions.html#staticmethod"" rel=""noreferrer""><code>@staticmethod</code></a> and one decorated with <a href=""http://docs.python.org/library/functions.html#classmethod"" rel=""noreferrer""><code>@classmethod</code></a>?</p>
",<python><oop><methods><python-decorators>,decorated staticmethod difference classmethod function form forth,"<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>
<pre><code>class A(object):
    def foo(self, x):
        print(f&quot;executing foo({self}, {x})&quot;)

    @classmethod
    def class_foo(cls, x):
        print(f&quot;executing class_foo({cls}, {x})&quot;)

    @staticmethod
    def static_foo(x):
        print(f&quot;executing static_foo({x})&quot;)

a = A()
</code></pre>
<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>
<pre><code>a.foo(1)
# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;, 1)
</code></pre>
<hr />
<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>
<pre><code>a.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;, 1)
</code></pre>
<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be
a classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>
<pre><code>A.class_foo(1)
# executing class_foo(&lt;class '__main__.A'&gt;, 1)
</code></pre>
<p>One use people have found for class methods is to create <a href=""https://stackoverflow.com/a/1950927/190597"">inheritable alternative constructors</a>.</p>
<hr />
<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor  <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>
<pre><code>a.static_foo(1)
# executing static_foo(1)

A.static_foo('hi')
# executing static_foo(hi)
</code></pre>
<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>
<hr />
<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,
you get a &quot;partially applied&quot; version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>
<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term &quot;bound&quot; below:</p>
<pre><code>print(a.foo)
# &lt;bound method A.foo of &lt;__main__.A object at 0xb7d52f0c&gt;&gt;
</code></pre>
<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>
<pre><code>print(a.class_foo)
# &lt;bound method type.class_foo of &lt;class '__main__.A'&gt;&gt;
</code></pre>
<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns
a good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and
<code>a.static_foo</code> expects 1 argument too.</p>
<pre><code>print(a.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</code></pre>
<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>
<pre><code>print(A.static_foo)
# &lt;function static_foo at 0xb7d479cc&gt;
</code></pre>
","Meaning of @classmethod and @staticmethod for beginner?
Why use classmethod instead of staticmethod?
Python Static methods, why?
Python : Difference between static methods vs class method
in python,what is the difference below, and which is better
Python how to get reference to class in static method","<p>Basically <code>@classmethod</code> makes a method whose first argument is the class it's called from (rather than the class instance), <code>@staticmethod</code> does not have any implicit arguments.</p>
"
10,3,Understanding slice notation,"<p>I need a good explanation (references are a plus) on Python's slice notation. </p>

<p>To me, this notation needs a bit of picking up. </p>

<p>It looks extremely powerful, but I haven't quite got my head around it.</p>
","Understanding slice notation<p>I need a good explanation (references are a plus) on Python's slice notation. </p>

<p>To me, this notation needs a bit of picking up. </p>

<p>It looks extremely powerful, but I haven't quite got my head around it.</p>
",<python><list><slice><iterable>,slice notation references picking powerful plus extremely understanding head,"<p>It's pretty simple really:</p>

<pre><code>a[start:stop]  # items start through stop-1
a[start:]      # items start through the rest of the array
a[:stop]       # items from the beginning through stop-1
a[:]           # a copy of the whole array
</code></pre>

<p>There is also the <code>step</code> value, which can be used with any of the above:</p>

<pre><code>a[start:stop:step] # start through not past stop, by step
</code></pre>

<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>

<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>

<pre><code>a[-1]    # last item in the array
a[-2:]   # last two items in the array
a[:-2]   # everything except the last two items
</code></pre>

<p>Similarly, <code>step</code> may be a negative number:</p>

<pre><code>a[::-1]    # all items in the array, reversed
a[1::-1]   # the first two items, reversed
a[:-3:-1]  # the last two items, reversed
a[-3::-1]  # everything except the last two items, reversed
</code></pre>

<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>

<h3>Relation to <code>slice()</code> object</h3>

<p>The slicing operator <code>[]</code> is actually being used in the above code with a <code>slice()</code> object using the <code>:</code> notation (which is only valid within <code>[]</code>), i.e.:</p>

<pre><code>a[start:stop:step]
</code></pre>

<p>is equivalent to:</p>

<pre><code>a[slice(start, stop, step)]
</code></pre>

<p>Slice objects also behave slightly differently depending on the number of arguments, similarly to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.
To skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>

<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>
","
Why does Python start at index -1 (as opposed to 0) when indexing a list from the end?
Colon (:) in Python list index
Negative list index?
How to get everything from the list except the first element using list slicing
What is the meaning of ""int(a[::-1])"" in Python?
What does [:-1] mean/do in python?","<p>The <a href=""http://docs.python.org/tutorial/introduction.html#strings"" rel=""noreferrer"">Python tutorial</a> talks about it (scroll down a bit until you get to the part about slicing).</p>

<p>The ASCII art diagram is helpful too for remembering how slices work:</p>

<pre><code> +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
</code></pre>

<blockquote>
  <p>One way to remember how slices work is to think of the indices as pointing <em>between</em> characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of <em>n</em> characters has index <em>n</em>.</p>
</blockquote>
"
11,4,Finding the index of an item in a list,"<p>Given a list <code>[""foo"", ""bar"", ""baz""]</code> and an item in the list <code>""bar""</code>, how do I get its index (<code>1</code>) in Python?</p>
","Finding the index of an item in a list<p>Given a list <code>[""foo"", ""bar"", ""baz""]</code> and an item in the list <code>""bar""</code>, how do I get its index (<code>1</code>) in Python?</p>
",<python><list><indexing>,bar index item baz list finding foo python font,"<pre><code>&gt;&gt;&gt; [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;].index(&quot;bar&quot;)
1
</code></pre>
<p>Reference: <a href=""https://docs.python.org/tutorial/datastructures.html#more-on-lists"" rel=""noreferrer"">Data Structures &gt; More on Lists</a></p>
<h1>Caveats follow</h1>
<p>Note that while this is perhaps the cleanest way to answer the question <em>as asked</em>, <code>index</code> is a rather weak component of the <code>list</code> API, and I can't remember the last time I used it in anger. It's been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about <code>list.index</code> follow. It is probably worth initially taking a look at the documentation for it:</p>
<blockquote>
<pre><code>list.index(x[, start[, end]])
</code></pre>
<p>Return zero-based index in the list of the first item whose value is equal to <em>x</em>. Raises a <a href=""https://docs.python.org/library/exceptions.html#ValueError"" rel=""noreferrer""><code>ValueError</code></a> if there is no such item.</p>
<p>The optional arguments <em>start</em> and <em>end</em> are interpreted as in the <a href=""https://docs.python.org/tutorial/introduction.html#lists"" rel=""noreferrer"">slice notation</a> and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.</p>
</blockquote>
<h2>Linear time-complexity in list length</h2>
<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If your list is long, and you don't know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give <code>index</code> a hint. For instance, in this snippet, <code>l.index(999_999, 999_990, 1_000_000)</code> is roughly five orders of magnitude faster than straight <code>l.index(999_999)</code>, because the former only has to search 10 entries, while the latter searches a million:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)
9.356267921015387
&gt;&gt;&gt; timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)
0.0004404920036904514
 
</code></pre>
<h2>Only returns the index of the <em>first match</em> to its argument</h2>
<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If you expect to need indices of more matches, you should use a list comprehension, or generator expression.</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(1)
0
&gt;&gt;&gt; [i for i, e in enumerate([1, 2, 1]) if e == 1]
[0, 2]
&gt;&gt;&gt; g = (i for i, e in enumerate([1, 2, 1]) if e == 1)
&gt;&gt;&gt; next(g)
0
&gt;&gt;&gt; next(g)
2
</code></pre>
<p>Most places where I once would have used <code>index</code>, I now use a list comprehension or generator expression because they're more generalizable. So if you're considering reaching for <code>index</code>, take a look at these excellent Python features.</p>
<h2>Throws if element not present in list</h2>
<p>A call to <code>index</code> results in a <a href=""https://docs.python.org/library/exceptions.html#ValueError"" rel=""noreferrer""><code>ValueError</code></a> if the item's not present.</p>
<pre><code>&gt;&gt;&gt; [1, 1].index(2)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: 2 is not in list
</code></pre>
<p>If the item might not be present in the list, you should either</p>
<ol>
<li>Check for it first with <code>item in my_list</code> (clean, readable approach), or</li>
<li>Wrap the <code>index</code> call in a <code>try/except</code> block which catches <code>ValueError</code> (probably faster, at least when the list to search is long, and the item is usually present.)</li>
</ol>
","Python: finding an element in a list
How do I use within / in operator in a Pandas DataFrame?
Find an Exact Tuple Match in a List of Tuples and Return Its Index
How to remove index list from another list in python?
Knowing an item's location in an array
Finding the position of words in a string","<p>One thing that is really helpful in learning Python is to use the interactive help function:</p>

<pre><code>&gt;&gt;&gt; help([""foo"", ""bar"", ""baz""])
Help on list object:

class list(object)
 ...

 |
 |  index(...)
 |      L.index(value, [start, [stop]]) -&gt; integer -- return first index of value
 |
</code></pre>

<p>which will often lead you to the method you are looking for.</p>
"
12,0,Iterating over dictionaries using 'for' loops,"<p>I am a bit puzzled by the following code:</p>
<pre><code>d = {'x': 1, 'y': 2, 'z': 3} 
for key in d:
    print (key, 'corresponds to', d[key])
</code></pre>
<p>What I don't understand is the <code>key</code> portion. How does Python recognize that it needs only to read the key from the dictionary? Is <code>key</code> a special word in Python? Or is it simply a variable?</p>
","Iterating over dictionaries using 'for' loops<p>I am a bit puzzled by the following code:</p>
<pre><code>d = {'x': 1, 'y': 2, 'z': 3} 
for key in d:
    print (key, 'corresponds to', d[key])
</code></pre>
<p>What I don't understand is the <code>key</code> portion. How does Python recognize that it needs only to read the key from the dictionary? Is <code>key</code> a special word in Python? Or is it simply a variable?</p>
",<python><dictionary>,key portion puzzled loops recognize special iterating bit word simply,"<p><code>key</code> is just a variable name.  </p>

<pre><code>for key in d:
</code></pre>

<p>will simply loop over the keys in the dictionary, rather than the keys and values.  To loop over both key and value you can use the following:</p>

<p>For Python 3.x:</p>

<pre><code>for key, value in d.items():
</code></pre>

<p>For Python 2.x:</p>

<pre><code>for key, value in d.iteritems():
</code></pre>

<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>

<p>In Python 3.x, <code>iteritems()</code> was replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. 
This is also available in 2.7 as <code>viewitems()</code>. </p>

<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>
","Join dictionary item, keys
How to unpack key,value pairs in python?
Use more than 1 iterable in a python for loop
Parsing nested JSON response Python
Iterate through each key and it's value, of a function","<p>When you iterate through dictionaries using the <code>for .. in ..</code>-syntax, it always iterates over the keys (the values are accessible using <code>dictionary[key]</code>).</p>
<p>To iterate over key-value pairs, use the following:</p>
<ul>
<li><code>for k,v in dict.iteritems()</code> in Python 2</li>
<li><code>for k,v in dict.items()</code> in Python 3</li>
</ul>
"
13,5,Does Python have a string 'contains' substring method?,"<p>I'm looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>

<p>I want to do:</p>

<pre><code>if not somestring.contains(""blah""):
   continue
</code></pre>
","Does Python have a string 'contains' substring method?<p>I'm looking for a <code>string.contains</code> or <code>string.indexof</code> method in Python.</p>

<p>I want to do:</p>

<pre><code>if not somestring.contains(""blah""):
   continue
</code></pre>
",<python><string><substring><contains>,contains string method indexof substring looking python want fool formatting,"<p>You can use the <a href=""https://docs.python.org/reference/expressions.html#membership-test-details"" rel=""noreferrer""><code>in</code> operator</a>:</p>

<pre><code>if ""blah"" not in somestring: 
    continue
</code></pre>
","
How do I check if a given Python string is a substring of another one?
How to determine whether a substring is in a different string
Test a string for a substring
How to check if a dict value contains a word/string?
How to compare two string with some characters only in python","<blockquote>
<h2>Does Python have a string contains substring method?</h2>
</blockquote>
<p><strong>99%</strong> of use cases will be covered using the keyword, <code>in</code>, which returns <code>True</code> or <code>False</code>:</p>
<pre class=""lang-py prettyprint-override""><code>'substring' in any_string
</code></pre>
<p>For the use case of getting the index, use <code>str.find</code> (which returns -1 on failure, and has optional positional arguments):</p>
<pre class=""lang-py prettyprint-override""><code>start = 0
stop = len(any_string)
any_string.find('substring', start, stop)
</code></pre>
<p>or <code>str.index</code> (like <code>find</code> but raises ValueError on failure):</p>
<pre class=""lang-py prettyprint-override""><code>start = 100 
end = 1000
any_string.index('substring', start, end)
</code></pre>
<h2>Explanation</h2>
<p>Use the <code>in</code> comparison operator because</p>
<ol>
<li>the language intends its usage, and</li>
<li>other Python programmers will expect you to use it.</li>
</ol>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; 'foo' in '**foo**'
True
</code></pre>
<p>The opposite (complement), which the original question asked for, is <code>not in</code>:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; 'foo' not in '**foo**' # returns False
False
</code></pre>
<p>This is semantically the same as <code>not 'foo' in '**foo**'</code> but it's much more readable and explicitly provided for in the language as a readability improvement.</p>
<h2>Avoid using <code>__contains__</code></h2>
<p>The &quot;contains&quot; method implements the behavior for <code>in</code>. This example,</p>
<pre><code>str.__contains__('**foo**', 'foo')
</code></pre>
<p>returns <code>True</code>. You could also call this function from the instance of the superstring:</p>
<pre><code>'**foo**'.__contains__('foo')
</code></pre>
<p>But don't. Methods that start with underscores are considered semantically non-public. The only reason to use this is when implementing or extending the <code>in</code> and <code>not in</code> functionality (e.g. if subclassing <code>str</code>):</p>
<pre><code>class NoisyString(str):
    def __contains__(self, other):
        print(f'testing if &quot;{other}&quot; in &quot;{self}&quot;')
        return super(NoisyString, self).__contains__(other)

ns = NoisyString('a string with a substring inside')
</code></pre>
<p>and now:</p>
<pre><code>&gt;&gt;&gt; 'substring' in ns
testing if &quot;substring&quot; in &quot;a string with a substring inside&quot;
True
</code></pre>
<h2>Don't use <code>find</code> and <code>index</code> to test for &quot;contains&quot;</h2>
<p>Don't use the following string methods to test for &quot;contains&quot;:</p>
<pre><code>&gt;&gt;&gt; '**foo**'.index('foo')
2
&gt;&gt;&gt; '**foo**'.find('foo')
2

&gt;&gt;&gt; '**oo**'.find('foo')
-1
&gt;&gt;&gt; '**oo**'.index('foo')

Traceback (most recent call last):
  File &quot;&lt;pyshell#40&gt;&quot;, line 1, in &lt;module&gt;
    '**oo**'.index('foo')
ValueError: substring not found
</code></pre>
<p>Other languages may have no methods to directly test for substrings, and so you would have to use these types of methods, but with Python, it is much more efficient to use the <code>in</code> comparison operator.</p>
<p>Also, these are not drop-in replacements for <code>in</code>. You may have to handle the exception or <code>-1</code> cases, and if they return <code>0</code> (because they found the substring at the beginning) the boolean interpretation is <code>False</code> instead of <code>True</code>.</p>
<p>If you really mean <code>not any_string.startswith(substring)</code> then say it.</p>
<h2>Performance comparisons</h2>
<p>We can compare various ways of accomplishing the same goal.</p>
<pre><code>import timeit

def in_(s, other):
    return other in s

def contains(s, other):
    return s.__contains__(other)

def find(s, other):
    return s.find(other) != -1

def index(s, other):
    try:
        s.index(other)
    except ValueError:
        return False
    else:
        return True



perf_dict = {
'in:True': min(timeit.repeat(lambda: in_('superstring', 'str'))),
'in:False': min(timeit.repeat(lambda: in_('superstring', 'not'))),
'__contains__:True': min(timeit.repeat(lambda: contains('superstring', 'str'))),
'__contains__:False': min(timeit.repeat(lambda: contains('superstring', 'not'))),
'find:True': min(timeit.repeat(lambda: find('superstring', 'str'))),
'find:False': min(timeit.repeat(lambda: find('superstring', 'not'))),
'index:True': min(timeit.repeat(lambda: index('superstring', 'str'))),
'index:False': min(timeit.repeat(lambda: index('superstring', 'not'))),
}
</code></pre>
<p>And now we see that using <code>in</code> is much faster than the others.
Less time to do an equivalent operation is better:</p>
<pre><code>&gt;&gt;&gt; perf_dict
{'in:True': 0.16450627865128808,
 'in:False': 0.1609668098178645,
 '__contains__:True': 0.24355481654697542,
 '__contains__:False': 0.24382793854783813,
 'find:True': 0.3067379407923454,
 'find:False': 0.29860888058124146,
 'index:True': 0.29647137792585454,
 'index:False': 0.5502287584545229}
</code></pre>
<h3>How can <code>in</code> be faster than <code>__contains__</code> if <code>in</code> uses <code>__contains__</code>?</h3>
<p>This is a fine follow-on question.</p>
<p>Let's disassemble functions with the methods of interest:</p>
<pre><code>&gt;&gt;&gt; from dis import dis
&gt;&gt;&gt; dis(lambda: 'a' in 'b')
  1           0 LOAD_CONST               1 ('a')
              2 LOAD_CONST               2 ('b')
              4 COMPARE_OP               6 (in)
              6 RETURN_VALUE
&gt;&gt;&gt; dis(lambda: 'b'.__contains__('a'))
  1           0 LOAD_CONST               1 ('b')
              2 LOAD_METHOD              0 (__contains__)
              4 LOAD_CONST               2 ('a')
              6 CALL_METHOD              1
              8 RETURN_VALUE
</code></pre>
<p>so we see that the <code>.__contains__</code> method has to be separately looked up and then called from the Python virtual machine - this should adequately explain the difference.</p>

"
14,3,Using global variables in a function,"<p>How can I create or use a global variable in a function?</p>

<p>If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable in a local variable of the function which needs its access?</p>
","Using global variables in a function<p>How can I create or use a global variable in a function?</p>

<p>If I create a global variable in one function, how can I use that global variable in another function? Do I need to store the global variable in a local variable of the function which needs its access?</p>
",<python><global-variables><scope>,global variable function create store use needs local variables,"<p>You can use a global variable within other functions by declaring it as <code>global</code> within each function that assigns a value to it:</p>
<pre><code>globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print(globvar)     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
</code></pre>
<p>Since global variables have a long history of introducing bugs (in every programming language), Python wants to make sure that you understand the risks by forcing you to explicitly use the <code>global</code> keyword.</p>
<p>See other answers if you want to share a global variable across modules.</p>
","How to create module-wide variables in Python?
Don't understand why UnboundLocalError occurs (closure)
Can not increment global variable from function in python
Insert variable into global namespace from within a function?
How to make a local variable (inside a function) global","<p>Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.  </p>

<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     global bar
...     baz = 5
...     print bar
...     print baz
...     print quux
... 
&gt;&gt;&gt; dis.disassemble(foo.func_code)
  3           0 LOAD_CONST               1 (5)
              3 STORE_FAST               0 (baz)

  4           6 LOAD_GLOBAL              0 (bar)
              9 PRINT_ITEM          
             10 PRINT_NEWLINE       

  5          11 LOAD_FAST                0 (baz)
             14 PRINT_ITEM          
             15 PRINT_NEWLINE       

  6          16 LOAD_GLOBAL              1 (quux)
             19 PRINT_ITEM          
             20 PRINT_NEWLINE       
             21 LOAD_CONST               0 (None)
             24 RETURN_VALUE        
&gt;&gt;&gt; 
</code></pre>

<p>See how baz, which appears on the left side of an assignment in <code>foo()</code>, is the only <code>LOAD_FAST</code> variable.</p>
"
15,3,How to get the current time in Python,"<p>What is the module/method used to get the current time?</p>
","How to get the current time in Python<p>What is the module/method used to get the current time?</p>
",<python><datetime><time>,current time python used module method zone forever formatted formats,"<p>Use:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.now()
datetime.datetime(2009, 1, 6, 15, 8, 24, 78915)

&gt;&gt;&gt; print(datetime.datetime.now())
2009-01-06 15:08:24.789150
</code></pre>

<p>And just the time:</p>

<pre><code>&gt;&gt;&gt; datetime.datetime.now().time()
datetime.time(15, 8, 24, 78915)

&gt;&gt;&gt; print(datetime.datetime.now().time())
15:08:24.789150
</code></pre>

<p>See <a href=""https://docs.python.org/3/library/datetime.html"" rel=""noreferrer""><strong>the documentation</strong></a> for more information.</p>

<p>To save typing, you can import the <code>datetime</code> object from the <code>datetime</code> module:</p>

<pre><code>&gt;&gt;&gt; from datetime import datetime
</code></pre>

<p>Then remove the leading <code>datetime.</code> from all of the above.</p>
","Printing the time between 2 points in a program in Python
Access Real Time on Computer
How to get on python current time?
How do you get the time and date in python?
How to get the time in Python","<p>First import the datetime module from datetime</p>

<pre><code>from datetime import datetime
</code></pre>

<p>Then print the current time as 'yyyy-mm-dd hh:mm:ss'</p>

<pre><code>print(str(datetime.now())
</code></pre>

<p>To get only the time in the form 'hh:mm:ss' where ss stands for the full number of seconds plus the fraction of seconds elapsed, just do;</p>

<pre><code>print(str(datetime.now()[11:])
</code></pre>

<p>Converting the datetime.now() to a string yields an answer that is in the format that feels like the regular DATES AND TIMES we are used to.</p>
"
16,0,How do I sort a dictionary by value?,"<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>

<p>I can sort on the keys, but how can I sort based on the values?</p>

<p>Note: I have read Stack Overflow question here <em><a href=""https://stackoverflow.com/questions/72899"">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>
","How do I sort a dictionary by value?<p>I have a dictionary of values read from two fields in a database: a string field and a numeric field. The string field is unique, so that is the key of the dictionary.</p>

<p>I can sort on the keys, but how can I sort based on the values?</p>

<p>Note: I have read Stack Overflow question here <em><a href=""https://stackoverflow.com/questions/72899"">How do I sort a list of dictionaries by a value of the dictionary?</a></em> and probably could change my code to have a list of dictionaries, but since I do not really need a list of dictionaries I wanted to know if there is a simpler solution to sort either in ascending or descending order.</p>
",<python><sorting><dictionary>,sort field dictionary dictionaries read list value values ascending string,"<h3>Python 3.7+ or CPython 3.6</h3>
<p>Dicts preserve insertion order in Python 3.7+. Same in CPython 3.6, but <a href=""https://stackoverflow.com/q/39980323/4518341"">it's an implementation detail</a>.</p>
<pre><code>&gt;&gt;&gt; x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
&gt;&gt;&gt; {k: v for k, v in sorted(x.items(), key=lambda item: item[1])}
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}
</code></pre>
<p>or</p>
<pre><code>&gt;&gt;&gt; dict(sorted(x.items(), key=lambda item: item[1]))
{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}
</code></pre>
<h3>Older Python</h3>
<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listƒ??probably a list of tuples.</p>
<p>For instance,</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(1))
</code></pre>
<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>
<p>And for those wishing to sort on keys instead of values:</p>
<pre><code>import operator
x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=operator.itemgetter(0))
</code></pre>
<p>In Python3 since <a href=""https://stackoverflow.com/a/15712231/4293057"">unpacking is not allowed</a> we can use</p>
<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sorted_x = sorted(x.items(), key=lambda kv: kv[1])
</code></pre>
<p>If you want the output as a dict, you can use <a href=""https://docs.python.org/3/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>collections.OrderedDict</code></a>:</p>
<pre><code>import collections

sorted_dict = collections.OrderedDict(sorted_x)
</code></pre>
","
Sorting dictionary keys in python
sort dict by value python
sort values and return list of keys from dict python
Sort dict by highest value?
How to sort a dictionary by key?","<h2>As simple as: <code>sorted(dict1, key=dict1.get)</code></h2>

<p>Well, it is actually possible to do a ""sort by dictionary values"". Recently I had to do that in a Code Golf (Stack Overflow question <em><a href=""https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549"">Code golf: Word frequency chart</a></em>). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. </p>

<p>If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:</p>

<pre><code>from collections import defaultdict
d = defaultdict(int)
for w in text.split():
    d[w] += 1
</code></pre>

<p>then you can get a list of the words, ordered by frequency of use with <a href=""https://docs.python.org/library/functions.html#sorted"" rel=""noreferrer""><code>sorted(d, key=d.get)</code></a> - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . </p>

<pre><code>for w in sorted(d, key=d.get, reverse=True):
    print(w, d[w])
</code></pre>

<p>I am writing this detailed explanation to illustrate what people often mean by ""I can easily sort a dictionary by key, but how do I sort by value"" - and I think the original post was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.</p>
"
17,3,Catch multiple exceptions in one line (except block),"<p>I know that I can do:</p>

<pre><code>try:
    # do something that may fail
except:
    # do this if ANYTHING goes wrong
</code></pre>

<p>I can also do this:</p>

<pre><code>try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreTooShortException:
    # stand on a ladder
</code></pre>

<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>

<pre><code>try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreBeingMeanException:
    # say please
</code></pre>

<p>Is there any way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>

<pre><code>try:
    # do something that may fail
except IDontLikeYouException, YouAreBeingMeanException:
    # say please
</code></pre>

<p>Now this really won't work, as it matches the syntax for:</p>

<pre><code>try:
    # do something that may fail
except Exception, e:
    # say please
</code></pre>

<p>So, my effort to catch the two distinct exceptions doesn't exactly come through.</p>

<p>Is there a way to do this?</p>
","Catch multiple exceptions in one line (except block)<p>I know that I can do:</p>

<pre><code>try:
    # do something that may fail
except:
    # do this if ANYTHING goes wrong
</code></pre>

<p>I can also do this:</p>

<pre><code>try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreTooShortException:
    # stand on a ladder
</code></pre>

<p>But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:</p>

<pre><code>try:
    # do something that may fail
except IDontLikeYouException:
    # say please
except YouAreBeingMeanException:
    # say please
</code></pre>

<p>Is there any way that I can do something like this (since the action to take in both exceptions is to <code>say please</code>):</p>

<pre><code>try:
    # do something that may fail
except IDontLikeYouException, YouAreBeingMeanException:
    # say please
</code></pre>

<p>Now this really won't work, as it matches the syntax for:</p>

<pre><code>try:
    # do something that may fail
except Exception, e:
    # say please
</code></pre>

<p>So, my effort to catch the two distinct exceptions doesn't exactly come through.</p>

<p>Is there a way to do this?</p>
",<python><exception><exception-handling>,exceptions catch matches distinct effort action block come inside really,"<p>From <a href=""https://docs.python.org/3/tutorial/errors.html#handling-exceptions"" rel=""noreferrer"">Python Documentation</a>:</p>

<blockquote>
  <p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>
</blockquote>

<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:
    pass
</code></pre>

<p>Or, for Python 2 only:</p>

<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:
    pass
</code></pre>

<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>
","Python still having issues with try-except clause
How can I catch multiple exceptions?
Python: catch either one of two exceptions
How to combine two Python Try Exceptions
How to print exception while specifying error type?
","<p>If you frequently use a large number of exceptions, you can pre-define a tuple, so you don't have to re-type them many times. </p>

<pre><code>#This example code is a technique I use in a library that connects with websites to gather data

ConnectErrs  = (URLError, SSLError, SocketTimeoutError, BadStatusLine, ConnectionResetError)

def connect(url, data):
    #do connection and return some data
    return(received_data)

def some_function(var_a, var_b, ...):
    try: o = connect(url, data)
    except ConnectErrs as e:
        #do the recovery stuff
    blah #do normal stuff you would do if no exception occurred
</code></pre>

<p><strong>NOTES:</strong> </p>

<ol>
<li><p>If you, also, need to catch other exceptions than those in the
pre-defined tuple, you will need to define another except block.  </p></li>
<li><p>If you just cannot tolerate a global variable, define it in main()
and pass it around where needed...</p></li>
</ol>
"
18,5,What is the difference between __str__ and __repr__?,"<p>What is the difference between <code>__str__</code> and <code>__repr__</code> in Python?</p>
","What is the difference between __str__ and __repr__?<p>What is the difference between <code>__str__</code> and <code>__repr__</code> in Python?</p>
",<python><magic-methods><repr>,repr str difference python forget formatwhich formatting formatted formats format,"<p><a href=""https://stackoverflow.com/users/95810/alex-martelli"">Alex</a> summarized well but, surprisingly, was too succinct.</p>
<p>First, let me reiterate the main points in <a href=""https://stackoverflow.com/a/1436756/3798217"">Alexƒ??s post</a>:</p>
<ul>
<li>The default implementation is useless (itƒ??s hard to think of one which wouldnƒ??t be, but yeah)</li>
<li><code>__repr__</code> goal is to be unambiguous</li>
<li><code>__str__</code> goal is to be readable</li>
<li>Containerƒ??s <code>__str__</code> uses contained objectsƒ?? <code>__repr__</code></li>
</ul>
<p><strong>Default implementation is useless</strong></p>
<p>This is mostly a surprise because Pythonƒ??s defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>
<pre><code>return &quot;%s(%r)&quot; % (self.__class__, self.__dict__)
</code></pre>
<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>
<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> thatƒ??s usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a ƒ??pretty printƒ? functionality (for example, used by a report generator).</p>
<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>
<p>Let me come right out and say it ƒ?? I do not believe in debuggers. I donƒ??t really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature ƒ?? most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>
<pre><code>log(INFO, &quot;I am in the weird function and a is&quot;, a, &quot;and b is&quot;, b, &quot;but I got a null C ƒ?? using default&quot;, default_c)
</code></pre>
<p>But you have to do the last step ƒ?? make sure every object you implement has a useful repr, so code like that can just work. This is why the ƒ??evalƒ? thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If thatƒ??s easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>&quot;MyClass(this=%r,that=%r)&quot; % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments ƒ?? but it is a useful form to express ƒ??this is everything you need to know about this instanceƒ?.</p>
<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or youƒ??re defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass(&quot;3&quot;)</code>.</p>
<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>
<p>Specifically, it is not intended to be unambiguous ƒ?? notice that <code>str(3)==str(&quot;3&quot;)</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be &quot;2010/4/12 15:35:22&quot;, etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class ƒ?? as long is it supports readability, it is an improvement.</p>
<p><strong>Containerƒ??s <code>__str__</code> uses contained objectsƒ?? <code>__repr__</code></strong></p>
<p>This seems surprising, doesnƒ??t it? It is a little, but how readable would it be if it used their <code>__str__</code>?</p>
<pre><code>[moshe is, 3, hello
world, this is a list, oh I don't know, containing just 4 elements]
</code></pre>
<p>Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when youƒ??re printing a list, just</p>
<pre><code>print(&quot;[&quot; + &quot;, &quot;.join(l) + &quot;]&quot;)
</code></pre>
<p>(you can probably also figure out what to do about dictionaries.</p>
<p><strong>Summary</strong></p>
<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of readability.</p>
","What is the purpose of __str__ and __repr__?
str() vs repr() functions in python 2.7.5
The difference between __str__ and __repr__?
working of \n in python","<p>To put it simply:</p>

<p><code>__str__</code> is used in to show a string representation of your object <strong>to be read easily</strong> by others.</p>

<p><code>__repr__</code> is used to show a string representation of <strong>the</strong> object.</p>

<p>Let's say I want to create a <code>Fraction</code> class where the string representation of a fraction is '(1/2)' and the object (Fraction class) is to be represented as 'Fraction (1,2)'</p>

<p>So we can create a simple Fraction class:</p>

<pre><code>class Fraction:
    def __init__(self, num, den):
        self.__num = num
        self.__den = den

    def __str__(self):
        return '(' + str(self.__num) + '/' + str(self.__den) + ')'

    def __repr__(self):
        return 'Fraction (' + str(self.__num) + ',' + str(self.__den) + ')'



f = Fraction(1,2)
print('I want to represent the Fraction STRING as ' + str(f)) # (1/2)
print('I want to represent the Fraction OBJECT as ', repr(f)) # Fraction (1,2)
</code></pre>
"
19,4,How do I check if a list is empty?,"<p>For example, if passed the following:</p>

<pre><code>a = []
</code></pre>

<p>How do I check to see if <code>a</code> is empty?</p>
","How do I check if a list is empty?<p>For example, if passed the following:</p>

<pre><code>a = []
</code></pre>

<p>How do I check to see if <code>a</code> is empty?</p>
",<python><list>,check passed following example list forgotten forth formatwhich formatting formatted,"<pre><code>if not a:
  print(""List is empty"")
</code></pre>

<p>Using the <a href=""https://docs.python.org/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">implicit booleanness</a> of the empty <code>list</code> is quite pythonic.</p>
","How to check if a list is empty in Python?
Is it wrong to use the ""=="" operator when comparing to an empty list?
How do you check if list is blank?
if listA== [ ] more simplified version
expression can be simplified on boolean literal","<p>What brought me here is a special use-case: I actually wanted a <em>function</em> to tell me if a list is empty or not. I wanted to avoid writing my own function or using a lambda-expression here (because it seemed like it should be simple enough):</p>

<pre><code>foo = itertools.takewhile(is_not_empty, (f(x) for x in itertools.count(1)))
</code></pre>

<p>And, of course, there is a very natural way to do it:</p>

<pre><code>foo = itertools.takewhile(bool, (f(x) for x in itertools.count(1)))
</code></pre>

<p>Of course, do <strong>not</strong> use <code>bool</code> in <code>if</code> (i.e., <code>if bool(L):</code>) because it's implied. But, for the cases when ""is not empty"" is explicitly needed as a function, <code>bool</code> is the best choice.</p>
"
20,0,How can I add new keys to a dictionary?,"<p>Is it possible to add a key to a Python dictionary after it has been created?</p>

<p>It doesn't seem to have an <code>.add()</code> method.</p>
","How can I add new keys to a dictionary?<p>Is it possible to add a key to a Python dictionary after it has been created?</p>

<p>It doesn't seem to have an <code>.add()</code> method.</p>
",<python><dictionary><lookup>,add dictionary keys created key new possible method python zone,"<p>You create a new key/value pair on a dictionary by assigning a value to that key</p>
<pre><code>d = {'key': 'value'}
print(d)  # {'key': 'value'}

d['mynewkey'] = 'mynewvalue'

print(d)  # {'key': 'value', 'mynewkey': 'mynewvalue'}
</code></pre>
<p>If the key doesn't exist, it's added and points to that value. If it exists, the current value it points to is overwritten.</p>
","Add a new item to a dictionary in Python
How to add key,value pair to dictionary?
Adding variables to dictionary
Updating Dictionary in a loop Python
How to Combine two JSON files?
Is there a array-like class that implement quick search adding words in alphabet order?
How to append a dictionary?","<p>You can use square brackets:</p>
<pre><code>my_dict = {}
my_dict[&quot;key&quot;] = &quot;value&quot;
</code></pre>
<p>Or you can use the <em>.update()</em> method:</p>
<pre><code>my_another_dict = {&quot;key&quot;: &quot;value&quot;}
my_dict = {}
my_dict.update(my_another_dict)
</code></pre>
"
21,2,How to iterate over rows in a DataFrame in Pandas,"<p>I have a <code>DataFrame</code> from Pandas:</p>

<pre><code>import pandas as pd
inp = [{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]
df = pd.DataFrame(inp)
print df
</code></pre>

<p>Output:</p>

<pre><code>   c1   c2
0  10  100
1  11  110
2  12  120
</code></pre>

<p>Now I want to iterate over the rows of this frame. For every row I want to be able to access its elements (values in cells) by the name of the columns. For example:</p>

<pre><code>for row in df.rows:
   print row['c1'], row['c2']
</code></pre>

<p>Is it possible to do that in Pandas?</p>

<p>I found this <a href=""https://stackoverflow.com/questions/7837722/what-is-the-most-efficient-way-to-loop-through-dataframes-with-pandas"">similar question</a>. But it does not give me the answer I need. For example, it is suggested there to use:</p>

<pre><code>for date, row in df.T.iteritems():
</code></pre>

<p>or</p>

<pre><code>for row in df.iterrows():
</code></pre>

<p>But I do not understand what the <code>row</code> object is and how I can work with it.</p>
","How to iterate over rows in a DataFrame in Pandas<p>I have a <code>DataFrame</code> from Pandas:</p>

<pre><code>import pandas as pd
inp = [{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}]
df = pd.DataFrame(inp)
print df
</code></pre>

<p>Output:</p>

<pre><code>   c1   c2
0  10  100
1  11  110
2  12  120
</code></pre>

<p>Now I want to iterate over the rows of this frame. For every row I want to be able to access its elements (values in cells) by the name of the columns. For example:</p>

<pre><code>for row in df.rows:
   print row['c1'], row['c2']
</code></pre>

<p>Is it possible to do that in Pandas?</p>

<p>I found this <a href=""https://stackoverflow.com/questions/7837722/what-is-the-most-efficient-way-to-loop-through-dataframes-with-pandas"">similar question</a>. But it does not give me the answer I need. For example, it is suggested there to use:</p>

<pre><code>for date, row in df.T.iteritems():
</code></pre>

<p>or</p>

<pre><code>for row in df.iterrows():
</code></pre>

<p>But I do not understand what the <code>row</code> object is and how I can work with it.</p>
",<python><pandas><dataframe>,iterate row rows dataframe cells example pandas suggested,"<p><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas-dataframe-iterrows"" rel=""noreferrer""><code>DataFrame.iterrows</code></a> is a generator which yields both the index and row (as a Series):</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})

for index, row in df.iterrows():
    print(row['c1'], row['c2'])
</code></pre>

<pre><code>10 100
11 110
12 120
</code></pre>
",,"<p><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas-dataframe-iterrows"" rel=""noreferrer""><code>DataFrame.iterrows</code></a> is a generator which yields both the index and row (as a Series):</p>
<pre><code>import pandas as pd

df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
df = df.reset_index()  # make sure indexes pair with number of rows
for index, row in df.iterrows():
    print(row['c1'], row['c2'])
</code></pre>

<pre><code>10 100
11 110
12 120
</code></pre>
"
22,3,How do I concatenate two lists in Python?,"<p>How do I concatenate two lists in Python?</p>

<p>Example:</p>

<pre><code>listone = [1, 2, 3]
listtwo = [4, 5, 6]
</code></pre>

<p>Expected outcome:</p>

<pre><code>&gt;&gt;&gt; joinedlist
[1, 2, 3, 4, 5, 6]
</code></pre>
","How do I concatenate two lists in Python?<p>How do I concatenate two lists in Python?</p>

<p>Example:</p>

<pre><code>listone = [1, 2, 3]
listtwo = [4, 5, 6]
</code></pre>

<p>Expected outcome:</p>

<pre><code>&gt;&gt;&gt; joinedlist
[1, 2, 3, 4, 5, 6]
</code></pre>
",<python><list><concatenation>,concatenate lists outcome expected example python zone fork format formatting,"<p>You can use the <code>+</code> operator to combine them:</p>
<pre><code>listone = [1, 2, 3]
listtwo = [4, 5, 6]

joinedlist = listone + listtwo
</code></pre>
<p>Output:</p>
<pre><code>&gt;&gt;&gt; joinedlist
[1, 2, 3, 4, 5, 6]
</code></pre>
",,"<p>If you want to merge the two lists in sorted form, you can use the <code>merge</code> function from the <code>heapq</code> library.</p>

<pre><code>from heapq import merge

a = [1, 2, 4]
b = [2, 4, 6, 7]

print list(merge(a, b))
</code></pre>
"
23,6,How to copy files?,"<p>How do I copy a file in Python?</p>
<p>I couldn't find anything under <a href=""https://docs.python.org/library/os.html"" rel=""noreferrer""><code>os</code></a>
module.</p>
","How to copy files?<p>How do I copy a file in Python?</p>
<p>I couldn't find anything under <a href=""https://docs.python.org/library/os.html"" rel=""noreferrer""><code>os</code></a>
module.</p>
",<python><file><copy><filesystems><file-copying>,copy osmodule files file python zone ,"<p><a href=""http://docs.python.org/3/library/shutil.html"" rel=""noreferrer""><code>shutil</code></a> has many methods you can use. One of which is:</p>
<pre><code>from shutil import copyfile
copyfile(src, dst)

# 2nd option
copy(src, dst)  # dst can be a folder; use copy2() to preserve timestamp
</code></pre>
<ul>
<li>Copy the contents of the file named <code>src</code> to a file named <code>dst</code>. Both <code>src</code> and <code>dst</code> need to be the entire filename of the files, including path.</li>
<li>The destination location must be writable; otherwise, an <code>IOError</code> exception will be raised.</li>
<li>If <code>dst</code> already exists, it will be replaced.</li>
<li>Special files such as character or block devices and pipes cannot be copied with this function.</li>
<li>With <code>copy</code>, <code>src</code> and <code>dst</code> are path names given as <code>str</code>s.</li>
</ul>
<p>Another <code>shutil</code> method to look at is <a href=""https://docs.python.org/3/library/shutil.html#shutil.copy2"" rel=""noreferrer""><code>shutil.copy2()</code></a>. It's similar but preserves more metadata (e.g. time stamps).</p>
<p>If you use <code>os.path</code> operations, use <code>copy</code> rather than <code>copyfile</code>. <code>copyfile</code> will only accept strings.</p>
",,"<p>As of <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_bytes"" rel=""noreferrer"">Python 3.5</a> you can do the following for small files (ie: text files, small jpegs):</p>

<pre><code>from pathlib import Path

source = Path('../path/to/my/file.txt')
destination = Path('../path/where/i/want/to/store/it.txt')
destination.write_bytes(source.read_bytes())
</code></pre>

<p><code>write_bytes</code> will overwrite whatever was at the destination's location</p>
"
24,5,Convert bytes to a string,"<p>I'm using this code to get standard output from an external program:</p>

<pre><code>&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]
</code></pre>

<p>The communicate() method returns an array of bytes:</p>

<pre><code>&gt;&gt;&gt; command_stdout
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
</code></pre>

<p>However, I'd like to work with the output as a normal Python string. So that I could print it like this:</p>

<pre><code>&gt;&gt;&gt; print(command_stdout)
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2
</code></pre>

<p>I thought that's what the <a href=""http://docs.python.org/3.0/library/binascii.html?highlight=b2a#binascii.b2a_qp"" rel=""noreferrer"">binascii.b2a_qp()</a> method is for, but when I tried it, I got the same byte array again:</p>

<pre><code>&gt;&gt;&gt; binascii.b2a_qp(command_stdout)
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
</code></pre>

<p>How do I convert the bytes value back to string? I mean, using the ""batteries"" instead of doing it manually. And I'd like it to be OK with Python&nbsp;3.</p>
","Convert bytes to a string<p>I'm using this code to get standard output from an external program:</p>

<pre><code>&gt;&gt;&gt; from subprocess import *
&gt;&gt;&gt; command_stdout = Popen(['ls', '-l'], stdout=PIPE).communicate()[0]
</code></pre>

<p>The communicate() method returns an array of bytes:</p>

<pre><code>&gt;&gt;&gt; command_stdout
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
</code></pre>

<p>However, I'd like to work with the output as a normal Python string. So that I could print it like this:</p>

<pre><code>&gt;&gt;&gt; print(command_stdout)
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1
-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2
</code></pre>

<p>I thought that's what the <a href=""http://docs.python.org/3.0/library/binascii.html?highlight=b2a#binascii.b2a_qp"" rel=""noreferrer"">binascii.b2a_qp()</a> method is for, but when I tried it, I got the same byte array again:</p>

<pre><code>&gt;&gt;&gt; binascii.b2a_qp(command_stdout)
b'total 0\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file1\n-rw-rw-r-- 1 thomas thomas 0 Mar  3 07:03 file2\n'
</code></pre>

<p>How do I convert the bytes value back to string? I mean, using the ""batteries"" instead of doing it manually. And I'd like it to be OK with Python&nbsp;3.</p>
",<python><string><python-3.x>,bytes array convert output method like communicate  batteries,"<p>You need to decode the bytes object to produce a string:</p>
<pre><code>&gt;&gt;&gt; b&quot;abcde&quot;
b'abcde'

# utf-8 is used here because it is a very common encoding, but you
# need to use the encoding your data is actually in.
&gt;&gt;&gt; b&quot;abcde&quot;.decode(&quot;utf-8&quot;) 
'abcde'
</code></pre>
<p>See: <a href=""https://docs.python.org/3/library/stdtypes.html#bytes.decode"" rel=""noreferrer"">https://docs.python.org/3/library/stdtypes.html#bytes.decode</a></p>
",,"<p>Set universal_newlines to True, i.e.</p>

<pre><code>command_stdout = Popen(['ls', '-l'], stdout=PIPE, universal_newlines=True).communicate()[0]
</code></pre>
"
25,4,What is the difference between Python's list methods append and extend?,"<p>What's the difference between the list methods <code>append()</code> and <code>extend()</code>?</p>
","What is the difference between Python's list methods append and extend?<p>What's the difference between the list methods <code>append()</code> and <code>extend()</code>?</p>
",<python><list><data-structures><append><extend>,extend append methods difference list python forgotten forth format formatting,"<p><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>append</code></a>: Appends object at the end.</p>
<pre><code>x = [1, 2, 3]
x.append([4, 5])
print(x)
</code></pre>
<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>
<hr />
<p><a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>extend</code></a>: Extends list by appending elements from the iterable.</p>
<pre><code>x = [1, 2, 3]
x.extend([4, 5])
print(x)
</code></pre>
<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>
",,"<p>The following two snippets are semantically equivalent:</p>

<pre><code>for item in iterator:
    a_list.append(item)
</code></pre>

<p>and</p>

<pre><code>a_list.extend(iterator)
</code></pre>

<p>The latter may be faster as the loop is implemented in C.</p>
"
26,5,"""Least Astonishment"" and the Mutable Default Argument","<p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>
<pre><code>def foo(a=[]):
    a.append(5)
    return a
</code></pre>
<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>
<pre><code>&gt;&gt;&gt; foo()
[5]
&gt;&gt;&gt; foo()
[5, 5]
&gt;&gt;&gt; foo()
[5, 5, 5]
&gt;&gt;&gt; foo()
[5, 5, 5, 5]
&gt;&gt;&gt; foo()
</code></pre>
<p>A manager of mine once had his first encounter with this feature, and called it &quot;a dramatic design flaw&quot; of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>
<p><strong>Edit</strong>:</p>
<p><a href=""https://stackoverflow.com/a/1137164/7487335"">Baczek made an interesting example</a>. Together with most of your comments and <a href=""https://stackoverflow.com/a/1134623/7487335"">Utaal's in particular</a>, I elaborated further:</p>
<pre><code>&gt;&gt;&gt; def a():
...     print(&quot;a executed&quot;)
...     return []
... 
&gt;&gt;&gt;            
&gt;&gt;&gt; def b(x=a()):
...     x.append(5)
...     print(x)
... 
a executed
&gt;&gt;&gt; b()
[5]
&gt;&gt;&gt; b()
[5, 5]
</code></pre>
<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function, or &quot;together&quot; with it?</p>
<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be &quot;hybrid&quot; in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>
<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>
","""Least Astonishment"" and the Mutable Default Argument<p>Anyone tinkering with Python long enough has been bitten (or torn to pieces) by the following issue:</p>
<pre><code>def foo(a=[]):
    a.append(5)
    return a
</code></pre>
<p>Python novices would expect this function to always return a list with only one element: <code>[5]</code>. The result is instead very different, and very astonishing (for a novice):</p>
<pre><code>&gt;&gt;&gt; foo()
[5]
&gt;&gt;&gt; foo()
[5, 5]
&gt;&gt;&gt; foo()
[5, 5, 5]
&gt;&gt;&gt; foo()
[5, 5, 5, 5]
&gt;&gt;&gt; foo()
</code></pre>
<p>A manager of mine once had his first encounter with this feature, and called it &quot;a dramatic design flaw&quot; of the language. I replied that the behavior had an underlying explanation, and it is indeed very puzzling and unexpected if you don't understand the internals. However, I was not able to answer (to myself) the following question: what is the reason for binding the default argument at function definition, and not at function execution? I doubt the experienced behavior has a practical use (who really used static variables in C, without breeding bugs?)</p>
<p><strong>Edit</strong>:</p>
<p><a href=""https://stackoverflow.com/a/1137164/7487335"">Baczek made an interesting example</a>. Together with most of your comments and <a href=""https://stackoverflow.com/a/1134623/7487335"">Utaal's in particular</a>, I elaborated further:</p>
<pre><code>&gt;&gt;&gt; def a():
...     print(&quot;a executed&quot;)
...     return []
... 
&gt;&gt;&gt;            
&gt;&gt;&gt; def b(x=a()):
...     x.append(5)
...     print(x)
... 
a executed
&gt;&gt;&gt; b()
[5]
&gt;&gt;&gt; b()
[5, 5]
</code></pre>
<p>To me, it seems that the design decision was relative to where to put the scope of parameters: inside the function, or &quot;together&quot; with it?</p>
<p>Doing the binding inside the function would mean that <code>x</code> is effectively bound to the specified default when the function is called, not defined, something that would present a deep flaw: the <code>def</code> line would be &quot;hybrid&quot; in the sense that part of the binding (of the function object) would happen at definition, and part (assignment of default parameters) at function invocation time.</p>
<p>The actual behavior is more consistent: everything of that line gets evaluated when that line is executed, meaning at function definition.</p>
",<python><language-design><default-parameters><least-astonishment>,function default binding behavior definition flaw design line parameters inside,"<p>Actually, this is not a design flaw, and it is not because of internals or performance.<br />
It comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>
<p>As soon as you think of it this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of &quot;member data&quot; and therefore their state may change from one call to the other - exactly as in any other object.</p>
<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href=""https://web.archive.org/web/20200221224620/http://effbot.org/zone/default-values.htm"" rel=""noreferrer"">Default Parameter Values in Python</a>.<br />
I found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>
",,"<p>Every other answer explains why this is actually a nice and desired behavior, or why you shouldn't be needing this anyway. Mine is for those stubborn ones who want to exercise their right to bend the language to their will, not the other way around.</p>

<p>We will ""fix"" this behavior with a decorator that will copy the default value instead of reusing the same instance for each positional argument left at its default value.</p>



<pre class=""lang-py prettyprint-override""><code>import inspect
from copy import copy

def sanify(function):
    def wrapper(*a, **kw):
        # store the default values
        defaults = inspect.getargspec(function).defaults # for python2
        # construct a new argument list
        new_args = []
        for i, arg in enumerate(defaults):
            # allow passing positional arguments
            if i in range(len(a)):
                new_args.append(a[i])
            else:
                # copy the value
                new_args.append(copy(arg))
        return function(*new_args, **kw)
    return wrapper
</code></pre>

<p>Now let's redefine our function using this decorator:</p>

<pre class=""lang-py prettyprint-override""><code>@sanify
def foo(a=[]):
    a.append(5)
    return a

foo() # '[5]'
foo() # '[5]' -- as desired
</code></pre>

<p>This is particularly neat for functions that take multiple arguments. Compare:</p>

<pre class=""lang-py prettyprint-override""><code># the 'correct' approach
def bar(a=None, b=None, c=None):
    if a is None:
        a = []
    if b is None:
        b = []
    if c is None:
        c = []
    # finally do the actual work
</code></pre>

<p>with</p>

<pre class=""lang-py prettyprint-override""><code># the nasty decorator hack
@sanify
def bar(a=[], b=[], c=[]):
    # wow, works right out of the box!
</code></pre>

<p>It's important to note that the above solution breaks if you try to use keyword args, like so:</p>

<pre class=""lang-py prettyprint-override""><code>foo(a=[4])
</code></pre>

<p>The decorator could be adjusted to allow for that, but we leave this as an exercise for the reader ;)</p>
"
27,6,What is __init__.py for?,"<p>What is <code>__init__.py</code> for in a Python source directory?</p>
","What is __init__.py for?<p>What is <code>__init__.py</code> for in a Python source directory?</p>
",<python><module><package><python-packaging>,init py source directory python,"<p>It used to be a required part of a package (<a href=""https://docs.python.org/3/reference/import.html#regular-packages"" rel=""noreferrer"">old, pre-3.3 ""regular package""</a>, not <a href=""https://docs.python.org/3/reference/import.html#namespace-packages"" rel=""noreferrer"">newer 3.3+ ""namespace package""</a>).</p>

<p><a href=""https://docs.python.org/3/reference/import.html#regular-packages"" rel=""noreferrer"">Here's the documentation.</a></p>

<blockquote>
  <p>Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3.2 and earlier. A regular package is typically implemented as a directory containing an <code>__init__.py</code> file. When a regular package is imported, this <code>__init__.py</code> file is implicitly executed, and the objects it defines are bound to names in the packageƒ??s namespace. The <code>__init__.py</code> file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported.</p>
</blockquote>

<p>But just click the link, it contains an example, more information, and an explanation of namespace packages, the kind of packages without <code>__init__.py</code>.</p>
",,"<p><code>__init__.py</code> will treat the directory it is in as a loadable module.</p>

<p>For people who prefer reading code, I put <a href=""https://stackoverflow.com/users/2588818/two-bit-alchemist"">Two-Bit Alchemist's</a> comment here.</p>

<pre><code>$ find /tmp/mydir/
/tmp/mydir/
/tmp/mydir//spam
/tmp/mydir//spam/__init__.py
/tmp/mydir//spam/module.py
$ cd ~
$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp/mydir')
&gt;&gt;&gt; from spam import module
&gt;&gt;&gt; module.myfun(3)
9
&gt;&gt;&gt; exit()
$ 
$ rm /tmp/mydir/spam/__init__.py*
$ 
$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.insert(0, '/tmp/mydir')
&gt;&gt;&gt; from spam import module
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
ImportError: No module named spam
&gt;&gt;&gt; 
</code></pre>
"
28,3,How do I pass a variable by reference?,"<p>The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'</p>

<pre><code>class PassByReference:
    def __init__(self):
        self.variable = 'Original'
        self.change(self.variable)
        print(self.variable)

    def change(self, var):
        var = 'Changed'
</code></pre>

<p>Is there something I can do to pass the variable by actual reference?</p>
","How do I pass a variable by reference?<p>The Python documentation seems unclear about whether parameters are passed by reference or value, and the following code produces the unchanged value 'Original'</p>

<pre><code>class PassByReference:
    def __init__(self):
        self.variable = 'Original'
        self.change(self.variable)
        print(self.variable)

    def change(self, var):
        var = 'Changed'
</code></pre>

<p>Is there something I can do to pass the variable by actual reference?</p>
",<python><reference><parameter-passing><pass-by-reference>,reference pass variable value unchanged unclear produces parameters passed original,"<p>Arguments are <a href=""http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference"" rel=""noreferrer"">passed by assignment</a>. The rationale behind this is twofold:</p>

<ol>
<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>
<li>some data types are mutable, but others aren't</li>
</ol>

<p>So:</p>

<ul>
<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>
<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>
</ul>

<p>To make it even more clear, let's have some examples. </p>

<h2>List - a mutable type</h2>

<p><strong>Let's try to modify the list that was passed to a method:</strong></p>

<pre><code>def try_to_change_list_contents(the_list):
    print('got', the_list)
    the_list.append('four')
    print('changed to', the_list)

outer_list = ['one', 'two', 'three']

print('before, outer_list =', outer_list)
try_to_change_list_contents(outer_list)
print('after, outer_list =', outer_list)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_list = ['one', 'two', 'three']
got ['one', 'two', 'three']
changed to ['one', 'two', 'three', 'four']
after, outer_list = ['one', 'two', 'three', 'four']
</code></pre>

<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>

<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>

<pre><code>def try_to_change_list_reference(the_list):
    print('got', the_list)
    the_list = ['and', 'we', 'can', 'not', 'lie']
    print('set to', the_list)

outer_list = ['we', 'like', 'proper', 'English']

print('before, outer_list =', outer_list)
try_to_change_list_reference(outer_list)
print('after, outer_list =', outer_list)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_list = ['we', 'like', 'proper', 'English']
got ['we', 'like', 'proper', 'English']
set to ['and', 'we', 'can', 'not', 'lie']
after, outer_list = ['we', 'like', 'proper', 'English']
</code></pre>

<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>

<h2>String - an immutable type</h2>

<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>

<p><strong>Now, let's try to change the reference</strong></p>

<pre><code>def try_to_change_string_reference(the_string):
    print('got', the_string)
    the_string = 'In a kingdom by the sea'
    print('set to', the_string)

outer_string = 'It was many and many a year ago'

print('before, outer_string =', outer_string)
try_to_change_string_reference(outer_string)
print('after, outer_string =', outer_string)
</code></pre>

<p>Output:</p>

<pre class=""lang-none prettyprint-override""><code>before, outer_string = It was many and many a year ago
got It was many and many a year ago
set to In a kingdom by the sea
after, outer_string = It was many and many a year ago
</code></pre>

<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>

<p>I hope this clears things up a little.</p>

<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, ""Is there something I can do to pass the variable by actual reference?"". Let's work on that.</p>

<h2>How do we get around this?</h2>

<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>

<pre><code>def return_a_whole_new_string(the_string):
    new_string = something_to_do_with_the_old_string(the_string)
    return new_string

# then you could call it like
my_string = return_a_whole_new_string(my_string)
</code></pre>

<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>

<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):
    new_string = something_to_do_with_the_old_string(stuff_to_change[0])
    stuff_to_change[0] = new_string

# then you could call it like
wrapper = [my_string]
use_a_wrapper_to_simulate_pass_by_reference(wrapper)

do_something_with(wrapper[0])
</code></pre>

<p>Although this seems a little cumbersome.</p>
",,"<p>What about <a href=""https://docs.python.org/3/library/dataclasses.html"" rel=""nofollow noreferrer"">dataclasses</a>? Also, it allows you to apply type restriction (aka &quot;type hint&quot;).</p>
<pre class=""lang-py prettyprint-override""><code>from dataclasses import dataclass

@dataclass
class Holder:
    obj: your_type # Need any type? Use &quot;obj: object&quot; then.

def foo(ref: Holder):
    ref.obj = do_something()
</code></pre>
<p>I agree with folks that in most cases you'd better consider not to use it.</p>
<p>And yet, when we're talking about <a href=""https://en.wikipedia.org/wiki/State_pattern"" rel=""nofollow noreferrer""><em>contexts</em></a> it's worth to know that way.</p>
<p>You can design explicit context class though. When prototyping I prefer dataclasses, just because it's easy to serialize them back and forth.</p>
<p>Cheers!</p>
"
29,4,List changes unexpectedly after assignment. Why is this and how can I prevent it?,"<p>While using <code>new_list = my_list</code>, any modifications to <code>new_list</code> changes <code>my_list</code> every time. Why is this, and how can I clone or copy the list to prevent it?</p>
","List changes unexpectedly after assignment. Why is this and how can I prevent it?<p>While using <code>new_list = my_list</code>, any modifications to <code>new_list</code> changes <code>my_list</code> every time. Why is this, and how can I clone or copy the list to prevent it?</p>
",<python><list><reference><copy><clone>,newlist prevent mylist changes modifications clone unexpectedly assignment list copy,"<p>With <code>new_list = my_list</code>, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>

<p>To actually copy the list, you have various possibilities:</p>

<ul>
<li><p>You can use the builtin <a href=""https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types"" rel=""noreferrer""><code>list.copy()</code></a> method (available since Python 3.3):</p>

<pre><code>new_list = old_list.copy()
</code></pre></li>
<li><p>You can slice it: </p>

<pre><code>new_list = old_list[:]
</code></pre>

<p><a href=""https://en.wikipedia.org/wiki/Alex_Martelli"" rel=""noreferrer"" title=""Alex Martelli"">Alex Martelli's</a> opinion (at least <a href=""https://www.youtube.com/watch?v=g7V89K8QfgQ"" rel=""noreferrer"" title=""Bay Area Python Interest Group August 2007 Meeting"">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>
<li><p>You can use the built in <a href=""https://docs.python.org/2/library/functions.html#list"" rel=""noreferrer"" title=""list""><code>list()</code></a> function:</p>

<pre><code>new_list = list(old_list)
</code></pre></li>
<li><p>You can use generic <a href=""https://docs.python.org/2/library/copy.html#copy.copy"" rel=""noreferrer"" title=""copy.copy""><code>copy.copy()</code></a>:</p>

<pre><code>import copy
new_list = copy.copy(old_list)
</code></pre>

<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>
<li><p>If the list contains objects and you want to copy them as well, use generic <a href=""https://docs.python.org/2/library/copy.html#copy.deepcopy"" rel=""noreferrer"" title=""copy.deepcopy""><code>copy.deepcopy()</code></a>:</p>

<pre><code>import copy
new_list = copy.deepcopy(old_list)
</code></pre>

<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>
</ul>

<p><strong>Example:</strong></p>

<pre><code>import copy

class Foo(object):
    def __init__(self, val):
         self.val = val

    def __repr__(self):
        return 'Foo({!r})'.format(self.val)

foo = Foo(1)

a = ['foo', foo]
b = a.copy()
c = a[:]
d = list(a)
e = copy.copy(a)
f = copy.deepcopy(a)

# edit orignal list and instance 
a.append('baz')
foo.val = 5

print('original: %r\nlist.copy(): %r\nslice: %r\nlist(): %r\ncopy: %r\ndeepcopy: %r'
      % (a, b, c, d, e, f))
</code></pre>

<p>Result:</p>

<pre><code>original: ['foo', Foo(5), 'baz']
list.copy(): ['foo', Foo(5)]
slice: ['foo', Foo(5)]
list(): ['foo', Foo(5)]
copy: ['foo', Foo(5)]
deepcopy: ['foo', Foo(1)]
</code></pre>
",,"<p>This is because, the line <code>new_list = my_list</code> assigns a new reference to the variable <code>my_list</code> which is <code>new_list</code>
This is similar to the <code>C</code> code given below,</p>

<pre><code>int my_list[] = [1,2,3,4];
int *new_list;
new_list = my_list;
</code></pre>

<p>You should use the copy module to create a new list by</p>

<pre><code>import copy
new_list = copy.deepcopy(my_list)
</code></pre>
"
30,3,How to make function decorators and chain them together?,"<p>How can I make two decorators in Python that would do the following?</p>

<pre><code>@makebold
@makeitalic
def say():
   return ""Hello""
</code></pre>

<p>...which should return:</p>

<pre><code>""&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;""
</code></pre>

<p>I'm not trying to make <code>HTML</code> this way in a real application - just trying to understand how decorators and decorator chaining works.</p>
","How to make function decorators and chain them together?<p>How can I make two decorators in Python that would do the following?</p>

<pre><code>@makebold
@makeitalic
def say():
   return ""Hello""
</code></pre>

<p>...which should return:</p>

<pre><code>""&lt;b&gt;&lt;i&gt;Hello&lt;/i&gt;&lt;/b&gt;""
</code></pre>

<p>I'm not trying to make <code>HTML</code> this way in a real application - just trying to understand how decorators and decorator chaining works.</p>
",<python><decorator><python-decorators>,decorators make trying chain chaining decorator html real application works,"<p>Check out <a href=""http://docs.python.org/reference/compound_stmts.html#function"" rel=""noreferrer"">the documentation</a> to see how decorators work. Here is what you asked for:</p>
<pre><code>from functools import wraps

def makebold(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        return &quot;&lt;b&gt;&quot; + fn(*args, **kwargs) + &quot;&lt;/b&gt;&quot;
    return wrapper

def makeitalic(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        return &quot;&lt;i&gt;&quot; + fn(*args, **kwargs) + &quot;&lt;/i&gt;&quot;
    return wrapper

@makebold
@makeitalic
def hello():
    return &quot;hello world&quot;

@makebold
@makeitalic
def log(s):
    return s

print hello()        # returns &quot;&lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;&quot;
print hello.__name__ # with functools.wraps() this returns &quot;hello&quot;
print log('hello')   # returns &quot;&lt;b&gt;&lt;i&gt;hello&lt;/i&gt;&lt;/b&gt;&quot;
</code></pre>
",,"<p>Speaking of the counter example - as given above, the counter will be shared between all functions that use the decorator:</p>

<pre><code>def counter(func):
    def wrapped(*args, **kws):
        print 'Called #%i' % wrapped.count
        wrapped.count += 1
        return func(*args, **kws)
    wrapped.count = 0
    return wrapped
</code></pre>

<p>That way, your decorator can be reused for different functions (or used to decorate the same function multiple times: <code>func_counter1 = counter(func); func_counter2 = counter(func)</code>), and the counter variable will remain private to each. </p>
"
31,6,Understanding Python super() with __init__() methods,"<p>I'm trying to understand the use of <code>super()</code>. From the looks of it, both child classes can be created, just fine. </p>

<p>I'm curious to know about the actual difference between the following 2 child classes.</p>

<pre><code>class Base(object):
    def __init__(self):
        print ""Base created""

class ChildA(Base):
    def __init__(self):
        Base.__init__(self)

class ChildB(Base):
    def __init__(self):
        super(ChildB, self).__init__()

ChildA() 
ChildB()
</code></pre>
","Understanding Python super() with __init__() methods<p>I'm trying to understand the use of <code>super()</code>. From the looks of it, both child classes can be created, just fine. </p>

<p>I'm curious to know about the actual difference between the following 2 child classes.</p>

<pre><code>class Base(object):
    def __init__(self):
        print ""Base created""

class ChildA(Base):
    def __init__(self):
        Base.__init__(self)

class ChildB(Base):
    def __init__(self):
        super(ChildB, self).__init__()

ChildA() 
ChildB()
</code></pre>
",<python><class><oop><inheritance><super>,child super classes methods curious understanding actual fine init created,"<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href=""http://www.artima.com/weblogs/viewpost.jsp?thread=236275"" rel=""noreferrer"">fun stuff</a> can happen. See the <a href=""https://docs.python.org/2/library/functions.html#super"" rel=""noreferrer"">standard docs on super</a> if you haven't already.</p>

<p>Note that <a href=""https://docs.python.org/3/library/functions.html#super"" rel=""noreferrer"">the syntax changed in Python 3.0</a>: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer. The standard docs also refer to a <a href=""https://rhettinger.wordpress.com/2011/05/26/super-considered-super/"" rel=""noreferrer"">guide to using <code>super()</code></a> which is quite explanatory.</p>
",,"<p>There isn't, really. <code>super()</code> looks at the next class in the MRO (method resolution order, accessed with <code>cls.__mro__</code>) to call the methods. Just calling the base <code>__init__</code> calls the base <code>__init__</code>. As it happens, the MRO has exactly one item-- the base. So you're really doing the exact same thing, but in a nicer way with <code>super()</code> (particularly if you get into multiple inheritance later).</p>
"
32,3,What does ** (double star/asterisk) and * (star/asterisk) do for parameters?,"<p>In the following method definitions, what does the <code>*</code> and <code>**</code> do for <code>param2</code>?</p>

<pre><code>def foo(param1, *param2):
def bar(param1, **param2):
</code></pre>
","What does ** (double star/asterisk) and * (star/asterisk) do for parameters?<p>In the following method definitions, what does the <code>*</code> and <code>**</code> do for <code>param2</code>?</p>

<pre><code>def foo(param1, *param2):
def bar(param1, **param2):
</code></pre>
",<python><syntax><parameter-passing><variadic-functions><argument-unpacking>,asterisk star param definitions double parameters method following ,"<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=""http://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"" rel=""noreferrer"">more on defining functions</a> in the Python documentation.</p>
<p>The <code>*args</code> will give you all function parameters <a href=""https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">as a tuple</a>:</p>
<pre><code>def foo(*args):
    for a in args:
        print(a)        

foo(1)
# 1

foo(1,2,3)
# 1
# 2
# 3
</code></pre>
<p>The <code>**kwargs</code> will give you all
<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>
<pre><code>def bar(**kwargs):
    for a in kwargs:
        print(a, kwargs[a])  

bar(name='one', age=27)
# name one
# age 27
</code></pre>
<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>
<pre><code>def foo(kind, *args, **kwargs):
   pass
</code></pre>
<p>It is also possible to use this the other way around:</p>
<pre><code>def foo(a, b, c):
    print(a, b, c)

obj = {'b':10, 'c':'lee'}

foo(100,**obj)
# 100 10 lee
</code></pre>
<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>
<pre><code>def foo(bar, lee):
    print(bar, lee)

l = [1,2]

foo(*l)
# 1 2
</code></pre>
<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"" rel=""noreferrer"">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>
<pre><code>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</code></pre>
<p>Also Python 3 adds new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"" rel=""noreferrer"">PEP 3102</a>):</p>
<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):
    pass
</code></pre>
<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>
<h3>Note:</h3>
<ul>
<li>A Python <code>dict</code>, semantically used for keyword argument passing, are arbitrarily ordered. However, in Python 3.6, keyword arguments are guaranteed to remember insertion order.</li>
<li>&quot;The order of elements in <code>**kwargs</code> now corresponds to the order in which keyword arguments were passed to the function.&quot; - <a href=""https://docs.python.org/3/whatsnew/3.6.html"" rel=""noreferrer"">Whatƒ??s New In Python 3.6</a></li>
<li>In fact, all dicts in CPython 3.6 will remember insertion order as an implementation detail, this becomes standard in Python 3.7.</li>
</ul>
",,"<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href=""http://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions"" rel=""noreferrer"">more on defining functions</a> in the Python documentation.</p>
<p>The <code>*args</code> will give you all function parameters <a href=""https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">as a tuple</a>:</p>
<pre><code>def foo(*args):
    for a in args:
        print(a)        

foo(1)
# 1

foo(1,2,3)
# 1
# 2
# 3
</code></pre>
<p>The <code>**kwargs</code> will give you all
<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>
<pre><code>def bar(**kwargs):
    for a in kwargs:
        print(a, kwargs[a])  

bar(name='one', age=27)
# name one
# age 27
</code></pre>
<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>
<pre><code>def foo(kind, *args, **kwargs):
   pass
</code></pre>
<p>It is also possible to use this the other way around:</p>
<pre><code>def foo(a, b, c):
    print(a, b, c)

obj = {'b':10, 'c':'lee'}

foo(100,**obj)
# 100 10 lee
</code></pre>
<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>
<pre><code>def foo(bar, lee):
    print(bar, lee)

l = [1,2]

foo(*l)
# 1 2
</code></pre>
<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href=""http://www.python.org/dev/peps/pep-3132/"" rel=""noreferrer"">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>
<pre><code>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</code></pre>
<p>Also Python 3 adds new semantic (refer <a href=""https://www.python.org/dev/peps/pep-3102/"" rel=""noreferrer"">PEP 3102</a>):</p>
<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):
    pass
</code></pre>
<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>
<h3>Note:</h3>
<ul>
<li>A Python <code>dict</code>, semantically used for keyword argument passing, are arbitrarily ordered. However, in Python 3.6, keyword arguments are guaranteed to remember insertion order.</li>
<li>&quot;The order of elements in <code>**kwargs</code> now corresponds to the order in which keyword arguments were passed to the function.&quot; - <a href=""https://docs.python.org/3/whatsnew/3.6.html"" rel=""noreferrer"">Whatƒ??s New In Python 3.6</a></li>
<li>In fact, all dicts in CPython 3.6 will remember insertion order as an implementation detail, this becomes standard in Python 3.7.</li>
</ul>
"
33,2,How do I select rows from a DataFrame based on column values?,"<p>How can I select rows from a <code>DataFrame</code> based on values in some column in Pandas?</p>
<p>In SQL, I would use:</p>
<pre class=""lang-sql prettyprint-override""><code>SELECT *
FROM table
WHERE column_name = some_value
</code></pre>
<p>I tried to look at Pandas' documentation, but I did not immediately find the answer.</p>
","How do I select rows from a DataFrame based on column values?<p>How can I select rows from a <code>DataFrame</code> based on values in some column in Pandas?</p>
<p>In SQL, I would use:</p>
<pre class=""lang-sql prettyprint-override""><code>SELECT *
FROM table
WHERE column_name = some_value
</code></pre>
<p>I tried to look at Pandas' documentation, but I did not immediately find the answer.</p>
",<python><pandas><dataframe>,select based rows column dataframe pandas values immediately sql look,"<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>

<pre><code>df.loc[df['column_name'] == some_value]
</code></pre>

<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>

<pre><code>df.loc[df['column_name'].isin(some_values)]
</code></pre>

<p>Combine multiple conditions with <code>&amp;</code>: </p>

<pre><code>df.loc[(df['column_name'] &gt;= A) &amp; (df['column_name'] &lt;= B)]
</code></pre>

<p>Note the parentheses. Due to Python's <a href=""https://docs.python.org/3/reference/expressions.html#operator-precedence"" rel=""noreferrer"">operator precedence rules</a>, <code>&amp;</code> binds more tightly than <code>&lt;=</code> and <code>&gt;=</code>. Thus, the parentheses in the last example are necessary. Without the parentheses </p>

<pre><code>df['column_name'] &gt;= A &amp; df['column_name'] &lt;= B
</code></pre>

<p>is parsed as </p>

<pre><code>df['column_name'] &gt;= (A &amp; df['column_name']) &lt;= B
</code></pre>

<p>which results in a <a href=""https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o"">Truth value of a Series is ambiguous error</a>.</p>

<hr>

<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>

<pre><code>df.loc[df['column_name'] != some_value]
</code></pre>

<p><code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>

<pre><code>df.loc[~df['column_name'].isin(some_values)]
</code></pre>

<hr>

<p>For example,</p>

<pre><code>import pandas as pd
import numpy as np
df = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),
                   'B': 'one one two three two two one three'.split(),
                   'C': np.arange(8), 'D': np.arange(8) * 2})
print(df)
#      A      B  C   D
# 0  foo    one  0   0
# 1  bar    one  1   2
# 2  foo    two  2   4
# 3  bar  three  3   6
# 4  foo    two  4   8
# 5  bar    two  5  10
# 6  foo    one  6  12
# 7  foo  three  7  14

print(df.loc[df['A'] == 'foo'])
</code></pre>

<p>yields</p>

<pre><code>     A      B  C   D
0  foo    one  0   0
2  foo    two  2   4
4  foo    two  4   8
6  foo    one  6  12
7  foo  three  7  14
</code></pre>

<hr>

<p>If you have multiple values you want to include, put them in a
list (or more generally, any iterable) and use <code>isin</code>:</p>

<pre><code>print(df.loc[df['B'].isin(['one','three'])])
</code></pre>

<p>yields</p>

<pre><code>     A      B  C   D
0  foo    one  0   0
1  bar    one  1   2
3  bar  three  3   6
6  foo    one  6  12
7  foo  three  7  14
</code></pre>

<hr>

<p>Note, however, that if you wish to do this many times, it is more efficient to
make an index first, and then use <code>df.loc</code>:</p>

<pre><code>df = df.set_index(['B'])
print(df.loc['one'])
</code></pre>

<p>yields</p>

<pre><code>       A  C   D
B              
one  foo  0   0
one  bar  1   2
one  foo  6  12
</code></pre>

<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>

<pre><code>df.loc[df.index.isin(['one','two'])]
</code></pre>

<p>yields</p>

<pre><code>       A  C   D
B              
one  foo  0   0
one  bar  1   2
two  foo  2   4
two  foo  4   8
two  bar  5  10
one  foo  6  12
</code></pre>
",,"<p>For selecting only specific columns out of multiple columns for a given value in Pandas:</p>
<pre><code>select col_name1, col_name2 from table where column_name = some_value.
</code></pre>
<p>Options <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html"" rel=""noreferrer""><code>loc</code></a>:</p>
<pre><code>df.loc[df['column_name'] == some_value, [col_name1, col_name2]]
</code></pre>
<p>or <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html"" rel=""noreferrer""><code>query</code></a>:</p>
<pre><code>df.query('column_name == some_value')[[col_name1, col_name2]]
</code></pre>
"
34,6,How to delete a file or folder in Python?,"<p>How do I delete a file or folder in Python?</p>
","How to delete a file or folder in Python?<p>How do I delete a file or folder in Python?</p>
",<python><file-io><directory><delete-file>,delete folder file python ,"<ul>
<li><p><a href=""http://docs.python.org/library/os.html#os.remove"" rel=""noreferrer""><code>os.remove()</code></a> removes a file.</p></li>
<li><p><a href=""http://docs.python.org/library/os.html#os.rmdir"" rel=""noreferrer""><code>os.rmdir()</code></a> removes an empty directory.</p></li>
<li><p><a href=""http://docs.python.org/library/shutil.html#shutil.rmtree"" rel=""noreferrer""><code>shutil.rmtree()</code></a> deletes a directory and all its contents.</p></li>
</ul>

<hr>

<p><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path"" rel=""noreferrer""><code>Path</code></a> objects from the Python 3.4+ <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> module also expose these instance methods:</p>

<ul>
<li><p><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink"" rel=""noreferrer""><code>pathlib.Path.unlink()</code></a> removes a file or symbolic link.</p></li>
<li><p><a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir"" rel=""noreferrer""><code>pathlib.Path.rmdir()</code></a> removes an empty directory.</p></li>
</ul>
",,"<h2>For deleting files:</h2>

<pre><code>os.unlink(path, *, dir_fd=None)
</code></pre>

<p>or </p>

<pre><code>os.remove(path, *, dir_fd=None)
</code></pre>

<p>Both functions are semantically same. This functions removes (deletes) the file path. If path is not a file and it is directory, then exception is raised.</p>

<h2>For deleting folders:</h2>

<pre><code>shutil.rmtree(path, ignore_errors=False, onerror=None)
</code></pre>

<p>or</p>

<pre><code>os.rmdir(path, *, dir_fd=None)
</code></pre>

<p>In order to remove whole directory trees, <code>shutil.rmtree()</code> can be used. <code>os.rmdir</code> only works when the directory is empty and exists.</p>

<h2>For deleting folders recursively towards parent:</h2>

<pre><code>os.removedirs(name)
</code></pre>

<p>It remove every empty parent directory with self until parent which has some content</p>

<blockquote>
  <p>ex. os.removedirs('abc/xyz/pqr') will remove the directories by order 'abc/xyz/pqr', 'abc/xyz' and 'abc' if they are empty. </p>
</blockquote>

<p>For more info check official doc: <a href=""https://docs.python.org/library/os.html#os.unlink"" rel=""noreferrer""><code>os.unlink</code></a> , <a href=""https://docs.python.org/library/os.html#os.remove"" rel=""noreferrer""><code>os.remove</code></a>, <a href=""https://docs.python.org/library/os.html#os.rmdir"" rel=""noreferrer""><code>os.rmdir</code></a> , <a href=""https://docs.python.org/library/shutil.html#shutil.rmtree"" rel=""noreferrer""><code>shutil.rmtree</code></a>, <a href=""https://docs.python.org/3/library/os.html#os.removedirs"" rel=""noreferrer""><code>os.removedirs</code></a></p>
"
35,3,Manually raising (throwing) an exception in Python,"<p>How can I raise an exception in Python so that it can later be caught via an <code>except</code> block?</p>
","Manually raising (throwing) an exception in Python<p>How can I raise an exception in Python so that it can later be caught via an <code>except</code> block?</p>
",<python><exception>,exception raising raise throwing caught manually later block python,"<blockquote>
<h2>How do I manually throw/raise an exception in Python?</h2>
</blockquote>
<p><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"" rel=""noreferrer"">Use the most specific Exception constructor that semantically fits your issue</a>.</p>
<p>Be specific in your message, e.g.:</p>
<pre><code>raise ValueError('A very specific bad thing happened.')
</code></pre>
<h2>Don't raise generic exceptions</h2>
<p>Avoid raising a generic <code>Exception</code>. To catch it, you'll have to catch all other more specific exceptions that subclass it.</p>
<h3>Problem 1: Hiding bugs</h3>
<pre><code>raise Exception('I know Python!') # Don't! If you catch, likely to hide bugs.
</code></pre>
<p>For example:</p>
<pre><code>def demo_bad_catch():
    try:
        raise ValueError('Represents a hidden bug, do not catch this')
        raise Exception('This is the exception you expect to handle')
    except Exception as error:
        print('Caught this error: ' + repr(error))

&gt;&gt;&gt; demo_bad_catch()
Caught this error: ValueError('Represents a hidden bug, do not catch this',)
</code></pre>
<h3>Problem 2: Won't catch</h3>
<p>And more specific catches won't catch the general exception:</p>
<pre><code>def demo_no_catch():
    try:
        raise Exception('general exceptions not caught by specific handling')
    except ValueError as e:
        print('we will not catch exception: Exception')
 

&gt;&gt;&gt; demo_no_catch()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 3, in demo_no_catch
Exception: general exceptions not caught by specific handling
</code></pre>
<h2>Best Practices: <code>raise</code> statement</h2>
<p><a href=""https://docs.python.org/3/library/exceptions.html#exception-hierarchy"" rel=""noreferrer"">Instead, use the most specific Exception constructor that semantically fits your issue</a>.</p>
<pre><code>raise ValueError('A very specific bad thing happened')
</code></pre>
<p>which also handily allows an arbitrary number of arguments to be passed to the constructor:</p>
<pre><code>raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') 
</code></pre>
<p>These arguments are accessed by the <code>args</code> attribute on the <code>Exception</code> object. For example:</p>
<pre><code>try:
    some_code_that_may_raise_our_value_error()
except ValueError as err:
    print(err.args)
</code></pre>
<p>prints</p>
<pre><code>('message', 'foo', 'bar', 'baz')    
</code></pre>
<p>In Python 2.5, an actual <code>message</code> attribute was added to <code>BaseException</code> in favor of encouraging users to subclass Exceptions and stop using <code>args</code>, but <a href=""http://www.python.org/dev/peps/pep-0352/#retracted-ideas"" rel=""noreferrer"">the introduction of <code>message</code> and the original deprecation of args has been retracted</a>.</p>
<h2>Best Practices: <code>except</code> clause</h2>
<p>When inside an except clause, you might want to, for example, log that a specific type of error happened, and then re-raise. The best way to do this while preserving the stack trace is to use a bare raise statement. For example:</p>
<pre><code>logger = logging.getLogger(__name__)

try:
    do_something_in_app_that_breaks_easily()
except AppError as error:
    logger.error(error)
    raise                 # just this!
    # raise AppError      # Don't do this, you'll lose the stack trace!
</code></pre>
<h3>Don't modify your errors... but if you insist.</h3>
<p>You can preserve the stacktrace (and error value) with <code>sys.exc_info()</code>, but <strong>this is way more error prone</strong> and <strong>has compatibility problems between Python 2 and 3</strong>, prefer to use a bare <code>raise</code> to re-raise.</p>
<p>To explain - the <code>sys.exc_info()</code> returns the type, value, and traceback.</p>
<pre><code>type, value, traceback = sys.exc_info()
</code></pre>
<p>This is the syntax in Python 2 - note this is not compatible with Python 3:</p>
<pre><code>raise AppError, error, sys.exc_info()[2] # avoid this.
# Equivalently, as error *is* the second object:
raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]
</code></pre>
<p>If you want to, you can modify what happens with your new raise - e.g. setting new <code>args</code> for the instance:</p>
<pre><code>def error():
    raise ValueError('oops!')

def catch_error_modify_message():
    try:
        error()
    except ValueError:
        error_type, error_instance, traceback = sys.exc_info()
        error_instance.args = (error_instance.args[0] + ' &lt;modification&gt;',)
        raise error_type, error_instance, traceback
</code></pre>
<p>And we have preserved the whole traceback while modifying the args. Note that this is <strong>not a best practice</strong> and it is <strong>invalid syntax</strong> in Python 3 (making keeping compatibility much harder to work around).</p>
<pre><code>&gt;&gt;&gt; catch_error_modify_message()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;stdin&gt;&quot;, line 3, in catch_error_modify_message
  File &quot;&lt;stdin&gt;&quot;, line 2, in error
ValueError: oops! &lt;modification&gt;
</code></pre>
<p>In <a href=""https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement"" rel=""noreferrer"">Python 3</a>:</p>
<pre><code>raise error.with_traceback(sys.exc_info()[2])
</code></pre>
<p>Again: avoid manually manipulating tracebacks. It's <a href=""https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement"" rel=""noreferrer"">less efficient</a> and more error prone. And if you're using threading and <code>sys.exc_info</code> you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)</p>
<h3>Python 3, Exception chaining</h3>
<p>In Python 3, you can chain Exceptions, which preserve tracebacks:</p>
<pre><code>raise RuntimeError('specific message') from error
</code></pre>
<p>Be aware:</p>
<ul>
<li>this <em>does</em> allow changing the error type raised, and</li>
<li>this is <em>not</em> compatible with Python 2.</li>
</ul>
<h3>Deprecated Methods:</h3>
<p>These can easily hide and even get into production code. You want to raise an exception, and doing them will raise an exception, <strong>but not the one intended!</strong></p>
<p><a href=""http://www.python.org/dev/peps/pep-3109/"" rel=""noreferrer"">Valid in Python 2, but not in Python 3</a> is the following:</p>
<pre><code>raise ValueError, 'message' # Don't do this, it's deprecated!
</code></pre>
<p>Only <a href=""https://docs.python.org/2/whatsnew/2.5.html#pep-352-exceptions-as-new-style-classes"" rel=""noreferrer"">valid in much older versions of Python</a> (2.4 and lower), you may still see people raising strings:</p>
<pre><code>raise 'message' # really really wrong. don't do this.
</code></pre>
<p>In all modern versions, this will actually raise a <code>TypeError</code>, because you're not raising a <code>BaseException</code> type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.</p>
<h2>Example Usage</h2>
<p>I raise Exceptions to warn consumers of my API if they're using it incorrectly:</p>
<pre><code>def api_func(foo):
    '''foo should be either 'baz' or 'bar'. returns something very useful.'''
    if foo not in _ALLOWED_ARGS:
        raise ValueError('{foo} wrong, use &quot;baz&quot; or &quot;bar&quot;'.format(foo=repr(foo)))
</code></pre>
<h2>Create your own error types when apropos</h2>
<blockquote>
<p><strong>&quot;I want to make an error on purpose, so that it would go into the except&quot;</strong></p>
</blockquote>
<p>You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:</p>
<pre><code>class MyAppLookupError(LookupError):
    '''raise this when there's a lookup error for my app'''
</code></pre>
<p>and usage:</p>
<pre><code>if important_key not in resource_dict and not ok_to_be_missing:
    raise MyAppLookupError('resource is missing, and that is not ok.')
</code></pre>
",,"<p>For the common case where you need to throw an exception in response to some unexpected conditions, and that you never intend to catch, but simply to fail fast to enable you to debug from there if it ever happens ƒ?? the most logical one seems to be <code>AssertionError</code>:</p>

<pre><code>if 0 &lt; distance &lt;= RADIUS:
    #Do something.
elif RADIUS &lt; distance:
    #Do something.
else:
    raise AssertionError(""Unexpected value of 'distance'!"", distance)
</code></pre>
"
36,4,How do you split a list (or iterable) into evenly sized chunks?,"<p>I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.</p>

<p>I was wondering if anyone had a good solution to this for lists of any length, e.g. using generators.</p>

<p>I was looking for something useful in <code>itertools</code> but I couldn't find anything obviously useful. Might've missed it, though.</p>

<p>Related question: <a href=""https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks"">What is the most ƒ??pythonicƒ? way to iterate over a list in chunks?</a></p>
","How do you split a list (or iterable) into evenly sized chunks?<p>I have a list of arbitrary length, and I need to split it up into equal size chunks and operate on it. There are some obvious ways to do this, like keeping a counter and two lists, and when the second list fills up, add it to the first list and empty the second list for the next round of data, but this is potentially extremely expensive.</p>

<p>I was wondering if anyone had a good solution to this for lists of any length, e.g. using generators.</p>

<p>I was looking for something useful in <code>itertools</code> but I couldn't find anything obviously useful. Might've missed it, though.</p>

<p>Related question: <a href=""https://stackoverflow.com/questions/434287/what-is-the-most-pythonic-way-to-iterate-over-a-list-in-chunks"">What is the most ƒ??pythonicƒ? way to iterate over a list in chunks?</a></p>
",<python><list><split><chunks>,chunks list useful length split second lists operate fills generators,"<p>Here's a generator that yields the chunks you want:</p>

<pre><code>def chunks(lst, n):
    """"""Yield successive n-sized chunks from lst.""""""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
</code></pre>

<hr>

<pre><code>import pprint
pprint.pprint(list(chunks(range(10, 75), 10)))
[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]
</code></pre>

<hr>

<p>If you're using Python 2, you should use <code>xrange()</code> instead of <code>range()</code>:</p>

<pre><code>def chunks(lst, n):
    """"""Yield successive n-sized chunks from lst.""""""
    for i in xrange(0, len(lst), n):
        yield lst[i:i + n]
</code></pre>

<hr>

<p>Also you can simply use list comprehension instead of writing a function, though it's a good idea to encapsulate operations like this in named functions so that your code is easier to understand. Python 3:</p>

<pre><code>[lst[i:i + n] for i in range(0, len(lst), n)]
</code></pre>

<p>Python 2 version:</p>

<pre><code>[lst[i:i + n] for i in xrange(0, len(lst), n)]
</code></pre>
",,"<p>Since I had to do something like this, here's my solution given a generator and a batch size:</p>

<pre><code>def pop_n_elems_from_generator(g, n):
    elems = []
    try:
        for idx in xrange(0, n):
            elems.append(g.next())
        return elems
    except StopIteration:
        return elems
</code></pre>
"
37,0,Check if a given key already exists in a dictionary,"<p>I wanted to test if a key exists in a dictionary before updating the value for the key.
I wrote the following code:</p>

<pre><code>if 'key1' in dict.keys():
  print ""blah""
else:
  print ""boo""
</code></pre>

<p>I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?</p>
","Check if a given key already exists in a dictionary<p>I wanted to test if a key exists in a dictionary before updating the value for the key.
I wrote the following code:</p>

<pre><code>if 'key1' in dict.keys():
  print ""blah""
else:
  print ""boo""
</code></pre>

<p>I think this is not the best way to accomplish this task. Is there a better way to test for a key in the dictionary?</p>
",<python><dictionary>,key test exists dictionary updating dictionary task wrote accomplish wanted,"<p><a href=""https://docs.python.org/reference/expressions.html#membership-test-operations"" rel=""noreferrer""><code>in</code></a> is the intended way to test for the existence of a key in a <a href=""https://docs.python.org/library/stdtypes.html#dict"" rel=""noreferrer""><code>dict</code></a>.</p>

<pre><code>d = {""key1"": 10, ""key2"": 23}

if ""key1"" in d:
    print(""this will execute"")

if ""nonexistent key"" in d:
    print(""this will not"")
</code></pre>

<p>If you wanted a default, you can always use <a href=""https://docs.python.org/library/stdtypes.html#dict.get"" rel=""noreferrer""><code>dict.get()</code></a>:</p>

<pre><code>d = dict()

for i in range(100):
    key = i % 10
    d[key] = d.get(key, 0) + 1
</code></pre>

<p>and if you wanted to always ensure a default value for any key you can either use <a href=""https://docs.python.org/library/stdtypes.html#dict.setdefault"" rel=""noreferrer""><code>dict.setdefault()</code></a> repeatedly or <a href=""https://docs.python.org/library/collections.html#collections.defaultdict"" rel=""noreferrer""><code>defaultdict</code></a> from the <a href=""https://docs.python.org/library/collections.html"" rel=""noreferrer""><code>collections</code></a> module, like so:</p>

<pre><code>from collections import defaultdict

d = defaultdict(int)

for i in range(100):
    d[i % 10] += 1
</code></pre>

<p>but in general, the <code>in</code> keyword is the best way to do it.</p>
",,"<H2>Python 2 only: (and Python&nbsp;2.7 supports `in` already)</H2>
<p>You can use the <code>has_key()</code> method:</p>
<pre><code>if dict.has_key('xyz')==1:
    # Update the value for the key
else:
    pass
</code></pre>
"
38,1,How can I install pip on Windows?,"<p><a href=""https://pip.pypa.io/en/stable/"" rel=""noreferrer""><code>pip</code></a> is a replacement for <a href=""http://setuptools.readthedocs.io/en/latest/easy_install.html"" rel=""noreferrer""><code>easy_install</code></a>. But should I install <code>pip</code> using <code>easy_install</code> on Windows? Is there a better way?</p>
","How can I install pip on Windows?<p><a href=""https://pip.pypa.io/en/stable/"" rel=""noreferrer""><code>pip</code></a> is a replacement for <a href=""http://setuptools.readthedocs.io/en/latest/easy_install.html"" rel=""noreferrer""><code>easy_install</code></a>. But should I install <code>pip</code> using <code>easy_install</code> on Windows? Is there a better way?</p>
",<python><windows><installation><pip><easy-install>,pip easyinstall windows install replacement better using way formatted formats,"<h2>Python 2.7.9+ and 3.4+</h2>

<p>Good news! <a href=""https://docs.python.org/3/whatsnew/3.4.html"" rel=""noreferrer"">Python 3.4</a> (released March 2014) and <a href=""https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7"" rel=""noreferrer"">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href=""http://en.wikipedia.org/wiki/Ruby_%28programming_language%29"" rel=""noreferrer"">Ruby</a>, <a href=""http://en.wikipedia.org/wiki/Node.js"" rel=""noreferrer"">Node.js</a>, <a href=""http://en.wikipedia.org/wiki/Haskell_%28programming_language%29"" rel=""noreferrer"">Haskell</a>, <a href=""http://en.wikipedia.org/wiki/Perl"" rel=""noreferrer"">Perl</a>, <a href=""http://en.wikipedia.org/wiki/Go_%28programming_language%29"" rel=""noreferrer"">Go</a>&mdash;almost every other contemporary language with a majority open-source community. Thank you, Python.</p>

<p>If you do find that pip is not available when using Python 3.4+ or Python 2.7.9+, simply execute e.g.:</p>

<pre><code>py -3 -m ensurepip
</code></pre>

<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href=""https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719"">in the Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>

<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>

<h2>Python 2 ƒ?? 2.7.8 and Python 3 ƒ?? 3.3</h2>

<p>Flying in the face of its <a href=""http://www.python.org/about/"" rel=""noreferrer"">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was&mdash;until recently&mdash;ironically difficult to install.</p>

<h3>Official instructions</h3>

<p>Per <a href=""https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip"" rel=""noreferrer"">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>

<p>Download <a href=""https://bootstrap.pypa.io/get-pip.py"" rel=""noreferrer""><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>

<pre><code>python get-pip.py
</code></pre>

<p>You possibly need an administrator command prompt to do this. Follow <em><a href=""http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx"" rel=""noreferrer"">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>

<p>This installs the pip package, which (in Windows) contains ...\Scripts\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,</p>

<h3>Alternative instructions</h3>

<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.</p>

<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>

<ol>
<li><a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools"" rel=""noreferrer"">Install setuptools</a></li>
<li><a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip"" rel=""noreferrer"">Install pip</a></li>
</ol>

<p>For me, this installed Pip at <code>C:\Python27\Scripts\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\Python27\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>

<pre><code>pip install httpie
</code></pre>

<p>There you go (hopefully)! Solutions for common problems are given below:</p>

<h3>Proxy problems</h3>

<p>If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables <a href=""http://docs.python.org/2/library/urllib.html"" rel=""noreferrer""><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>

<pre><code>http://proxy_url:port
http://username:password@proxy_url:port
</code></pre>

<p>If you're really unlucky, your proxy might be a Microsoft <a href=""https://en.wikipedia.org/wiki/NT_LAN_Manager"" rel=""noreferrer"">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href=""http://cntlm.sourceforge.net/"" rel=""noreferrer"">http://cntlm.sourceforge.net/</a></p>

<h3>Unable to find vcvarsall.bat</h3>

<p>Python modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>

<blockquote>
  <p>Error: Unable to find vcvarsall.bat</p>
</blockquote>

<p>You can fix that by <a href=""https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat"">installing a C++ compiler</a> such as <a href=""http://en.wikipedia.org/wiki/MinGW"" rel=""noreferrer"">MinGW</a> or <a href=""http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions"" rel=""noreferrer"">Visual C++</a>. Microsoft actually ships one specifically for use with Python. Or try <em><a href=""http://aka.ms/vcpython27"" rel=""noreferrer"">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>

<p>Often though it's easier to check <a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/"" rel=""noreferrer"">Christoph's site</a> for your package.</p>
",,"<p>To use pip, it is not mandatory that you need to install pip in the system directly. You can use it through <a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer""><code>virtualenv</code></a>. What you can do is follow these steps:</p>

<ul>
<li>Download virtualenv tar.gz file from <a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer"">https://pypi.python.org/pypi/virtualenv</a></li>
<li>Unzip it with 7zip or some other tool</li>
</ul>

<p>We normally need to install Python packages for one particular project. So, now create a project folder, letƒ??s say myproject.</p>

<ul>
<li>Copy the <strong>virtualenv.py</strong> file from the decompressed folder of <code>virtualenv</code>, and paste inside the <strong>myproject</strong> folder</li>
</ul>

<p>Now create a virtual environment, letƒ??s say <strong>myvirtualenv</strong> as follows, inside the <strong>myproject</strong> folder:</p>

<pre><code>python virtualenv.py myvirtualenv
</code></pre>

<p>It will show you:</p>

<pre><code>New python executable in myvirtualenv\Scripts\python.exe
Installing setuptools....................................done.
Installing pip.........................done.
</code></pre>

<p>Now your virtual environment, <strong>myvirtualenv</strong>, is created inside your project folder. You might notice, pip is now installed inside you virtual environment. All you need to do is activate the virtual environment with the following command.</p>

<pre><code>myvirtualenv\Scripts\activate
</code></pre>

<p>You will see the following at the command prompt:</p>

<pre><code>(myvirtualenv) PATH\TO\YOUR\PROJECT\FOLDER&gt;pip install package_name
</code></pre>

<p>Now you can start using pip, but make sure you have activated the virtualenv looking at the left of your prompt.</p>

<p>This is one of the easiest way to install pip i.e. inside virtual environment, but you need to have virtualenv.py file with you.</p>

<p>For more ways to install pip/virtualenv/virtualenvwrapper, you can refer to <a href=""http://thegauraw.tumblr.com"" rel=""noreferrer"">thegauraw.tumblr.com</a>.</p>
"
39,3,How to access environment variable values,"<p>I set an environment variable that I want to access in my Python application. How do I get its value?</p>
","How to access environment variable values<p>I set an environment variable that I want to access in my Python application. How do I get its value?</p>
",<python><environment-variables>,environment access variable application set value want python frotz,"<p>Environment variables are accessed through <a href=""https://docs.python.org/library/os.html#os.environ"" rel=""noreferrer"">os.environ</a></p>
<pre><code>import os
print(os.environ['HOME'])
</code></pre>
<p>Or you can see a list of all the environment variables using:</p>
<pre><code>os.environ
</code></pre>
<p>As sometimes you might need to see a complete list!</p>
<pre><code># using get will return `None` if a key is not present rather than raise a `KeyError`
print(os.environ.get('KEY_THAT_MIGHT_EXIST'))

# os.getenv is equivalent, and can also give a default value instead of `None`
print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))
</code></pre>
<p>The <a href=""https://docs.python.org/install/index.html#how-installation-works"" rel=""noreferrer"">Python default installation</a> location on Windows is <code>C:\Python</code>. If you want to find out while running python you can do:</p>
<pre><code>import sys
print(sys.prefix)
</code></pre>
",,"<p>Environment variables are accessed through <a href=""https://docs.python.org/library/os.html#os.environ"" rel=""noreferrer"">os.environ</a></p>
<pre><code>import os
print(os.environ['HOME'])
</code></pre>
<p>Or you can see a list of all the environment variables using:</p>
<pre><code>os.environ
</code></pre>
<p>As sometimes you might need to see a complete list!</p>
<pre><code># using get will return `None` if a key is not present rather than raise a `KeyError`
print(os.environ.get('KEY_THAT_MIGHT_EXIST'))

# os.getenv is equivalent, and can also give a default value instead of `None`
print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))
</code></pre>
<p>The <a href=""https://docs.python.org/install/index.html#how-installation-works"" rel=""noreferrer"">Python default installation</a> location on Windows is <code>C:\Python</code>. If you want to find out while running python you can do:</p>
<pre><code>import sys
print(sys.prefix)
</code></pre>
"
40,6,Find the current directory and file's directory,"<p>In Python, what commands can I use to find:</p>
<ol>
<li>the current directory (where I was in the terminal when I ran the Python script), and</li>
<li>where the file I am executing is?</li>
</ol>
","Find the current directory and file's directory<p>In Python, what commands can I use to find:</p>
<ol>
<li>the current directory (where I was in the terminal when I ran the Python script), and</li>
<li>where the file I am executing is?</li>
</ol>
",<python><directory>,current directory andwhere directory file ran terminal commands executing script,"<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>

<pre><code>import os 
dir_path = os.path.dirname(os.path.realpath(__file__))
</code></pre>

<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>

<hr>

<p>To get the current working directory use </p>

<pre><code>import os
cwd = os.getcwd()
</code></pre>

<hr>

<p>Documentation references for the modules, constants and functions used above:</p>

<ul>
<li>The <a href=""https://docs.python.org/library/os.html""><code>os</code></a> and <a href=""https://docs.python.org/library/os.path.html#module-os.path""><code>os.path</code></a> modules.</li>
<li>The <a href=""https://docs.python.org/reference/datamodel.html""><code>__file__</code></a> constant</li>
<li><a href=""https://docs.python.org/library/os.path.html#os.path.realpath""><code>os.path.realpath(path)</code></a> (returns <em>""the canonical path of the specified filename, eliminating any symbolic links encountered in the path""</em>)</li>
<li><a href=""https://docs.python.org/library/os.path.html#os.path.dirname""><code>os.path.dirname(path)</code></a> (returns <em>""the directory name of pathname <code>path</code>""</em>)</li>
<li><a href=""https://docs.python.org/library/os.html#os.getcwd""><code>os.getcwd()</code></a> (returns <em>""a string representing the current working directory""</em>)</li>
<li><a href=""https://docs.python.org/library/os.html#os.chdir""><code>os.chdir(path)</code></a> (<em>""change the current working directory to <code>path</code>""</em>)</li>
</ul>
",,"<p><a href=""https://sourceware.org/gdb/onlinedocs/gdb/Working-Directory.html"" rel=""noreferrer"">Current working directory</a>:  <a href=""https://docs.python.org/2/library/os.html#os.getcwd"" rel=""noreferrer""><code>os.getcwd()</code></a></p>
<p>And the <a href=""http://docs.python.org/reference/datamodel.html"" rel=""noreferrer""><code>__file__</code> attribute</a> can help you find out where the file you are executing is located. This Stack?ÿOverflow post explains everything:  <em><a href=""https://stackoverflow.com/questions/2632199/how-do-i-get-the-path-of-the-current-executed-file-in-python"">How do I get the path of the current executed file in Python?</a></em></p>
"
41,5,Converting string into datetime,"<p>I've got a huge list of date-times like this as strings:</p>

<pre><code>Jun 1 2005  1:33PM
Aug 28 1999 12:00AM
</code></pre>

<p>I'm going to be shoving these back into proper datetime fields in a database so I need to magic them into real datetime objects. </p>

<p>This is going through Django's ORM so I can't use SQL to do the conversion on insert.</p>
","Converting string into datetime<p>I've got a huge list of date-times like this as strings:</p>

<pre><code>Jun 1 2005  1:33PM
Aug 28 1999 12:00AM
</code></pre>

<p>I'm going to be shoving these back into proper datetime fields in a database so I need to magic them into real datetime objects. </p>

<p>This is going through Django's ORM so I can't use SQL to do the conversion on insert.</p>
",,going datetime shoving orm huge magic insert sql conversion,"<p><code>datetime.strptime</code> is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:</p>
<pre><code>from datetime import datetime

datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
</code></pre>
<p>The resulting <code>datetime</code> object is timezone-naive.</p>
<p>Links:</p>
<ul>
<li><p>Python documentation for <code>strptime</code>: <a href=""https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer"" title=""datetime.datetime.strptime"">Python 2</a>, <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime"" rel=""noreferrer"">Python 3</a></p>
</li>
<li><p>Python documentation for <code>strptime</code>/<code>strftime</code> format strings: <a href=""https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"" title=""strftime-and-strptime-behavior"">Python 2</a>, <a href=""https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"">Python 3</a></p>
</li>
<li><p><a href=""http://strftime.org/"" rel=""noreferrer"">strftime.org</a> is also a really nice reference for strftime</p>
</li>
</ul>
<p>Notes:</p>
<ul>
<li><code>strptime</code> = &quot;string parse time&quot;</li>
<li><code>strftime</code> = &quot;string format time&quot;</li>
<li>Pronounce it out loud today &amp; you won't have to search for it again in 6 months.</li>
</ul>
<p>Also, as seen in a comment made by @Izkata, if you want a date instead of a datetime, going through datetime handles it nicely: datetime.strptime('Jun 1 2005', '%b %d %Y').date() == date(2005, 6, 1)</p>
",,"<p>Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.</p>

<pre><code>import pandas as pd

dates = ['2015-12-25', '2015-12-26']

# 1) Use a list comprehension.
&gt;&gt;&gt; [d.date() for d in pd.to_datetime(dates)]
[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]

# 2) Convert the dates to a DatetimeIndex and extract the python dates.
&gt;&gt;&gt; pd.DatetimeIndex(dates).date.tolist()
[datetime.date(2015, 12, 25), datetime.date(2015, 12, 26)]
</code></pre>

<p><strong>Timings</strong></p>

<pre><code>dates = pd.DatetimeIndex(start='2000-1-1', end='2010-1-1', freq='d').date.tolist()

&gt;&gt;&gt; %timeit [d.date() for d in pd.to_datetime(dates)]
# 100 loops, best of 3: 3.11 ms per loop

&gt;&gt;&gt; %timeit pd.DatetimeIndex(dates).date.tolist()
# 100 loops, best of 3: 6.85 ms per loop
</code></pre>

<p>And here is how to convert the OP's original date-time examples:</p>

<pre><code>datetimes = ['Jun 1 2005  1:33PM', 'Aug 28 1999 12:00AM']

&gt;&gt;&gt; pd.to_datetime(datetimes).to_pydatetime().tolist()
[datetime.datetime(2005, 6, 1, 13, 33), 
 datetime.datetime(1999, 8, 28, 0, 0)]
</code></pre>

<p>There are many options for converting from the strings to Pandas Timestamps using <code>to_datetime</code>, so check the <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html"" rel=""noreferrer"">docs</a> if you need anything special.</p>

<p>Likewise, Timestamps have many <a href=""http://pandas.pydata.org/pandas-docs/stable/api.html#datetimelike-properties"" rel=""noreferrer"">properties and methods</a> that can be accessed in addition to <code>.date</code></p>
"
42,3,"Why is ""1000000000000000 in range(1000000000000001)"" so fast in Python 3?","<p>It is my understanding that the <code>range()</code> function, which is actually <a href=""https://docs.python.org/3/library/stdtypes.html#typesseq-range"" rel=""noreferrer"">an object type in Python 3</a>, generates its contents on the fly, similar to a generator.</p>
<p>This being the case, I would have expected the following line to take an inordinate amount of time because, in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated:</p>
<pre><code>1_000_000_000_000_000 in range(1_000_000_000_000_001)
</code></pre>
<p>Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous).</p>
<p>I have also tried things like this, but the calculation is still almost instant:</p>
<pre><code># count by tens
1_000_000_000_000_000_000_000 in range(0,1_000_000_000_000_000_000_001,10)
</code></pre>
<p>If I try to implement my own range function, the result is not so nice!</p>
<pre><code>def my_crappy_range(N):
    i = 0
    while i &lt; N:
        yield i
        i += 1
    return
</code></pre>
<p>What is the <code>range()</code> object doing under the hood that makes it so fast?</p>
<hr />
<p><a href=""https://stackoverflow.com/a/30081318/2437514"">Martijn Pieters's answer</a> was chosen for its completeness, but also see <a href=""https://stackoverflow.com/a/30081894/2437514"">abarnert's first answer</a> for a good discussion of what it means for <code>range</code> to be a full-fledged <em>sequence</em> in Python 3, and some information/warning regarding potential inconsistency for <code>__contains__</code> function optimization across Python implementations. <a href=""https://stackoverflow.com/a/30088140/2437514"">abarnert's other answer</a> goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of <code>xrange</code> in Python 2). Answers <a href=""https://stackoverflow.com/a/30081467/2437514"">by poke</a> and <a href=""https://stackoverflow.com/a/30081470/2437514"">by wim</a> provide the relevant C source code and explanations for those who are interested.</p>
","Why is ""1000000000000000 in range(1000000000000001)"" so fast in Python 3?<p>It is my understanding that the <code>range()</code> function, which is actually <a href=""https://docs.python.org/3/library/stdtypes.html#typesseq-range"" rel=""noreferrer"">an object type in Python 3</a>, generates its contents on the fly, similar to a generator.</p>
<p>This being the case, I would have expected the following line to take an inordinate amount of time because, in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated:</p>
<pre><code>1_000_000_000_000_000 in range(1_000_000_000_000_001)
</code></pre>
<p>Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous).</p>
<p>I have also tried things like this, but the calculation is still almost instant:</p>
<pre><code># count by tens
1_000_000_000_000_000_000_000 in range(0,1_000_000_000_000_000_000_001,10)
</code></pre>
<p>If I try to implement my own range function, the result is not so nice!</p>
<pre><code>def my_crappy_range(N):
    i = 0
    while i &lt; N:
        yield i
        i += 1
    return
</code></pre>
<p>What is the <code>range()</code> object doing under the hood that makes it so fast?</p>
<hr />
<p><a href=""https://stackoverflow.com/a/30081318/2437514"">Martijn Pieters's answer</a> was chosen for its completeness, but also see <a href=""https://stackoverflow.com/a/30081894/2437514"">abarnert's first answer</a> for a good discussion of what it means for <code>range</code> to be a full-fledged <em>sequence</em> in Python 3, and some information/warning regarding potential inconsistency for <code>__contains__</code> function optimization across Python implementations. <a href=""https://stackoverflow.com/a/30088140/2437514"">abarnert's other answer</a> goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of <code>xrange</code> in Python 2). Answers <a href=""https://stackoverflow.com/a/30081467/2437514"">by poke</a> and <a href=""https://stackoverflow.com/a/30081470/2437514"">by wim</a> provide the relevant C source code and explanations for those who are interested.</p>
",<python><performance><python-3.x><range><python-internals>,range optimization quadrillion abarnert answer calculation interested fast function python,"<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a smart <a href=""https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence"" rel=""noreferrer"">sequence object</a> that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>
<p>The object also implements the <a href=""https://docs.python.org/3/reference/datamodel.html#object.__contains__"" rel=""noreferrer""><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a (near) constant time operation <sup>*</sup>. There is never a need to scan through all possible integers in the range.</p>
<p>From the <a href=""https://docs.python.org/3/library/stdtypes.html#range"" rel=""noreferrer""><code>range()</code> object documentation</a>:</p>
<blockquote>
<p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>
</blockquote>
<p>So at a minimum, your <code>range()</code> object would do:</p>
<pre><code>class my_range:
    def __init__(self, start, stop=None, step=1, /):
        if stop is None:
            start, stop = 0, start
        self.start, self.stop, self.step = start, stop, step
        if step &lt; 0:
            lo, hi, step = stop, start, -step
        else:
            lo, hi = start, stop
        self.length = 0 if lo &gt; hi else ((hi - lo - 1) // step) + 1

    def __iter__(self):
        current = self.start
        if self.step &lt; 0:
            while current &gt; self.stop:
                yield current
                current += self.step
        else:
            while current &lt; self.stop:
                yield current
                current += self.step

    def __len__(self):
        return self.length

    def __getitem__(self, i):
        if i &lt; 0:
            i += self.length
        if 0 &lt;= i &lt; self.length:
            return self.start + i * self.step
        raise IndexError('my_range object index out of range')

    def __contains__(self, num):
        if self.step &lt; 0:
            if not (self.stop &lt; num &lt;= self.start):
                return False
        else:
            if not (self.start &lt;= num &lt; self.stop):
                return False
        return (num - self.start) % self.step == 0
</code></pre>
<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>
<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href=""http://bugs.python.org/issue1766304"" rel=""noreferrer"">Python issue</a> that implemented the containment test.</p>
<hr />
<p>* <em>Near</em> constant time because Python integers are unbounded and so math operations also grow in time as N grows, making this a O(log N) operation. Since itƒ??s all executed in optimised C code and Python stores integer values in 30-bit chunks, youƒ??d run out of memory before you saw any performance impact due to the size of the integers involved here.</p>
",,"<p>To add to Martijnƒ??s answer, this is the relevant part of <a href=""https://hg.python.org/cpython/file/7f8cd879687b/Objects/rangeobject.c#l415"" rel=""noreferrer"">the source</a> (in C, as the range object is written in native code):</p>
<pre class=""lang-c prettyprint-override""><code>static int
range_contains(rangeobject *r, PyObject *ob)
{
    if (PyLong_CheckExact(ob) || PyBool_Check(ob))
        return range_contains_long(r, ob);

    return (int)_PySequence_IterSearch((PyObject*)r, ob,
                                       PY_ITERSEARCH_CONTAINS);
}
</code></pre>
<p>So for <code>PyLong</code> objects (which is <code>int</code> in Python 3), it will use the <code>range_contains_long</code> function to determine the result. And that function essentially checks if <code>ob</code> is in the specified range (although it looks a bit more complex in C).</p>
<p>If itƒ??s not an <code>int</code> object, it falls back to iterating until it finds the value (or not).</p>
<p>The whole logic could be translated to pseudo-Python like this:</p>
<pre><code>def range_contains (rangeObj, obj):
    if isinstance(obj, int):
        return range_contains_long(rangeObj, obj)

    # default logic by iterating
    return any(obj == x for x in rangeObj)

def range_contains_long (r, num):
    if r.step &gt; 0:
        # positive step: r.start &lt;= num &lt; r.stop
        cmp2 = r.start &lt;= num
        cmp3 = num &lt; r.stop
    else:
        # negative step: r.start &gt;= num &gt; r.stop
        cmp2 = num &lt;= r.start
        cmp3 = r.stop &lt; num

    # outside of the range boundaries
    if not cmp2 or not cmp3:
        return False

    # num must be on a valid step inside the boundaries
    return (num - r.start) % r.step == 0
</code></pre>
"
43,5,How do I parse a string to a float or int?,"<p>In Python, how can I parse a numeric string like</p>
<pre><code>&quot;545.2222&quot; 
</code></pre>
<p>to its corresponding float value,</p>
<pre><code>545.2222
</code></pre>
<p>? Or parse the string <code>&quot;31&quot;</code> to an integer, <code>31</code>?</p>
<p>I just want to know how to parse a <em>float</em> <code>str</code> to a <code>float</code>, and (separately) an <em>int</em> <code>str</code> to an <code>int</code>.</p>
","How do I parse a string to a float or int?<p>In Python, how can I parse a numeric string like</p>
<pre><code>&quot;545.2222&quot; 
</code></pre>
<p>to its corresponding float value,</p>
<pre><code>545.2222
</code></pre>
<p>? Or parse the string <code>&quot;31&quot;</code> to an integer, <code>31</code>?</p>
<p>I just want to know how to parse a <em>float</em> <code>str</code> to a <code>float</code>, and (separately) an <em>int</em> <code>str</code> to an <code>int</code>.</p>
",<python><parsing><floating-point><type-conversion><integer>,float parse int string str liketo corresponding separately numeric integer,"<pre><code>&gt;&gt;&gt; a = ""545.2222""
&gt;&gt;&gt; float(a)
545.22220000000004
&gt;&gt;&gt; int(float(a))
545
</code></pre>
",,"<p>The <a href=""http://en.wikipedia.org/wiki/YAML"" rel=""noreferrer"">YAML</a> parser can help you figure out what datatype your string is. Use <code>yaml.load()</code>, and then you can use <code>type(result)</code> to test for type:</p>

<pre><code>&gt;&gt;&gt; import yaml

&gt;&gt;&gt; a = ""545.2222""
&gt;&gt;&gt; result = yaml.load(a)
&gt;&gt;&gt; result
545.22220000000004
&gt;&gt;&gt; type(result)
&lt;type 'float'&gt;

&gt;&gt;&gt; b = ""31""
&gt;&gt;&gt; result = yaml.load(b)
&gt;&gt;&gt; result
31
&gt;&gt;&gt; type(result)
&lt;type 'int'&gt;

&gt;&gt;&gt; c = ""HI""
&gt;&gt;&gt; result = yaml.load(c)
&gt;&gt;&gt; result
'HI'
&gt;&gt;&gt; type(result)
&lt;type 'str'&gt;
</code></pre>
"
44,4,How to get the last element of a list,"<p>In Python, how do you get the last element of a list?</p>
","How to get the last element of a list<p>In Python, how do you get the last element of a list?</p>
",<python><list><indexing>,element listin list python formatting formatted formats format form,"<p><code>some_list[-1]</code> is the shortest and most Pythonic.</p>
<p>In fact, you can do much more with this syntax. The <code>some_list[-n]</code> syntax gets the nth-to-last element. So <code>some_list[-1]</code> gets the last element, <code>some_list[-2]</code> gets the second to last, etc, all the way down to <code>some_list[-len(some_list)]</code>, which gives you the first element.</p>
<p>You can also set list elements in this way. For instance:</p>
<pre><code>&gt;&gt;&gt; some_list = [1, 2, 3]
&gt;&gt;&gt; some_list[-1] = 5 # Set the last element
&gt;&gt;&gt; some_list[-2] = 3 # Set the second to last element
&gt;&gt;&gt; some_list
[1, 3, 5]
</code></pre>
<p>Note that getting a list item by index will raise an <a href=""https://docs.python.org/3/library/exceptions.html#IndexError"" rel=""noreferrer""><code>IndexError</code></a> if the expected item doesn't exist. This means that <code>some_list[-1]</code> will raise an exception if <code>some_list</code> is empty, because an empty list can't have a last element.</p>
",,"<p>Accessing the last element from the list in Python:</p>
<p><strong>1: Access the last element with negative indexing -1</strong></p>
<pre><code>&gt;&gt; data = ['s','t','a','c','k','o','v','e','r','f','l','o','w']
&gt;&gt; data[-1]
'w'
</code></pre>
<p><strong>2. Access the last element with pop() method</strong></p>
<pre><code>&gt;&gt; data = ['s','t','a','c','k','o','v','e','r','f','l','o','w']
&gt;&gt; data.pop()
'w'
</code></pre>
<p>However, pop method will remove the last element from the list.</p>
"
45,5,How do I get a substring of a string in Python?,"<p>Is there a way to substring a string in Python, to get a new string from the third character to the end of the string?</p>

<p>Maybe like <code>myString[2:end]</code>?</p>

<p>If leaving the second part means 'till the end', and if you leave the first part, does it start from the start?</p>
","How do I get a substring of a string in Python?<p>Is there a way to substring a string in Python, to get a new string from the third character to the end of the string?</p>

<p>Maybe like <code>myString[2:end]</code>?</p>

<p>If leaving the second part means 'till the end', and if you leave the first part, does it start from the start?</p>
",<python><string><substring>,end string substring start leaving leave means character,"<pre><code>&gt;&gt;&gt; x = ""Hello World!""
&gt;&gt;&gt; x[2:]
'llo World!'
&gt;&gt;&gt; x[:2]
'He'
&gt;&gt;&gt; x[:-2]
'Hello Worl'
&gt;&gt;&gt; x[-2:]
'd!'
&gt;&gt;&gt; x[2:-2]
'llo Worl'
</code></pre>

<p>Python calls this concept ""slicing"" and it works on more than just strings. Take a look <a href=""https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation"">here</a> for a comprehensive introduction.</p>
",,"<p>You've got it right there except for ""end"". It's called slice notation. Your example should read:</p>

<pre><code>new_sub_string = myString[2:]
</code></pre>

<p>If you leave out the second parameter it is implicitly the end of the string.</p>
"
46,1,How to upgrade all Python packages with pip,"<p>Is it possible to upgrade all Python packages at one time with <strong><a href=""https://pypi.python.org/pypi/pip"" rel=""noreferrer""><code>pip</code></a></strong>?</p>
<p><strong>Note</strong>: that there is <a href=""https://github.com/pypa/pip/issues/4551"" rel=""noreferrer"">a feature request</a> for this on the official issue tracker.</p>
","How to upgrade all Python packages with pip<p>Is it possible to upgrade all Python packages at one time with <strong><a href=""https://pypi.python.org/pypi/pip"" rel=""noreferrer""><code>pip</code></a></strong>?</p>
<p><strong>Note</strong>: that there is <a href=""https://github.com/pypa/pip/issues/4551"" rel=""noreferrer"">a feature request</a> for this on the official issue tracker.</p>
",<python><pip>,upgrade packages tracker official request feature issue note pip,"<p>There isn't a built-in flag yet, but you can use</p>

<pre><code>pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
</code></pre>

<p>Note: there are infinite potential variations for this. I'm trying to keep this answer short and simple, but please do suggest variations in the comments!</p>

<p>In older version of <code>pip</code>, you can use this instead:</p>

<pre><code>pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
</code></pre>

<p>The <code>grep</code> is to skip editable (""-e"") package definitions, as suggested by @jawache. (Yes, you could replace <code>grep</code>+<code>cut</code> with <code>sed</code> or <code>awk</code> or <code>perl</code> or...).</p>

<p>The <code>-n1</code> flag for <code>xargs</code> prevents stopping everything if updating one package fails (thanks <a href=""https://stackoverflow.com/users/339505/andsens"">@andsens</a>).</p>
",,"<p>You can just print the packages that are outdated:</p>
<pre><code>pip freeze | cut -d = -f 1 | xargs -n 1 pip search | grep -B2 'LATEST:'
</code></pre>
"
47,2,Renaming column names in Pandas,"<p>I have a DataFrame using Pandas and column labels that I need to edit to replace the original column labels.</p>
<p>I'd like to change the column names in a DataFrame <code>A</code> where the original column names are:</p>
<pre><code>['$a', '$b', '$c', '$d', '$e']
</code></pre>
<p>to</p>
<pre><code>['a', 'b', 'c', 'd', 'e'].
</code></pre>
<p>I have the edited column names stored it in a list, but I don't know how to replace the column names.</p>
","Renaming column names in Pandas<p>I have a DataFrame using Pandas and column labels that I need to edit to replace the original column labels.</p>
<p>I'd like to change the column names in a DataFrame <code>A</code> where the original column names are:</p>
<pre><code>['$a', '$b', '$c', '$d', '$e']
</code></pre>
<p>to</p>
<pre><code>['a', 'b', 'c', 'd', 'e'].
</code></pre>
<p>I have the edited column names stored it in a list, but I don't know how to replace the column names.</p>
",<python><pandas><replace><dataframe><rename>,column names labels original replace dataframe toi renaming edited stored,"<p>Just assign it to the <code>.columns</code> attribute:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})
&gt;&gt;&gt; df
   $a  $b
0   1  10
1   2  20

&gt;&gt;&gt; df.columns = ['a', 'b']
&gt;&gt;&gt; df
   a   b
0  1  10
1  2  20
</code></pre>
",,"<p>Assuming you can use a regular expression, this solution <em>removes</em> the need of manual encoding using a regular expression:</p>
<pre><code>import pandas as pd
import re

srch = re.compile(r&quot;\w+&quot;)

data = pd.read_csv(&quot;CSV_FILE.csv&quot;)
cols = data.columns
new_cols = list(map(lambda v:v.group(), (list(map(srch.search, cols)))))
data.columns = new_cols
</code></pre>
"
48,0,How can I remove a key from a Python dictionary?,"<p>When deleting a key from a dictionary, I use:</p>
<pre><code>if 'key' in my_dict:
    del my_dict['key']
</code></pre>
<p>Is there a one line way of doing this?</p>
","How can I remove a key from a Python dictionary?<p>When deleting a key from a dictionary, I use:</p>
<pre><code>if 'key' in my_dict:
    del my_dict['key']
</code></pre>
<p>Is there a one line way of doing this?</p>
",<python><dictionary><data-structures><unset>,key dictionary deleting remove line use way python foo forgotten,"<p>To delete a key regardless of whether it is in the dictionary, use the two-argument form of <a href=""http://docs.python.org/library/stdtypes.html#dict.pop"" rel=""noreferrer""><code>dict.pop()</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>my_dict.pop('key', None)
</code></pre>
<p>This will return <code>my_dict[key]</code> if <code>key</code> exists in the dictionary, and <code>None</code> otherwise. If the second parameter is not specified (i.e. <code>my_dict.pop('key')</code>) and <code>key</code> does not exist, a <code>KeyError</code> is raised.</p>
<p>To delete a key that is guaranteed to exist, you can also use:</p>
<pre><code>del my_dict['key']
</code></pre>
<p>This will raise a <code>KeyError</code> if the key is not in the dictionary.</p>
",,"<p><code>del my_dict[key]</code> is slightly faster than <code>my_dict.pop(key)</code> for removing a key from a dictionary when the key exists</p>

<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; setup = ""d = {i: i for i in range(100000)}""

&gt;&gt;&gt; timeit.timeit(""del d[3]"", setup=setup, number=1)
1.79e-06
&gt;&gt;&gt; timeit.timeit(""d.pop(3)"", setup=setup, number=1)
2.09e-06
&gt;&gt;&gt; timeit.timeit(""d2 = {key: val for key, val in d.items() if key != 3}"", setup=setup, number=1)
0.00786
</code></pre>

<p>But when the key doesn't exist <code>if key in my_dict: del my_dict[key]</code> is slightly faster than <code>my_dict.pop(key, None)</code>. Both are at least three times faster than <code>del</code> in a <code>try</code>/<code>except</code> statement:</p>

<pre><code>&gt;&gt;&gt; timeit.timeit(""if 'missing key' in d: del d['missing key']"", setup=setup)
0.0229
&gt;&gt;&gt; timeit.timeit(""d.pop('missing key', None)"", setup=setup)
0.0426
&gt;&gt;&gt; try_except = """"""
... try:
...     del d['missing key']
... except KeyError:
...     pass
... """"""
&gt;&gt;&gt; timeit.timeit(try_except, setup=setup)
0.133
</code></pre>
"
49,4,How do I sort a list of dictionaries by a value of the dictionary?,"<p>I have a list of dictionaries and want each item to be sorted by a specific value.</p>
<p>Take into consideration the list:</p>
<pre><code>[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]
</code></pre>
<p>When sorted by <code>name</code>, it should become:</p>
<pre><code>[{'name':'Bart', 'age':10}, {'name':'Homer', 'age':39}]
</code></pre>
","How do I sort a list of dictionaries by a value of the dictionary?<p>I have a list of dictionaries and want each item to be sorted by a specific value.</p>
<p>Take into consideration the list:</p>
<pre><code>[{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]
</code></pre>
<p>When sorted by <code>name</code>, it should become:</p>
<pre><code>[{'name':'Bart', 'age':10}, {'name':'Homer', 'age':39}]
</code></pre>
",<python><list><sorting><dictionary><data-structures>,sorted dictionaries list value consideration sort item specific dictionary want,"<p>The <a href=""https://docs.python.org/library/functions.html#sorted"" rel=""noreferrer""><code>sorted()</code></a> function takes a <code>key=</code> parameter</p>
<pre><code>newlist = sorted(list_to_be_sorted, key=lambda d: d['name']) 
</code></pre>
<p>Alternatively, you can use <a href=""https://docs.python.org/library/operator.html#operator.itemgetter"" rel=""noreferrer""><code>operator.itemgetter</code></a> instead of defining the function yourself</p>
<pre><code>from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name')) 
</code></pre>
<p>For completeness, add <code>reverse=True</code> to sort in descending order</p>
<pre><code>newlist = sorted(list_to_be_sorted, key=itemgetter('name'), reverse=True)
</code></pre>
",,"<p>Using the <a href=""https://en.wikipedia.org/wiki/Schwartzian_transform"" rel=""noreferrer"">Schwartzian transform</a> from Perl,</p>
<pre><code>py = [{'name':'Homer', 'age':39}, {'name':'Bart', 'age':10}]
</code></pre>
<p>do</p>
<pre><code>sort_on = &quot;name&quot;
decorated = [(dict_[sort_on], dict_) for dict_ in py]
decorated.sort()
result = [dict_ for (key, dict_) in decorated]
</code></pre>
<p>gives</p>
<pre><code>&gt;&gt;&gt; result
[{'age': 10, 'name': 'Bart'}, {'age': 39, 'name': 'Homer'}]
</code></pre>
<p>More on the Perl Schwartzian transform:</p>
<blockquote>
<p>In computer science, the Schwartzian transform is a Perl programming
idiom used to improve the efficiency of sorting a list of items. This
idiom is appropriate for comparison-based sorting when the ordering is
actually based on the ordering of a certain property (the key) of the
elements, where computing that property is an intensive operation that
should be performed a minimal number of times. The Schwartzian
Transform is notable in that it does not use named temporary arrays.</p>
</blockquote>
"
50,5,How do I lowercase a string in Python?,"<p>Is there a way to convert a string from uppercase, or even part uppercase to lowercase? </p>

<p>For example, ""Kilometers"" ƒ?? ""kilometers"".</p>
","How do I lowercase a string in Python?<p>Is there a way to convert a string from uppercase, or even part uppercase to lowercase? </p>

<p>For example, ""Kilometers"" ƒ?? ""kilometers"".</p>
",<python><string><uppercase><lowercase>,kilometers lowercase uppercase string convert example way python,"<p>Use <code>.lower()</code> - For example:</p>

<pre><code>s = ""Kilometer""
print(s.lower())
</code></pre>

<p>The official 2.x documentation is here: <a href=""https://docs.python.org/2/library/stdtypes.html?highlight=str.lower#str.lower"" rel=""noreferrer""><code>str.lower()</code></a><br>
The official 3.x documentation is here: <a href=""https://docs.python.org/3/library/stdtypes.html?highlight=str.lower#str.lower"" rel=""noreferrer""><code>str.lower()</code></a></p>
",,"<p>Don't try this, totally un-recommend, don't do this:</p>

<pre><code>import string
s='ABCD'
print(''.join([string.ascii_lowercase[string.ascii_uppercase.index(i)] for i in s]))
</code></pre>

<p>Output:</p>

<pre><code>abcd
</code></pre>

<p>Since no one wrote it yet you can use <code>swapcase</code> (so uppercase letters will become lowercase, and vice versa) (and this one you should use in cases where i just mentioned (convert upper to lower, lower to upper)):</p>

<pre><code>s='ABCD'
print(s.swapcase())
</code></pre>

<p>Output:</p>

<pre><code>abcd
</code></pre>
"
51,5,Are static class variables possible in Python?,"<p>Is it possible to have static class variables or methods in Python? What syntax is required to do this?</p>
","Are static class variables possible in Python?<p>Is it possible to have static class variables or methods in Python? What syntax is required to do this?</p>
",<python><class><oop><static><class-variables>,static variables class possible required syntax methods python zone,"<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>

<pre><code>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</code></pre>

<p>As @<a href=""https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067"">millerdev</a> points out, this creates a class-level <code>i</code> variable, but this is distinct from any instance-level <code>i</code> variable, so you could have</p>

<pre><code>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</code></pre>

<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>

<p>See <a href=""https://docs.python.org/3/tutorial/classes.html#class-objects"" rel=""noreferrer"">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>

<p>@Steve Johnson has already answered regarding <a href=""http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod"" rel=""noreferrer"">static methods</a>, also documented under <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"">""Built-in Functions"" in the Python Library Reference</a>.</p>

<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>

<p>@beidy recommends <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>
",,"<p>Static methods in python are called <a href=""http://pyref.infogami.com/classmethod"" rel=""noreferrer"">classmethod</a>s. Take a look at the following code</p>

<pre><code>class MyClass:

    def myInstanceMethod(self):
        print 'output from an instance method'

    @classmethod
    def myStaticMethod(cls):
        print 'output from a static method'

&gt;&gt;&gt; MyClass.myInstanceMethod()
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unbound method myInstanceMethod() must be called [...]

&gt;&gt;&gt; MyClass.myStaticMethod()
output from a static method
</code></pre>

<p>Notice that when we call the method <em>myInstanceMethod</em>, we get an error. This is because it requires that method be called on an instance of this class. The method <em>myStaticMethod</em> is set as a classmethod using the <a href=""http://www.python.org/dev/peps/pep-0318/"" rel=""noreferrer"">decorator</a> <em>@classmethod</em>.</p>

<p>Just for kicks and giggles, we could call <em>myInstanceMethod</em> on the class by passing in an instance of the class, like so:</p>

<pre><code>&gt;&gt;&gt; MyClass.myInstanceMethod(MyClass())
output from an instance method
</code></pre>
"
52,3,How to print without a newline or space,"<p>I'd like to do it in Python. What I'd like to do in this example in C:</p>
<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;

int main() {
    int i;
    for (i=0; i&lt;10; i++) printf(&quot;.&quot;);
    return 0;
}
</code></pre>
<p>Output:</p>
<pre><code>..........
</code></pre>
<p>In Python:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; for i in range(10): print('.')
.
.
.
.
.
.
.
.
.
.
&gt;&gt;&gt; print('.', '.', '.', '.', '.', '.', '.', '.', '.', '.')
. . . . . . . . . .
</code></pre>
<p>In Python, <code>print</code> will add a <code>\n</code> or space. How can I avoid that? I'd like to know how to &quot;append&quot; strings to <code>stdout</code>.</p>
","How to print without a newline or space<p>I'd like to do it in Python. What I'd like to do in this example in C:</p>
<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;

int main() {
    int i;
    for (i=0; i&lt;10; i++) printf(&quot;.&quot;);
    return 0;
}
</code></pre>
<p>Output:</p>
<pre><code>..........
</code></pre>
<p>In Python:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; for i in range(10): print('.')
.
.
.
.
.
.
.
.
.
.
&gt;&gt;&gt; print('.', '.', '.', '.', '.', '.', '.', '.', '.', '.')
. . . . . . . . . .
</code></pre>
<p>In Python, <code>print</code> will add a <code>\n</code> or space. How can I avoid that? I'd like to know how to &quot;append&quot; strings to <code>stdout</code>.</p>
",<python>,print like space newline space stdout avoid append add python,"<p>In Python 3, you can use the <code>sep=</code> and <code>end=</code> parameters of the <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> function:</p>

<p>To not add a newline to the end of the string:</p>

<pre><code>print('.', end='')
</code></pre>

<p>To not add a space between all the function arguments you want to print:</p>

<pre><code>print('a', 'b', 'c', sep='')
</code></pre>

<p>You can pass any string to either parameter, and you can use both parameters at the same time.</p>

<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>

<pre><code>print('.', end='', flush=True)
</code></pre>

<h2>Python 2.6 and 2.7</h2>

<p>From Python 2.6 you can either import the <code>print</code> function from Python 3 using the <a href=""https://docs.python.org/2/library/__future__.html"" rel=""noreferrer""><code>__future__</code> module</a>:</p>

<pre><code>from __future__ import print_function
</code></pre>

<p>which allows you to use the Python 3 solution above.</p>

<p>However, note that the <code>flush</code> keyword is not available in the version of the <code>print</code> function imported from <code>__future__</code> in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you'll still need to flush manually with a call to <code>sys.stdout.flush()</code>. You'll also have to rewrite all other print statements in the file where you do this import.</p>

<p>Or you can use <a href=""https://docs.python.org/library/sys.html#sys.stdout"" rel=""noreferrer""><code>sys.stdout.write()</code></a></p>

<pre><code>import sys
sys.stdout.write('.')
</code></pre>

<p>You may also need to call</p>

<pre><code>sys.stdout.flush()
</code></pre>

<p>to ensure <code>stdout</code> is flushed immediately.</p>
",,"<p>In Python 3+, <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> is a function. When you call</p>
<pre><code>print('Hello, World!')
</code></pre>
<p>Python translates it to</p>
<pre><code>print('Hello, World!', end='\n')
</code></pre>
<p>You can change <code>end</code> to whatever you want.</p>
<pre><code>print('Hello, World!', end='')
print('Hello, World!', end=' ')
</code></pre>
"
53,4,How do I get the number of elements in a list,"<p>Consider the following:</p>

<pre><code>items = []
items.append(""apple"")
items.append(""orange"")
items.append(""banana"")

# FAKE METHOD:
items.amount()  # Should return 3
</code></pre>

<p>How do I get the number of elements in the list <code>items</code>?</p>
","How do I get the number of elements in a list<p>Consider the following:</p>

<pre><code>items = []
items.append(""apple"")
items.append(""orange"")
items.append(""banana"")

# FAKE METHOD:
items.amount()  # Should return 3
</code></pre>

<p>How do I get the number of elements in the list <code>items</code>?</p>
",<python><list>,elements number listconsider items following list zone forget formatted formats,"<p>The <a href=""https://docs.python.org/3/library/functions.html#len"" rel=""noreferrer""><code>len()</code></a> function can be used with several different types in Python - both built-in types and library types. For example:</p>
<pre><code>&gt;&gt;&gt; len([1, 2, 3])
3
</code></pre>
",,"<p>To get the number of element in any sequential object, your goto method in Python is  <code>len()</code> eg.</p>
<pre class=""lang-py prettyprint-override""><code>a = range(1000) # range
b = 'abcdefghijklmnopqrstuvwxyz' # string
c = [10, 20, 30] # List
d = (30, 40, 50, 60, 70) # tuple
e = {11, 21, 31, 41} # set
</code></pre>
<p><code>len()</code> method can work on all the above data types because they are iterable i.e You can iterate over them.</p>
<pre class=""lang-py prettyprint-override""><code>all_var = [a, b, c, d, e] # All variables are stored to a list
for var in all_var:
    print(len(var))
</code></pre>
<p>Rough estimate of the len() method</p>
<pre class=""lang-py prettyprint-override""><code>def len(iterable, /):
    total = 0
    for i in iterable:
        total += 1
    return total
</code></pre>
"
54,5,Calling a function of a module by using its name (a string),"<p>What is the best way to go call a function, given a string with the function's name in a Python program. For example, let's say that I have a module <code>foo</code>, and I have a string whose content is <code>&quot;bar&quot;</code>. What is the best way to call <code>foo.bar()</code>?</p>
<p>I need to get the return value of the function, which is why I don't just use <code>eval</code>. I figured out how to do it by using <code>eval</code> to define a temp function that returns the result of that function call, but I'm hoping that there is a more elegant way to do this.</p>
","Calling a function of a module by using its name (a string)<p>What is the best way to go call a function, given a string with the function's name in a Python program. For example, let's say that I have a module <code>foo</code>, and I have a string whose content is <code>&quot;bar&quot;</code>. What is the best way to call <code>foo.bar()</code>?</p>
<p>I need to get the return value of the function, which is why I don't just use <code>eval</code>. I figured out how to do it by using <code>eval</code> to define a temp function that returns the result of that function call, but I'm hoping that there is a more elegant way to do this.</p>
",<python><object>,function eval bar foo string module best temp figured way,"<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>

<pre><code>import foo
method_to_call = getattr(foo, 'bar')
result = method_to_call()
</code></pre>

<p>You could shorten lines 2 and 3 to:</p>

<pre><code>result = getattr(foo, 'bar')()
</code></pre>

<p>if that makes more sense for your use case. </p>

<p>You can use <a href=""https://docs.python.org/library/functions.html#getattr"" rel=""noreferrer""><code>getattr</code></a> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>
",,"<p>In python3, you can use the <code>__getattribute__</code> method. See following example with a list method name string:</p>
<pre><code>func_name = 'reverse'

l = [1, 2, 3, 4]
print(l)
&gt;&gt; [1, 2, 3, 4]

l.__getattribute__(func_name)()
print(l)
&gt;&gt; [4, 3, 2, 1]
</code></pre>
"
55,4,How can I randomly select an item from a list?,"<p>Assume I have the following list:</p>
<pre><code>foo = ['a', 'b', 'c', 'd', 'e']
</code></pre>
<p>What is the simplest way to retrieve an item at random from this list?</p>
","How can I randomly select an item from a list?<p>Assume I have the following list:</p>
<pre><code>foo = ['a', 'b', 'c', 'd', 'e']
</code></pre>
<p>What is the simplest way to retrieve an item at random from this list?</p>
",<python><list><random>,item list randomly assume select simplest retrieve random following way,"<p>Use <a href=""https://docs.python.org/library/random.html#random.choice"" rel=""noreferrer""><code>random.choice()</code></a>:</p>
<pre><code>import random

foo = ['a', 'b', 'c', 'd', 'e']
print(random.choice(foo))
</code></pre>
<p>For <a href=""https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator"" rel=""noreferrer"">cryptographically secure</a> random choices (e.g., for generating a passphrase from a wordlist), use <a href=""https://docs.python.org/library/secrets.html#secrets.choice"" rel=""noreferrer""><code>secrets.choice()</code></a>:</p>
<pre><code>import secrets

foo = ['battery', 'correct', 'horse', 'staple']
print(secrets.choice(foo))
</code></pre>
<p><code>secrets</code> is new in Python 3.6. On older versions of Python you can use the <a href=""https://docs.python.org/library/random.html#random.SystemRandom"" rel=""noreferrer""><code>random.SystemRandom</code></a> class:</p>
<pre><code>import random

secure_random = random.SystemRandom()
print(secure_random.choice(foo))
</code></pre>
",,"<p>If you want to randomly select more than one item from a list, or select an item from a set, I'd recommend using <code>random.sample</code> instead.</p>
<pre><code>import random
group_of_items = {'a', 'b', 'c', 'd', 'e'}  # a sequence or set will work here.
num_to_select = 2                           # set the number to select here.
list_of_random_items = random.sample(group_of_items, num_to_select)
first_random_item = list_of_random_items[0]
second_random_item = list_of_random_items[1] 
</code></pre>
<p>If you're only pulling a single item from a list though, choice is less clunky, as using sample would have the syntax <code>random.sample(some_list, 1)[0]</code> instead of <code>random.choice(some_list)</code>.</p>
<p>Unfortunately though, choice only works for a single output from sequences (such as lists or tuples).  Though <code>random.choice(tuple(some_set))</code> may be an option for getting a single item from a set.</p>
<p><strong>EDIT: Using Secrets</strong></p>
<p>As many have pointed out, if you require more secure pseudorandom samples, you should use the secrets module:</p>
<pre><code>import secrets                              # imports secure module.
secure_random = secrets.SystemRandom()      # creates a secure random object.
group_of_items = {'a', 'b', 'c', 'd', 'e'}  # a sequence or set will work here.
num_to_select = 2                           # set the number to select here.
list_of_random_items = secure_random.sample(group_of_items, num_to_select)
first_random_item = list_of_random_items[0]
second_random_item = list_of_random_items[1]
</code></pre>
<p><strong>EDIT: Pythonic One-Liner</strong></p>
<p>If you want a more pythonic one-liner for selecting multiple items, you can use unpacking.</p>
<pre><code>import random
first_random_item, second_random_item = random.sample({'a', 'b', 'c', 'd', 'e'}, 2)
</code></pre>
"
56,5,How to know if an object has an attribute in Python,"<p>Is there a way in Python to determine if an object has some attribute?  For example:</p>

<pre><code>&gt;&gt;&gt; a = SomeClass()
&gt;&gt;&gt; a.someProperty = value
&gt;&gt;&gt; a.property
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: SomeClass instance has no attribute 'property'
</code></pre>

<p>How can you tell if <code>a</code> has the attribute <code>property</code> before using it?</p>
","How to know if an object has an attribute in Python<p>Is there a way in Python to determine if an object has some attribute?  For example:</p>

<pre><code>&gt;&gt;&gt; a = SomeClass()
&gt;&gt;&gt; a.someProperty = value
&gt;&gt;&gt; a.property
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: SomeClass instance has no attribute 'property'
</code></pre>

<p>How can you tell if <code>a</code> has the attribute <code>property</code> before using it?</p>
",<python><attributes>,attribute object python property determine example ,"<p>Try <a href=""https://docs.python.org/3/library/functions.html#hasattr"" rel=""noreferrer""><code>hasattr()</code></a>:</p>
<pre><code>if hasattr(a, 'property'):
    a.property
</code></pre>
<p>See <a href=""https://stackoverflow.com/a/610923/117030"">zweiterlinde's answer</a> below, who offers good advice about asking forgiveness! A very pythonic approach!</p>
<p>The general practice in python is that, if the property is likely to be there most of the time, simply call it and either let the exception propagate, or trap it with a try/except block. This will likely be faster than <code>hasattr</code>. If the property is likely to not be there most of the time, or you're not sure, using <code>hasattr</code> will probably be faster than repeatedly falling into an exception block.</p>
",,"<p>Another possible option, but it depends if what you mean by <em>before</em>:</p>

<pre><code>undefined = object()

class Widget:

    def __init__(self):
        self.bar = 1

    def zoom(self):
        print(""zoom!"")

a = Widget()

bar = getattr(a, ""bar"", undefined)
if bar is not undefined:
    print(""bar:%s"" % (bar))

foo = getattr(a, ""foo"", undefined)
if foo is not undefined:
    print(""foo:%s"" % (foo))

zoom = getattr(a, ""zoom"", undefined)
if zoom is not undefined:
    zoom()
</code></pre>

<p>output:</p>

<pre><code>bar:1
zoom!
</code></pre>

<p>This allows you to even check for None-valued attributes.</p>

<p>But!  Be very careful you don't accidentally instantiate and compare <code>undefined</code> multiple places because the <code>is</code> will never work in that case.</p>

<h3>Update:</h3>

<p>because of what I was warning about in the above paragraph, having multiple undefineds that never match, I have recently slightly modified this pattern:</p>

<p><code>undefined = NotImplemented</code></p>

<p><code>NotImplemented</code>, not to be confused with <code>NotImplementedError</code>, is a built-in:  it semi-matches the intent of a JS <code>undefined</code> and you can reuse its definition everywhere and it will always match.  The drawbacks is that it is ""truthy"" in booleans and it can look weird in logs and stack traces (but you quickly get over it when you know it only appears in this context).</p>
"
57,3,Is there a way to run Python on Android?,"<p>We are working on an <a href=""http://en.wikipedia.org/wiki/S60_%28software_platform%29"" rel=""noreferrer"">S60</a> version and this platform has a nice Python API..</p>

<p>However, there is nothing official about Python on Android, but since <a href=""http://en.wikipedia.org/wiki/Jython"" rel=""noreferrer"">Jython</a> exists, is there a way to let the snake and the robot work together??</p>
","Is there a way to run Python on Android?<p>We are working on an <a href=""http://en.wikipedia.org/wiki/S60_%28software_platform%29"" rel=""noreferrer"">S60</a> version and this platform has a nice Python API..</p>

<p>However, there is nothing official about Python on Android, but since <a href=""http://en.wikipedia.org/wiki/Jython"" rel=""noreferrer"">Jython</a> exists, is there a way to let the snake and the robot work together??</p>
",<android><python><jython><ase><android-scripting>,android robot snake official jython api platform nice let exists,"<p>One way is to use <a href=""http://kivy.org/"" rel=""noreferrer"">Kivy</a>:</p>

<blockquote>
  <p>Open source Python library for rapid development of applications
  that make use of innovative user interfaces, such as multi-touch apps.</p>
</blockquote>

<p></p>

<blockquote>
  <p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>
</blockquote>

<p><a href=""https://play.google.com/store/apps/details?id=org.kivy.showcase"" rel=""noreferrer"">Kivy Showcase app</a>  </p>
",,"<p>One more option seems to be <a href=""http://pyqt.sourceforge.net/Docs/pyqtdeploy/index.html"" rel=""noreferrer"">pyqtdeploy</a> which citing the docs is:</p>

<blockquote>
  <p>a tool that, in conjunction with other tools provided with Qt, enables
  the deployment of PyQt4 and PyQt5 applications written with Python
  v2.7 or Python v3.3 or later. It supports deployment to desktop
  platforms (Linux, Windows and OS X) and to mobile platforms (iOS and
  Android).</p>
</blockquote>

<p>According to <a href=""https://stackoverflow.com/questions/24239684/deploying-pyqt5-application-to-android-via-pyqtdeploy-and-qt5"">Deploying PyQt5 application to Android via pyqtdeploy and Qt5</a> it is actively developed, although it is difficult to find examples of working Android apps or tutorial on how to cross-compile all the required libraries to Android. It is an interesting project to keep in mind though!</p>
"
58,3,Why is reading lines from stdin much slower in C++ than Python?,"<p>I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.</p>
<hr />
<p>(TLDR answer: include the statement: <code>cin.sync_with_stdio(false)</code> or just use <code>fgets</code> instead.</p>
<p>TLDR results: scroll all the way down to the bottom of my question and look at the table.)</p>
<hr />
<p><strong>C++ code:</strong></p>
<pre class=""lang-cpp prettyprint-override""><code>#include &lt;iostream&gt;
#include &lt;time.h&gt;

using namespace std;

int main() {
    string input_line;
    long line_count = 0;
    time_t start = time(NULL);
    int sec;
    int lps;

    while (cin) {
        getline(cin, input_line);
        if (!cin.eof())
            line_count++;
    };

    sec = (int) time(NULL) - start;
    cerr &lt;&lt; &quot;Read &quot; &lt;&lt; line_count &lt;&lt; &quot; lines in &quot; &lt;&lt; sec &lt;&lt; &quot; seconds.&quot;;
    if (sec &gt; 0) {
        lps = line_count / sec;
        cerr &lt;&lt; &quot; LPS: &quot; &lt;&lt; lps &lt;&lt; endl;
    } else
        cerr &lt;&lt; endl;
    return 0;
}

// Compiled with:
// g++ -O3 -o readline_test_cpp foo.cpp
</code></pre>
<p><strong>Python Equivalent:</strong></p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python
import time
import sys

count = 0
start = time.time()

for line in  sys.stdin:
    count += 1

delta_sec = int(time.time() - start_time)
if delta_sec &gt;= 0:
    lines_per_sec = int(round(count/delta_sec))
    print(&quot;Read {0} lines in {1} seconds. LPS: {2}&quot;.format(count, delta_sec,
       lines_per_sec))
</code></pre>
<p><strong>Here are my results:</strong></p>
<pre class=""lang-none prettyprint-override""><code>$ cat test_lines | ./readline_test_cpp
Read 5570000 lines in 9 seconds. LPS: 618889

$ cat test_lines | ./readline_test.py
Read 5570000 lines in 1 seconds. LPS: 5570000
</code></pre>
<p><em>I should note that I tried this both under Mac?ÿOS?ÿX?ÿv10.6.8 (Snow?ÿLeopard) and Linux 2.6.32 (Red Hat Linux 6.2). The former is a MacBook Pro, and the latter is a very beefy server, not that this is too pertinent.</em></p>
<pre class=""lang-sh prettyprint-override""><code>$ for i in {1..5}; do echo &quot;Test run $i at `date`&quot;; echo -n &quot;CPP:&quot;; cat test_lines | ./readline_test_cpp ; echo -n &quot;Python:&quot;; cat test_lines | ./readline_test.py ; done
</code></pre>
<pre class=""lang-none prettyprint-override""><code>Test run 1 at Mon Feb 20 21:29:28 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 2 at Mon Feb 20 21:29:39 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 3 at Mon Feb 20 21:29:50 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 4 at Mon Feb 20 21:30:01 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 5 at Mon Feb 20 21:30:11 EST 2012
CPP:   Read 5570001 lines in 10 seconds. LPS: 557000
Python:Read 5570000 lines in  1 seconds. LPS: 5570000
</code></pre>
<hr />
<p>Tiny benchmark addendum and recap</p>
<p>For completeness, I thought I'd update the read speed for the same file on the same box with the original (synced) C++ code. Again, this is for a 100M line file on a fast disk. Here's the comparison, with several solutions/approaches:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th style=""text-align: left;"">Implementation</th>
<th style=""text-align: right;"">Lines per second</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""text-align: left;"">python (default)</td>
<td style=""text-align: right;"">3,571,428</td>
</tr>
<tr>
<td style=""text-align: left;"">cin (default/naive)</td>
<td style=""text-align: right;"">819,672</td>
</tr>
<tr>
<td style=""text-align: left;"">cin (no sync)</td>
<td style=""text-align: right;"">12,500,000</td>
</tr>
<tr>
<td style=""text-align: left;"">fgets</td>
<td style=""text-align: right;"">14,285,714</td>
</tr>
<tr>
<td style=""text-align: left;"">wc (not fair comparison)</td>
<td style=""text-align: right;"">54,644,808</td>
</tr>
</tbody>
</table>
</div>","Why is reading lines from stdin much slower in C++ than Python?<p>I wanted to compare reading lines of string input from stdin using Python and C++ and was shocked to see my C++ code run an order of magnitude slower than the equivalent Python code. Since my C++ is rusty and I'm not yet an expert Pythonista, please tell me if I'm doing something wrong or if I'm misunderstanding something.</p>
<hr />
<p>(TLDR answer: include the statement: <code>cin.sync_with_stdio(false)</code> or just use <code>fgets</code> instead.</p>
<p>TLDR results: scroll all the way down to the bottom of my question and look at the table.)</p>
<hr />
<p><strong>C++ code:</strong></p>
<pre class=""lang-cpp prettyprint-override""><code>#include &lt;iostream&gt;
#include &lt;time.h&gt;

using namespace std;

int main() {
    string input_line;
    long line_count = 0;
    time_t start = time(NULL);
    int sec;
    int lps;

    while (cin) {
        getline(cin, input_line);
        if (!cin.eof())
            line_count++;
    };

    sec = (int) time(NULL) - start;
    cerr &lt;&lt; &quot;Read &quot; &lt;&lt; line_count &lt;&lt; &quot; lines in &quot; &lt;&lt; sec &lt;&lt; &quot; seconds.&quot;;
    if (sec &gt; 0) {
        lps = line_count / sec;
        cerr &lt;&lt; &quot; LPS: &quot; &lt;&lt; lps &lt;&lt; endl;
    } else
        cerr &lt;&lt; endl;
    return 0;
}

// Compiled with:
// g++ -O3 -o readline_test_cpp foo.cpp
</code></pre>
<p><strong>Python Equivalent:</strong></p>
<pre class=""lang-py prettyprint-override""><code>#!/usr/bin/env python
import time
import sys

count = 0
start = time.time()

for line in  sys.stdin:
    count += 1

delta_sec = int(time.time() - start_time)
if delta_sec &gt;= 0:
    lines_per_sec = int(round(count/delta_sec))
    print(&quot;Read {0} lines in {1} seconds. LPS: {2}&quot;.format(count, delta_sec,
       lines_per_sec))
</code></pre>
<p><strong>Here are my results:</strong></p>
<pre class=""lang-none prettyprint-override""><code>$ cat test_lines | ./readline_test_cpp
Read 5570000 lines in 9 seconds. LPS: 618889

$ cat test_lines | ./readline_test.py
Read 5570000 lines in 1 seconds. LPS: 5570000
</code></pre>
<p><em>I should note that I tried this both under Mac?ÿOS?ÿX?ÿv10.6.8 (Snow?ÿLeopard) and Linux 2.6.32 (Red Hat Linux 6.2). The former is a MacBook Pro, and the latter is a very beefy server, not that this is too pertinent.</em></p>
<pre class=""lang-sh prettyprint-override""><code>$ for i in {1..5}; do echo &quot;Test run $i at `date`&quot;; echo -n &quot;CPP:&quot;; cat test_lines | ./readline_test_cpp ; echo -n &quot;Python:&quot;; cat test_lines | ./readline_test.py ; done
</code></pre>
<pre class=""lang-none prettyprint-override""><code>Test run 1 at Mon Feb 20 21:29:28 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 2 at Mon Feb 20 21:29:39 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 3 at Mon Feb 20 21:29:50 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 4 at Mon Feb 20 21:30:01 EST 2012
CPP:   Read 5570001 lines in 9 seconds. LPS: 618889
Python:Read 5570000 lines in 1 seconds. LPS: 5570000
Test run 5 at Mon Feb 20 21:30:11 EST 2012
CPP:   Read 5570001 lines in 10 seconds. LPS: 557000
Python:Read 5570000 lines in  1 seconds. LPS: 5570000
</code></pre>
<hr />
<p>Tiny benchmark addendum and recap</p>
<p>For completeness, I thought I'd update the read speed for the same file on the same box with the original (synced) C++ code. Again, this is for a 100M line file on a fast disk. Here's the comparison, with several solutions/approaches:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th style=""text-align: left;"">Implementation</th>
<th style=""text-align: right;"">Lines per second</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""text-align: left;"">python (default)</td>
<td style=""text-align: right;"">3,571,428</td>
</tr>
<tr>
<td style=""text-align: left;"">cin (default/naive)</td>
<td style=""text-align: right;"">819,672</td>
</tr>
<tr>
<td style=""text-align: left;"">cin (no sync)</td>
<td style=""text-align: right;"">12,500,000</td>
</tr>
<tr>
<td style=""text-align: left;"">fgets</td>
<td style=""text-align: right;"">14,285,714</td>
</tr>
<tr>
<td style=""text-align: left;"">wc (not fair comparison)</td>
<td style=""text-align: right;"">54,644,808</td>
</tr>
</tbody>
</table>
</div>",<python><c++><benchmarking><iostream><getline>,cin fgets tldr stdin slower code comparison linux default results,"<h3>tl;dr: Because of different default settings in C++ requiring more system calls.</h3>
<p>By default, <code>cin</code> is synchronized with stdio, which causes it to avoid any input buffering.  If you add this to the top of your main, you should see much better performance:</p>
<pre><code>std::ios_base::sync_with_stdio(false);
</code></pre>
<p>Normally, when an input stream is buffered, instead of reading one character at a time, the stream will be read in larger chunks.  This reduces the number of system calls, which are typically relatively expensive.  However, since the <code>FILE*</code> based <code>stdio</code> and <code>iostreams</code> often have separate implementations and therefore separate buffers, this could lead to a problem if both were used together.  For example:</p>
<pre><code>int myvalue1;
cin &gt;&gt; myvalue1;
int myvalue2;
scanf(&quot;%d&quot;,&amp;myvalue2);
</code></pre>
<p>If more input was read by <code>cin</code> than it actually needed, then the second integer value wouldn't be available for the <code>scanf</code> function, which has its own independent buffer.  This would lead to unexpected results.</p>
<p>To avoid this, by default, streams are synchronized with <code>stdio</code>.  One common way to achieve this is to have <code>cin</code> read each character one at a time as needed using <code>stdio</code> functions.  Unfortunately, this introduces a lot of overhead.  For small amounts of input, this isn't a big problem, but when you are reading millions of lines, the performance penalty is significant.</p>
<p>Fortunately, the library designers decided that you should also be able to disable this feature to get improved performance if you knew what you were doing, so they provided the <a href=""http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio"" rel=""noreferrer""><code>sync_with_stdio</code></a> method.</p>
",,"<p>The following code was faster for me than the other code posted here so far:
(Visual Studio 2013, 64-bit, 500 MB file with line length uniformly in [0, 1000)).</p>

<pre><code>const int buffer_size = 500 * 1024;  // Too large/small buffer is not good.
std::vector&lt;char&gt; buffer(buffer_size);
int size;
while ((size = fread(buffer.data(), sizeof(char), buffer_size, stdin)) &gt; 0) {
    line_count += count_if(buffer.begin(), buffer.begin() + size, [](char ch) { return ch == '\n'; });
}
</code></pre>

<p>It beats all my Python attempts by more than a factor 2.</p>
"
59,3,How to leave/exit/deactivate a Python virtualenv,"<p>I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the <code>workon</code> command.</p>
<pre><code>me@mymachine:~$ workon env1
(env1)me@mymachine:~$ workon env2
(env2)me@mymachine:~$ workon env1
(env1)me@mymachine:~$ 
</code></pre>
<p>How do I exit all virtual environments and work on my system environment again? Right now, the only way I have of getting back to <code>me@mymachine:~$</code> is to exit the shell and start a new one. That's kind of annoying. Is there a command to work on &quot;nothing&quot;, and if so, what is it? If such a command does not exist, how would I go about creating it?</p>
","How to leave/exit/deactivate a Python virtualenv<p>I'm using virtualenv and the virtualenvwrapper. I can switch between virtualenv's just fine using the <code>workon</code> command.</p>
<pre><code>me@mymachine:~$ workon env1
(env1)me@mymachine:~$ workon env2
(env2)me@mymachine:~$ workon env1
(env1)me@mymachine:~$ 
</code></pre>
<p>How do I exit all virtual environments and work on my system environment again? Right now, the only way I have of getting back to <code>me@mymachine:~$</code> is to exit the shell and start a new one. That's kind of annoying. Is there a command to work on &quot;nothing&quot;, and if so, what is it? If such a command does not exist, how would I go about creating it?</p>
",<python><virtualenv><virtualenvwrapper>,exit command virtualenv work annoying deactivate mymachine environments workon switch,"<p>Usually, activating a virtualenv gives you a shell function named:</p>

<pre><code>$ deactivate
</code></pre>

<p>which puts things back to normal.</p>

<p>I have just looked specifically again at the code for <code>virtualenvwrapper</code>, and, yes, it too supports <code>deactivate</code> as the way to escape from all virtualenvs.</p>

<p>If you are trying to leave an <a href=""https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)"" rel=""noreferrer""><em>Anaconda</em></a> environment, the command depends upon your version of <code>conda</code>. Recent versions (like 4.6) install a <code>conda</code> function directly in your shell, in which case you run:</p>

<pre><code>conda deactivate
</code></pre>

<p>Older conda versions instead implement deactivation using a stand-alone script:</p>

<pre><code>source deactivate
</code></pre>
",,"<p>For my particular case, I go to to the working directory</p>
<pre><code>CD /myworkingdirectory
</code></pre>
<p>Then I activate my env like this:</p>
<pre><code>my-env/scripts/activate
</code></pre>
<p>From this same working folder (<code>/myworkingdirectory</code>) to deactivate, I tried this but it does nothing:</p>
<pre><code>my-env/scripts/deactivate
</code></pre>
<p>This does work:</p>
<pre><code>deactivate
</code></pre>
"
60,0,How can I print literal curly-brace characters in a string and also use .format on it?,"<pre><code>x = "" \{ Hello \} {0} ""
print(x.format(42))
</code></pre>

<p>gives me : <code>Key Error: Hello\\</code></p>

<p>I want to print the output: <code>{Hello} 42</code></p>
","How can I print literal curly-brace characters in a string and also use .format on it?<pre><code>x = "" \{ Hello \} {0} ""
print(x.format(42))
</code></pre>

<p>gives me : <code>Key Error: Hello\\</code></p>

<p>I want to print the output: <code>{Hello} 42</code></p>
",<python><string><format><string-formatting><curly-braces>,hello print curly brace literal characters format key gives output,"<p>You need to double the <code>{{</code> and <code>}}</code>:</p>

<pre><code>&gt;&gt;&gt; x = "" {{ Hello }} {0} ""
&gt;&gt;&gt; print(x.format(42))
' { Hello } 42 '
</code></pre>

<p>Here's the relevant part of the <a href=""https://docs.python.org/library/string.html#formatstrings"" rel=""noreferrer"">Python documentation for format string syntax</a>:</p>

<blockquote>
  <p>Format strings contain ƒ??replacement fieldsƒ? surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>
</blockquote>
",,"<p>When you're just trying to interpolate code strings I'd suggest using <a href=""https://palletsprojects.com/p/jinja/"" rel=""nofollow noreferrer"">jinja2</a> which is a full-featured template engine for Python, ie:</p>

<pre><code>from jinja2 import Template

foo = Template('''
#include &lt;stdio.h&gt;

void main() {
    printf(""hello universe number {{number}}"");
}
''')

for i in range(2):
    print(foo.render(number=i))
</code></pre>

<p>So you won't be enforced to duplicate curly braces as the whole bunch of other answers suggest</p>
"
61,5,Determine the type of an object?,"<p>Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.</p>
","Determine the type of an object?<p>Is there a simple way to determine if a variable is a list, dictionary, or something else? I am getting an object back that may be either type and I need to be able to tell the difference.</p>
",<python><dictionary><types><typeof>,determine type object tell getting able simple variable dictionary difference,"<p>There are two built-in functions that help you identify the type of an object. You can use <a href=""http://docs.python.org/3/library/functions.html#type"" rel=""noreferrer""><code>type()</code></a>  if you need the exact type of an object, and <a href=""http://docs.python.org/3/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance()</code></a> to <em>check</em> an objectƒ??s type against something. Usually, you want to use <code>isinstance()</code> most of the times since it is very robust and also supports type inheritance.</p>
<hr />
<p>To get the actual type of an object, you use the built-in <a href=""http://docs.python.org/3/library/functions.html#type"" rel=""noreferrer""><code>type()</code></a> function. Passing an object as the only parameter will return the type object of that object:</p>
<pre><code>&gt;&gt;&gt; type([]) is list
True
&gt;&gt;&gt; type({}) is dict
True
&gt;&gt;&gt; type('') is str
True
&gt;&gt;&gt; type(0) is int
True
</code></pre>
<p>This of course also works for custom types:</p>
<pre><code>&gt;&gt;&gt; class Test1 (object):
        pass
&gt;&gt;&gt; class Test2 (Test1):
        pass
&gt;&gt;&gt; a = Test1()
&gt;&gt;&gt; b = Test2()
&gt;&gt;&gt; type(a) is Test1
True
&gt;&gt;&gt; type(b) is Test2
True
</code></pre>
<p>Note that <code>type()</code> will only return the immediate type of the object, but wonƒ??t be able to tell you about type inheritance.</p>
<pre><code>&gt;&gt;&gt; type(b) is Test1
False
</code></pre>
<p>To cover that, you should use the <a href=""http://docs.python.org/3/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance</code></a> function. This of course also works for built-in types:</p>
<pre><code>&gt;&gt;&gt; isinstance(b, Test1)
True
&gt;&gt;&gt; isinstance(b, Test2)
True
&gt;&gt;&gt; isinstance(a, Test1)
True
&gt;&gt;&gt; isinstance(a, Test2)
False
&gt;&gt;&gt; isinstance([], list)
True
&gt;&gt;&gt; isinstance({}, dict)
True
</code></pre>
<p><code>isinstance()</code> is usually the preferred way to ensure the type of an object because it will also accept derived types. So unless you actually need the type object (for whatever reason), using <code>isinstance()</code> is preferred over <code>type()</code>.</p>
<p>The second parameter of <code>isinstance()</code> also accepts a tuple of types, so itƒ??s possible to check for multiple types at once. <code>isinstance</code> will then return true, if the object is of any of those types:</p>
<pre><code>&gt;&gt;&gt; isinstance([], (tuple, list, set))
True
</code></pre>
",,"<p>There are two built-in functions that help you identify the type of an object. You can use <a href=""http://docs.python.org/3/library/functions.html#type"" rel=""noreferrer""><code>type()</code></a>  if you need the exact type of an object, and <a href=""http://docs.python.org/3/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance()</code></a> to <em>check</em> an objectƒ??s type against something. Usually, you want to use <code>isinstance()</code> most of the times since it is very robust and also supports type inheritance.</p>
<hr />
<p>To get the actual type of an object, you use the built-in <a href=""http://docs.python.org/3/library/functions.html#type"" rel=""noreferrer""><code>type()</code></a> function. Passing an object as the only parameter will return the type object of that object:</p>
<pre><code>&gt;&gt;&gt; type([]) is list
True
&gt;&gt;&gt; type({}) is dict
True
&gt;&gt;&gt; type('') is str
True
&gt;&gt;&gt; type(0) is int
True
</code></pre>
<p>This of course also works for custom types:</p>
<pre><code>&gt;&gt;&gt; class Test1 (object):
        pass
&gt;&gt;&gt; class Test2 (Test1):
        pass
&gt;&gt;&gt; a = Test1()
&gt;&gt;&gt; b = Test2()
&gt;&gt;&gt; type(a) is Test1
True
&gt;&gt;&gt; type(b) is Test2
True
</code></pre>
<p>Note that <code>type()</code> will only return the immediate type of the object, but wonƒ??t be able to tell you about type inheritance.</p>
<pre><code>&gt;&gt;&gt; type(b) is Test1
False
</code></pre>
<p>To cover that, you should use the <a href=""http://docs.python.org/3/library/functions.html#isinstance"" rel=""noreferrer""><code>isinstance</code></a> function. This of course also works for built-in types:</p>
<pre><code>&gt;&gt;&gt; isinstance(b, Test1)
True
&gt;&gt;&gt; isinstance(b, Test2)
True
&gt;&gt;&gt; isinstance(a, Test1)
True
&gt;&gt;&gt; isinstance(a, Test2)
False
&gt;&gt;&gt; isinstance([], list)
True
&gt;&gt;&gt; isinstance({}, dict)
True
</code></pre>
<p><code>isinstance()</code> is usually the preferred way to ensure the type of an object because it will also accept derived types. So unless you actually need the type object (for whatever reason), using <code>isinstance()</code> is preferred over <code>type()</code>.</p>
<p>The second parameter of <code>isinstance()</code> also accepts a tuple of types, so itƒ??s possible to check for multiple types at once. <code>isinstance</code> will then return true, if the object is of any of those types:</p>
<pre><code>&gt;&gt;&gt; isinstance([], (tuple, list, set))
True
</code></pre>
"
62,4,Why is it string.join(list) instead of list.join(string)?,"<p>This has always confused me. It seems like this would be nicer:</p>

<pre><code>my_list = [""Hello"", ""world""]
print(my_list.join(""-""))
# Produce: ""Hello-world""
</code></pre>

<p>Than this:</p>

<pre><code>my_list = [""Hello"", ""world""]
print(""-"".join(my_list))
# Produce: ""Hello-world""
</code></pre>

<p>Is there a specific reason it is like this?</p>
","Why is it string.join(list) instead of list.join(string)?<p>This has always confused me. It seems like this would be nicer:</p>

<pre><code>my_list = [""Hello"", ""world""]
print(my_list.join(""-""))
# Produce: ""Hello-world""
</code></pre>

<p>Than this:</p>

<pre><code>my_list = [""Hello"", ""world""]
print(""-"".join(my_list))
# Produce: ""Hello-world""
</code></pre>

<p>Is there a specific reason it is like this?</p>
",<python><string><list>,join nicer string confused list reason like specific instead follows,"<p>It's because any iterable can be joined (e.g, list, tuple, dict, set), but its contents and the &quot;joiner&quot; <em>must be</em> strings.</p>
<p>For example:</p>
<pre><code>'_'.join(['welcome', 'to', 'stack', 'overflow'])
'_'.join(('welcome', 'to', 'stack', 'overflow'))
</code></pre>
<pre><code>'welcome_to_stack_overflow'
</code></pre>
<p>Using something other than strings will raise the following error:</p>
<pre><code>TypeError: sequence item 0: expected str instance, int found
</code></pre>
",,"<p>Primarily because the result of a <code>someString.join()</code> is a string.</p>

<p>The sequence (list or tuple or whatever) doesn't appear in the result, just a string.  Because the result is a string, it makes sense as a method of a string.</p>
"
63,4,How to remove an element from a list by index,"<p>How do I remove an element from a list by index in Python?</p>

<p>I found the <code>list.remove</code> method, but say I want to remove the last element, how do I do this? It seems like the default remove searches the list, but I don't want any search to be performed.</p>
","How to remove an element from a list by index<p>How do I remove an element from a list by index in Python?</p>

<p>I found the <code>list.remove</code> method, but say I want to remove the last element, how do I do this? It seems like the default remove searches the list, but I don't want any search to be performed.</p>
",<python><list><indexing>,remove element list indexhow searches performed want default index search,"<p>Use <code>del</code> and specify the index of the element you want to delete:</p>

<pre><code>&gt;&gt;&gt; a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; del a[-1]
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>

<p>Also supports slices:</p>

<pre><code>&gt;&gt;&gt; del a[2:4]
&gt;&gt;&gt; a
[0, 1, 4, 5, 6, 7, 8, 9]
</code></pre>

<p><a href=""http://docs.python.org/tutorial/datastructures.html#the-del-statement"" rel=""noreferrer"">Here</a> is the section from the tutorial.</p>
",,"<p>You probably want <code>pop</code>:</p>

<pre><code>a = ['a', 'b', 'c', 'd']
a.pop(1)

# now a is ['a', 'c', 'd']
</code></pre>

<p>By default, <code>pop</code> without any arguments removes the last item:</p>

<pre><code>a = ['a', 'b', 'c', 'd']
a.pop()

# now a is ['a', 'b', 'c']
</code></pre>
"
64,4,How can I count the occurrences of a list item?,"<p>Given an item, how can I count its occurrences in a list in Python?</p>
","How can I count the occurrences of a list item?<p>Given an item, how can I count its occurrences in a list in Python?</p>
",<python><list><count>,occurrences count item list given python zone forever formats format,"<p>If you only want one item's count, use the <code>count</code> method:</p>
<pre><code>&gt;&gt;&gt; [1, 2, 3, 4, 1, 4, 1].count(1)
3
</code></pre>
<h2><strong>Important Note regarding count performance</strong></h2>
<p><strong>Don't use this if you want to count multiple items</strong>.</p>
<p>Calling <code>count</code> in a loop requires a separate pass over the list for every <code>count</code> call, which can be catastrophic for performance.</p>
<p>If you want to count all items, or even just multiple items, use <code>Counter</code>, as explained in the other answers.</p>
",,"<p>To count the number of diverse elements having a common type:</p>

<pre><code>li = ['A0','c5','A8','A2','A5','c2','A3','A9']

print sum(1 for el in li if el[0]=='A' and el[1] in '01234')
</code></pre>

<p>gives</p>

<p><code>3</code>  , not 6</p>
"
65,5,Static methods in Python?,"<p>Is it possible to have static methods in Python which I could call without initializing a class, like:</p>

<pre><code>ClassName.static_method()
</code></pre>
","Static methods in Python?<p>Is it possible to have static methods in Python which I could call without initializing a class, like:</p>

<pre><code>ClassName.static_method()
</code></pre>
",<python><static-methods>,static methods initializing class possible python like formatting formatted formats,"<p>Yep, using the <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"" title=""staticmethod"">staticmethod</a> decorator</p>
<pre><code>class MyClass(object):
    @staticmethod
    def the_static_method(x):
        print(x)

MyClass.the_static_method(2)  # outputs 2
</code></pre>
<p>Note that some code might use the old method of defining a static method, using <code>staticmethod</code> as a function rather than a decorator. This should only be used if you have to support ancient versions of Python (2.2 and 2.3)</p>
<pre><code>class MyClass(object):
    def the_static_method(x):
        print(x)
    the_static_method = staticmethod(the_static_method)

MyClass.the_static_method(2)  # outputs 2
</code></pre>
<p>This is entirely identical to the first example (using <code>@staticmethod</code>), just not using the nice decorator syntax</p>
<p>Finally, use <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"" title=""staticmethod""><code>staticmethod</code></a> sparingly! There are very few situations where static-methods are necessary in Python, and I've seen them used many times where a separate &quot;top-level&quot; function would have been clearer.</p>
<hr />
<p><a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"" title=""staticmethod"">The following is verbatim from the documentation:</a>:</p>
<blockquote>
<p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p>
<pre><code>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</code></pre>
<p>The @staticmethod form is a function <a href=""https://docs.python.org/3/glossary.html#term-decorator"" rel=""noreferrer"" title=""term-decorator""><em>decorator</em></a> ƒ?? see the description of function definitions in <a href=""https://docs.python.org/3/reference/compound_stmts.html#function"" rel=""noreferrer"" title=""Function definitions""><em>Function definitions</em></a> for details.</p>
<p>It can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class.</p>
<p>Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"" title=""classmethod""><code>classmethod()</code></a>.</p>
<p>For more information on static methods, consult the documentation on the standard type hierarchy in <a href=""https://docs.python.org/3/reference/datamodel.html#types"" rel=""noreferrer"" title=""types""><em>The standard type hierarchy</em></a>.</p>
<p>New in version 2.2.</p>
<p>Changed in version 2.4: Function decorator syntax added.</p>
</blockquote>
",,"<p>Summarizing others' answers and adding, there are many ways to declare Static Methods or Variables in <strong>python</strong>.<br></p>
<ol>
<li>Using <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"">staticmethod()</a> as a decorator:
One can simply put a decorator above a method(function) declared to make it a static method. For eg.<br></li>
</ol>
<pre><code>class Calculator:
    @staticmethod
    def multiply(n1, n2, *args):
        Res = 1
        for num in args: Res *= num
        return n1 * n2 * Res

print(Calculator.multiply(1, 2, 3, 4))              # 24
</code></pre>
<ol start=""2"">
<li>Using <a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer"">staticmethod()</a> as a parameter function:
This method can receive an argument which is of function type, and it returns a static version of the function passed. For eg.<br></li>
</ol>
<pre><code>class Calculator:
    def add(n1, n2, *args):
        return n1 + n2 + sum(args)

Calculator.add = staticmethod(Calculator.add)
print(Calculator.add(1, 2, 3, 4))                   # 10
</code></pre>
<ol start=""3"">
<li>Using <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"">classmethod()</a> as a decorator:
@classmethod has similar effect on a function as @staticmethod has, but
this time, an additional argument is needed to be accepted in the function (similar to self parameter for instance variables). For eg.<br></li>
</ol>
<pre><code>class Calculator:
    num = 0
    def __init__(self, digits) -&gt; None:
        Calculator.num = int(''.join(digits))

    @classmethod
    def get_digits(cls, num):
        digits = list(str(num))
        calc = cls(digits)
        return calc.num

print(Calculator.get_digits(314159))                # 314159
</code></pre>
<ol start=""4"">
<li>Using <a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer"">classmethod()</a> as a parameter function:
@classmethod can also be used as a parameter function, in case one doesn't want to modify class definition. For eg.<br></li>
</ol>
<pre><code>class Calculator:
    def divide(cls, n1, n2, *args):
        Res = 1
        for num in args: Res *= num
        return n1 / n2 / Res

Calculator.divide = classmethod(Calculator.divide)

print(Calculator.divide(15, 3, 5))                  # 1.0
</code></pre>
<ol start=""5"">
<li>Direct declaration
A method/variable declared outside all other methods, but inside a class is automatically static.<br></li>
</ol>
<pre><code>class Calculator:   
    def subtract(n1, n2, *args):
        return n1 - n2 - sum(args)

print(Calculator.subtract(10, 2, 3, 4))             # 1
</code></pre>
<p>The whole program<br></p>
<pre><code>class Calculator:
    num = 0
    def __init__(self, digits) -&gt; None:
        Calculator.num = int(''.join(digits))
    
    
    @staticmethod
    def multiply(n1, n2, *args):
        Res = 1
        for num in args: Res *= num
        return n1 * n2 * Res


    def add(n1, n2, *args):
        return n1 + n2 + sum(args)
    

    @classmethod
    def get_digits(cls, num):
        digits = list(str(num))
        calc = cls(digits)
        return calc.num


    def divide(cls, n1, n2, *args):
        Res = 1
        for num in args: Res *= num
        return n1 / n2 / Res


    def subtract(n1, n2, *args):
        return n1 - n2 - sum(args)
    



Calculator.add = staticmethod(Calculator.add)
Calculator.divide = classmethod(Calculator.divide)

print(Calculator.multiply(1, 2, 3, 4))              # 24
print(Calculator.add(1, 2, 3, 4))                   # 10
print(Calculator.get_digits(314159))                # 314159
print(Calculator.divide(15, 3, 5))                  # 1.0
print(Calculator.subtract(10, 2, 3, 4))             # 1
</code></pre>
<p>Refer to <a href=""https://www.python.org/doc/versions/"" rel=""noreferrer"">Python Documentation</a> for mastering OOP in python.</p>
"
66,0,Delete an element from a dictionary,"<p>Is there a way to delete an item from a dictionary in Python?</p>

<p>Additionally, how can I delete an item from a dictionary to return a copy (i.e., not modifying the original)?</p>
","Delete an element from a dictionary<p>Is there a way to delete an item from a dictionary in Python?</p>

<p>Additionally, how can I delete an item from a dictionary to return a copy (i.e., not modifying the original)?</p>
",<python><dictionary><del>,delete item dictionary additionally modifying copy original element return,"<p>The <a href=""http://docs.python.org/reference/simple_stmts.html#the-del-statement"" rel=""noreferrer""><code>del</code> statement</a> removes an element:</p>
<pre><code>del d[key]
</code></pre>
<p>Note that this mutates the existing dictionary, so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a <em>new</em> dictionary, make a copy of the dictionary:</p>
<pre><code>def removekey(d, key):
    r = dict(d)
    del r[key]
    return r
</code></pre>
<p>The <code>dict()</code> constructor makes a <em>shallow copy</em>. To make a deep copy, see the <a href=""https://docs.python.org/library/copy.html"" rel=""noreferrer""><code>copy</code> module</a>.</p>
<hr />
<p>Note that making a copy for every dict <code>del</code>/assignment/etc. means you're going from constant time to linear time, and also using linear space. For small dicts, this is not a problem. But if you're planning to make lots of copies of large dicts, you probably want a different data structure, like a HAMT (as described in <a href=""https://stackoverflow.com/a/50341031/908494"">this answer</a>).</p>
",,"<p>Careful with <code>""foo"".rstrip(os.linesep)</code>: That will only chomp the newline characters for the platform where your Python is being executed. Imagine you're chimping the lines of a Windows file under Linux, for instance:</p>

<pre><code>$ python
Python 2.7.1 (r271:86832, Mar 18 2011, 09:09:48) 
[GCC 4.5.0 20100604 [gcc-4_5-branch revision 160292]] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import os, sys
&gt;&gt;&gt; sys.platform
'linux2'
&gt;&gt;&gt; ""foo\r\n"".rstrip(os.linesep)
'foo\r'
&gt;&gt;&gt;
</code></pre>

<p>Use <code>""foo"".rstrip(""\r\n"")</code> instead, as Mike says above.</p>
"
67,6,How do you append to a file?,"<p>How do you append to the file instead of overwriting it? Is there a special function that appends to the file?</p>
","How do you append to a file?<p>How do you append to the file instead of overwriting it? Is there a special function that appends to the file?</p>
",<python><file><append>,append file overwriting appends special instead function figured fork forums,"<p>This can be achieved by setting the mode in <code>open()</code> to <code>&quot;a&quot;</code> (append) instead of <code>&quot;w&quot;</code> (write). See the <a href=""https://docs.python.org/3/library/functions.html#open"" rel=""noreferrer"">documentation</a> op <code>open()</code> for all available modes.</p>
<pre class=""lang-py prettyprint-override""><code>with open(&quot;test.txt&quot;, &quot;a&quot;) as myfile:
    myfile.write(&quot;appended text&quot;)
</code></pre>
",,"<p>You probably want to pass <code>""a""</code> as the mode argument.  See the docs for <a href=""http://docs.python.org/library/functions.html#open"" rel=""noreferrer"">open()</a>.</p>

<pre><code>with open(""foo"", ""a"") as f:
    f.write(""cool beans..."")
</code></pre>

<p>There are other permutations of the mode argument for updating (+), truncating (w) and binary (b) mode but starting with just <code>""a""</code> is your best bet.</p>
"
68,5,How do I check if a string is a number (float)?,"<p>What is the best possible way to check if a string can be represented as a number in Python?</p>
<p>The function I currently have right now is:</p>
<pre><code>def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
</code></pre>
<p>Which, not only is ugly and slow, but also seems clunky. However, I haven't found a better method because calling <code>float()</code> in the main function is even worse.</p>
","How do I check if a string is a number (float)?<p>What is the best possible way to check if a string can be represented as a number in Python?</p>
<p>The function I currently have right now is:</p>
<pre><code>def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
</code></pre>
<p>Which, not only is ugly and slow, but also seems clunky. However, I haven't found a better method because calling <code>float()</code> in the main function is even worse.</p>
",<python><casting><floating-point><type-conversion>,float number check worse represented function string slow clunky ugly,"<blockquote>
  <p>Which, not only is ugly and slow</p>
</blockquote>

<p>I'd dispute both.</p>

<p>A regex or other string parsing method would be uglier and slower.  </p>

<p>I'm not sure that anything much could be faster than the above.  It calls the function and returns.  Try/Catch doesn't introduce much overhead because the most common exception is caught without an extensive search of stack frames.</p>

<p>The issue is that any numeric conversion function has two kinds of results</p>

<ul>
<li>A number, if the number is valid</li>
<li>A status code (e.g., via errno) or exception to show that no valid number could be parsed.</li>
</ul>

<p>C (as an example) hacks around this a number of ways.  Python lays it out clearly and explicitly.</p>

<p>I think your code for doing this is perfect.</p>
",,"<p>The only really solid way of doing this is the following:</p>

<pre><code>if """".__eq__(myString):
</code></pre>

<p>All other solutions have possible problems and edge cases where the check can fail.</p>

<p><code>len(myString)==0</code> can fail if <code>myString</code> is an object of a class that inherits from <code>str</code> and overrides the <code>__len__()</code> method.</p>

<p>Similarly <code>myString == """"</code> and <code>myString.__eq__("""")</code> can fail if <code>myString</code> overrides <code>__eq__()</code> and <code>__ne__()</code>.</p>

<p>For some reason <code>"""" == myString</code> also gets fooled if <code>myString</code> overrides <code>__eq__()</code>.</p>

<p><code>myString is """"</code> and <code>"""" is myString</code> are equivalent. They will both fail if <code>myString</code> is not actually a string but a subclass of string (both will return <code>False</code>). Also, since they are identity checks, the only reason why they work is because Python uses String Pooling (also called String Internment) which uses the same instance of a string if it is interned (see here: <a href=""https://stackoverflow.com/questions/1504717/why-does-comparing-strings-using-either-or-is-sometimes-produce-a-differe"">Why does comparing strings using either &#39;==&#39; or &#39;is&#39; sometimes produce a different result?</a>). And <code>""""</code> is interned from the start in CPython</p>

<p>The big problem with the identity check is that String Internment is (as far as I could find) that it is not standardised which strings are interned. That means, theoretically <code>""""</code> is not necessary interned and that is implementation dependant.</p>

<p>The only way of doing this that really cannot be fooled is the one mentioned in the beginning: <code>"""".__eq__(myString)</code>. Since this explicitly calls the <code>__eq__()</code> method of the empty string it cannot be fooled by overriding any methods in myString and solidly works with subclasses of <code>str</code>.</p>

<p>Also relying on the falsyness of a string might not work if the object overrides it's <code>__bool__()</code> method.</p>

<p>This is not only theoretical work but might actually be relevant in real usage since I have seen frameworks and libraries subclassing <code>str</code> before and using <code>myString is """"</code> might return a wrong output there.</p>

<p>Also, comparing strings using <code>is</code> in general is a pretty evil trap since it will work correctly sometimes, but not at other times, since string pooling follows pretty strange rules.</p>

<p>That said, in most cases all of the mentioned solutions will work correctly. This is post is mostly academic work.</p>
"
69,5,How to pad zeroes to a string?,"<p>What is a Pythonic way to pad a numeric string with zeroes to the left, i.e. so the numeric string has a specific length?</p>
","How to pad zeroes to a string?<p>What is a Pythonic way to pad a numeric string with zeroes to the left, i.e. so the numeric string has a specific length?</p>
",<python><string><zero-padding>,pad zeroes numeric string left length pythonic specific way foo,"<p>Strings:</p>
<pre><code>&gt;&gt;&gt; n = '4'
&gt;&gt;&gt; print(n.zfill(3))
004
</code></pre>
<p>And for numbers:</p>
<pre><code>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; print(f'{n:03}') # Preferred method, python &gt;= 3.6
004
&gt;&gt;&gt; print('%03d' % n)
004
&gt;&gt;&gt; print(format(n, '03')) # python &gt;= 2.6
004
&gt;&gt;&gt; print('{0:03d}'.format(n))  # python &gt;= 2.6 + python 3
004
&gt;&gt;&gt; print('{foo:03d}'.format(foo=n))  # python &gt;= 2.6 + python 3
004
&gt;&gt;&gt; print('{:03d}'.format(n))  # python &gt;= 2.7 + python3
004
</code></pre>
<p><a href=""https://docs.python.org/3/library/string.html#format-string-syntax"" rel=""noreferrer"">String formatting documentation</a>.</p>
",,"<p>For Python 3.6+ using f-strings:</p>

<pre><code>&gt;&gt;&gt; i = 1
&gt;&gt;&gt; f""{i:0&gt;2}""  # Works for both numbers and strings.
'01'
&gt;&gt;&gt; f""{i:02}""  # Works only for numbers.
'01'
</code></pre>

<p>For Python 2 to Python 3.5:</p>

<pre><code>&gt;&gt;&gt; ""{:0&gt;2}"".format(""1"")  # Works for both numbers and strings.
'01'
&gt;&gt;&gt; ""{:02}"".format(1)  # Works only for numbers.
'01'
</code></pre>
"
70,2,Delete a column from a Pandas DataFrame,"<p>When deleting a column in a DataFrame I use:</p>
<pre><code>del df['column_name']
</code></pre>
<p>And this works great. Why can't I use the following?</p>
<pre><code>del df.column_name
</code></pre>
<p>Since it is possible to access the column/Series as <code>df.column_name</code>, I expected this to work.</p>
","Delete a column from a Pandas DataFrame<p>When deleting a column in a DataFrame I use:</p>
<pre><code>del df['column_name']
</code></pre>
<p>And this works great. Why can't I use the following?</p>
<pre><code>del df.column_name
</code></pre>
<p>Since it is possible to access the column/Series as <code>df.column_name</code>, I expected this to work.</p>
",<python><pandas><dataframe>,column columnname dataframe deleting use great delete expected df series,"<p>As you've guessed, the right syntax is </p>

<pre><code>del df['column_name']
</code></pre>

<p>It's difficult to make <code>del df.column_name</code> work simply as the result of syntactic limitations in Python. <code>del df[name]</code> gets translated to <code>df.__delitem__(name)</code> under the covers by Python.</p>
",,"<p>The dot syntax works in JavaScript, but not in Python.</p>

<ul>
<li>Python: <code>del df['column_name']</code></li>
<li>JavaScript: <code>del df['column_name']</code> <strong>or</strong> <code>del df.column_name</code></li>
</ul>
"
71,5,How to check if the string is empty?,"<p>Does Python have something like an empty string variable where you can do:</p>

<pre><code>if myString == string.empty:
</code></pre>

<p>Regardless, what's the most elegant way to check for empty string values? I find hard coding <code>""""</code> every time for checking an empty string not as good.</p>
","How to check if the string is empty?<p>Does Python have something like an empty string variable where you can do:</p>

<pre><code>if myString == string.empty:
</code></pre>

<p>Regardless, what's the most elegant way to check for empty string values? I find hard coding <code>""""</code> every time for checking an empty string not as good.</p>
",<python><string><comparison-operators>,string check regardless hard checking elegant coding good variable time,"<p>Empty strings are &quot;falsy&quot; (<a href=""http://docs.python.org/2/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">python 2</a> or <a href=""https://docs.python.org/3/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">python 3</a> reference), which means they are considered false in a Boolean context, so you can just do this:</p>
<pre><code>if not myString:
</code></pre>
<p>This is the preferred way if you know that your variable is a string.  If your variable could also be some other type then you should use <code>myString == &quot;&quot;</code>.  See the documentation on <a href=""http://docs.python.org/library/stdtypes.html#truth-value-testing"" rel=""noreferrer"">Truth Value Testing</a> for other values that are false in Boolean contexts.</p>
",,"<p>The only really solid way of doing this is the following:</p>

<pre><code>if """".__eq__(myString):
</code></pre>

<p>All other solutions have possible problems and edge cases where the check can fail.</p>

<p><code>len(myString)==0</code> can fail if <code>myString</code> is an object of a class that inherits from <code>str</code> and overrides the <code>__len__()</code> method.</p>

<p>Similarly <code>myString == """"</code> and <code>myString.__eq__("""")</code> can fail if <code>myString</code> overrides <code>__eq__()</code> and <code>__ne__()</code>.</p>

<p>For some reason <code>"""" == myString</code> also gets fooled if <code>myString</code> overrides <code>__eq__()</code>.</p>

<p><code>myString is """"</code> and <code>"""" is myString</code> are equivalent. They will both fail if <code>myString</code> is not actually a string but a subclass of string (both will return <code>False</code>). Also, since they are identity checks, the only reason why they work is because Python uses String Pooling (also called String Internment) which uses the same instance of a string if it is interned (see here: <a href=""https://stackoverflow.com/questions/1504717/why-does-comparing-strings-using-either-or-is-sometimes-produce-a-differe"">Why does comparing strings using either &#39;==&#39; or &#39;is&#39; sometimes produce a different result?</a>). And <code>""""</code> is interned from the start in CPython</p>

<p>The big problem with the identity check is that String Internment is (as far as I could find) that it is not standardised which strings are interned. That means, theoretically <code>""""</code> is not necessary interned and that is implementation dependant.</p>

<p>The only way of doing this that really cannot be fooled is the one mentioned in the beginning: <code>"""".__eq__(myString)</code>. Since this explicitly calls the <code>__eq__()</code> method of the empty string it cannot be fooled by overriding any methods in myString and solidly works with subclasses of <code>str</code>.</p>

<p>Also relying on the falsyness of a string might not work if the object overrides it's <code>__bool__()</code> method.</p>

<p>This is not only theoretical work but might actually be relevant in real usage since I have seen frameworks and libraries subclassing <code>str</code> before and using <code>myString is """"</code> might return a wrong output there.</p>

<p>Also, comparing strings using <code>is</code> in general is a pretty evil trap since it will work correctly sometimes, but not at other times, since string pooling follows pretty strange rules.</p>

<p>That said, in most cases all of the mentioned solutions will work correctly. This is post is mostly academic work.</p>
"
72,5,Meaning of @classmethod and @staticmethod for beginner?,"<p>Could someone explain to me the meaning of <code>@classmethod</code> and <code>@staticmethod</code> in python? I need to know the difference and the meaning. </p>

<p>As far as I understand, <code>@classmethod</code> tells a class that it's a method which should be inherited into subclasses, or... something. However, what's the point of that? Why not just define the class method without adding <code>@classmethod</code> or <code>@staticmethod</code> or any <code>@</code> definitions?</p>

<p><strong>tl;dr:</strong> <em>when</em> should I use them, <em>why</em> should I use them, and <em>how</em> should I use them?</p>
","Meaning of @classmethod and @staticmethod for beginner?<p>Could someone explain to me the meaning of <code>@classmethod</code> and <code>@staticmethod</code> in python? I need to know the difference and the meaning. </p>

<p>As far as I understand, <code>@classmethod</code> tells a class that it's a method which should be inherited into subclasses, or... something. However, what's the point of that? Why not just define the class method without adding <code>@classmethod</code> or <code>@staticmethod</code> or any <code>@</code> definitions?</p>

<p><strong>tl;dr:</strong> <em>when</em> should I use them, <em>why</em> should I use them, and <em>how</em> should I use them?</p>
",<python><oop><static-methods><class-method>,classmethod staticmethod meaning class use method subclasses tl dr tells,"<p>Though <code>classmethod</code> and <code>staticmethod</code> are quite similar, there's a slight difference in usage for both entities: <code>classmethod</code> must have a reference to a class object as the first parameter, whereas <code>staticmethod</code> can have no parameters at all.</p>

<h2>Example</h2>

<pre><code>class Date(object):

    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year

    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        return date1

    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999

date2 = Date.from_string('11-09-2012')
is_date = Date.is_date_valid('11-09-2012')
</code></pre>

<h2>Explanation</h2>

<p>Let's assume an example of a class, dealing with date information (this will be our boilerplate):</p>

<pre><code>class Date(object):

    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year
</code></pre>

<p>This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC).</p>

<p>Here we have <code>__init__</code>, a typical initializer of Python class instances, which receives arguments as a typical <code>instancemethod</code>, having the first non-optional argument (<code>self</code>) that holds a reference to a newly created instance.</p>

<p><strong>Class Method</strong></p>

<p>We have some tasks that can be nicely done using <code>classmethod</code>s.</p>

<p><em>Let's assume that we want to create a lot of <code>Date</code> class instances having date information coming from an outer source encoded as a string with format 'dd-mm-yyyy'. Suppose we have to do this in different places in the source code of our project.</em></p>

<p>So what we must do here is:</p>

<ol>
<li>Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable.</li>
<li>Instantiate <code>Date</code> by passing those values to the initialization call.</li>
</ol>

<p>This will look like:</p>

<pre><code>day, month, year = map(int, string_date.split('-'))
date1 = Date(day, month, year)
</code></pre>

<p>For this purpose, C++ can implement such a feature with overloading, but Python lacks this overloading. Instead, we can use <code>classmethod</code>. Let's create another ""<em>constructor</em>"".</p>

<pre><code>    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        return date1

date2 = Date.from_string('11-09-2012')
</code></pre>

<p>Let's look more carefully at the above implementation, and review what advantages we have here:</p>

<ol>
<li>We've implemented date string parsing in one place and it's reusable now.</li>
<li>Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits the OOP paradigm far better).</li>
<li><code>cls</code> is an object that holds the <strong>class itself</strong>, not an instance of the class. It's pretty cool because if we inherit our <code>Date</code> class, all children will have <code>from_string</code> defined also.</li>
</ol>

<p><strong>Static method</strong></p>

<p>What about <code>staticmethod</code>? It's pretty similar to <code>classmethod</code> but doesn't take any obligatory parameters (like a class method or instance method does).</p>

<p>Let's look at the next use case.</p>

<p><em>We have a date string that we want to validate somehow. This task is also logically bound to the <code>Date</code> class we've used so far, but doesn't require instantiation of it.</em></p>

<p>Here is where <code>staticmethod</code> can be useful. Let's look at the next piece of code:</p>

<pre><code>    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999

    # usage:
    is_date = Date.is_date_valid('11-09-2012')
</code></pre>

<p>So, as we can see from usage of <code>staticmethod</code>, we don't have any access to what the class is---it's basically just a function,  called syntactically like a method, but without access to the object and its internals (fields and another methods), while classmethod does.</p>
",,"<p>I'm a beginner on this site, I have read all above answers, and got the information what I want. However, I don't have the right to upvote.  So I want to get my start on StackOverflow with the answer as I understand it.</p>

<ul>
<li><code>@staticmethod</code> doesn't need self or cls as the first parameter of the method</li>
<li><code>@staticmethod</code> and <code>@classmethod</code> wrapped function could be called by instance or class variable</li>
<li><code>@staticmethod</code> decorated function impact some kind 'immutable property' that subclass inheritance can't overwrite its base class function which is wrapped by a <code>@staticmethod</code> decorator. </li>
<li><code>@classmethod</code> need cls (Class name, you could change the variable name if you want, but it's not advised) as the first parameter of function</li>
<li><code>@classmethod</code> always used by subclass manner, subclass inheritance may change the effect of base class function, i.e. <code>@classmethod</code> wrapped base class function could be overwritten by different subclasses.</li>
</ul>
"
73,5,Getting the class name of an instance?,"<p>How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?</p>

<p>Was thinking maybe <a href=""https://docs.python.org/2/library/inspect.html"" rel=""noreferrer"" title=""inspect ƒ?? Inspect live objects"">the inspect module</a> might have helped me out here, but it doesn't seem to give me what I want. And short of parsing the <code>__class__</code> member, I'm not sure how to get at this information.</p>
","Getting the class name of an instance?<p>How do I find out a name of class that created an instance of an object in Python if the function I am doing this from is the base class of which the class of the instance has been derived?</p>

<p>Was thinking maybe <a href=""https://docs.python.org/2/library/inspect.html"" rel=""noreferrer"" title=""inspect ƒ?? Inspect live objects"">the inspect module</a> might have helped me out here, but it doesn't seem to give me what I want. And short of parsing the <code>__class__</code> member, I'm not sure how to get at this information.</p>
",<python><introspection><instanceof><python-datamodel>,class instance helped inspect thinking derived base member parsing short,"<p>Have you tried the <a href=""https://docs.python.org/library/stdtypes.html#definition.__name__"" rel=""noreferrer""><code>__name__</code> attribute</a> of the class? ie <code>type(x).__name__</code> will give you the name of the class, which I think is what you want.</p>

<pre><code>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; x = itertools.count(0)
&gt;&gt;&gt; type(x).__name__
'count'
</code></pre>

<p>If you're still using Python 2, note that the above method works with <a href=""https://wiki.python.org/moin/NewClassVsClassicClass"" rel=""noreferrer"">new-style classes</a> only (in Python 3+ all classes are ""new-style"" classes). Your code might use some old-style classes. The following works for both:</p>

<pre><code>x.__class__.__name__
</code></pre>
",,"<p>Alternatively you can use the <code>classmethod</code> decorator:</p>

<pre class=""lang-python prettyprint-override""><code>class A:
    @classmethod
    def get_classname(cls):
        return cls.__name__

    def use_classname(self):
        return self.get_classname()
</code></pre>

<p><strong>Usage</strong>:</p>

<pre class=""lang-python prettyprint-override""><code>&gt;&gt;&gt; A.get_classname()
'A'
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.get_classname()
'A'
&gt;&gt;&gt; a.use_classname()
'A'
</code></pre>
"
74,3,Replacements for switch statement in Python?,"<p>I want to write a function in Python that returns different fixed values based on the value of an input index.  </p>

<p>In other languages I would use a <code>switch</code> or <code>case</code> statement, but Python does not appear to have a <code>switch</code> statement.  What are the recommended Python solutions in this scenario?</p>
","Replacements for switch statement in Python?<p>I want to write a function in Python that returns different fixed values based on the value of an input index.  </p>

<p>In other languages I would use a <code>switch</code> or <code>case</code> statement, but Python does not appear to have a <code>switch</code> statement.  What are the recommended Python solutions in this scenario?</p>
",<python><switch-statement>,switch statement replacements appear fixed scenario recommended python languages solutions,"<p>The original answer below was written in 2008. Since then, Python 3.10 (2021) introduced the <a href=""https://www.python.org/dev/peps/pep-0634/"" rel=""noreferrer""><code>match</code>-<code>case</code></a> statement which provides a first-class implementation of a &quot;switch&quot; for Python. For example:</p>
<pre><code>def f(x):
    match x:
        case 'a':
            return 1
        case 'b':
            return 2
        case _:        
            return 0   # 0 is the default case if x is not found
</code></pre>
<p>The <code>match</code>-<code>case</code> statement is considerably more powerful than this simple example.</p>
<hr />
<p>You could use a dictionary:</p>
<pre><code>def f(x):
    return {
        'a': 1,
        'b': 2,
    }[x]
</code></pre>
",,"<p>Solution to run functions:</p>
<pre><code>result = {
    'case1':     foo1, 
    'case2':     foo2,
    'case3':     foo3,
}.get(option)(parameters_optional)
</code></pre>
<p>where foo1(), foo2() and foo3() are functions</p>
<p><strong>Example 1</strong> (with parameters):</p>
<pre><code>option = number['type']
result = {
    'number':     value_of_int,  # result = value_of_int(number['value'])
    'text':       value_of_text, # result = value_of_text(number['value'])
    'binary':     value_of_bin,  # result = value_of_bin(number['value'])
}.get(option)(value['value'])
</code></pre>
<p><strong>Example 2</strong> (no parameters):</p>
<pre><code>option = number['type']
result = {
    'number':     func_for_number, # result = func_for_number()
    'text':       func_for_text,   # result = func_for_text()
    'binary':     func_for_bin,    # result = func_for_bin()
}.get(option)()
</code></pre>
"
75,3,Pythonic way to create a long multi-line string,"<p>I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a <code>+</code> operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:</p>

<pre><code>var long_string = 'some text not important. just garbage to' +
                  'illustrate my example';
</code></pre>

<p>I tried doing something similar in Python, but it didn't work, so I used <code>\</code> to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward. 
Actual code:</p>

<pre><code>query = 'SELECT action.descr as ""action"", '\
    'role.id as role_id,'\
    'role.descr as role'\
    'FROM '\
    'public.role_action_def,'\
    'public.role,'\
    'public.record_def, '\
    'public.action'\
    'WHERE role.id = role_action_def.role_id AND'\
    'record_def.id = role_action_def.def_id AND'\
    'action.id = role_action_def.action_id AND'\
    'role_action_def.account_id = ' + account_id + ' AND'\
    'record_def.account_id=' + account_id + ' AND'\
    'def_id=' + def_id
</code></pre>
","Pythonic way to create a long multi-line string<p>I have a very long query. I would like to split it in several lines in Python. A way to do it in JavaScript would be using several sentences and joining them with a <code>+</code> operator (I know, maybe it's not the most efficient way to do it, but I'm not really concerned about performance in this stage, just code readability). Example:</p>

<pre><code>var long_string = 'some text not important. just garbage to' +
                  'illustrate my example';
</code></pre>

<p>I tried doing something similar in Python, but it didn't work, so I used <code>\</code> to split the long string. However, I'm not sure if this is the only/best/pythonicest way of doing it. It looks awkward. 
Actual code:</p>

<pre><code>query = 'SELECT action.descr as ""action"", '\
    'role.id as role_id,'\
    'role.descr as role'\
    'FROM '\
    'public.role_action_def,'\
    'public.role,'\
    'public.record_def, '\
    'public.action'\
    'WHERE role.id = role_action_def.role_id AND'\
    'record_def.id = role_action_def.def_id AND'\
    'action.id = role_action_def.action_id AND'\
    'role_action_def.account_id = ' + account_id + ' AND'\
    'record_def.account_id=' + account_id + ' AND'\
    'def_id=' + def_id
</code></pre>
",<python><string><multiline><multilinestring>,long split way joining stage pythonicest awkward sentences concerned readability,"<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>

<pre><code>s = """""" this is a very
        long string if I had the
        energy to type more and more ...""""""
</code></pre>

<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>

<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>

<p>I.e.,:</p>

<pre><code>' this is a very\n        long string if I had the\n        energy to type more and more ...'
</code></pre>

<p>Finally, one can also construct long lines in Python like this:</p>

<pre><code> s = (""this is a very""
      ""long string too""
      ""for sure ...""
     )
</code></pre>

<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>

<pre><code>'this is a verylong string toofor sure ...'
</code></pre>

<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>
",,"<p>I find that when building long strings, you are usually doing something like building an SQL query, in which case this is best:</p>
<pre><code>query = ' '.join((  # Note double parentheses. join() takes an iterable
    &quot;SELECT foo&quot;,
    &quot;FROM bar&quot;,
    &quot;WHERE baz&quot;,
))
</code></pre>
<p>What <a href=""https://stackoverflow.com/questions/10660435/pythonic-way-to-create-a-long-multi-line-string/10660443#10660443"">Levon suggested</a> is good, but it might be vulnerable to mistakes:</p>
<pre><code>query = (
    &quot;SELECT foo&quot;
    &quot;FROM bar&quot;
    &quot;WHERE baz&quot;
)

query == &quot;SELECT fooFROM barWHERE baz&quot;  # Probably not what you want
</code></pre>
"
76,1,Installing specific package versions with pip,"<p>I am trying to install version 1.2.2 of <code>MySQL_python</code>, using a fresh virtualenv created with the <code>--no-site-packages</code> option. The current version shown in PyPi is <a href=""http://pypi.python.org/pypi/MySQL-python/1.2.3"" rel=""noreferrer"">1.2.3</a>. Is there a way to install the older version? I have tried:</p>
<pre class=""lang-sh prettyprint-override""><code>pip install MySQL_python==1.2.2
</code></pre>
<p>However, when installed, it still shows <code>MySQL_python-1.2.3-py2.6.egg-info</code> in the site packages. Is this a problem specific to this package, or am I doing something wrong?</p>
","Installing specific package versions with pip<p>I am trying to install version 1.2.2 of <code>MySQL_python</code>, using a fresh virtualenv created with the <code>--no-site-packages</code> option. The current version shown in PyPi is <a href=""http://pypi.python.org/pypi/MySQL-python/1.2.3"" rel=""noreferrer"">1.2.3</a>. Is there a way to install the older version? I have tried:</p>
<pre class=""lang-sh prettyprint-override""><code>pip install MySQL_python==1.2.2
</code></pre>
<p>However, when installed, it still shows <code>MySQL_python-1.2.3-py2.6.egg-info</code> in the site packages. Is this a problem specific to this package, or am I doing something wrong?</p>
",<python><mysql><pip><pypi><mysql-python>,mysqlpython version site packages specific package install pipi older pypi,"<p>TL;DR:</p>

<ul>
<li><code>pip install -Iv</code> (i.e. <code>pip install -Iv MySQL_python==1.2.2</code>)</li>
</ul>

<p>First, I see two issues with what you're trying to do. Since you already have an installed version, you should either uninstall the current existing driver or use <code>pip install -I MySQL_python==1.2.2</code></p>

<p>However, you'll soon find out that this doesn't work. If you look at pip's installation log, or if you do a <code>pip install -Iv MySQL_python==1.2.2</code> you'll find that the PyPI URL link does not work for MySQL_python v1.2.2. You can verify this here: <a href=""http://pypi.python.org/pypi/MySQL-python/1.2.2"" rel=""noreferrer"">http://pypi.python.org/pypi/MySQL-python/1.2.2</a></p>

<p>The download link 404s and the fallback URL links are re-directing infinitely due to sourceforge.net's recent upgrade and PyPI's stale URL.</p>

<p>So to properly install the driver, you can follow these steps:</p>

<pre><code>pip uninstall MySQL_python
pip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download
</code></pre>
",,"<p>There are 2 ways you may install any package with version:-
<strong>A). pip install -Iv package-name == version</strong>
<strong>B). pip install -v package-name == version</strong></p>

<p><strong>For A</strong></p>

<p>Here, if you're using -I option while installing(when you don't know if the package is already installed) (like 'pip install -Iv pyreadline == 2.* 'or something), you would be installing a new separate package with the same existing package having some different version.</p>

<p><strong>For B</strong></p>

<ol>
<li>At first, you may want to check for no broken requirements. 
<strong>pip check</strong></li>
</ol>

<p>2.and then see what's already installed by 
<strong>pip list</strong></p>

<p>3.if the list of the packages contain any package that you wish to install with specific version then the better option is to uninstall the package of this version first, by 
<strong>pip uninstall package-name</strong></p>

<p>4.And now you can go ahead to reinstall the same package with a specific version, by
<strong>pip install -v package-name==version</strong>
e.g. pip install -v pyreadline == 2.*</p>
"
77,3,Generate random integers between 0 and 9,"<p>How can I generate random integers between 0 and 9 (inclusive) in Python?</p>

<p>For example, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code></p>
","Generate random integers between 0 and 9<p>How can I generate random integers between 0 and 9 (inclusive) in Python?</p>

<p>For example, <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, <code>8</code>, <code>9</code></p>
",<python><random><integer>,generate random integers inclusive example python format,"<p>Try:</p>
<pre><code>from random import randrange
print(randrange(10))
</code></pre>
<p><strong>Docs:</strong> <a href=""https://docs.python.org/3/library/random.html#random.randrange"" rel=""noreferrer"">https://docs.python.org/3/library/random.html#random.randrange</a></p>
",,"<p>Best way is to use import Random function  </p>

<pre><code>import random
print(random.sample(range(10), 10))
</code></pre>

<p>or without any library import:</p>

<pre><code>n={} 
for i in range(10):
    n[i]=i

for p in range(10):
    print(n.popitem()[1])
</code></pre>

<p>here the <a href=""https://docs.python.org/3.6/library/stdtypes.html#dict.popitem"" rel=""noreferrer"">popitems</a> removes and returns an arbitrary value from the dictionary <code>n</code>.</p>
"
78,1,"What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?","<p>Python 3.3 includes in its standard library the new package <code>venv</code>. What does it do, and how does it differ from all the other packages that seem to match the regex <code>(py)?(v|virtual|pip)?env</code>?</p>
","What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?<p>Python 3.3 includes in its standard library the new package <code>venv</code>. What does it do, and how does it differ from all the other packages that seem to match the regex <code>(py)?(v|virtual|pip)?env</code>?</p>
",<python><virtualenv><virtualenvwrapper><pyenv><python-venv>,venv regex pipenv pyenv pyvenv env includes virtualenvwrapper virtual match,"<h1>Recommendation for beginners:</h1>
<p>This is my personal recommendation for beginners: start by learning <a href=""https://pypi.org/project/virtualenv/"" rel=""noreferrer""><code>virtualenv</code></a> and <a href=""https://pypi.org/project/pip/"" rel=""noreferrer""><code>pip</code></a>, tools which work with both Python 2 and 3 and in a variety of situations, and pick up other tools once you start needing them.</p>
<h1>PyPI packages not in the standard library:</h1>
<ul>
<li><strong><a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer""><code>virtualenv</code></a></strong> is a very popular tool that creates isolated Python environments for Python libraries. If you're not familiar with this tool, I highly recommend learning it, as it is a very useful tool, and I'll be making comparisons to it for the rest of this answer.</li>
</ul>
<p>It works by installing a bunch of files in a directory (eg: <code>env/</code>), and then modifying the <code>PATH</code> environment variable to prefix it with a custom <code>bin</code> directory (eg: <code>env/bin/</code>). An exact copy of the <code>python</code> or <code>python3</code> binary is placed in this directory, but Python is programmed to look for libraries relative to its path first, in the environment directory. It's not part of Python's standard library, but is officially blessed by the PyPA (Python Packaging Authority). Once activated, you can install packages in the virtual environment using <code>pip</code>.</p>
<ul>
<li><p><strong><a href=""https://github.com/yyuu/pyenv"" rel=""noreferrer""><code>pyenv</code></a></strong> is used to isolate Python versions. For example, you may want to test your code against Python 2.7, 3.6, 3.7 and 3.8, so you'll need a way to switch between them. Once activated, it prefixes the <code>PATH</code> environment variable with <code>~/.pyenv/shims</code>, where there are special files matching the Python commands (<code>python</code>, <code>pip</code>). These are not copies of the Python-shipped commands; they are special scripts that decide on the fly which version of Python to run based on the <code>PYENV_VERSION</code> environment variable, or the <code>.python-version</code> file, or the <code>~/.pyenv/version</code> file. <code>pyenv</code> also makes the process of downloading and installing multiple Python versions easier, using the command <code>pyenv install</code>.</p>
</li>
<li><p><strong><a href=""https://github.com/yyuu/pyenv-virtualenv"" rel=""noreferrer""><code>pyenv-virtualenv</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to allow you to use <code>pyenv</code> and <code>virtualenv</code> at the same time conveniently. However, if you're using Python 3.3 or later, <code>pyenv-virtualenv</code> will try to run <code>python -m venv</code> if it is available, instead of <code>virtualenv</code>. You can use <code>virtualenv</code> and <code>pyenv</code> together without <code>pyenv-virtualenv</code>, if you don't want the convenience features.</p>
</li>
<li><p><strong><a href=""https://pypi.python.org/pypi/virtualenvwrapper"" rel=""noreferrer""><code>virtualenvwrapper</code></a></strong> is a set of extensions to <code>virtualenv</code> (see <a href=""http://virtualenvwrapper.readthedocs.io/en/latest/"" rel=""noreferrer"">docs</a>). It gives you commands like <code>mkvirtualenv</code>, <code>lssitepackages</code>, and especially <code>workon</code> for switching between different <code>virtualenv</code> directories. This tool is especially useful if you want multiple <code>virtualenv</code> directories.</p>
</li>
<li><p><strong><a href=""https://github.com/yyuu/pyenv-virtualenvwrapper"" rel=""noreferrer""><code>pyenv-virtualenvwrapper</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to conveniently integrate <code>virtualenvwrapper</code> into <code>pyenv</code>.</p>
</li>
<li><p><strong><a href=""https://pypi.python.org/pypi/pipenv"" rel=""noreferrer""><code>pipenv</code></a></strong> aims to combine <code>Pipfile</code>, <code>pip</code> and <code>virtualenv</code> into one command on the command-line. The <code>virtualenv</code> directory typically gets placed in <code>~/.local/share/virtualenvs/XXX</code>, with <code>XXX</code> being a hash of the path of the project directory. This is different from <code>virtualenv</code>, where the directory is typically in the current working directory. <code>pipenv</code> is meant to be used when developing Python applications (as opposed to libraries). There are alternatives to <code>pipenv</code>, such as <code>poetry</code>, which I won't list here since this question is only about the packages that are similarly named.</p>
</li>
</ul>
<h1>Standard library:</h1>
<ul>
<li><p><strong><code>pyvenv</code></strong> (not to be confused with <strong><a href=""https://github.com/yyuu/pyenv"" rel=""noreferrer""><code>pyenv</code></a></strong> in the previous section) is a script shipped with Python 3 but <a href=""https://docs.python.org/dev/whatsnew/3.6.html#id8"" rel=""noreferrer"">deprecated in Python 3.6</a> as it had problems (not to mention the confusing name). In Python 3.6+, the exact equivalent is <code>python3 -m venv</code>.</p>
</li>
<li><p><strong><a href=""https://docs.python.org/3/library/venv.html"" rel=""noreferrer""><code>venv</code></a></strong> is a package shipped with Python 3, which you can run using <code>python3 -m venv</code> (although for some reason some distros separate it out into a separate distro package, such as <code>python3-venv</code> on Ubuntu/Debian). It serves the same purpose as <code>virtualenv</code>, but only has a subset of its features (<a href=""https://virtualenv.pypa.io/en/latest/"" rel=""noreferrer"">see a comparison here</a>). <code>virtualenv</code> continues to be more popular than <code>venv</code>, especially since the former supports both Python 2 and 3.</p>
</li>
</ul>
",,"<p><strong>Jan 2020 Update</strong></p>
<p>@Flimm has explained all the differences very well. Generally, we want to know the difference between all tools because we want to decide what's best for us. So, the next question would be: which one to use? I suggest you choose one of the two official ways to manage virtual environments:</p>
<ul>
<li>Python Packaging now <a href=""https://packaging.python.org/tutorials/managing-dependencies/"" rel=""noreferrer"">recommends Pipenv</a></li>
<li>Python.org now <a href=""https://docs.python.org/3/library/venv.html"" rel=""noreferrer"">recommends venv</a></li>
</ul>
"
79,3,Extracting extension from filename in Python,"<p>Is there a function to extract the extension from a filename?</p>
","Extracting extension from filename in Python<p>Is there a function to extract the extension from a filename?</p>
",<python><filenames><file-extension>,filename extension extracting python extract function formats,"<p>Yes. Use <code>os.path.splitext</code>(see <a href=""https://docs.python.org/2/library/os.path.html#os.path.splitext"" rel=""noreferrer"">Python 2.X documentation</a> or <a href=""https://docs.python.org/3/library/os.path.html#os.path.splitext"" rel=""noreferrer"">Python 3.X documentation</a>):</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; filename, file_extension = os.path.splitext('/path/to/somefile.ext')
&gt;&gt;&gt; filename
'/path/to/somefile'
&gt;&gt;&gt; file_extension
'.ext'
</code></pre>

<p>Unlike most manual string-splitting attempts, <code>os.path.splitext</code> will correctly treat <code>/a/b.c/d</code> as having no extension instead of having extension <code>.c/d</code>, and it will treat <code>.bashrc</code> as having no extension instead of having extension <code>.bashrc</code>:</p>

<pre><code>&gt;&gt;&gt; os.path.splitext('/a/b.c/d')
('/a/b.c/d', '')
&gt;&gt;&gt; os.path.splitext('.bashrc')
('.bashrc', '')
</code></pre>
",,"<h1>Extracting extension from filename in Python</h1>
<h2>Python os module splitext()</h2>
<p><strong>splitext()</strong> function splits the file path into a tuple having two values ƒ?? root and extension.</p>
<pre><code>import os
# unpacking the tuple
file_name, file_extension = os.path.splitext(&quot;/Users/Username/abc.txt&quot;)
print(file_name)
print(file_extension)
</code></pre>
<h2>Get File Extension using Pathlib Module</h2>
<p>Pathlib module to get the file extension</p>
<pre><code>import pathlib
pathlib.Path(&quot;/Users/pankaj/abc.txt&quot;).suffix
#output:'.txt'
</code></pre>
"
80,5,Random string generation with upper case letters and digits,"<p>I want to generate a string of size N.</p>
<p>It should be made up of numbers and uppercase English letters such as:</p>
<ul>
<li>6U1S75</li>
<li>4Z4UKK</li>
<li>U911K4</li>
</ul>
<p>How can I achieve this in a <a href=""https://en.wikipedia.org/wiki/Python_%28programming_language%29#Design_philosophy_and_features"" rel=""noreferrer"">pythonic</a> way?</p>
","Random string generation with upper case letters and digits<p>I want to generate a string of size N.</p>
<p>It should be made up of numbers and uppercase English letters such as:</p>
<ul>
<li>6U1S75</li>
<li>4Z4UKK</li>
<li>U911K4</li>
</ul>
<p>How can I achieve this in a <a href=""https://en.wikipedia.org/wiki/Python_%28programming_language%29#Design_philosophy_and_features"" rel=""noreferrer"">pythonic</a> way?</p>
",<python><string><random>,letters digits upper english generation string uppercase generate random,"<p><strong>Answer in one line:</strong></p>
<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))
</code></pre>
<p>or even shorter starting with Python 3.6 using <a href=""https://docs.python.org/3/library/random.html#random.choices"" rel=""noreferrer""><code>random.choices()</code></a>:</p>
<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))
</code></pre>
<p><strong>A cryptographically more secure version:</strong> <a href=""https://stackoverflow.com/a/23728630/2213647"">see this post</a></p>
<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))
</code></pre>
<p><strong>In details, with a clean function for further reuse:</strong></p>
<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; import random
&gt;&gt;&gt; def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
...    return ''.join(random.choice(chars) for _ in range(size))
...
&gt;&gt;&gt; id_generator()
'G5G74W'
&gt;&gt;&gt; id_generator(3, &quot;6793YUIO&quot;)
'Y3U'
</code></pre>
<p><strong>How does it work ?</strong></p>
<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>
<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>
<pre><code>&gt;&gt;&gt; string.ascii_uppercase
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; string.digits
'0123456789'
&gt;&gt;&gt; string.ascii_uppercase + string.digits
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
</code></pre>
<p>Then we use a list comprehension to create a list of 'n' elements:</p>
<pre><code>&gt;&gt;&gt; range(4) # range create a list of 'n' numbers
[0, 1, 2, 3]
&gt;&gt;&gt; ['elem' for _ in range(4)] # we use range to create 4 times 'elem'
['elem', 'elem', 'elem', 'elem']
</code></pre>
<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href=""https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855"">here</a>).</p>
<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>
<pre><code>&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'a'
&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'd'
&gt;&gt;&gt; random.choice(&quot;abcde&quot;)
'b'
</code></pre>
<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>
<pre><code>&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['a', 'b', 'b']
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['e', 'b', 'e']
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['d', 'a', 'c']
</code></pre>
<p>Then we just join them with an empty string so the sequence becomes a string:</p>
<pre><code>&gt;&gt;&gt; ''.join(['a', 'b', 'b'])
'abb'
&gt;&gt;&gt; [random.choice('abcde') for _ in range(3)]
['d', 'c', 'b']
&gt;&gt;&gt; ''.join(random.choice('abcde') for _ in range(3))
'dac'
</code></pre>
",,"<p>A simpler, faster but slightly less random way is to use <code>random.sample</code> instead of choosing each letter separately, If n-repetitions are allowed, enlarge your random basis by n times e.g.</p>

<pre><code>import random
import string

char_set = string.ascii_uppercase + string.digits
print ''.join(random.sample(char_set*6, 6))
</code></pre>

<p>Note:
random.sample prevents character reuse, multiplying the size of the character set makes multiple repetitions possible, but they are still less likely then they are in a pure random choice. If we go for a string of length 6, and we pick 'X' as the first character, in the choice example, the odds of getting 'X' for the second character are the same as the odds of getting 'X' as the first character. In the random.sample implementation, the odds of getting 'X' as any subsequent character are only 6/7 the chance of getting it as the first character</p>
"
81,3,How to print to stderr in Python?,"<p>There are several ways to write to stderr:</p>

<pre><code># Note: this first one does not work in Python 3
print &gt;&gt; sys.stderr, ""spam""

sys.stderr.write(""spam\n"")

os.write(2, b""spam\n"")

from __future__ import print_function
print(""spam"", file=sys.stderr)
</code></pre>

<p>That seems to contradict <em>zen of Python #13</em> <sup>ƒ?ÿ</sup>, so what's the difference here and are there any advantages or disadvantages to one way or the other? Which way should be used?</p>

<p><sup>ƒ?ÿ</sup> <sub>There should be one ƒ?? and preferably only one ƒ?? obvious way to do it.</sub></p>
","How to print to stderr in Python?<p>There are several ways to write to stderr:</p>

<pre><code># Note: this first one does not work in Python 3
print &gt;&gt; sys.stderr, ""spam""

sys.stderr.write(""spam\n"")

os.write(2, b""spam\n"")

from __future__ import print_function
print(""spam"", file=sys.stderr)
</code></pre>

<p>That seems to contradict <em>zen of Python #13</em> <sup>ƒ?ÿ</sup>, so what's the difference here and are there any advantages or disadvantages to one way or the other? Which way should be used?</p>

<p><sup>ƒ?ÿ</sup> <sub>There should be one ƒ?? and preferably only one ƒ?? obvious way to do it.</sub></p>
",<python><printing><stderr><zen-of-python>,stderr contradict zen way preferably disadvantages advantages obvious ways print,"<p>I found this to be the only one short, flexible, portable and readable:</p>
<pre><code># This line only if you still care about Python2
from __future__ import print_function

import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
</code></pre>
<p>The optional function <code>eprint</code> saves some repetition. It can be used in the same way as the standard <code>print</code> function:</p>
<pre><code>&gt;&gt;&gt; print(&quot;Test&quot;)
Test
&gt;&gt;&gt; eprint(&quot;Test&quot;)
Test
&gt;&gt;&gt; eprint(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, sep=&quot;---&quot;)
foo---bar---baz
</code></pre>
",,"<p>I found this to be the only one short, flexible, portable and readable:</p>
<pre><code># This line only if you still care about Python2
from __future__ import print_function

import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
</code></pre>
<p>The optional function <code>eprint</code> saves some repetition. It can be used in the same way as the standard <code>print</code> function:</p>
<pre><code>&gt;&gt;&gt; print(&quot;Test&quot;)
Test
&gt;&gt;&gt; eprint(&quot;Test&quot;)
Test
&gt;&gt;&gt; eprint(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, sep=&quot;---&quot;)
foo---bar---baz
</code></pre>
"
82,5,What is the meaning of single and double underscore before an object name?,"<p>Can someone please explain the exact meaning of having single and double leading underscores before an object's name in Python, and the difference between both?</p>
<p>Also, does that meaning stay the same regardless of whether the object in question is a variable, a function, a method, etc.?</p>
","What is the meaning of single and double underscore before an object name?<p>Can someone please explain the exact meaning of having single and double leading underscores before an object's name in Python, and the difference between both?</p>
<p>Also, does that meaning stay the same regardless of whether the object in question is a variable, a function, a method, etc.?</p>
",<python><oop><naming-conventions><identifier>,meaning double object single stay leading underscore underscores regardless exact,"<h2>Single Underscore</h2>

<p>Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private.  However, nothing special is done with the name itself.</p>

<p>To quote <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">PEP-8</a>:</p>

<blockquote>
  <p>_single_leading_underscore: weak ""internal use"" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>
</blockquote>

<h2>Double Underscore (Name Mangling)</h2>

<p>From <a href=""https://docs.python.org/3/tutorial/classes.html#private-variables"" rel=""noreferrer"">the Python docs</a>:</p>

<blockquote>
  <p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. </p>
</blockquote>

<p>And a warning from the same page:</p>

<blockquote>
  <p>Name mangling is intended to give classes an easy way to define ƒ??privateƒ? instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.</p>
</blockquote>

<h2>Example</h2>

<pre><code>&gt;&gt;&gt; class MyClass():
...     def __init__(self):
...             self.__superprivate = ""Hello""
...             self._semiprivate = "", world!""
...
&gt;&gt;&gt; mc = MyClass()
&gt;&gt;&gt; print mc.__superprivate
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: myClass instance has no attribute '__superprivate'
&gt;&gt;&gt; print mc._semiprivate
, world!
&gt;&gt;&gt; print mc.__dict__
{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}
</code></pre>
",,"<p><strong>Single underscore at the beginning:</strong></p>

<p>Python doesn't have real private methods. Instead, one underscore at the start of a method or attribute name means you shouldn't access this method, because it's not part of the API.</p>

<pre><code>class BaseForm(StrAndUnicode):

    def _get_errors(self):
        ""Returns an ErrorDict for the data provided for the form""
        if self._errors is None:
            self.full_clean()
        return self._errors

    errors = property(_get_errors)
</code></pre>

<p>(This code snippet was taken from django source code: django/forms/forms.py). In this code, <code>errors</code> is a public property, but the method this property calls, _get_errors, is ""private"", so you shouldn't access it.</p>

<p><strong>Two underscores at the beginning:</strong></p>

<p>This causes a lot of confusion. It should not be used to create a private method. It should be used to avoid your method being overridden by a subclass or accessed accidentally. Let's see an example:</p>

<pre><code>class A(object):
    def __test(self):
        print ""I'm a test method in class A""

    def test(self):
        self.__test()

a = A()
a.test()
# a.__test() # This fails with an AttributeError
a._A__test() # Works! We can access the mangled name directly!
</code></pre>

<p>Output: </p>

<pre><code>$ python test.py
I'm test method in class A
I'm test method in class A
</code></pre>

<p>Now create a subclass B and do customization for __test method</p>

<pre><code>class B(A):
    def __test(self):
        print ""I'm test method in class B""

b = B()
b.test()
</code></pre>

<p>Output will be....</p>

<pre><code>$ python test.py
I'm test method in class A
</code></pre>

<p>As we have seen, A.test() didn't call B.__test() methods, as we might expect. But in fact, this is the correct behavior for __. The two methods called __test() are automatically renamed (mangled) to _A__test() and _B__test(), so they do not accidentally override.  When you create a method starting with __ it means that you don't want to anyone to be able to override it, and you only intend to access it from inside its own class.</p>

<p><strong>Two underscores at the beginning and at the end:</strong></p>

<p>When we see a method like <code>__this__</code>, don't call it. This is a method which python is meant to call, not you. Let's take a look:</p>

<pre><code>&gt;&gt;&gt; name = ""test string""
&gt;&gt;&gt; name.__len__()
11
&gt;&gt;&gt; len(name)
11

&gt;&gt;&gt; number = 10
&gt;&gt;&gt; number.__add__(40)
50
&gt;&gt;&gt; number + 50
60
</code></pre>

<p>There is always an operator or native function which calls these magic methods. Sometimes it's just a hook python calls in specific situations. For example <code>__init__()</code> is called when the object is created after <code>__new__()</code> is called to build the instance...</p>

<p>Let's take an example...</p>

<pre><code>class FalseCalculator(object):

    def __init__(self, number):
        self.number = number

    def __add__(self, number):
        return self.number - number

    def __sub__(self, number):
        return self.number + number

number = FalseCalculator(20)
print number + 10      # 10
print number - 20      # 40
</code></pre>

<p>For more details, see the <a href=""https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables"" rel=""noreferrer"">PEP-8 guide</a>. For more magic methods, see <a href=""//github.com/RafeKettler/magicmethods/blob/master/magicmethods.pdf"" rel=""noreferrer"">this PDF</a>.</p>
"
83,5,What's the canonical way to check for type in Python?,"<p>What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?</p>

<p>Let's say I have an object <code>o</code>. How do I check whether it's a <code>str</code>?</p>
","What's the canonical way to check for type in Python?<p>What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?</p>

<p>Let's say I have an object <code>o</code>. How do I check whether it's a <code>str</code>?</p>
",<python><types>,type given check object inherits canonical checking let str way,"<p>To check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code>, use <a href=""https://docs.python.org/library/functions.html#isinstance"" rel=""noreferrer"">isinstance</a> (this would be the ""canonical"" way):</p>

<pre><code>if isinstance(o, str):
</code></pre>

<p>To check if the type of <code>o</code> is exactly <code>str</code> (exclude subclasses):</p>

<pre><code>if type(o) is str:
</code></pre>

<p>The following also works, and can be useful in some cases:</p>

<pre><code>if issubclass(type(o), str):
</code></pre>

<p>See <a href=""http://docs.python.org/library/functions.html"" rel=""noreferrer"">Built-in Functions</a> in the Python Library Reference for relevant information.</p>

<p>One more note: in this case, if you're using Python 2, you may actually want to use:</p>

<pre><code>if isinstance(o, basestring):
</code></pre>

<p>because this will also catch Unicode strings (<a href=""https://docs.python.org/2/library/functions.html#unicode"" rel=""noreferrer""><code>unicode</code></a> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <a href=""https://docs.python.org/2/library/functions.html#basestring"" rel=""noreferrer""><code>basestring</code></a>). Note that <code>basestring</code> no longer exists in Python 3, where there's <a href=""https://docs.python.org/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit"" rel=""noreferrer"">a strict separation</a> of strings (<a href=""https://docs.python.org/3/library/functions.html#func-str"" rel=""noreferrer""><code>str</code></a>) and binary data (<a href=""https://docs.python.org/3/library/functions.html#func-bytes"" rel=""noreferrer""><code>bytes</code></a>).</p>

<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return <code>True</code> if <code>o</code> is an instance of any subclass of any of <code>(str, unicode)</code>:</p>

<pre><code>if isinstance(o, (str, unicode)):
</code></pre>
",,"<p>I think the best way is to typing well your variables. You can do this by using the &quot;typing&quot; library.</p>
<p>Example:</p>
<pre class=""lang-py prettyprint-override""><code>from typing import NewType
UserId = NewType ('UserId', int)
some_id = UserId (524313`)
</code></pre>
<p>See <a href=""https://docs.python.org/3/library/typing.html"" rel=""nofollow noreferrer"">https://docs.python.org/3/library/typing.html</a>.</p>
"
84,3,Proper way to declare custom exceptions in modern Python?,"<p>What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception.</p>

<p>By ""modern Python"" I mean something that will run in Python 2.5 but be 'correct' for the Python 2.6 and Python 3.* way of doing things. And by ""custom"" I mean an Exception object that can include extra data about the cause of the error: a string, maybe also some other arbitrary object relevant to the exception.</p>

<p>I was tripped up by the following deprecation warning in Python 2.6.2:</p>

<pre><code>&gt;&gt;&gt; class MyError(Exception):
...     def __init__(self, message):
...         self.message = message
... 
&gt;&gt;&gt; MyError(""foo"")
_sandbox.py:3: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
</code></pre>

<p>It seems crazy that <code>BaseException</code> has a special meaning for attributes named <code>message</code>. I gather from <A href=""http://www.python.org/dev/peps/pep-0352/"" rel=""noreferrer"">PEP-352</a> that attribute did have a special meaning in 2.5 they're trying to deprecate away, so I guess that name (and that one alone) is now forbidden? Ugh.</p>

<p>I'm also fuzzily aware that <code>Exception</code> has some magic parameter <code>args</code>, but I've never known how to use it. Nor am I sure it's the right way to do things going forward; a lot of the discussion I found online suggested they were trying to do away with args in Python 3.</p>

<p>Update: two answers have suggested overriding <code>__init__</code>, and <code>__str__</code>/<code>__unicode__</code>/<code>__repr__</code>. That seems like a lot of typing, is it necessary?</p>
","Proper way to declare custom exceptions in modern Python?<p>What's the proper way to declare custom exception classes in modern Python? My primary goal is to follow whatever standard other exception classes have, so that (for instance) any extra string I include in the exception is printed out by whatever tool caught the exception.</p>

<p>By ""modern Python"" I mean something that will run in Python 2.5 but be 'correct' for the Python 2.6 and Python 3.* way of doing things. And by ""custom"" I mean an Exception object that can include extra data about the cause of the error: a string, maybe also some other arbitrary object relevant to the exception.</p>

<p>I was tripped up by the following deprecation warning in Python 2.6.2:</p>

<pre><code>&gt;&gt;&gt; class MyError(Exception):
...     def __init__(self, message):
...         self.message = message
... 
&gt;&gt;&gt; MyError(""foo"")
_sandbox.py:3: DeprecationWarning: BaseException.message has been deprecated as of Python 2.6
</code></pre>

<p>It seems crazy that <code>BaseException</code> has a special meaning for attributes named <code>message</code>. I gather from <A href=""http://www.python.org/dev/peps/pep-0352/"" rel=""noreferrer"">PEP-352</a> that attribute did have a special meaning in 2.5 they're trying to deprecate away, so I guess that name (and that one alone) is now forbidden? Ugh.</p>

<p>I'm also fuzzily aware that <code>Exception</code> has some magic parameter <code>args</code>, but I've never known how to use it. Nor am I sure it's the right way to do things going forward; a lot of the discussion I found online suggested they were trying to do away with args in Python 3.</p>

<p>Update: two answers have suggested overriding <code>__init__</code>, and <code>__str__</code>/<code>__unicode__</code>/<code>__repr__</code>. That seems like a lot of typing, is it necessary?</p>
",<python><exception><custom-exceptions>,exception custom modern away args declare python extra special include,"<p>Maybe I missed the question, but why not:</p>
<pre class=""lang-py prettyprint-override""><code>class MyException(Exception):
    pass
</code></pre>
<p>To override something (or pass extra args), do this:</p>
<pre class=""lang-py prettyprint-override""><code>class ValidationError(Exception):
    def __init__(self, message, errors):            
        # Call the base class constructor with the parameters it needs
        super().__init__(message)
            
        # Now for your custom code...
        self.errors = errors
</code></pre>
<p>That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code>.</p>
<p>In Python 2, you have to use this slightly more complex form of <code>super()</code>:</p>
<pre class=""lang-py prettyprint-override""><code>super(ValidationError, self).__init__(message)
</code></pre>
",,"<p>To define your own exceptions correctly, there are a few best practices that you should follow:</p>
<ul>
<li><p>Define a <strong>base class</strong> inheriting from <code>Exception</code>. This will allow to easily catch any exceptions related to the project:</p>
<pre><code>class MyProjectError(Exception):
    &quot;&quot;&quot;A base class for MyProject exceptions.&quot;&quot;&quot;
</code></pre>
<p>Organizing the exception classes in a separate module (e.g. <code>exceptions.py</code>) is generally a good idea.</p>
</li>
<li><p>To create a specific exception, subclass the base exception class.</p>
<pre><code>class CustomError(MyProjectError):
   &quot;&quot;&quot;A custom exception class for MyProject.&quot;&quot;&quot;
</code></pre>
<p>You can subclass custom exception classes as well to create a hierarchy.</p>
</li>
<li><p>To add support for extra argument(s) to a custom exception, define an <code>__init__()</code> method with a variable number of arguments. Call the base class's <code>__init__()</code>, passing any positional arguments to it (remember that <a href=""https://docs.python.org/3/library/exceptions.html#base-classes"" rel=""noreferrer""><code>BaseException</code>/<code>Exception</code></a> expect any number of <em>positional arguments</em>). Store extra argument(s) to the instance, e.g.:</p>
<pre><code>class CustomError(MyProjectError):
    def __init__(self, *args, **kwargs):
        super().__init__(*args)
        self.foo = kwargs.get('foo')
</code></pre>
<p>To raise such exception with an extra argument you can use:</p>
<pre><code> raise CustomError('Something bad happened', foo='foo')
</code></pre>
</li>
</ul>
<p>This design adheres to the <a href=""https://en.wikipedia.org/wiki/Liskov_substitution_principle"" rel=""noreferrer"">Liskov substitution principle</a>, since you can replace an instance of a base exception class with an instance of a derived exception class. Also, it allows you to create an instance of a derived class with the same parameters as the parent.</p>
"
85,6,fatal error: Python.h: No such file or directory,"<p>I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:</p>
<pre class=""lang-none prettyprint-override""><code>gcc -Wall utilsmodule.c -o Utilc
</code></pre>
<p>After executing the command, I get this error message:</p>
<pre><code>&gt; utilsmodule.c:1:20: fatal error: Python.h: No such file or directory
compilation terminated.
</code></pre>
<p>I have tried all the suggested solutions over the internet but the problem still exists. I have no problem with <code>Python.h</code>. I managed to locate the file on my machine.</p>
","fatal error: Python.h: No such file or directory<p>I am trying to build a shared library using a C extension file but first I have to generate the output file using the command below:</p>
<pre class=""lang-none prettyprint-override""><code>gcc -Wall utilsmodule.c -o Utilc
</code></pre>
<p>After executing the command, I get this error message:</p>
<pre><code>&gt; utilsmodule.c:1:20: fatal error: Python.h: No such file or directory
compilation terminated.
</code></pre>
<p>I have tried all the suggested solutions over the internet but the problem still exists. I have no problem with <code>Python.h</code>. I managed to locate the file on my machine.</p>
",<python><gcc><python-c-api>,file problem command error fatal internet directory build shared managed,"<p>I managed to solve this issue and generate the .so file in one command </p>

<pre><code>gcc -shared -o UtilcS.so
-fPIC -I/usr/include/python2.7 -lpython2.7  utilsmodule.c
</code></pre>
",,"<p>For <strong>Python 3.7</strong> and <strong>Ubuntu</strong> in particular, I needed</p>
<h3><code>sudo apt install libpython3.7-dev</code></h3>
<p>.
I think at some point names were changed from <code>pythonm.n-dev</code> to this.</p>
<p>for Python 3.6, 3.8 through 3.10 (and countingƒ??) similarly:</p>
<h4><code>sudo apt install libpython3.6-dev</code></h4>
<p>ƒ??</p>
<h4><code>sudo apt install libpython3.8-dev</code></h4>
<p>ƒ??</p>
<h4><code>sudo apt install libpython3.9-dev</code></h4>
<h4><code>sudo apt install libpython3.10-dev</code></h4>
"
86,0,How do I convert two lists into a dictionary?,"<p>Imagine that you have the following list.</p>
<pre class=""lang-py prettyprint-override""><code>keys = ['name', 'age', 'food']
values = ['Monty', 42, 'spam']
</code></pre>
<p>What is the simplest way to produce the following dictionary?</p>
<pre class=""lang-py prettyprint-override""><code>a_dict = {'name': 'Monty', 'age': 42, 'food': 'spam'}
</code></pre>
","How do I convert two lists into a dictionary?<p>Imagine that you have the following list.</p>
<pre class=""lang-py prettyprint-override""><code>keys = ['name', 'age', 'food']
values = ['Monty', 42, 'spam']
</code></pre>
<p>What is the simplest way to produce the following dictionary?</p>
<pre class=""lang-py prettyprint-override""><code>a_dict = {'name': 'Monty', 'age': 42, 'food': 'spam'}
</code></pre>
",<python><list><dictionary><type-conversion>,dictionary produce following imagine simplest lists convert list way force,"<p>Like this:</p>
<pre><code>keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
print(dictionary) # {'a': 1, 'b': 2, 'c': 3}
</code></pre>
<p>Voila :-)  The pairwise <a href=""https://docs.python.org/3/library/functions.html#func-dict"" rel=""noreferrer""><code>dict</code></a> constructor and <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a> function are awesomely useful.</p>
",,"<p>A more natural way is to use dictionary comprehension </p>

<pre><code>keys = ('name', 'age', 'food')
values = ('Monty', 42, 'spam')    
dict = {keys[i]: values[i] for i in range(len(keys))}
</code></pre>
"
87,6,How to prettyprint a JSON file?,"<p>I have a JSON file that is a mess that I want to prettyprint. What's the easiest way to do this in Python?</p>

<p>I know PrettyPrint takes an ""object"", which I think can be a file, but I don't know how to pass a file in. Just using the filename doesn't work.</p>
","How to prettyprint a JSON file?<p>I have a JSON file that is a mess that I want to prettyprint. What's the easiest way to do this in Python?</p>

<p>I know PrettyPrint takes an ""object"", which I think can be a file, but I don't know how to pass a file in. Just using the filename doesn't work.</p>
",<python><json><formatting><pretty-print>,prettyprint file json mess know easiest filename pass takes think,"<p>The <a href=""https://docs.python.org/3/library/json.html"" rel=""noreferrer""><code>json</code> module</a> already implements some basic pretty printing in the <a href=""https://docs.python.org/3/library/json.html#json.dump"" rel=""noreferrer""><code>dump</code></a> and <a href=""https://docs.python.org/3/library/json.html#json.dumps"" rel=""noreferrer""><code>dumps</code></a> functions, with the <code>indent</code> parameter that specifies how many spaces to indent by:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt;
&gt;&gt;&gt; your_json = '[&quot;foo&quot;, {&quot;bar&quot;:[&quot;baz&quot;, null, 1.0, 2]}]'
&gt;&gt;&gt; parsed = json.loads(your_json)
&gt;&gt;&gt; print(json.dumps(parsed, indent=4, sort_keys=True))
[
    &quot;foo&quot;, 
    {
        &quot;bar&quot;: [
            &quot;baz&quot;, 
            null, 
            1.0, 
            2
        ]
    }
]
</code></pre>
<p>To parse a file, use <a href=""https://docs.python.org/3/library/json.html#json.load"" rel=""noreferrer""><code>json.load()</code></a>:</p>
<pre><code>with open('filename.txt', 'r') as handle:
    parsed = json.load(handle)
</code></pre>
",,"<p>You can do this on the command line:</p>

<pre><code>python3 -m json.tool some.json
</code></pre>

<p>(as already mentioned in the commentaries to the question, thanks to @Kai Petzke for the python3 suggestion).</p>

<p>Actually python is not my favourite tool as far as json processing on the command line is concerned. For simple pretty printing is ok, but if you want to manipulate the json it can become overcomplicated. You'd soon need to write a separate script-file, you could end up with maps whose keys are u""some-key"" (python unicode), which makes selecting fields more difficult and doesn't really go in the direction of pretty-printing.</p>

<p>You can also use <a href=""https://stedolan.github.io/jq/"" rel=""noreferrer"">jq</a>:</p>

<pre><code>jq . some.json
</code></pre>

<p>and you get colors as a bonus (and way easier extendability).</p>

<p>Addendum: There is some confusion in the comments about using jq to process large JSON files on the one hand, and having a very large jq program on the other.  For pretty-printing a file consisting of a single large JSON entity, the practical limitation is RAM.  For pretty-printing a 2GB file consisting of a single array of real-world data, the ""maximum resident set size"" required for pretty-printing was 5GB (whether using jq 1.5 or 1.6). Note also that jq can be used from within python after <code>pip install jq</code>.</p>
"
88,5,Reverse a string in Python,"<p>There is no built in <code>reverse</code> function for Python's <code>str</code> object. What is the best way of implementing this method?</p>

<p>If supplying a very concise answer, please elaborate on its efficiency. For example, whether the <code>str</code> object is converted to a different object, etc. </p>
","Reverse a string in Python<p>There is no built in <code>reverse</code> function for Python's <code>str</code> object. What is the best way of implementing this method?</p>

<p>If supplying a very concise answer, please elaborate on its efficiency. For example, whether the <code>str</code> object is converted to a different object, etc. </p>
",<python><string>,reverse object str elaborate supplying concise pythonthere efficiency converted implementing,"<p>How about:</p>

<pre><code>&gt;&gt;&gt; 'hello world'[::-1]
'dlrow olleh'
</code></pre>

<p>This is <a href=""http://docs.python.org/2/whatsnew/2.3.html#extended-slices"" rel=""noreferrer"">extended slice</a> syntax. It works by doing <code>[begin:end:step]</code> - by leaving begin and end off and specifying a step of -1, it reverses a string.</p>
",,"<p><strong>To solve this in programing way for interview</strong></p>

<pre><code>def reverse_a_string(string: str) -&gt; str:
    """"""
    This method is used to reverse a string.
    Args:
        string: a string to reverse

    Returns: a reversed string
    """"""
    if type(string) != str:
        raise TypeError(""{0} This not a string, Please provide a string!"".format(type(string)))
    string_place_holder = """"
    start = 0
    end = len(string) - 1
    if end &gt;= 1:
        while start &lt;= end:
            string_place_holder = string_place_holder + string[end]
            end -= 1
        return string_place_holder
    else:
        return string


a = ""hello world""
rev = reverse_a_string(a)
print(rev)
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>dlrow olleh
</code></pre>
"
89,5,Why do Python classes inherit object?,"<p>Is there any reason for a class declaration to inherit from <code>object</code>?</p>

<p>I just found some code that does this and I can't find a good reason why.</p>

<pre><code>class MyClass(object):
    # class code follows...
</code></pre>
","Why do Python classes inherit object?<p>Is there any reason for a class declaration to inherit from <code>object</code>?</p>

<p>I just found some code that does this and I can't find a good reason why.</p>

<pre><code>class MyClass(object):
    # class code follows...
</code></pre>
",<python><class><oop><object><inheritance>,inherit reason object declaration classes good class code python fromlist,"<blockquote>
  <h3>Is there any reason for a class declaration to inherit from <code>object</code>?</h3>
</blockquote>

<p>In Python 3, apart from compatibility between Python 2 and 3, <em>no reason</em>. In Python 2, <em>many reasons</em>. </p>

<hr>

<h3>Python 2.x story:</h3>

<p>In Python 2.x (from 2.2 onwards) there's two styles of classes depending on the presence or absence of <code>object</code> as a base-class:</p>

<ol>
<li><p><strong>""classic"" style</strong> classes: they don't have <code>object</code> as a base class:</p>

<pre><code>&gt;&gt;&gt; class ClassicSpam:      # no base class
...     pass
&gt;&gt;&gt; ClassicSpam.__bases__
()
</code></pre></li>
<li><p><strong>""new"" style</strong> classes: they have, directly <em>or indirectly</em> (e.g inherit from a <a href=""https://docs.python.org/3/library/stdtypes.html"" rel=""noreferrer"">built-in type</a>), <code>object</code> as a base class:</p>

<pre><code>&gt;&gt;&gt; class NewSpam(object):           # directly inherit from object
...    pass
&gt;&gt;&gt; NewSpam.__bases__
(&lt;type 'object'&gt;,)
&gt;&gt;&gt; class IntSpam(int):              # indirectly inherit from object...
...    pass
&gt;&gt;&gt; IntSpam.__bases__
(&lt;type 'int'&gt;,) 
&gt;&gt;&gt; IntSpam.__bases__[0].__bases__   # ... because int inherits from object  
(&lt;type 'object'&gt;,)
</code></pre></li>
</ol>

<p>Without a doubt, when writing a class you'll <em>always</em> want to go for new-style classes. The perks of doing so are numerous, to list some of them:</p>

<ul>
<li><p><a href=""https://docs.python.org/3/howto/descriptor.html"" rel=""noreferrer"">Support for descriptors</a>. Specifically, the following constructs are made possible with descriptors: </p>

<ol>
<li><a href=""https://docs.python.org/3/library/functions.html#classmethod"" rel=""noreferrer""><code>classmethod</code></a>: A method that receives the class as an implicit argument instead of the instance.</li>
<li><a href=""https://docs.python.org/3/library/functions.html#staticmethod"" rel=""noreferrer""><code>staticmethod</code></a>: A method that does not receive the implicit argument <code>self</code> as a first argument.</li>
<li>properties with <a href=""https://docs.python.org/3/library/functions.html#property"" rel=""noreferrer""><code>property</code></a>: Create functions for managing the getting, setting and deleting of an attribute. </li>
<li><a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer""><code>__slots__</code></a>: Saves memory consumptions of a class and also results in faster attribute access. Of course, it does <a href=""https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots"" rel=""noreferrer"">impose limitations</a>.</li>
</ol></li>
<li><p>The <a href=""https://docs.python.org/3/reference/datamodel.html#object.__new__"" rel=""noreferrer""><code>__new__</code></a> static method: lets you customize how new class instances are created. </p></li>
<li><p><a href=""https://www.python.org/download/releases/2.3/mro/"" rel=""noreferrer"">Method resolution order (MRO)</a>: in what order the base classes of a class will be searched when trying to resolve which method to call. </p></li>
<li><p>Related to MRO, <a href=""https://docs.python.org/3/library/functions.html#super"" rel=""noreferrer""><code>super</code> calls</a>. Also see, <a href=""https://rhettinger.wordpress.com/2011/05/26/super-considered-super/"" rel=""noreferrer""><code>super()</code> considered super.</a></p></li>
</ul>

<p>If you don't inherit from <code>object</code>, forget these. A more exhaustive description of the previous bullet points along with other perks of ""new"" style classes can be found <a href=""https://www.python.org/download/releases/2.2.3/descrintro/"" rel=""noreferrer"">here</a>.</p>

<p>One of the downsides of new-style classes is that the class itself is more memory demanding. Unless you're creating many class objects, though, I doubt this would be an issue and it's a negative sinking in a sea of positives.</p>

<hr>

<h3>Python 3.x story:</h3>

<p>In Python 3, things are simplified. Only new-style classes exist (referred to plainly as classes) so, the only difference in adding <code>object</code> is requiring you to type in 8 more characters. This:</p>

<pre><code>class ClassicSpam:
    pass
</code></pre>

<p>is completely equivalent (apart from their name :-) to this:</p>

<pre><code>class NewSpam(object):
     pass
</code></pre>

<p>and to this:</p>

<pre><code>class Spam():
    pass
</code></pre>

<p>All have <code>object</code> in their <code>__bases__</code>.</p>

<pre><code>&gt;&gt;&gt; [object in cls.__bases__ for cls in {Spam, NewSpam, ClassicSpam}]
[True, True, True]
</code></pre>

<hr>

<h2>So, what should you do?</h2>

<p><strong>In Python 2:</strong> <em>always inherit from <code>object</code> explicitly</em>. Get the perks.</p>

<p><strong>In Python 3:</strong> inherit from <code>object</code> if you are writing code that tries to be Python agnostic, that is, it needs to work both in Python 2 and in Python 3. Otherwise don't, it really makes no difference since Python inserts it for you behind the scenes.</p>
",,"<p>Yes, this is a 'new style' object. It was a feature introduced in python2.2.</p>

<p>New style objects have a different object model to classic objects, and some things won't work properly with old style objects, for instance, <code>super()</code>, <code>@property</code> and descriptors. See <a href=""http://docs.python.org/release/2.2.3/whatsnew/sect-rellinks.html"" rel=""noreferrer"">this article</a> for a good description of what a new style class is.</p>

<p>SO link for a description of the differences: <a href=""https://stackoverflow.com/questions/54867/old-style-and-new-style-classes-in-python"">What is the difference between old style and new style classes in Python?</a></p>
"
90,6,Why can't Python parse this JSON data?,"<p>I have this JSON in a file:</p>
<pre class=""lang-json prettyprint-override""><code>{
    &quot;maps&quot;: [
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        },
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        }
    ],
    &quot;masks&quot;: [
        &quot;id&quot;: &quot;valore&quot;
    ],
    &quot;om_points&quot;: &quot;value&quot;,
    &quot;parameters&quot;: [
        &quot;id&quot;: &quot;valore&quot;
    ]
}
</code></pre>
<p>I wrote this script to print all of the JSON data:</p>
<pre class=""lang-py prettyprint-override""><code>import json
from pprint import pprint

with open('data.json') as f:
    data = json.load(f)

pprint(data)
</code></pre>
<p>This program raises an exception, though:</p>
<pre><code>Traceback (most recent call last):
  File &quot;&lt;pyshell#1&gt;&quot;, line 5, in &lt;module&gt;
    data = json.load(f)
  File &quot;/usr/lib/python3.5/json/__init__.py&quot;, line 319, in loads
    return _default_decoder.decode(s)
  File &quot;/usr/lib/python3.5/json/decoder.py&quot;, line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File &quot;/usr/lib/python3.5/json/decoder.py&quot;, line 355, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting ',' delimiter: line 13 column 13 (char 213)
</code></pre>
<p>How can I parse the JSON and extract its values?</p>
","Why can't Python parse this JSON data?<p>I have this JSON in a file:</p>
<pre class=""lang-json prettyprint-override""><code>{
    &quot;maps&quot;: [
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        },
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        }
    ],
    &quot;masks&quot;: [
        &quot;id&quot;: &quot;valore&quot;
    ],
    &quot;om_points&quot;: &quot;value&quot;,
    &quot;parameters&quot;: [
        &quot;id&quot;: &quot;valore&quot;
    ]
}
</code></pre>
<p>I wrote this script to print all of the JSON data:</p>
<pre class=""lang-py prettyprint-override""><code>import json
from pprint import pprint

with open('data.json') as f:
    data = json.load(f)

pprint(data)
</code></pre>
<p>This program raises an exception, though:</p>
<pre><code>Traceback (most recent call last):
  File &quot;&lt;pyshell#1&gt;&quot;, line 5, in &lt;module&gt;
    data = json.load(f)
  File &quot;/usr/lib/python3.5/json/__init__.py&quot;, line 319, in loads
    return _default_decoder.decode(s)
  File &quot;/usr/lib/python3.5/json/decoder.py&quot;, line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File &quot;/usr/lib/python3.5/json/decoder.py&quot;, line 355, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting ',' delimiter: line 13 column 13 (char 213)
</code></pre>
<p>How can I parse the JSON and extract its values?</p>
",<python><json><parsing>,json parse data raises wrote extract exception print program script,"<p>Your data is not valid <a href=""https://www.json.org/"" rel=""noreferrer"">JSON</a> format. You have <code>[]</code> when you should have <code>{}</code>:</p>
<ul>
<li><code>[]</code> are for JSON arrays, which are called <code>list</code> in Python</li>
<li><code>{}</code> are for JSON objects, which are called <code>dict</code> in Python</li>
</ul>
<p>Here's how your JSON file should look:</p>
<pre class=""lang-json prettyprint-override""><code>{
    &quot;maps&quot;: [
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        },
        {
            &quot;id&quot;: &quot;blabla&quot;,
            &quot;iscategorical&quot;: &quot;0&quot;
        }
    ],
    &quot;masks&quot;: {
        &quot;id&quot;: &quot;valore&quot;
    },
    &quot;om_points&quot;: &quot;value&quot;,
    &quot;parameters&quot;: {
        &quot;id&quot;: &quot;valore&quot;
    }
}
</code></pre>
<p>Then you can use your code:</p>
<pre class=""lang-py prettyprint-override""><code>import json
from pprint import pprint

with open('data.json') as f:
    data = json.load(f)

pprint(data)
</code></pre>
<p>With data, you can now also find values like so:</p>
<pre class=""lang-py prettyprint-override""><code>data[&quot;maps&quot;][0][&quot;id&quot;]
data[&quot;masks&quot;][&quot;id&quot;]
data[&quot;om_points&quot;]
</code></pre>
<p>Try those out and see if it starts to make sense.</p>
",,"<p><strong>As a python3 user</strong>,</p>

<p>The difference between <code>load</code> and <code>loads</code> methods is important especially when you read json data from file.</p>

<p>As stated in the docs:</p>

<p><strong>json.load:</strong></p>

<blockquote>
  <p>Deserialize fp (a .read()-supporting text file or binary
  file containing a JSON document) to a Python object using this
  conversion table.</p>
</blockquote>

<p><strong>json.loads:</strong></p>

<blockquote>
  <p>json.loads: Deserialize s (a str, bytes or bytearray instance
  containing a JSON document) to a Python object using this conversion
  table.</p>
</blockquote>

<p>json.load method can directly read opened json document since it is able to read binary file.</p>

<pre><code>with open('./recipes.json') as data:
  all_recipes = json.load(data)
</code></pre>

<p>As a result, your json data available as in a format specified according to this conversion table:</p>

<p><a href=""https://docs.python.org/3.7/library/json.html#json-to-py-table"" rel=""nofollow noreferrer"">https://docs.python.org/3.7/library/json.html#json-to-py-table</a></p>
"
91,5,Converting integer to string in Python,"<p>I want to convert an integer to a string in Python. I am typecasting it in vain:</p>
<pre><code>d = 15
d.str()
</code></pre>
<p>When I try to convert it to string, it's showing an error like <code>int</code> doesn't have any attribute called <code>str</code>.</p>
","Converting integer to string in Python<p>I want to convert an integer to a string in Python. I am typecasting it in vain:</p>
<pre><code>d = 15
d.str()
</code></pre>
<p>When I try to convert it to string, it's showing an error like <code>int</code> doesn't have any attribute called <code>str</code>.</p>
",<python><string><integer>,integer string convert vain showing typecasting converting attribute int called,"<pre><code>&gt;&gt;&gt; str(10)
'10'
&gt;&gt;&gt; int('10')
10
</code></pre>

<p>Links to the documentation:</p>

<ul>
<li><a href=""https://docs.python.org/3/library/functions.html#int"" rel=""noreferrer""><code>int()</code></a>  </li>
<li><a href=""https://docs.python.org/3/library/functions.html#str"" rel=""noreferrer""><code>str()</code></a></li>
</ul>

<p>Conversion to a string is done with the builtin <code>str()</code> function, which basically calls the <a href=""https://docs.python.org/3/reference/datamodel.html#object.__str__"" rel=""noreferrer""><code>__str__()</code></a> method of its parameter.</p>
",,"<p>In Python => 3.6 you can use <code>f</code> formatting:</p>

<pre><code>&gt;&gt;&gt; int_value = 10
&gt;&gt;&gt; f'{int_value}'
'10'
&gt;&gt;&gt;
</code></pre>
"
92,3,Use of *args and **kwargs,"<p>So I have difficulty with the concept of <code>*args</code> and <code>**kwargs</code>.</p>

<p>So far I have learned that:</p>

<ul>
<li><code>*args</code> = list of arguments - as positional arguments</li>
<li><code>**kwargs</code> = dictionary - whose keys become separate keyword arguments and the values become values of these arguments.</li>
</ul>

<p>I don't understand what programming task this would be helpful for. </p>

<p>Maybe:</p>

<p>I think to enter lists and dictionaries as arguments of a function AND at the same time as a wildcard, so I can pass ANY argument?</p>

<p>Is there a simple example to explain how <code>*args</code> and <code>**kwargs</code> are used?</p>

<p>Also the tutorial I found used just the ""*"" and a variable name. </p>

<p>Are <code>*args</code> and <code>**kwargs</code> just placeholders or do you use exactly <code>*args</code> and <code>**kwargs</code> in the code?</p>
","Use of *args and **kwargs<p>So I have difficulty with the concept of <code>*args</code> and <code>**kwargs</code>.</p>

<p>So far I have learned that:</p>

<ul>
<li><code>*args</code> = list of arguments - as positional arguments</li>
<li><code>**kwargs</code> = dictionary - whose keys become separate keyword arguments and the values become values of these arguments.</li>
</ul>

<p>I don't understand what programming task this would be helpful for. </p>

<p>Maybe:</p>

<p>I think to enter lists and dictionaries as arguments of a function AND at the same time as a wildcard, so I can pass ANY argument?</p>

<p>Is there a simple example to explain how <code>*args</code> and <code>**kwargs</code> are used?</p>

<p>Also the tutorial I found used just the ""*"" and a variable name. </p>

<p>Are <code>*args</code> and <code>**kwargs</code> just placeholders or do you use exactly <code>*args</code> and <code>**kwargs</code> in the code?</p>
",<python><args><keyword-argument>,args kwargs arguments used values wildcard difficulty placeholders learned,"<p><a href=""http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists"" rel=""noreferrer"">The syntax is the <code>*</code> and <code>**</code></a>.  The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>

<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function.  For example:</p>

<pre><code>&gt;&gt;&gt; def print_everything(*args):
        for count, thing in enumerate(args):
...         print( '{0}. {1}'.format(count, thing))
...
&gt;&gt;&gt; print_everything('apple', 'banana', 'cabbage')
0. apple
1. banana
2. cabbage
</code></pre>

<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>

<pre><code>&gt;&gt;&gt; def table_things(**kwargs):
...     for name, value in kwargs.items():
...         print( '{0} = {1}'.format(name, value))
...
&gt;&gt;&gt; table_things(apple = 'fruit', cabbage = 'vegetable')
cabbage = vegetable
apple = fruit
</code></pre>

<p>You can use these along with named arguments too.  The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>.  The named arguments come first in the list.  For example:</p>

<pre><code>def table_things(titlestring, **kwargs)
</code></pre>

<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>

<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function.  For example:</p>

<pre><code>&gt;&gt;&gt; def print_three_things(a, b, c):
...     print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))
...
&gt;&gt;&gt; mylist = ['aardvark', 'baboon', 'cat']
&gt;&gt;&gt; print_three_things(*mylist)
a = aardvark, b = baboon, c = cat
</code></pre>

<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function.  Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>
",,"<p>Here's one of my favorite places to use the <code>**</code> syntax as in Dave Webb's final example:</p>
<pre><code>mynum = 1000
mystr = 'Hello World!'
print(&quot;{mystr} New-style formatting is {mynum}x more fun!&quot;.format(**locals()))
</code></pre>
<p>I'm not sure if it's terribly fast when compared to just using the names themselves, but it's a lot easier to type!</p>
"
93,2,Selecting multiple columns in a Pandas dataframe,"<p>I have data in different columns, but I don't know how to extract it to save it in another variable.</p>
<pre class=""lang-none prettyprint-override""><code>index  a   b   c
1      2   3   4
2      3   4   5
</code></pre>
<p>How do I select <code>'a'</code>, <code>'b'</code> and save it in to df1?</p>
<p>I tried</p>
<pre><code>df1 = df['a':'b']
df1 = df.ix[:, 'a':'b']
</code></pre>
<p>None seem to work.</p>
","Selecting multiple columns in a Pandas dataframe<p>I have data in different columns, but I don't know how to extract it to save it in another variable.</p>
<pre class=""lang-none prettyprint-override""><code>index  a   b   c
1      2   3   4
2      3   4   5
</code></pre>
<p>How do I select <code>'a'</code>, <code>'b'</code> and save it in to df1?</p>
<p>I tried</p>
<pre><code>df1 = df['a':'b']
df1 = df.ix[:, 'a':'b']
</code></pre>
<p>None seem to work.</p>
",<python><pandas><dataframe><select>,save columns triednone selecting dataframe select extract df multiple different,"<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>
<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics"" rel=""noreferrer""><code>__getitem__</code> syntax</a> (the []'s).</p>
<pre><code>df1 = df[['a', 'b']]
</code></pre>
<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>
<pre><code>df1 = df.iloc[:, 0:2] # Remember that Python does not slice inclusive of the ending index.
</code></pre>
<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices).</p>
<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>.copy()</code> method to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>
<pre><code>df1 = df.iloc[0, 0:2].copy() # To avoid the case where changing df1 also changes df
</code></pre>
<p>To use <code>iloc</code>, you need to know the column positions (or indices). As the column positions may change, instead of hard-coding indices, you can use <code>iloc</code> along with <code>get_loc</code> function of <code>columns</code> method of dataframe object to obtain column indices.</p>
<pre><code>{df.columns.get_loc(c): c for idx, c in enumerate(df.columns)}
</code></pre>
<p>Now you can use this dictionary to access columns through names and using <code>iloc</code>.</p>
",,"<p>I found this method to be very useful:</p>
<pre class=""lang-py prettyprint-override""><code># iloc[row slicing, column slicing]
surveys_df.iloc [0:3, 1:4]
</code></pre>
<p>More details can be found <a href=""http://www.datacarpentry.org/python-ecology-lesson/02-index-slice-subset/"" rel=""nofollow noreferrer"">here</a>.</p>
"
94,3,How can you profile a Python script?,"<p><a href=""http://en.wikipedia.org/wiki/Project_Euler"" rel=""noreferrer"">Project Euler</a> and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to <code>__main__</code>.</p>

<p>What is a good way to profile how long a Python program takes to run?</p>
","How can you profile a Python script?<p><a href=""http://en.wikipedia.org/wiki/Project_Euler"" rel=""noreferrer"">Project Euler</a> and other coding contests often have a maximum time to run or people boast of how fast their particular solution runs. With Python, sometimes the approaches are somewhat kludgey - i.e., adding timing code to <code>__main__</code>.</p>

<p>What is a good way to profile how long a Python program takes to run?</p>
",<python><performance><optimization><time-complexity><profiling>,profile run kludgey contests boast approaches euler timing somewhat runs,"<p>Python includes a profiler called <a href=""https://docs.python.org/3/library/profile.html#module-cProfile"" rel=""noreferrer"">cProfile</a>. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>

<p>You can call it from within your code, or from the interpreter, like this:</p>

<pre><code>import cProfile
cProfile.run('foo()')
</code></pre>

<p>Even more usefully, you can invoke the cProfile when running a script:</p>

<pre><code>python -m cProfile myscript.py
</code></pre>

<p>To make it even easier, I made a little batch file called 'profile.bat':</p>

<pre><code>python -m cProfile %1
</code></pre>

<p>So all I have to do is run:</p>

<pre><code>profile euler048.py
</code></pre>

<p>And I get this:</p>

<pre class=""lang-none prettyprint-override""><code>1007 function calls in 0.061 CPU seconds

Ordered by: standard name
ncalls  tottime  percall  cumtime  percall filename:lineno(function)
    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)
 1000    0.051    0.000    0.051    0.000 euler048.py:2(&lt;lambda&gt;)
    1    0.005    0.005    0.061    0.061 euler048.py:2(&lt;module&gt;)
    1    0.000    0.000    0.061    0.061 {execfile}
    1    0.002    0.002    0.053    0.053 {map}
    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}
    1    0.000    0.000    0.000    0.000 {range}
    1    0.003    0.003    0.003    0.003 {sum}
</code></pre>

<p>EDIT: Updated link to a good video resource from PyCon 2013 titled 
<a href=""https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/"" rel=""noreferrer""><strong><em>Python Profiling</em></strong></a><br>
<a href=""https://www.youtube.com/watch?v=QJwVYlDzAXs"" rel=""noreferrer"">Also via YouTube</a>.</p>
",,"<p><strong>Simplest</strong> and <strong>quickest</strong> way to find where all the time is going.</p>

<pre><code>1. pip install snakeviz

2. python -m cProfile -o temp.dat &lt;PROGRAM&gt;.py

3. snakeviz temp.dat
</code></pre>

<p>Draws a pie chart in a browser. Biggest piece is the problem function. Very simple.</p>
"
95,3,"What is the Python 3 equivalent of ""python -m SimpleHTTPServer""","<p>What is the Python 3 equivalent of <code>python -m SimpleHTTPServer</code>?</p>
","What is the Python 3 equivalent of ""python -m SimpleHTTPServer""<p>What is the Python 3 equivalent of <code>python -m SimpleHTTPServer</code>?</p>
",<python><python-3.x><httpserver><simplehttpserver>,simplehttpserver equivalent python zone,"<p>From <a href=""https://docs.python.org/2/library/simplehttpserver.html"" rel=""noreferrer"">the docs</a>:</p>

<blockquote>
  <p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>
</blockquote>

<p>So, your command is <code>python -m http.server</code>, or depending on your installation, it can be:</p>

<pre><code>python3 -m http.server
</code></pre>
",,"<p>From <a href=""https://docs.python.org/2/library/simplehttpserver.html"" rel=""noreferrer"">the docs</a>:</p>

<blockquote>
  <p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>
</blockquote>

<p>So, your command is <code>python -m http.server</code>, or depending on your installation, it can be:</p>

<pre><code>python3 -m http.server
</code></pre>
"
96,6,How to import a module given the full path?,"<p>How can I load a Python module given its full path?</p>
<p>Note that the file can be anywhere in the filesystem, as it is a configuration option.</p>
","How to import a module given the full path?<p>How can I load a Python module given its full path?</p>
<p>Note that the file can be anywhere in the filesystem, as it is a configuration option.</p>
",<python><configuration><python-import><python-module>,path given module filesystem configuration load option note import file,"<p>For Python 3.5+ use:</p>

<pre><code>import importlib.util
spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
</code></pre>

<p>For Python 3.3 and 3.4 use:</p>

<pre><code>from importlib.machinery import SourceFileLoader

foo = SourceFileLoader(""module.name"", ""/path/to/file.py"").load_module()
foo.MyClass()
</code></pre>

<p>(Although this has been deprecated in Python 3.4.)</p>

<p>For Python 2 use:</p>

<pre><code>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</code></pre>

<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>

<p>See also <a href=""http://bugs.python.org/issue21436"" rel=""noreferrer"">http://bugs.python.org/issue21436</a>.</p>
",,"<p>You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case ""config"".</p>

<p>Messy, but it works.</p>

<pre><code>configfile = '~/config.py'

import os
import sys

sys.path.append(os.path.dirname(os.path.expanduser(configfile)))

import config
</code></pre>
"
97,2,How do I get the row count of a Pandas DataFrame?,"<p>I'm trying to get the number of rows of dataframe df with Pandas, and here is my code.</p>
<h3>Method 1:</h3>
<pre><code>total_rows = df.count
print total_rows + 1
</code></pre>
<h3>Method 2:</h3>
<pre><code>total_rows = df['First_column_label'].count
print total_rows + 1
</code></pre>
<p>Both the code snippets give me this error:</p>
<blockquote>
<p>TypeError: unsupported operand type(s) for +: 'instancemethod' and 'int'</p>
</blockquote>
<p>What am I doing wrong?</p>
","How do I get the row count of a Pandas DataFrame?<p>I'm trying to get the number of rows of dataframe df with Pandas, and here is my code.</p>
<h3>Method 1:</h3>
<pre><code>total_rows = df.count
print total_rows + 1
</code></pre>
<h3>Method 2:</h3>
<pre><code>total_rows = df['First_column_label'].count
print total_rows + 1
</code></pre>
<p>Both the code snippets give me this error:</p>
<blockquote>
<p>TypeError: unsupported operand type(s) for +: 'instancemethod' and 'int'</p>
</blockquote>
<p>What am I doing wrong?</p>
",<python><pandas><dataframe>,dataframe pandas method operand instancemethod unsupported snippets code typeerror df,"<p>For a dataframe <code>df</code>, one can use any of the following:</p>
<ul>
<li><code>len(df.index)</code></li>
<li><code>df.shape[0]</code></li>
<li><code>df[df.columns[0]].count()</code> (== <a href=""https://pandas.pydata.org/docs/reference/api/pandas.Series.count.html"" rel=""noreferrer"">number of non-NaN values</a> in first column)</li>
</ul>
<p><a href=""https://i.stack.imgur.com/wEzue.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/wEzue.png"" alt=""Performance plot"" /></a></p>
<hr />
<p>Code to reproduce the plot:</p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np
import pandas as pd
import perfplot

perfplot.save(
    &quot;out.png&quot;,
    setup=lambda n: pd.DataFrame(np.arange(n * 3).reshape(n, 3)),
    n_range=[2**k for k in range(25)],
    kernels=[
        lambda df: len(df.index),
        lambda df: df.shape[0],
        lambda df: df[df.columns[0]].count(),
    ],
    labels=[&quot;len(df.index)&quot;, &quot;df.shape[0]&quot;, &quot;df[df.columns[0]].count()&quot;],
    xlabel=&quot;Number of rows&quot;,
)
</code></pre>
",,"<p>I come to Pandas from an <a href=""https://en.wikipedia.org/wiki/R_%28programming_language%29"" rel=""nofollow noreferrer"">R</a> background, and I see that Pandas is more complicated when it comes to selecting rows or columns.</p>
<p>I had to wrestle with it for a while, and then I found some ways to deal with:</p>
<p>Getting the number of columns:</p>
<pre><code>len(df.columns)
## Here:
# df is your data.frame
# df.columns returns a string. It contains column's titles of the df.
# Then, &quot;len()&quot; gets the length of it.
</code></pre>
<p>Getting the number of rows:</p>
<pre><code>len(df.index) # It's similar.
</code></pre>
"
98,6,Save plot to image file instead of displaying it using Matplotlib,"<p>I am writing a quick-and-dirty script to generate plots on the fly. I am using the code below (from <a href=""http://en.wikipedia.org/wiki/Matplotlib"" rel=""noreferrer"">Matplotlib</a> documentation) as a starting point:</p>

<pre><code>from pylab import figure, axes, pie, title, show

# Make a square figure and axes
figure(1, figsize=(6, 6))
ax = axes([0.1, 0.1, 0.8, 0.8])

labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
fracs = [15, 30, 45, 10]

explode = (0, 0.05, 0, 0)
pie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True)
title('Raining Hogs and Dogs', bbox={'facecolor': '0.8', 'pad': 5})

show()  # Actually, don't show, just save to foo.png
</code></pre>

<p>I don't want to display the plot on a GUI, instead, I want to save the plot to a file (say foo.png), so that, for example, it can be used in batch scripts. How do I do that?</p>
","Save plot to image file instead of displaying it using Matplotlib<p>I am writing a quick-and-dirty script to generate plots on the fly. I am using the code below (from <a href=""http://en.wikipedia.org/wiki/Matplotlib"" rel=""noreferrer"">Matplotlib</a> documentation) as a starting point:</p>

<pre><code>from pylab import figure, axes, pie, title, show

# Make a square figure and axes
figure(1, figsize=(6, 6))
ax = axes([0.1, 0.1, 0.8, 0.8])

labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
fracs = [15, 30, 45, 10]

explode = (0, 0.05, 0, 0)
pie(fracs, explode=explode, labels=labels, autopct='%1.1f%%', shadow=True)
title('Raining Hogs and Dogs', bbox={'facecolor': '0.8', 'pad': 5})

show()  # Actually, don't show, just save to foo.png
</code></pre>

<p>I don't want to display the plot on a GUI, instead, I want to save the plot to a file (say foo.png), so that, for example, it can be used in batch scripts. How do I do that?</p>
",<python><matplotlib><plot>,plot save instead batch gui png displaying file fly matplotlib,"<p>While the question has been answered, I'd like to add some useful tips when using <a href=""https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.savefig.html"" rel=""noreferrer""><code>matplotlib.pyplot.savefig</code></a>. The file format can be specified by the extension:</p>
<pre><code>from matplotlib import pyplot as plt

plt.savefig('foo.png')
plt.savefig('foo.pdf')
</code></pre>
<p>Will give a rasterized or vectorized output respectively, both which could be useful. In addition, there's often an undesirable, whitespace around the image, which can be removed with:</p>
<pre><code>plt.savefig('foo.png', bbox_inches='tight')
</code></pre>
<p>Note that if showing the plot, <code>plt.show()</code> should follow <code>plt.savefig()</code>, otherwise the file image will be blank.</p>
",,"<p>According to question <a href=""https://stackoverflow.com/q/9012487/6329006"">Matplotlib (pyplot) savefig outputs blank image</a>.</p>

<p>One thing should note: if you use <code>plt.show</code> and it should after <code>plt.savefig</code>, or you will give a blank image.</p>

<p>A detailed example:</p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt


def draw_result(lst_iter, lst_loss, lst_acc, title):
    plt.plot(lst_iter, lst_loss, '-b', label='loss')
    plt.plot(lst_iter, lst_acc, '-r', label='accuracy')

    plt.xlabel(""n iteration"")
    plt.legend(loc='upper left')
    plt.title(title)
    plt.savefig(title+"".png"")  # should before plt.show method

    plt.show()


def test_draw():
    lst_iter = range(100)
    lst_loss = [0.01 * i + 0.01 * i ** 2 for i in xrange(100)]
    # lst_loss = np.random.randn(1, 100).reshape((100, ))
    lst_acc = [0.01 * i - 0.01 * i ** 2 for i in xrange(100)]
    # lst_acc = np.random.randn(1, 100).reshape((100, ))
    draw_result(lst_iter, lst_loss, lst_acc, ""sgd_method"")


if __name__ == '__main__':
    test_draw()
</code></pre>

<p><a href=""https://i.stack.imgur.com/zWZls.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/zWZls.png"" alt=""enter image description here""></a></p>
"
99,4,Create a dictionary with list comprehension,"<p>I like the Python list comprehension syntax.</p>

<p>Can it be used to create dictionaries too? For example, by iterating over pairs of keys and values:</p>

<pre><code>mydict = {(k,v) for (k,v) in blah blah blah}  # doesn't work
</code></pre>
","Create a dictionary with list comprehension<p>I like the Python list comprehension syntax.</p>

<p>Can it be used to create dictionaries too? For example, by iterating over pairs of keys and values:</p>

<pre><code>mydict = {(k,v) for (k,v) in blah blah blah}  # doesn't work
</code></pre>
",<python><dictionary><list-comprehension><dictionary-comprehension>,create comprehensioni iterating pairs comprehension list keys dictionaries syntax dictionary,"<p>Use a <a href=""http://www.python.org/dev/peps/pep-0274/"" rel=""noreferrer"">dict comprehension</a> (Python 2.7 and later):</p>
<pre><code>{key: value for (key, value) in iterable}
</code></pre>
<hr />
<p>Alternatively for simpler cases or earlier version of Python, use the <a href=""https://docs.python.org/3/library/stdtypes.html#typesmapping"" rel=""noreferrer""><code>dict</code></a> constructor, e.g.:</p>
<pre class=""lang-py prettyprint-override""><code>pairs = [('a', 1), ('b', 2)]
dict(pairs)                         #=&gt; {'a': 1, 'b': 2}
dict([(k, v+1) for k, v in pairs])  #=&gt; {'a': 2, 'b': 3}
</code></pre>
<p>Given separate arrays of keys and values, use the <code>dict</code> constructor with <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>keys = ['a', 'b']
values = [1, 2]
dict(zip(keys, values))  #=&gt; {'a': 1, 'b': 2}
</code></pre>
<pre><code>2) &quot;zip'ped&quot; from two separate iterables of keys/vals
dict(zip(list_of_keys, list_of_values))
</code></pre>
",,"<pre><code>&gt;&gt;&gt; {k: v**3 for (k, v) in zip(string.ascii_lowercase, range(26))}
</code></pre>
<p>Python supports dict comprehensions, which allow you to express the creation of dictionaries at runtime using a similarly concise syntax.</p>
<p>A dictionary comprehension takes the form {key: value for (key, value) in iterable}. This syntax was introduced in Python 3 and backported as far as Python 2.7, so you should be able to use it regardless of which version of Python you have installed.</p>
<p>A canonical example is taking two lists and creating a dictionary where the item at each position in the first list becomes a key and the item at the corresponding position in the second list becomes the value.</p>
<p>The zip function used inside this comprehension returns an iterator of tuples, where each element in the tuple is taken from the same position in each of the input iterables. In the example above, the returned iterator contains the tuples (ƒ??aƒ?, 1), (ƒ??bƒ?, 2), etc.</p>
<p>Output:</p>
<pre><code>{'i': 512, 'e': 64, 'o': 2744, 'h': 343, 'l': 1331, 's': 5832, 'b': 1, 'w': 10648, 'c': 8, 'x': 12167, 'y': 13824, 't': 6859, 'p': 3375, 'd': 27, 'j': 729, 'a': 0, 'z': 15625, 'f': 125, 'q': 4096, 'u': 8000, 'n': 2197, 'm': 1728, 'r': 4913, 'k': 1000, 'g': 216, 'v': 9261}
</code></pre>
"
100,3,How can I flush the output of the print function (unbuffer python output)?,"<p>How do I force Python's <code>print</code> function to output to the screen?</p>
","How can I flush the output of the print function (unbuffer python output)?<p>How do I force Python's <code>print</code> function to output to the screen?</p>
",<python><python-3.x><printing><flush>,output print unbuffer flush screen function force python forgotten formatted,"<p>In Python 3, <a href=""https://docs.python.org/library/functions.html#print"" rel=""noreferrer""><code>print</code></a> can take an optional <code>flush</code> argument:</p>
<pre><code>print(&quot;Hello, World!&quot;, flush=True)
</code></pre>
<p>In Python 2 you'll have to do</p>
<pre><code>import sys
sys.stdout.flush()
</code></pre>
<p>after calling <code>print</code>. By default, <a href=""https://docs.python.org/2/reference/simple_stmts.html#the-print-statement"" rel=""noreferrer""><code>print</code></a> prints to <a href=""https://docs.python.org/2/library/sys.html#sys.stdout"" rel=""noreferrer""><code>sys.stdout</code></a> (see the documentation for more about <a href=""https://docs.python.org/2/library/stdtypes.html#file-objects"" rel=""noreferrer"">file objects</a>).</p>
",,"<p>Also, as suggested in <a href=""http://algorithmicallyrandom.blogspot.com/2009/10/python-tips-and-tricks-flushing-stdout.html"" rel=""nofollow noreferrer"">this blog post</a>, one can reopen <code>sys.stdout</code> in unbuffered mode:</p>
<pre><code>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
</code></pre>
<p>Each <code>stdout.write</code> and <code>print</code> operation will be automatically flushed afterwards.</p>
"
101,3,What are the differences between type() and isinstance()?,"<p>What are the differences between these two code fragments?  </p>

<p>Using <code>type()</code>:</p>

<pre><code>import types

if type(a) is types.DictType:
    do_something()
if type(b) in types.StringTypes:
    do_something_else()
</code></pre>

<p>Using <code>isinstance()</code>:</p>

<pre><code>if isinstance(a, dict):
    do_something()
if isinstance(b, str) or isinstance(b, unicode):
    do_something_else()
</code></pre>
","What are the differences between type() and isinstance()?<p>What are the differences between these two code fragments?  </p>

<p>Using <code>type()</code>:</p>

<pre><code>import types

if type(a) is types.DictType:
    do_something()
if type(b) in types.StringTypes:
    do_something_else()
</code></pre>

<p>Using <code>isinstance()</code>:</p>

<pre><code>if isinstance(a, dict):
    do_something()
if isinstance(b, str) or isinstance(b, unicode):
    do_something_else()
</code></pre>
",<python><oop><inheritance><types>,isinstance differences type fragments using code ,"<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>

<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>

<p>It's not that <code>isinstance</code> is <em>good</em>, mind youƒ??it's just <em>less bad</em> than checking equality of types.  The normal, Pythonic, preferred solution is almost invariably ""duck typing"": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument ""as if"" it was of some other type).</p>

<p><code>basestring</code> <strong>is</strong>, however, quite a special caseƒ??a builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as ""scalar"" typesƒ??it's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do thatƒ??the overall structure of this idiom is something like:</p>

<pre><code>if isinstance(x, basestring)
  return treatasscalar(x)
try:
  return treatasiter(iter(x))
except TypeError:
  return treatasscalar(x)
</code></pre>

<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> (""ABC"")ƒ??it offers no concrete functionality to subclasses, but rather exists as a ""marker"", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href=""http://www.python.org/dev/peps/pep-3119/"" rel=""noreferrer"">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>

<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href=""http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing"" rel=""noreferrer"">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just ""[an instance of] a derived class"" (in particular, any class can be ""registered"" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href=""http://en.wikipedia.org/wiki/Template_method_pattern"" rel=""noreferrer"">here</a> and <a href=""http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/"" rel=""noreferrer"">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>

<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href=""http://docs.python.org/library/abc.html"" rel=""noreferrer"">here</a>; for their 3.1 version, very similar, see <a href=""http://docs.python.org/3.1/library/abc.html"" rel=""noreferrer"">here</a>.  In both versions, standard library module <a href=""http://docs.python.org/3.1/library/collections.html#module-collections"" rel=""noreferrer"">collections</a> (that's the 3.1 versionƒ??for the very similar 2.6 version, see <a href=""http://docs.python.org/library/collections.html#module-collections"" rel=""noreferrer"">here</a>) offers several useful ABCs.</p>

<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href=""http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin"" rel=""noreferrer"">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>
",,"<p>Here's an example where <code>isinstance</code> achieves something that <code>type</code> cannot:</p>

<pre><code>class Vehicle:
    pass

class Truck(Vehicle):
    pass
</code></pre>

<p>in this case, a truck object is a Vehicle, but you'll get this:</p>

<pre><code>isinstance(Vehicle(), Vehicle)  # returns True
type(Vehicle()) == Vehicle      # returns True
isinstance(Truck(), Vehicle)    # returns True
type(Truck()) == Vehicle        # returns False, and this probably won't be what you want.
</code></pre>

<p>In other words, <code>isinstance</code> is true for subclasses, too.</p>

<p>Also see: <a href=""https://stackoverflow.com/q/707674/1341006"">How to compare type of an object in Python?</a></p>
"
102,3,How do I get time of a Python program's execution?,"<p>I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.</p>

<p>I've looked at the <code>timeit</code> module, but it seems it's only for small snippets of code. I want to time the whole program.</p>
","How do I get time of a Python program's execution?<p>I have a command line program in Python that takes a while to finish. I want to know the exact time it takes to finish running.</p>

<p>I've looked at the <code>timeit</code> module, but it seems it's only for small snippets of code. I want to time the whole program.</p>
",<python><time><execution-time>,finish program time takes snippets timeit exact small execution looked,"<p>The simplest way in Python:</p>

<pre><code>import time
start_time = time.time()
main()
print(""--- %s seconds ---"" % (time.time() - start_time))
</code></pre>

<p>This assumes that your program takes at least a tenth of second to run.</p>

<p>Prints:</p>

<pre><code>--- 0.764891862869 seconds ---
</code></pre>
",,"<p><strong>time.clock()</strong></p>

<blockquote>
  <p>Deprecated since version 3.3: The behavior of this function depends
  on the platform: use <strong><em>perf_counter()</em></strong> or <strong><em>process_time()</em></strong> instead,
  depending on your requirements, to have a well-defined behavior.</p>
</blockquote>

<p><strong>time.perf_counter()</strong></p>

<blockquote>
  <p>Return the value (in fractional seconds) of a performance counter,
  i.e. a clock with the highest available resolution to measure a short
  duration. It <strong><em>does</em></strong> include time elapsed during sleep and is
  system-wide.</p>
</blockquote>

<p><strong>time.process_time()</strong></p>

<blockquote>
  <p>Return the value (in fractional seconds) of the sum of the system and
  user CPU time of the current process. It <strong><em>does not</em></strong> include time elapsed
  during sleep.</p>
</blockquote>

<pre><code>start = time.process_time()
... do something
elapsed = (time.process_time() - start)
</code></pre>
"
103,6,How do I write JSON data to a file?,"<p>I have JSON data stored in the variable <code>data</code>.</p>

<p>I want to write this to a text file for testing so I don't have to grab the data from the server each time.</p>

<p>Currently, I am trying this:</p>

<pre><code>obj = open('data.txt', 'wb')
obj.write(data)
obj.close
</code></pre>

<p>And I am receiving this error: </p>

<blockquote>
  <p>TypeError: must be string or buffer, not dict</p>
</blockquote>

<p>How to fix this?</p>
","How do I write JSON data to a file?<p>I have JSON data stored in the variable <code>data</code>.</p>

<p>I want to write this to a text file for testing so I don't have to grab the data from the server each time.</p>

<p>Currently, I am trying this:</p>

<pre><code>obj = open('data.txt', 'wb')
obj.write(data)
obj.close
</code></pre>

<p>And I am receiving this error: </p>

<blockquote>
  <p>TypeError: must be string or buffer, not dict</p>
</blockquote>

<p>How to fix this?</p>
",<python><json>,data json write receiving dicthow file testing stored grab buffer,"<p>You forgot the actual JSON part - <code>data</code> is a dictionary and not yet JSON-encoded. Write it <a href=""https://docs.python.org/3/library/json.html"" rel=""noreferrer"">like this</a> for maximum compatibility (Python 2 and 3):</p>

<pre><code>import json
with open('data.json', 'w') as f:
    json.dump(data, f)
</code></pre>

<p>On a modern system (i.e. Python 3 and UTF-8 support), you can write a nicer file with</p>

<pre><code>import json
with open('data.json', 'w', encoding='utf-8') as f:
    json.dump(data, f, ensure_ascii=False, indent=4)
</code></pre>
",,"<p>Write a data in file using JSON use <strong>json.dump()</strong> or <strong>json.dumps()</strong> used.
write like this to store data in file.</p>

<pre><code>import json
data = [1,2,3,4,5]
with open('no.txt', 'w') as txtfile:
    json.dump(data, txtfile)
</code></pre>

<p>this example in list is store to a file.</p>
"
104,3,UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128),"<p>I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. </p>

<p>The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a <code>UnicodeEncodeError</code>. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error.</p>

<p>One of the sections of code that is causing problems is shown below:</p>

<pre><code>agent_telno = agent.find('div', 'agent_contact_number')
agent_telno = '' if agent_telno is None else agent_telno.contents[0]
p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
</code></pre>

<p>Here is a stack trace produced on SOME strings when the snippet above is run:</p>

<pre><code>Traceback (most recent call last):
  File ""foobar.py"", line 792, in &lt;module&gt;
    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)
</code></pre>

<p>I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English.</p>

<p>Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?</p>
","UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)<p>I'm having problems dealing with unicode characters from text fetched from different web pages (on different sites). I am using BeautifulSoup. </p>

<p>The problem is that the error is not always reproducible; it sometimes works with some pages, and sometimes, it barfs by throwing a <code>UnicodeEncodeError</code>. I have tried just about everything I can think of, and yet I have not found anything that works consistently without throwing some kind of Unicode-related error.</p>

<p>One of the sections of code that is causing problems is shown below:</p>

<pre><code>agent_telno = agent.find('div', 'agent_contact_number')
agent_telno = '' if agent_telno is None else agent_telno.contents[0]
p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
</code></pre>

<p>Here is a stack trace produced on SOME strings when the snippet above is run:</p>

<pre><code>Traceback (most recent call last):
  File ""foobar.py"", line 792, in &lt;module&gt;
    p.agent_info = str(agent_contact + ' ' + agent_telno).strip()
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)
</code></pre>

<p>I suspect that this is because some pages (or more specifically, pages from some of the sites) may be encoded, whilst others may be unencoded. All the sites are based in the UK and provide data meant for UK consumption - so there are no issues relating to internalization or dealing with text written in anything other than English.</p>

<p>Does anyone have any ideas as to how to solve this so that I can CONSISTENTLY fix this problem?</p>
",<python><unicode><beautifulsoup><python-2.x><python-unicode>,pages sites consistently unicodeencodeerror uk throwing problems dealing unicode text,"<p>You need to read the Python <a href=""https://docs.python.org/2.7/howto/unicode.html"" rel=""noreferrer"">Unicode HOWTO</a>. This error is the <a href=""https://docs.python.org/2.7/howto/unicode.html#the-unicode-type"" rel=""noreferrer"">very first example</a>.</p>

<p>Basically, stop using <code>str</code> to convert from unicode to encoded text / bytes.</p>

<p>Instead, properly use <a href=""http://docs.python.org/library/stdtypes.html#str.encode"" rel=""noreferrer""><code>.encode()</code></a> to encode the string:</p>

<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()
</code></pre>

<p>or work entirely in unicode.</p>
",,"<p>In case its an issue with a print statement, a lot fo times its just an issue with the terminal printing. This helped me :
<code>export PYTHONIOENCODING=UTF-8</code></p>
"
105,5,String formatting: % vs. .format vs. f-string literal,"<p>Python 2.6 introduced the <a href=""https://docs.python.org/2/library/stdtypes.html#str.format"" rel=""noreferrer""><code>str.format()</code></a> method with a slightly different syntax from the existing <code>%</code> operator. Which is better and for what situations?</p>
<p>Python 3.6 has now introduced another string formatting format of string literals (aka &quot;f&quot; strings) via the syntax <code>f&quot;my string&quot;</code>. Is this formatting option better than the others?</p>
<ol>
<li><p>The following uses each method and has the same outcome, so what is the difference?</p>
<pre><code> #!/usr/bin/python
 sub1 = &quot;python string!&quot;
 sub2 = &quot;an arg&quot;

 sub_a = &quot;i am a %s&quot; % sub1
 sub_b = &quot;i am a {0}&quot;.format(sub1)
 sub_c = f&quot;i am a {sub1}&quot;

 arg_a = &quot;with %(kwarg)s!&quot; % {'kwarg':sub2}
 arg_b = &quot;with {kwarg}!&quot;.format(kwarg=sub2)
 arg_c = f&quot;with {sub2}!&quot;

 print(sub_a)    # &quot;i am a python string!&quot;
 print(sub_b)    # &quot;i am a python string!&quot;
 print(sub_c)    # &quot;i am a python string!&quot;

 print(arg_a)    # &quot;with an arg!&quot;
 print(arg_b)    # &quot;with an arg!&quot;
 print(arg_c)    # &quot;with an arg!&quot;
</code></pre>
</li>
<li><p>Furthermore when does string formatting occur in Python? For example, if my logging level is set to HIGH will I still take a hit for performing the following <code>%</code> operation? And if so, is there a way to avoid this?</p>
<pre><code> log.debug(&quot;some debug info: %s&quot; % some_info)
</code></pre>
</li>
</ol>
","String formatting: % vs. .format vs. f-string literal<p>Python 2.6 introduced the <a href=""https://docs.python.org/2/library/stdtypes.html#str.format"" rel=""noreferrer""><code>str.format()</code></a> method with a slightly different syntax from the existing <code>%</code> operator. Which is better and for what situations?</p>
<p>Python 3.6 has now introduced another string formatting format of string literals (aka &quot;f&quot; strings) via the syntax <code>f&quot;my string&quot;</code>. Is this formatting option better than the others?</p>
<ol>
<li><p>The following uses each method and has the same outcome, so what is the difference?</p>
<pre><code> #!/usr/bin/python
 sub1 = &quot;python string!&quot;
 sub2 = &quot;an arg&quot;

 sub_a = &quot;i am a %s&quot; % sub1
 sub_b = &quot;i am a {0}&quot;.format(sub1)
 sub_c = f&quot;i am a {sub1}&quot;

 arg_a = &quot;with %(kwarg)s!&quot; % {'kwarg':sub2}
 arg_b = &quot;with {kwarg}!&quot;.format(kwarg=sub2)
 arg_c = f&quot;with {sub2}!&quot;

 print(sub_a)    # &quot;i am a python string!&quot;
 print(sub_b)    # &quot;i am a python string!&quot;
 print(sub_c)    # &quot;i am a python string!&quot;

 print(arg_a)    # &quot;with an arg!&quot;
 print(arg_b)    # &quot;with an arg!&quot;
 print(arg_c)    # &quot;with an arg!&quot;
</code></pre>
</li>
<li><p>Furthermore when does string formatting occur in Python? For example, if my logging level is set to HIGH will I still take a hit for performing the following <code>%</code> operation? And if so, is there a way to avoid this?</p>
<pre><code> log.debug(&quot;some debug info: %s&quot; % some_info)
</code></pre>
</li>
</ol>
",<python><performance><logging><string-formatting><f-string>,formatting string format introduced vs syntax better method literalpython hit,"<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>

<pre><code>""hi there %s"" % name
</code></pre>

<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>

<pre><code>""hi there %s"" % (name,)   # supply the single argument as a single-item tuple
</code></pre>

<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>

<p>Why would you not use it? </p>

<ul>
<li>not knowing about it (me before reading this)</li>
<li>having to be compatible with Python 2.5</li>
</ul>

<hr>

<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so in your <code>log.debug</code> example, the expression <code>""some debug info: %s""%some_info</code>will first evaluate to, e.g. <code>""some debug info: roflcopters are active""</code>, then that string will be passed to <code>log.debug()</code>. </p>
",,"<p>One situation where <code>%</code> may help is when you are formatting regex expressions. For example, </p>

<pre><code>'{type_names} [a-z]{2}'.format(type_names='triangle|square')
</code></pre>

<p>raises <code>IndexError</code>. In this situation, you can use:</p>

<pre><code>'%(type_names)s [a-z]{2}' % {'type_names': 'triangle|square'}
</code></pre>

<p>This avoids writing the regex as <code>'{type_names} [a-z]{{2}}'</code>. This can be useful when you have two regexes, where one is used alone without format, but the concatenation of both is formatted.</p>
"
106,1,How can I install packages using pip according to the requirements.txt file from a local directory?,"<p>Here is the problem:</p>
<p>I have a <em>requirements.txt</em> file that looks like:</p>
<pre class=""lang-none prettyprint-override""><code>BeautifulSoup==3.2.0
Django==1.3
Fabric==1.2.0
Jinja2==2.5.5
PyYAML==3.09
Pygments==1.4
SQLAlchemy==0.7.1
South==0.7.3
amqplib==0.6.1
anyjson==0.3
...
</code></pre>
<p>I have a local archive directory containing all the packages + others.</p>
<p>I have created a new <a href=""http://pypi.python.org/pypi/virtualenv"" rel=""noreferrer"">virtualenv</a> with</p>
<pre class=""lang-none prettyprint-override""><code>bin/virtualenv testing
</code></pre>
<p>Upon activating it, I tried to install the packages according to <em>requirements.txt</em> from the local archive directory.</p>
<pre class=""lang-none prettyprint-override""><code>source bin/activate
pip install -r /path/to/requirements.txt -f file:///path/to/archive/
</code></pre>
<p>I got some output that seems to indicate that the installation is fine:</p>
<pre class=""lang-none prettyprint-override""><code>Downloading/unpacking Fabric==1.2.0 (from -r ../testing/requirements.txt (line 3))
  Running setup.py egg_info for package Fabric
    warning: no previously-included files matching '*' found under directory 'docs/_build'
    warning: no files found matching 'fabfile.py'
Downloading/unpacking South==0.7.3 (from -r ../testing/requirements.txt (line 8))
  Running setup.py egg_info for package South
....
</code></pre>
<p>But a later check revealed that none of the packages are installed properly. I cannot import the packages, and none are found in the site-packages directory of my virtualenv. So what went wrong?</p>
","How can I install packages using pip according to the requirements.txt file from a local directory?<p>Here is the problem:</p>
<p>I have a <em>requirements.txt</em> file that looks like:</p>
<pre class=""lang-none prettyprint-override""><code>BeautifulSoup==3.2.0
Django==1.3
Fabric==1.2.0
Jinja2==2.5.5
PyYAML==3.09
Pygments==1.4
SQLAlchemy==0.7.1
South==0.7.3
amqplib==0.6.1
anyjson==0.3
...
</code></pre>
<p>I have a local archive directory containing all the packages + others.</p>
<p>I have created a new <a href=""http://pypi.python.org/pypi/virtualenv"" rel=""noreferrer"">virtualenv</a> with</p>
<pre class=""lang-none prettyprint-override""><code>bin/virtualenv testing
</code></pre>
<p>Upon activating it, I tried to install the packages according to <em>requirements.txt</em> from the local archive directory.</p>
<pre class=""lang-none prettyprint-override""><code>source bin/activate
pip install -r /path/to/requirements.txt -f file:///path/to/archive/
</code></pre>
<p>I got some output that seems to indicate that the installation is fine:</p>
<pre class=""lang-none prettyprint-override""><code>Downloading/unpacking Fabric==1.2.0 (from -r ../testing/requirements.txt (line 3))
  Running setup.py egg_info for package Fabric
    warning: no previously-included files matching '*' found under directory 'docs/_build'
    warning: no files found matching 'fabfile.py'
Downloading/unpacking South==0.7.3 (from -r ../testing/requirements.txt (line 8))
  Running setup.py egg_info for package South
....
</code></pre>
<p>But a later check revealed that none of the packages are installed properly. I cannot import the packages, and none are found in the site-packages directory of my virtualenv. So what went wrong?</p>
",<python><virtualenv><pip>,packages requirements txt directory local archive according virtualenv install ,"<p>This works for me:</p>
<pre><code>$ pip install -r requirements.txt --no-index --find-links file:///tmp/packages
</code></pre>
<p><code>--no-index</code> - Ignore package index (only looking at <code>--find-links</code> URLs instead).</p>
<p><code>-f, --find-links &lt;URL&gt;</code> - If a URL or path to an HTML file, then parse for links to archives.</p>
<p>If a local path or <code>file://</code> URL that's a directory, then look for archives in the directory listing.</p>
",,"<p><strong>Installing requirements.txt file inside virtual env with Python?ÿ3:</strong></p>
<p>I had the same issue. I was trying to install the <em>requirements.txt</em> file inside a virtual environment. I found the solution.</p>
<p>Initially, I created my virtualenv in this way:</p>
<pre><code>virtualenv -p python3 myenv
</code></pre>
<p>Activate the environment using:</p>
<pre><code>source myenv/bin/activate
</code></pre>
<p>Now I installed the <em>requirements.txt</em> file using:</p>
<pre><code>pip3 install -r requirements.txt
</code></pre>
<p>Installation was successful and I was able to import the modules.</p>
"
107,1,Use different Python version with virtualenv,"<p>I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version of Python?</p>

<p>I compiled Python 2.6.2 and would like to use it with some virtualenv. Is it enough to overwrite the binary file? Or do I have to change something in respect to the libraries?</p>
","Use different Python version with virtualenv<p>I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version of Python?</p>

<p>I compiled Python 2.6.2 and would like to use it with some virtualenv. Is it enough to overwrite the binary file? Or do I have to change something in respect to the libraries?</p>
",<python><virtualenv><virtualenvwrapper>,virtualenv version different use possibility overwrite debian virtualenvi respect libraries,"<p>Just use the <code>--python</code> (or short <code>-p</code>) option when creating your virtualenv instance to specify the Python executable you want to use, e.g.:</p>

<pre><code>virtualenv --python=/usr/bin/python2.6 &lt;path/to/new/virtualenv/&gt;
</code></pre>

<p>N.B. For <strong>Python 3.3</strong> or later, refer to The Aelfinn's <a href=""https://stackoverflow.com/a/39713544/1450294"">answer</a> below.</p>
",,"<p>I utilized this answer for Windows</p>
<p><a href=""https://stackoverflow.com/a/22793687/15435022"">https://stackoverflow.com/a/22793687/15435022</a></p>
<pre><code>py -3.4 -m venv c:\path\to\wherever\you\want\it
</code></pre>
"
108,3,How do I check what version of Python is running my script?,"<p>How can I check what version of the Python Interpreter is interpreting my script?</p>
","How do I check what version of Python is running my script?<p>How can I check what version of the Python Interpreter is interpreting my script?</p>
",<python><version>,version script check interpreting interpreter running python zone formats format,"<p>This information is available in the <a href=""http://docs.python.org/library/sys.html#sys.version"" rel=""noreferrer""><code>sys.version</code></a> string in the <a href=""http://docs.python.org/library/sys.html"" rel=""noreferrer""><code>sys</code></a> module:</p>
<pre><code>&gt;&gt;&gt; import sys
</code></pre>
<p>Human readable:</p>
<pre><code>&gt;&gt;&gt; print(sys.version)  # parentheses necessary in python 3.       
2.5.2 (r252:60911, Jul 31 2008, 17:28:52) 
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]
</code></pre>
<p>For further processing, use <a href=""http://docs.python.org/library/sys.html#sys.version_info"" rel=""noreferrer""><code>sys.version_info</code></a> or <a href=""http://docs.python.org/library/sys.html#sys.hexversion"" rel=""noreferrer""><code>sys.hexversion</code></a>:</p>
<pre><code>&gt;&gt;&gt; sys.version_info
(2, 5, 2, 'final', 0)
# or
&gt;&gt;&gt; sys.hexversion
34014192
</code></pre>
<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>
<pre><code>assert sys.version_info &gt;= (2, 5)
</code></pre>
<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to &quot;duck&quot; check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>
",,"<p>Check Python version: <code>python -V</code> or <code>python --version</code> or <code>apt-cache policy python</code></p>

<p>you can also run <code>whereis python</code> to see how many versions are installed.</p>
"
109,5,Referring to the null object in Python,"<p>How do I refer to the null object in Python?</p>
","Referring to the null object in Python<p>How do I refer to the null object in Python?</p>
",<python><null>,null object referring refer python zone,"<p>In Python, the 'null' object is the singleton <code>None</code>.</p>

<p>The best way to check things for ""Noneness"" is to use the identity operator, <code>is</code>:</p>

<pre><code>if foo is None:
    ...
</code></pre>
",,"<p>Use <code>f</code> string for getting this solved.</p>
<pre><code>year=None
year_val= 'null' if year is None else  str(year)
print(f'{year_val}')

null
</code></pre>
"
110,6,How to find if directory exists in Python,"<p>In the <code>os</code> module in Python, is there a way to find if a directory exists, something like:</p>

<pre><code>&gt;&gt;&gt; os.direxists(os.path.join(os.getcwd()), 'new_folder')) # in pseudocode
True/False
</code></pre>
","How to find if directory exists in Python<p>In the <code>os</code> module in Python, is there a way to find if a directory exists, something like:</p>

<pre><code>&gt;&gt;&gt; os.direxists(os.path.join(os.getcwd()), 'new_folder')) # in pseudocode
True/False
</code></pre>
",<python><directory>,exists directory os module like way python ,"<p>You're looking for <a href=""http://docs.python.org/dev/library/os.path.html#os.path.isdir"" rel=""noreferrer""><strong><code>os.path.isdir</code></strong></a>, or <a href=""http://docs.python.org/dev/library/os.path.html#os.path.exists"" rel=""noreferrer""><strong><code>os.path.exists</code></strong></a> if you don't care whether it's a file or a directory:</p>
<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.isdir('new_folder')
True
&gt;&gt;&gt; os.path.exists(os.path.join(os.getcwd(), 'new_folder', 'file.txt'))
False
</code></pre>
<p>Alternatively, you can use <a href=""https://docs.python.org/dev/library/pathlib.html"" rel=""noreferrer""><strong><code>pathlib</code></strong></a>:</p>
<pre><code> &gt;&gt;&gt; from pathlib import Path
 &gt;&gt;&gt; Path('new_folder').is_dir()
 True
 &gt;&gt;&gt; (Path.cwd() / 'new_folder' / 'file.txt').exists()
 False
</code></pre>
",,"<p>Python 3.4 introduced <a href=""https://docs.python.org/3/library/pathlib.html#"" rel=""noreferrer"">the <code>pathlib</code> module</a> into the standard library, which provides an object oriented approach to handle filesystem paths. The <code>is_dir()</code> and <code>exists()</code> methods of a <code>Path</code> object can be used to answer the question:</p>

<pre><code>In [1]: from pathlib import Path

In [2]: p = Path('/usr')

In [3]: p.exists()
Out[3]: True

In [4]: p.is_dir()
Out[4]: True
</code></pre>

<p>Paths (and strings) can be joined together with the <code>/</code> operator:</p>

<pre><code>In [5]: q = p / 'bin' / 'vim'

In [6]: q
Out[6]: PosixPath('/usr/bin/vim') 

In [7]: q.exists()
Out[7]: True

In [8]: q.is_dir()
Out[8]: False
</code></pre>

<p>Pathlib is also available on Python 2.7 via <a href=""https://pypi.python.org/pypi/pathlib2/"" rel=""noreferrer"">the pathlib2 module on PyPi.</a></p>
"
111,6,How to get the filename without the extension from a path in Python?,"<p>How to get the filename without the extension from a path in Python?</p>
<p>For instance, if I had <code>&quot;/path/to/some/file.txt&quot;</code>, I would want <code>&quot;file&quot;</code>.</p>
","How to get the filename without the extension from a path in Python?<p>How to get the filename without the extension from a path in Python?</p>
<p>For instance, if I had <code>&quot;/path/to/some/file.txt&quot;</code>, I would want <code>&quot;file&quot;</code>.</p>
",<python><string><path>,path filename extension file txt instance python want formats form,"<p>Getting the name of the file without the extension:</p>

<pre><code>import os
print(os.path.splitext(""/path/to/some/file.txt"")[0])
</code></pre>

<p>Prints:</p>

<pre><code>/path/to/some/file
</code></pre>

<p><a href=""https://docs.python.org/3/library/os.path.html#os.path.splitext"" rel=""noreferrer"">Documentation for <code>os.path.splitext</code></a>.</p>

<p><em>Important Note:</em> If the filename has multiple dots, only the extension after the last one is removed. For example:</p>

<pre><code>import os
print(os.path.splitext(""/path/to/some/file.txt.zip.asc"")[0])
</code></pre>

<p>Prints:</p>

<pre><code>/path/to/some/file.txt.zip
</code></pre>

<p>See other answers below if you need to handle that case.</p>
",,"<p>In Python 3.4+ you can use the <a href=""https://docs.python.org/library/pathlib.html#pathlib.PurePath.stem"" rel=""noreferrer""><code>pathlib</code></a> solution </p>

<pre><code>from pathlib import Path

print(Path(your_path).resolve().stem)
</code></pre>
"
112,5,Creating a singleton in Python,"<p><em>This question is not for the discussion of whether or not the <a href=""http://en.wikipedia.org/wiki/Singleton_pattern"" rel=""noreferrer"">singleton design pattern</a> is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'</em>.</p>
<p>I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate.</p>
<p>Best methods:</p>
<hr />
<h2>Method 1: A decorator</h2>
<pre><code>def singleton(class_):
    instances = {}
    def getinstance(*args, **kwargs):
        if class_ not in instances:
            instances[class_] = class_(*args, **kwargs)
        return instances[class_]
    return getinstance

@singleton
class MyClass(BaseClass):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>Decorators are additive in a way that is often more intuitive than multiple inheritance.</li>
</ul>
<p>Cons</p>
<ul>
<li>While objects created using MyClass() would be true singleton objects, MyClass itself is a a function, not a class, so you cannot call class methods from it. Also for</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>x = MyClass();
y = MyClass();
t = type(n)();
</code></pre>
<p>then <code>x == y</code> but <code>x != t &amp;&amp; y != t</code></p>
<hr />
<h2>Method 2: A base class</h2>
<pre><code>class Singleton(object):
    _instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_._instance, class_):
            class_._instance = object.__new__(class_, *args, **kwargs)
        return class_._instance

class MyClass(Singleton, BaseClass):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>It's a true class</li>
</ul>
<p>Cons</p>
<ul>
<li>Multiple inheritance - eugh! <code>__new__</code> could be overwritten during inheritance from a second base class? One has to think more than is necessary.</li>
</ul>
<hr />
<h2>Method 3: A <a href=""https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"">metaclass</a></h2>
<pre><code>class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

#Python2
class MyClass(BaseClass):
    __metaclass__ = Singleton

#Python3
class MyClass(BaseClass, metaclass=Singleton):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>It's a true class</li>
<li>Auto-magically covers inheritance</li>
<li>Uses <code>__metaclass__</code> for its proper purpose (and made me aware of it)</li>
</ul>
<p>Cons</p>
<ul>
<li>Are there any?</li>
</ul>
<hr />
<h2>Method 4: decorator returning a class with the same name</h2>
<pre><code>def singleton(class_):
    class class_w(class_):
        _instance = None
        def __new__(class_, *args, **kwargs):
            if class_w._instance is None:
                class_w._instance = super(class_w,
                                    class_).__new__(class_,
                                                    *args,
                                                    **kwargs)
                class_w._instance._sealed = False
            return class_w._instance
        def __init__(self, *args, **kwargs):
            if self._sealed:
                return
            super(class_w, self).__init__(*args, **kwargs)
            self._sealed = True
    class_w.__name__ = class_.__name__
    return class_w

@singleton
class MyClass(BaseClass):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>It's a true class</li>
<li>Auto-magically covers inheritance</li>
</ul>
<p>Cons</p>
<ul>
<li>Is there not an overhead for creating each new class? Here we are creating two classes for each class we wish to make a singleton. While this is fine in my case, I worry that this might not scale. Of course there is a matter of debate as to whether it aught to be too easy to scale this pattern...</li>
<li>What is the point of the <code>_sealed</code> attribute</li>
<li>Can't call methods of the same name on base classes using <code>super()</code> because they will recurse. This means you can't customize <code>__new__</code> and can't subclass a class that needs you to call up to <code>__init__</code>.</li>
</ul>
<hr />
<h2>Method 5: a module</h2>
<p>a module file <code>singleton.py</code></p>
<p>Pros</p>
<ul>
<li>Simple is better than complex</li>
</ul>
<p>Cons</p>
<ul>
<li>Not lazily instantianted</li>
</ul>
","Creating a singleton in Python<p><em>This question is not for the discussion of whether or not the <a href=""http://en.wikipedia.org/wiki/Singleton_pattern"" rel=""noreferrer"">singleton design pattern</a> is desirable, is an anti-pattern, or for any religious wars, but to discuss how this pattern is best implemented in Python in such a way that is most pythonic. In this instance I define 'most pythonic' to mean that it follows the 'principle of least astonishment'</em>.</p>
<p>I have multiple classes which would become singletons (my use-case is for a logger, but this is not important). I do not wish to clutter several classes with added gumph when I can simply inherit or decorate.</p>
<p>Best methods:</p>
<hr />
<h2>Method 1: A decorator</h2>
<pre><code>def singleton(class_):
    instances = {}
    def getinstance(*args, **kwargs):
        if class_ not in instances:
            instances[class_] = class_(*args, **kwargs)
        return instances[class_]
    return getinstance

@singleton
class MyClass(BaseClass):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>Decorators are additive in a way that is often more intuitive than multiple inheritance.</li>
</ul>
<p>Cons</p>
<ul>
<li>While objects created using MyClass() would be true singleton objects, MyClass itself is a a function, not a class, so you cannot call class methods from it. Also for</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>x = MyClass();
y = MyClass();
t = type(n)();
</code></pre>
<p>then <code>x == y</code> but <code>x != t &amp;&amp; y != t</code></p>
<hr />
<h2>Method 2: A base class</h2>
<pre><code>class Singleton(object):
    _instance = None
    def __new__(class_, *args, **kwargs):
        if not isinstance(class_._instance, class_):
            class_._instance = object.__new__(class_, *args, **kwargs)
        return class_._instance

class MyClass(Singleton, BaseClass):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>It's a true class</li>
</ul>
<p>Cons</p>
<ul>
<li>Multiple inheritance - eugh! <code>__new__</code> could be overwritten during inheritance from a second base class? One has to think more than is necessary.</li>
</ul>
<hr />
<h2>Method 3: A <a href=""https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python"">metaclass</a></h2>
<pre><code>class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

#Python2
class MyClass(BaseClass):
    __metaclass__ = Singleton

#Python3
class MyClass(BaseClass, metaclass=Singleton):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>It's a true class</li>
<li>Auto-magically covers inheritance</li>
<li>Uses <code>__metaclass__</code> for its proper purpose (and made me aware of it)</li>
</ul>
<p>Cons</p>
<ul>
<li>Are there any?</li>
</ul>
<hr />
<h2>Method 4: decorator returning a class with the same name</h2>
<pre><code>def singleton(class_):
    class class_w(class_):
        _instance = None
        def __new__(class_, *args, **kwargs):
            if class_w._instance is None:
                class_w._instance = super(class_w,
                                    class_).__new__(class_,
                                                    *args,
                                                    **kwargs)
                class_w._instance._sealed = False
            return class_w._instance
        def __init__(self, *args, **kwargs):
            if self._sealed:
                return
            super(class_w, self).__init__(*args, **kwargs)
            self._sealed = True
    class_w.__name__ = class_.__name__
    return class_w

@singleton
class MyClass(BaseClass):
    pass
</code></pre>
<p>Pros</p>
<ul>
<li>It's a true class</li>
<li>Auto-magically covers inheritance</li>
</ul>
<p>Cons</p>
<ul>
<li>Is there not an overhead for creating each new class? Here we are creating two classes for each class we wish to make a singleton. While this is fine in my case, I worry that this might not scale. Of course there is a matter of debate as to whether it aught to be too easy to scale this pattern...</li>
<li>What is the point of the <code>_sealed</code> attribute</li>
<li>Can't call methods of the same name on base classes using <code>super()</code> because they will recurse. This means you can't customize <code>__new__</code> and can't subclass a class that needs you to call up to <code>__init__</code>.</li>
</ul>
<hr />
<h2>Method 5: a module</h2>
<p>a module file <code>singleton.py</code></p>
<p>Pros</p>
<ul>
<li>Simple is better than complex</li>
</ul>
<p>Cons</p>
<ul>
<li>Not lazily instantianted</li>
</ul>
",<python><singleton><decorator><base-class><metaclass>,singleton class pattern TRUE base classes inheritance creating method wish,"<h2>Use a Metaclass</h2>
<p>I would recommend <strong>Method #2</strong>, but you're better off using a <strong>metaclass</strong> than a base class. Here is a sample implementation:</p>
<pre><code>class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]
        
class Logger(object):
    __metaclass__ = Singleton
</code></pre>
<p>Or in Python3</p>
<pre><code>class Logger(metaclass=Singleton):
    pass
</code></pre>
<p>If you want to run <code>__init__</code> every time the class is called, add</p>
<pre><code>        else:
            cls._instances[cls].__init__(*args, **kwargs)
</code></pre>
<p>to the <code>if</code> statement in <code>Singleton.__call__</code>.</p>
<p>A few words about metaclasses. A metaclass is the <strong>class of a class</strong>; that is, a class is an <strong>instance of its metaclass</strong>. You find the metaclass of an object in Python with <code>type(obj)</code>. Normal new-style classes are of type <code>type</code>. <code>Logger</code> in the code above will be of type <code>class 'your_module.Singleton'</code>, just as the (only) instance of <code>Logger</code> will be of type <code>class 'your_module.Logger'</code>. When you call logger with <code>Logger()</code>, Python first asks the metaclass of <code>Logger</code>, <code>Singleton</code>, what to do, allowing instance creation to be pre-empted. This process is the same as Python asking a class what to do by calling <code>__getattr__</code> when you reference one of it's attributes by doing <code>myclass.attribute</code>.</p>
<p>A metaclass essentially decides <strong>what the definition of a class means</strong> and how to implement that definition. See for example <a href=""http://code.activestate.com/recipes/498149/"" rel=""noreferrer"">http://code.activestate.com/recipes/498149/</a>, which essentially recreates C-style <code>struct</code>s in Python using metaclasses. The thread <a href=""https://stackoverflow.com/questions/392160/what-are-your-concrete-use-cases-for-metaclasses-in-python"">What are some (concrete) use-cases for metaclasses?</a> also provides some examples, they generally seem to be related to declarative programming, especially as used in ORMs.</p>
<p>In this situation, if you use your <strong>Method #2</strong>, and a subclass defines a <code>__new__</code> method, it will be <strong>executed every time</strong> you call <code>SubClassOfSingleton()</code> -- because it is responsible for calling the method that returns the stored instance. With a metaclass, it will <strong>only be called once</strong>, when the only instance is created. You want to <strong>customize what it means to call the class</strong>, which is decided by it's type.</p>
<p>In general, it <strong>makes sense</strong> to use a metaclass to implement a singleton. A singleton is special because is <strong>created only once</strong>, and a metaclass is the way you customize the <strong>creation of a class</strong>. Using a metaclass gives you <strong>more control</strong> in case you need to customize the singleton class definitions in other ways.</p>
<p>Your singletons <strong>won't need multiple inheritance</strong> (because the metaclass is not a base class), but for <strong>subclasses of the created class</strong> that use multiple inheritance, you need to make sure the singleton class is the <strong>first / leftmost</strong> one with a metaclass that redefines <code>__call__</code> This is very unlikely to be an issue. The instance dict is <strong>not in the instance's namespace</strong> so it won't accidentally overwrite it.</p>
<p>You will also hear that the singleton pattern violates the &quot;Single Responsibility Principle&quot; -- each class should do <strong>only one thing</strong>. That way you don't have to worry about messing up one thing the code does if you need to change another, because they are separate and encapsulated. The metaclass implementation <strong>passes this test</strong>. The metaclass is responsible for <strong>enforcing the pattern</strong> and the created class and subclasses need not be <strong>aware that they are singletons</strong>. <strong>Method #1</strong> fails this test, as you noted with &quot;MyClass itself is a a function, not a class, so you cannot call class methods from it.&quot;</p>
<h1>Python 2 and 3 Compatible Version</h1>
<p>Writing something that works in both Python2 and 3 requires using a slightly more complicated scheme. Since metaclasses are usually subclasses of type <code>type</code>, it's possible to use one to dynamically create an intermediary base class at run time with it as its metaclass and then use <em>that</em> as the baseclass of the public <code>Singleton</code> base class. It's harder to explain than to do, as illustrated next:</p>
<pre><code># works in Python 2 &amp; 3
class _Singleton(type):
    &quot;&quot;&quot; A metaclass that creates a Singleton base class when called. &quot;&quot;&quot;
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]

class Singleton(_Singleton('SingletonMeta', (object,), {})): pass

class Logger(Singleton):
    pass
</code></pre>
<p>An ironic aspect of this approach is that it's using subclassing to implement a metaclass. One possible advantage is that, unlike with a pure metaclass, <code>isinstance(inst, Singleton)</code> will return <code>True</code>.</p>
<h2>Corrections</h2>
<p>On another topic, you've probably already noticed this, but the base class implementation in your original post is wrong. <code>_instances</code> needs to be <strong>referenced on the class</strong>, you need to use <code>super()</code> or you're <strong>recursing</strong>, and <code>__new__</code> is actually a static method that you have to <strong>pass the class to</strong>, not a class method, as the actual class <strong>hasn't been created</strong> yet when it is called. All of these things will be true for a metaclass implementation as well.</p>
<pre><code>class Singleton(object):
  _instances = {}
  def __new__(class_, *args, **kwargs):
    if class_ not in class_._instances:
        class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)
    return class_._instances[class_]

class MyClass(Singleton):
  pass

c = MyClass()
</code></pre>
<h2>Decorator Returning A Class</h2>
<p>I originally was writing a comment but it was too long, so I'll add this here. <strong>Method #4</strong> is better than the other decorator version, but it's more code than needed for a singleton, and it's not as clear what it does.</p>
<p>The main problems stem from the class being it's own base class. First, isn't it weird to have a class be a subclass of a nearly identical class with the same name that exists only in its <code>__class__</code> attribute? This also means that you can't define <strong>any methods that call the method of the same name on their base class</strong> with <code>super()</code> because they will recurse. This means your class can't customize <code>__new__</code>, and can't derive from any classes that need <code>__init__</code> called on them.</p>
<h2>When to use the singleton pattern</h2>
<p>Your use case is <strong>one of the better examples</strong> of wanting to use a singleton. You say in one of the comments &quot;To me logging has always seemed a natural candidate for Singletons.&quot; You're <strong>absolutely right</strong>.</p>
<p>When people say singletons are bad, the most common reason is they are <strong>implicit shared state</strong>. While with global variables and top-level module imports are <strong>explicit</strong> shared state, other objects that are passed around are generally instantiated. This is a good point, <strong>with two exceptions</strong>.</p>
<p>The first, and one that gets mentioned in various places, is when the singletons are <strong>constant</strong>. Use of global constants, especially enums, is widely accepted, and considered sane because no matter what, <strong>none of the users can mess them up for any other user</strong>. This is equally true for a constant singleton.</p>
<p>The second exception, which get mentioned less, is the opposite -- when the singleton is <strong>only a data sink</strong>, not a data source (directly or indirectly). This is why loggers feel like a &quot;natural&quot; use for singletons. As the various users are <strong>not changing the loggers</strong> in ways other users will care about, there is <strong>not really shared state</strong>. This negates the primary argument against the singleton pattern, and makes them a reasonable choice because of their <strong>ease of use</strong> for the task.</p>
<p>Here is a quote from <a href=""http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html"" rel=""noreferrer"">http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html</a>:</p>
<blockquote>
<p>Now, there is one kind of Singleton which is OK. That is a singleton where all of the reachable objects are immutable. If all objects are immutable than Singleton has no global state, as everything is constant. But it is so easy to turn this kind of singleton into mutable one, it is very slippery slope. Therefore, I am against these Singletons too, not because they are bad, but because it is very easy for them to go bad. (As a side note Java enumeration are just these kind of singletons. As long as you don't put state into your enumeration you are OK, so please don't.)</p>
<p>The other kind of Singletons, which are semi-acceptable are those which don't effect the execution of your code, They have no &quot;side effects&quot;. Logging is perfect example. It is loaded with Singletons and global state. It is acceptable (as in it will not hurt you) because your application does not behave any different whether or not a given logger is enabled. The information here flows one way: From your application into the logger. Even thought loggers are global state since no information flows from loggers into your application, loggers are acceptable. You should still inject your logger if you want your test to assert that something is getting logged, but in general Loggers are not harmful despite being full of state.</p>
</blockquote>
",,"<p>Here's a one-liner for you:</p>

<pre><code>singleton = lambda c: c()
</code></pre>

<p>Here's how you use it:</p>

<pre><code>@singleton
class wat(object):
    def __init__(self): self.x = 1
    def get_x(self): return self.x

assert wat.get_x() == 1
</code></pre>

<p>Your object gets instantiated eagerly.  This may or may not be what you want.</p>
"
113,4,if/else in a list comprehension,"<p>How can I do the following in Python?</p>

<pre><code>row = [unicode(x.strip()) for x in row if x is not None else '']
</code></pre>

<p>Essentially:</p>

<ol>
<li>replace all the Nones with empty strings, and then</li>
<li>carry out a function.</li>
</ol>
","if/else in a list comprehension<p>How can I do the following in Python?</p>

<pre><code>row = [unicode(x.strip()) for x in row if x is not None else '']
</code></pre>

<p>Essentially:</p>

<ol>
<li>replace all the Nones with empty strings, and then</li>
<li>carry out a function.</li>
</ol>
",<python><list-comprehension>,nones comprehension essentially replace strings following function list python,"<p>You can totally do that. It's just an ordering issue:</p>

<pre><code>[unicode(x.strip()) if x is not None else '' for x in row]
</code></pre>

<p>In general,</p>

<pre><code>[f(x) if condition else g(x) for x in sequence]
</code></pre>

<p>And, for list comprehensions with <code>if</code> conditions only,</p>

<pre><code>[f(x) for x in sequence if condition]
</code></pre>

<p>Note that this actually uses a different language construct, a <a href=""https://docs.python.org/3/reference/expressions.html#conditional-expressions"" rel=""noreferrer"">conditional expression</a>, which itself is not part of the <a href=""https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries"" rel=""noreferrer"">comprehension syntax</a>, while the <code>if</code> after the <code>forƒ??in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>

<hr>

<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href=""https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator"" rel=""noreferrer"">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>

<pre><code>value = 123
print(value, 'is', 'even' if value % 2 == 0 else 'odd')
</code></pre>
",,"<p>There isn't any need for ternary if/then/else. In my opinion your question calls for this answer:</p>

<pre class=""lang-py prettyprint-override""><code>row = [unicode((x or '').strip()) for x in row]
</code></pre>
"
114,6,Can someone explain __all__ in Python?,"<p>I have been using Python more and more, and I keep seeing the variable <code>__all__</code> set in different <code>__init__.py</code> files.  Can someone explain what this does?</p>
","Can someone explain __all__ in Python?<p>I have been using Python more and more, and I keep seeing the variable <code>__all__</code> set in different <code>__init__.py</code> files.  Can someone explain what this does?</p>
",<python><syntax><namespaces>,explain seeing init different set py variable files python using,"<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>
",,"<p>From <a href=""http://effbot.org/pyref/__all__.htm"" rel=""noreferrer"">(An Unofficial) Python Reference Wiki</a>:</p>

<blockquote>
  <p>The public names defined by a module are determined by checking the module's namespace for a variable named <code>__all__</code>; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in <code>__all__</code> are all considered public and are required to exist. If <code>__all__</code> is not defined, the set of public names includes all names found in the module's namespace which do not begin with an underscore character (""_""). <code>__all__</code> should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module).</p>
</blockquote>
"
115,3,How can I check for NaN values?,"<p><code>float('nan')</code> results in Nan (not a number). But how do I check for it? Should be very easy, but I cannot find it.</p>
","How can I check for NaN values?<p><code>float('nan')</code> results in Nan (not a number). But how do I check for it? Should be very easy, but I cannot find it.</p>
",<python><math>,nan check float results easy number values formatting formatted formats,"<p><a href=""http://docs.python.org/library/math.html#math.isnan"" rel=""noreferrer"">math.isnan(x)</a></p>

<blockquote>
  <p>Return <code>True</code> if x is a NaN (not a number), and <code>False</code> otherwise.</p>
</blockquote>

<pre><code>&gt;&gt;&gt; import math
&gt;&gt;&gt; x = float('nan')
&gt;&gt;&gt; math.isnan(x)
True
</code></pre>
",,"<p>here is an answer working with:</p>

<ul>
<li>NaN implementations respecting IEEE 754 standard 

<ul>
<li>ie: python's NaN: <code>float('nan')</code>, <code>numpy.nan</code>...</li>
</ul></li>
<li>any other objects: string or whatever (does not raise exceptions if encountered)</li>
</ul>

<p>A NaN implemented following the standard, is the only value for which the inequality comparison with itself should return True:</p>

<pre><code>def is_nan(x):
    return (x != x)
</code></pre>

<p>And some examples:</p>

<pre><code>import numpy as np
values = [float('nan'), np.nan, 55, ""string"", lambda x : x]
for value in values:
    print(f""{repr(value):&lt;8} : {is_nan(value)}"")
</code></pre>

<p>Output:</p>

<pre><code>nan      : True
nan      : True
55       : False
'string' : False
&lt;function &lt;lambda&gt; at 0x000000000927BF28&gt; : False
</code></pre>
"
116,6,What is setup.py?,"<p>Can anyone please explain what <code>setup.py</code> is and how it can be configured or used?</p>
","What is setup.py?<p>Can anyone please explain what <code>setup.py</code> is and how it can be configured or used?</p>
",<python><python-3.x><setup.py><pypi><python-packaging>,setup py configured explain used,"<p><code>setup.py</code> is a python file, the presence of which is an indication that the module/package you are about to install has likely been packaged and distributed with Distutils, which is the standard for distributing Python Modules.<br></p>
<p>This allows you to easily install Python packages. Often it's enough to write:</p>
<pre><code>$ pip install . 
</code></pre>
<p><code>pip</code> will use <code>setup.py</code> to install your module. Avoid calling <code>setup.py</code> directly.</p>
<p><a href=""https://docs.python.org/3/installing/index.html#installing-index"" rel=""noreferrer"">https://docs.python.org/3/installing/index.html#installing-index</a></p>
",,"<p>To install a Python package you've downloaded, you extract the archive and run the setup.py script inside:</p>

<pre><code>python setup.py install
</code></pre>

<p>To me, this has always felt odd. It would be more natural to point a package manager at the download, as one would do in Ruby and Nodejs, eg. <code>gem install rails-4.1.1.gem</code></p>

<p>A package manager is more comfortable too, because it's familiar and reliable. On the other hand, each <code>setup.py</code> is novel, because it's specific to the package. It demands faith in convention ""I trust this setup.py takes the same commands as others I have used in the past"". That's a regrettable tax on mental willpower. </p>

<p>I'm not saying the setup.py workflow is less secure than a package manager (I understand Pip just runs the setup.py inside), but certainly I feel it's awkard and jarring. There's a harmony to commands all being to the same package manager application. You might even grow fond it.</p>
"
117,3,How to put the legend out of the plot,"<p>I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure gets reduced.  Kindly help me for the following queries:</p>

<ol>
<li>I want to keep the legend box outside the plot area. (I want the legend to be outside at the right side of the plot area).</li>
<li>Is there anyway that I reduce the font size of the text inside the legend box, so that the size of the legend box will be small.</li>
</ol>
","How to put the legend out of the plot<p>I have a series of 20 plots (not subplots) to be made in a single figure.  I want the legend to be outside of the box.  At the same time, I do not want to change the axes, as the size of the figure gets reduced.  Kindly help me for the following queries:</p>

<ol>
<li>I want to keep the legend box outside the plot area. (I want the legend to be outside at the right side of the plot area).</li>
<li>Is there anyway that I reduce the font size of the text inside the legend box, so that the size of the legend box will be small.</li>
</ol>
",<python><matplotlib><legend>,legend box outside size area plot want figure subplots queries,"<ul>
<li>You can make the legend text smaller by specifying <code>set_size</code> of <code>FontProperties</code>.</li>
<li>Resources:
<ul>
<li><a href=""https://matplotlib.org/tutorials/intermediate/legend_guide.html#legend-guide"" rel=""noreferrer"">Legend guide</a></li>
<li><a href=""https://matplotlib.org/api/legend_api.html"" rel=""noreferrer""><code>matplotlib.legend</code></a></li>
<li><a href=""https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html#matplotlib.pyplot.legend"" rel=""noreferrer""><code>matplotlib.pyplot.legend</code></a></li>
<li><a href=""https://matplotlib.org/3.3.1/api/font_manager_api.html"" rel=""noreferrer""><code>matplotlib.font_manager</code></a>
<ul>
<li><a href=""https://matplotlib.org/3.3.1/api/font_manager_api.html#matplotlib.font_manager.FontProperties.set_size"" rel=""noreferrer""><code>set_size(self, size)</code></a></li>
<li>Valid font size are xx-small, x-small, small, medium, large, x-large, xx-large, larger, smaller, None</li>
</ul>
</li>
<li><a href=""https://realpython.com/python-matplotlib-guide/"" rel=""noreferrer"">Real Python: Python Plotting With Matplotlib (Guide)</a></li>
</ul>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties

fontP = FontProperties()
fontP.set_size('xx-small')

p1, = plt.plot([1, 2, 3], label='Line 1')
p2, = plt.plot([3, 2, 1], label='Line 2')
plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', prop=fontP)
</code></pre>
<p><a href=""https://i.stack.imgur.com/OMgiC.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/OMgiC.png"" alt=""enter image description here"" /></a></p>
<ul>
<li>As noted by <a href=""https://stackoverflow.com/users/365102/mateen-ulhaq"">Mateen Ulhaq</a>, <code>fontsize='xx-small'</code> also works, without importing <code>FontProperties</code>.</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>plt.legend(handles=[p1, p2], title='title', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='xx-small')
</code></pre>
",,"<p>Something along these lines worked for me. Starting with a bit of code taken from Joe, this method modifies the window width to automatically fit a legend to the right of the figure.</p>

<pre><code>import matplotlib.pyplot as plt
import numpy as np

plt.ion()

x = np.arange(10)

fig = plt.figure()
ax = plt.subplot(111)

for i in xrange(5):
    ax.plot(x, i * x, label='$y = %ix$'%i)

# Put a legend to the right of the current axis
leg = ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

plt.draw()

# Get the ax dimensions.
box = ax.get_position()
xlocs = (box.x0,box.x1)
ylocs = (box.y0,box.y1)

# Get the figure size in inches and the dpi.
w, h = fig.get_size_inches()
dpi = fig.get_dpi()

# Get the legend size, calculate new window width and change the figure size.
legWidth = leg.get_window_extent().width
winWidthNew = w*dpi+legWidth
fig.set_size_inches(winWidthNew/dpi,h)

# Adjust the window size to fit the figure.
mgr = plt.get_current_fig_manager()
mgr.window.wm_geometry(""%ix%i""%(winWidthNew,mgr.window.winfo_height()))

# Rescale the ax to keep its original size.
factor = w*dpi/winWidthNew
x0 = xlocs[0]*factor
x1 = xlocs[1]*factor
width = box.width*factor
ax.set_position([x0,ylocs[0],x1-x0,ylocs[1]-ylocs[0]])

plt.draw()
</code></pre>
"
118,3,Is there a way to create multiline comments in Python?,"<p>I have recently started studying <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>, but I couldn't find how to implement multi-line comments. Most languages have block comment symbols like</p>

<pre><code>/*

*/
</code></pre>

<p>I tried this in Python, but it throws an error, so this probably is not the correct way. Does Python actually have a multiline comment feature?</p>
","Is there a way to create multiline comments in Python?<p>I have recently started studying <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>, but I couldn't find how to implement multi-line comments. Most languages have block comment symbols like</p>

<pre><code>/*

*/
</code></pre>

<p>I tried this in Python, but it throws an error, so this probably is not the correct way. Does Python actually have a multiline comment feature?</p>
",<python><comments><documentation>,multiline comments comment studying symbols started multi throws python,"<p>You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored.</p>
<pre><code>'''
This is a multiline
comment.
'''
</code></pre>
<p>(Make sure to indent the leading <code>'''</code> appropriately to avoid an <code>IndentationError</code>.)</p>
<p><a href=""https://en.wikipedia.org/wiki/Guido_van_Rossum"" rel=""noreferrer"">Guido van Rossum</a> (creator of Python) <a href=""https://twitter.com/gvanrossum/status/112670605505077248"" rel=""noreferrer"">tweeted this</a> as a &quot;pro tip&quot;.</p>
<p>However, Python's style guide, PEP8, <a href=""http://www.python.org/dev/peps/pep-0008/#block-comments"" rel=""noreferrer"">favors using consecutive single-line comments</a>, like this:</p>
<pre><code># This is a multiline
# comment.
</code></pre>
<p>...and this is also what you'll find in many projects. Text editors usually have a shortcut to do this easily.</p>
",,"<p>There is no such feature as a multi-line comment. <code>#</code> is the only way to comment a single line of code.
Many of you answered ''' a comment ''' this as their solution.</p>

<p>It seems to work, but internally <code>'''</code> in Python takes the lines enclosed as a regular strings which the interpreter does not ignores like comment using <code>#</code>.</p>

<p><a href=""https://www.python.org/dev/peps/pep-0008/#block-comments"" rel=""noreferrer"">Check the official documentation here</a></p>
"
119,5,How do I trim whitespace from a string?,"<p>How do I remove leading and trailing whitespace from a string in Python?</p>

<p>For example:</p>

<pre><code>"" Hello "" --&gt; ""Hello""
"" Hello""  --&gt; ""Hello""
""Hello ""  --&gt; ""Hello""
""Bob has a cat"" --&gt; ""Bob has a cat""
</code></pre>
","How do I trim whitespace from a string?<p>How do I remove leading and trailing whitespace from a string in Python?</p>

<p>For example:</p>

<pre><code>"" Hello "" --&gt; ""Hello""
"" Hello""  --&gt; ""Hello""
""Hello ""  --&gt; ""Hello""
""Bob has a cat"" --&gt; ""Bob has a cat""
</code></pre>
",<python><string><trim>,whitespace trim trailing string leading remove example python fork follows,"<p>Just one space or all consecutive spaces? If the second, then strings already have a <a href=""https://docs.python.org/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>.strip()</code></a> method:</p>
<pre><code>&gt;&gt;&gt; ' Hello '.strip()
'Hello'
&gt;&gt;&gt; ' Hello'.strip()
'Hello'
&gt;&gt;&gt; 'Bob has a cat'.strip()
'Bob has a cat'
&gt;&gt;&gt; '   Hello   '.strip()  # ALL consecutive spaces at both ends removed
'Hello'
</code></pre>
<p>If you only need to remove one space however, you could do it with:</p>
<pre><code>def strip_one_space(s):
    if s.endswith(&quot; &quot;): s = s[:-1]
    if s.startswith(&quot; &quot;): s = s[1:]
    return s

&gt;&gt;&gt; strip_one_space(&quot;   Hello &quot;)
'  Hello'
</code></pre>
<p>Also, note that <code>str.strip()</code> removes other whitespace characters as well (e.g. tabs and newlines). To remove only spaces, you can specify the character to remove as an argument to <code>strip</code>, i.e.:</p>
<pre><code>&gt;&gt;&gt; &quot;  Hello\n&quot;.strip(&quot; &quot;)
'Hello\n'
</code></pre>
",,"<p><code>strip</code> is not limited to whitespace characters either:</p>

<pre><code># remove all leading/trailing commas, periods and hyphens
title = title.strip(',.-')
</code></pre>
"
120,3,"What is the use of ""assert"" in Python?","<p>I have been reading some source code and in several places I have seen the usage of <code>assert</code>. </p>

<p>What does it mean exactly? What is its usage?</p>
","What is the use of ""assert"" in Python?<p>I have been reading some source code and in several places I have seen the usage of <code>assert</code>. </p>

<p>What does it mean exactly? What is its usage?</p>
",<python><assert><assertion>,assert usage places mean seen exactly reading source code use,"<p>The <code>assert</code> statement exists in almost every programming language. It has two main uses:</p>
<ol>
<li><p>It helps detect problems early in your program, where the cause is clear, rather than later when some other operation fails. A type error in Python, for example, can go through several layers of code before actually raising an <code>Exception</code> if not caught early on.</p>
</li>
<li><p>It works as documentation for other developers reading the code, who see the <code>assert</code> and can confidently say that its condition holds from now on.</p>
</li>
</ol>
<p>When you do...</p>
<pre><code>assert condition
</code></pre>
<p>... you're telling the program to test that condition, and immediately trigger an error if the condition is false.</p>
<p>In Python, it's roughly equivalent to this:</p>
<pre><code>if not condition:
    raise AssertionError()
</code></pre>
<p>Try it in the Python shell:</p>
<pre><code>&gt;&gt;&gt; assert True # nothing happens
&gt;&gt;&gt; assert False
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AssertionError
</code></pre>
<p>Assertions can include an optional message, and you can disable them when running the interpreter.</p>
<p>To print a message if the assertion fails:</p>
<pre><code>assert False, &quot;Oh no! This assertion failed!&quot;
</code></pre>
<p>Do <strong>not</strong> use parenthesis to call <code>assert</code> like a function. It is a statement. If you do <code>assert(condition, message)</code> you'll be running the <code>assert</code> with a <code>(condition, message)</code> tuple as first parameter.</p>
<p>As for disabling them, when running <code>python</code> in optimized mode, where <code>__debug__</code> is <code>False</code>, assert statements will be ignored. Just pass the <code>-O</code> flag:</p>
<pre><code>python -O script.py
</code></pre>
<p>See <a href=""http://docs.python.org/reference/simple_stmts.html#assert"" rel=""nofollow noreferrer"">here</a> for the relevant documentation.</p>
",,"<pre><code>&gt;&gt;&gt;this_is_very_complex_function_result = 9
&gt;&gt;&gt;c = this_is_very_complex_function_result
&gt;&gt;&gt;test_us = (c &lt; 4)

&gt;&gt;&gt; #first we try without assert
&gt;&gt;&gt;if test_us == True:
    print(""YES! I am right!"")
else:
    print(""I am Wrong, but the program still RUNS!"")

I am Wrong, but the program still RUNS!


&gt;&gt;&gt; #now we try with assert
&gt;&gt;&gt; assert test_us
Traceback (most recent call last):
  File ""&lt;pyshell#52&gt;"", line 1, in &lt;module&gt;
    assert test_us
AssertionError
&gt;&gt;&gt; 
</code></pre>
"
121,5,"In Python, how do I determine if an object is iterable?","<p>Is there a method like <code>isiterable</code>? The only solution I have found so far is to call</p>

<pre><code>hasattr(myObj, '__iter__')
</code></pre>

<p>But I am not sure how fool-proof this is.</p>
","In Python, how do I determine if an object is iterable?<p>Is there a method like <code>isiterable</code>? The only solution I have found so far is to call</p>

<pre><code>hasattr(myObj, '__iter__')
</code></pre>

<p>But I am not sure how fool-proof this is.</p>
",<python><iterable>,isiterable callbut fool iterable proof determine far solution sure method,"<ol>
<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>

<pre><code>from __future__ import print_function

try:
    some_object_iterator = iter(some_object)
except TypeError as te:
    print(some_object, 'is not iterable')
</code></pre>

<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method.</p></li>
<li><p>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</p>

<blockquote>
  <p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object (""If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>."") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>
  
  <p>...</p>

<pre><code>try:
   _ = (e for e in my_object)
except TypeError:
   print my_object, 'is not iterable'
</code></pre>
</blockquote></li>
<li><p>The <a href=""https://docs.python.org/3/library/collections.abc.html"" rel=""noreferrer""><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>

<pre><code>from collections.abc import Iterable

if isinstance(e, Iterable):
    # e is iterable
</code></pre>

<p>However, this does not check for classes that are iterable through <code>__getitem__</code>.</p></li>
</ol>
",,"<p>The easiest way, respecting the Python's <a href=""https://en.wikipedia.org/wiki/Duck_typing"" rel=""nofollow"">duck typing</a>, is to catch the error (Python knows perfectly what does it expect from an object to become an iterator):</p>

<pre><code>class A(object):
    def __getitem__(self, item):
        return something

class B(object):
    def __iter__(self):
        # Return a compliant iterator. Just an example
        return iter([])

class C(object):
    def __iter__(self):
        # Return crap
        return 1

class D(object): pass

def iterable(obj):
    try:
        iter(obj)
        return True
    except:
        return False

assert iterable(A())
assert iterable(B())
assert iterable(C())
assert not iterable(D())
</code></pre>

<p><strong>Notes</strong>:</p>

<ol>
<li>It is irrelevant the distinction whether the object is not iterable, or a buggy <code>__iter__</code> has been implemented, if the exception type is the same: anyway you will not be able to iterate the object.</li>
<li><p>I think I understand your concern: How does <code>callable</code> exists as a check if I could also rely on duck typing to raise an <code>AttributeError</code> if <code>__call__</code> is not defined for my object, but that's not the case for iterable checking?</p>

<p>I don't know the answer, but you can either implement the function I (and other users) gave, or just catch the exception in your code (your implementation in that part will be like the function I wrote - just ensure you isolate the iterator creation from the rest of the code so you can capture the exception and distinguish it from another <code>TypeError</code>.</p></li>
</ol>
"
122,3,Why does comparing strings using either '==' or 'is' sometimes produce a different result?,"<p>I've got a Python program where two variables are set to the value <code>'public'</code>. In a conditional expression I have the comparison <code>var1 is var2</code> which fails, but if I change it to <code>var1 == var2</code> it returns <code>True</code>.</p>

<p>Now if I open my Python interpreter and do the same ""is"" comparison, it succeeds.</p>

<pre><code>&gt;&gt;&gt; s1 = 'public'
&gt;&gt;&gt; s2 = 'public'
&gt;&gt;&gt; s2 is s1
True
</code></pre>

<p>What am I missing here?</p>
","Why does comparing strings using either '==' or 'is' sometimes produce a different result?<p>I've got a Python program where two variables are set to the value <code>'public'</code>. In a conditional expression I have the comparison <code>var1 is var2</code> which fails, but if I change it to <code>var1 == var2</code> it returns <code>True</code>.</p>

<p>Now if I open my Python interpreter and do the same ""is"" comparison, it succeeds.</p>

<pre><code>&gt;&gt;&gt; s1 = 'public'
&gt;&gt;&gt; s2 = 'public'
&gt;&gt;&gt; s2 is s1
True
</code></pre>

<p>What am I missing here?</p>
",<python><string><comparison><identity><equality>,var comparison succeeds expression produce public comparing conditional fails interpreter,"<p><code>is</code> is identity testing, <code>==</code> is equality testing. what happens in your code would be emulated in the interpreter like this:</p>
<pre><code>&gt;&gt;&gt; a = 'pub'
&gt;&gt;&gt; b = ''.join(['p', 'u', 'b'])
&gt;&gt;&gt; a == b
True
&gt;&gt;&gt; a is b
False
</code></pre>
<p>so, no wonder they're not the same, right?</p>
<p>In other words: <code>a is b</code> is the equivalent of <code>id(a) == id(b)</code></p>
",,"<p>I think it has to do with the fact that, when the 'is' comparison evaluates to false, two distinct objects are used. If it evaluates to true, that means internally it's using the same exact object and not creating a new one, possibly because you created them within a fraction of 2 or so seconds and because there isn't a large time gap in between it's optimized and uses the same object.</p>

<p>This is why you should be using the equality operator <code>==</code>, not <code>is</code>, to compare the value of a string object.</p>

<pre><code>&gt;&gt;&gt; s = 'one'
&gt;&gt;&gt; s2 = 'two'
&gt;&gt;&gt; s is s2
False
&gt;&gt;&gt; s2 = s2.replace('two', 'one')
&gt;&gt;&gt; s2
'one'
&gt;&gt;&gt; s2 is s
False
&gt;&gt;&gt; 
</code></pre>

<p>In this example, I made s2, which was a different string object previously equal to 'one' but it is not the same object as <code>s</code>, because the interpreter did not use the same object as I did not initially assign it to 'one', if I had it would have made them the same object.</p>
"
123,3,How can I do a line break (line continuation) in Python?,"<p>I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax?</p>

<p>For example, adding a bunch of strings,</p>

<pre><code>e = 'a' + 'b' + 'c' + 'd'
</code></pre>

<p>and have it in two lines like this:</p>

<pre><code>e = 'a' + 'b' +
    'c' + 'd'
</code></pre>
","How can I do a line break (line continuation) in Python?<p>I have a long line of code that I want to break up among multiple lines. What do I use and what is the syntax?</p>

<p>For example, adding a bunch of strings,</p>

<pre><code>e = 'a' + 'b' + 'c' + 'd'
</code></pre>

<p>and have it in two lines like this:</p>

<pre><code>e = 'a' + 'b' +
    'c' + 'd'
</code></pre>
",<python><syntax><line-breaks><long-lines>,line break lines continuation bunch adding long syntax multiple strings,"<p>What is the line?  You can just have arguments on the next line without any problems:</p>
<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)
</code></pre>
<p>Otherwise you can do something like this:</p>
<pre><code>if (a == True and
    b == False):
</code></pre>
<p>or with explicit line break:</p>
<pre><code>if a == True and \
   b == False:
</code></pre>
<p>Check the <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">style guide</a> for more information.</p>
<p>Using parentheses, your example can be written over multiple lines:</p>
<pre><code>a = ('1' + '2' + '3' +
    '4' + '5')
</code></pre>
<p>The same effect can be obtained using explicit line break:</p>
<pre><code>a = '1' + '2' + '3' + \
    '4' + '5'
</code></pre>
<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>
",,"<p>You can break lines in between parenthesises and braces. Additionally, you can append the backslash character <code>\</code> to a line to explicitly break it:</p>

<pre><code>x = (tuples_first_value,
     second_value)
y = 1 + \
    2
</code></pre>
"
124,5,Best way to convert string to bytes in Python 3?,"<p>There appear to be two different ways to convert a string to bytes, as seen in the answers to <a href=""https://stackoverflow.com/questions/5471158/typeerror-str-does-not-support-the-buffer-interface"">TypeError: &#39;str&#39; does not support the buffer interface</a></p>

<p>Which of these methods would be better or more Pythonic? Or is it just a matter of personal preference?</p>

<pre><code>b = bytes(mystring, 'utf-8')

b = mystring.encode('utf-8')
</code></pre>
","Best way to convert string to bytes in Python 3?<p>There appear to be two different ways to convert a string to bytes, as seen in the answers to <a href=""https://stackoverflow.com/questions/5471158/typeerror-str-does-not-support-the-buffer-interface"">TypeError: &#39;str&#39; does not support the buffer interface</a></p>

<p>Which of these methods would be better or more Pythonic? Or is it just a matter of personal preference?</p>

<pre><code>b = bytes(mystring, 'utf-8')

b = mystring.encode('utf-8')
</code></pre>
",<python><string><character-encoding><python-3.x>,bytes convert personal interface preference appear string buffer typeerror support,"<p>If you look at the docs for <code>bytes</code>, it points you to <a href=""https://docs.python.org/3/library/functions.html#func-bytearray"" rel=""noreferrer""><code>bytearray</code></a>:</p>
<blockquote>
<p>bytearray([source[, encoding[, errors]]])</p>
<p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.</p>
<p>The optional source parameter can be used to initialize the array in a few different ways:</p>
<p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().</strong></p>
<p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.</strong></p>
<p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.</strong></p>
<p><strong>If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.</strong></p>
<p><strong>Without an argument, an array of size 0 is created.</strong></p>
</blockquote>
<p>So <code>bytes</code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense.</p>
<p>For  encoding a string, I think that <code>some_string.encode(encoding)</code> is more Pythonic than using the constructor, because it is the most self documenting -- &quot;take this string and encode it with this encoding&quot; is clearer than <code>bytes(some_string, encoding)</code> -- there is no explicit verb when you use the constructor.</p>
<p><strong>Edit:</strong> I checked the Python source. If you pass a unicode string to <code>bytes</code> using CPython, it calls <a href=""http://hg.python.org/cpython/file/5a12416890c0/Objects/unicodeobject.c#l2328"" rel=""noreferrer"">PyUnicode_AsEncodedString</a>, which is the implementation of <code>encode</code>; so you're just skipping a level of indirection if you call <code>encode</code> yourself.</p>
<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)</code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)</code> and symmetry is nice.</p>
",,"<p>How about the Python 3 <a href=""https://docs.python.org/3/library/stdtypes.html#binaryseq"" rel=""nofollow noreferrer"">'<em><strong>memoryview</strong></em>'</a> way.</p>
<p>Memoryview is a sort of mishmash of the byte/bytearray and struct modules, with several benefits.</p>
<ul>
<li>Not limited to just text and bytes, handles 16 and 32 bit words too</li>
<li>Copes with endianness</li>
<li>Provides a very low overhead interface to linked C/C++ functions and data</li>
</ul>
<p>Simplest example, for a byte array:</p>
<pre class=""lang-py prettyprint-override""><code>memoryview(b&quot;some bytes&quot;).tolist()

[115, 111, 109, 101, 32, 98, 121, 116, 101, 115]
</code></pre>
<p>Or for a unicode string, (which is converted to a byte array)</p>
<pre class=""lang-py prettyprint-override""><code>memoryview(bytes(&quot;\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u0020&quot;, &quot;UTF-16&quot;)).tolist()

[255, 254, 117, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0, 32, 0]

#Another way to do the same
memoryview(&quot;\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u0020&quot;.encode(&quot;UTF-16&quot;)).tolist()

[255, 254, 117, 0, 110, 0, 105, 0, 99, 0, 111, 0, 100, 0, 101, 0, 32, 0]
</code></pre>
<p>Perhaps you need words rather than bytes?</p>
<pre><code>memoryview(bytes(&quot;\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u0020&quot;, &quot;UTF-16&quot;)).cast(&quot;H&quot;).tolist()

[65279, 117, 110, 105, 99, 111, 100, 101, 32]

memoryview(b&quot;some  more  data&quot;).cast(&quot;L&quot;).tolist()

[1701670771, 1869422624, 538994034, 1635017060]

</code></pre>
<p><strong>Word of caution.</strong> Be careful of multiple interpretations of byte order with data of more than one byte:</p>
<pre class=""lang-py prettyprint-override""><code>txt = &quot;\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u0020&quot;
for order in (&quot;&quot;, &quot;BE&quot;, &quot;LE&quot;):
    mv = memoryview(bytes(txt, f&quot;UTF-16{order}&quot;))
    print(mv.cast(&quot;H&quot;).tolist())

[65279, 117, 110, 105, 99, 111, 100, 101, 32]
[29952, 28160, 26880, 25344, 28416, 25600, 25856, 8192]
[117, 110, 105, 99, 111, 100, 101, 32]
</code></pre>
<p>Not sure if that's intentional or a bug but it caught me out!!</p>
<p>The example used UTF-16, for a full list of codecs see <a href=""https://docs.python.org/3/library/codecs.html#standard-encodings"" rel=""nofollow noreferrer"">Codec registry in Python 3.10</a></p>
"
125,3,How to terminate a script?,"<p>I am aware of the <code>die()</code> command in PHP which exits a script early.</p>

<p>How can I do this in Python?</p>
","How to terminate a script?<p>I am aware of the <code>die()</code> command in PHP which exits a script early.</p>

<p>How can I do this in Python?</p>
",<python><termination>,script exits terminate early php aware command python forth,"<pre><code>import sys
sys.exit()
</code></pre>
<p>details from the <a href=""https://docs.python.org/2/library/sys.html#sys.exit"" rel=""noreferrer""><code>sys</code> module documentation</a>:</p>
<blockquote>
<p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>
<p>Exit from Python. This is implemented by raising the
<a href=""https://docs.python.org/2/library/exceptions.html#SystemExit"" rel=""noreferrer"" title=""SystemExit""><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses
of <a href=""https://docs.python.org/2/reference/compound_stmts.html#try"" rel=""noreferrer"" title=""try""><code>try</code></a> statements are honored, and it is possible to intercept the
exit attempt at an outer level.</p>
<p>The optional argument <em>arg</em> can be an integer giving the exit status
(defaulting to zero), or another type of object. If it is an integer,
zero is considered ƒ??successful terminationƒ? and any nonzero value is
considered ƒ??abnormal terminationƒ? by shells and the like. Most systems
require it to be in the range 0-127, and produce undefined results
otherwise. Some systems have a convention for assigning specific
meanings to specific exit codes, but these are generally
underdeveloped; Unix programs generally use 2 for command line syntax
errors and 1 for all other kind of errors. If another type of object
is passed, None is equivalent to passing zero, and any other object is
printed to <a href=""https://docs.python.org/2/library/sys.html#sys.stderr"" rel=""noreferrer"" title=""sys.stderr""><code>stderr</code></a> and results in an exit code of 1. In particular,
<code>sys.exit(&quot;some error message&quot;)</code> is a quick way to exit a program when
an error occurs.</p>
<p>Since <a href=""https://docs.python.org/2/library/constants.html#exit"" rel=""noreferrer"" title=""exit""><code>exit()</code></a> ultimately ƒ??onlyƒ? raises an exception, it will only exit
the process when called from the main thread, and the exception is not
intercepted.</p>
</blockquote>
<p>Note that this is the 'nice' way to exit.  @<a href=""https://stackoverflow.com/questions/73663/terminating-a-python-script#76374"">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use <code>os._exit(*errorcode*)</code>, though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.  On the other hand, it <em>does</em> kill the entire process, including all running threads, while <code>sys.exit()</code> (as it says in the docs) only exits if called from the main thread, with no other threads running.</p>
",,
126,4,Removing duplicates in lists,"<p>Pretty much I need to write a program to check if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have but to be honest I do not know what to do.</p>
<pre><code>def remove_duplicates():
    t = ['a', 'b', 'c', 'd']
    t2 = ['a', 'c', 'd']
    for t in t2:
        t.append(t.remove())
    return t
</code></pre>
","Removing duplicates in lists<p>Pretty much I need to write a program to check if a list has any duplicates and if it does it removes them and returns a new list with the items that weren't duplicated/removed. This is what I have but to be honest I do not know what to do.</p>
<pre><code>def remove_duplicates():
    t = ['a', 'b', 'c', 'd']
    t2 = ['a', 'c', 'd']
    for t in t2:
        t.append(t.remove())
    return t
</code></pre>
",<python><algorithm><list><duplicates><intersection>,duplicates lists pretty honest duplicated removes removed list removing items returns,"<p>The common approach to get a unique collection of items is to use a <a href=""http://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset"" rel=""noreferrer""><code>set</code></a>. Sets are <em>unordered</em> collections of <em>distinct</em> objects. To create a set from any iterable, you can simply pass it to the built-in <a href=""http://docs.python.org/3/library/functions.html#func-set"" rel=""noreferrer""><code>set()</code></a> function. If you later need a real list again, you can similarly pass the set to the <a href=""http://docs.python.org/3/library/functions.html#func-list"" rel=""noreferrer""><code>list()</code></a> function.</p>

<p>The following example should cover whatever you are trying to do:</p>

<pre><code>&gt;&gt;&gt; t = [1, 2, 3, 1, 2, 5, 6, 7, 8]
&gt;&gt;&gt; t
[1, 2, 3, 1, 2, 5, 6, 7, 8]
&gt;&gt;&gt; list(set(t))
[1, 2, 3, 5, 6, 7, 8]
&gt;&gt;&gt; s = [1, 2, 3]
&gt;&gt;&gt; list(set(t) - set(s))
[8, 5, 6, 7]
</code></pre>

<p>As you can see from the example result, <em>the original order is not maintained</em>. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created.</p>

<h3>Maintaining order</h3>

<p>If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on <a href=""https://docs.python.org/3/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code></a> to keep the order of keys during insertion:</p>

<pre><code>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; list(OrderedDict.fromkeys(t))
[1, 2, 3, 5, 6, 7, 8]
</code></pre>

<p><a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">Starting with Python 3.7</a>, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6):</p>

<pre><code>&gt;&gt;&gt; list(dict.fromkeys(t))
[1, 2, 3, 5, 6, 7, 8]
</code></pre>

<p>Note that this may have some overhead of creating a dictionary first, and then creating a list from it. If you donƒ??t actually need to preserve the order, youƒ??re often better off using a set, especially because it gives you a lot more operations to work with. Check out <a href=""https://stackoverflow.com/q/480214/216074"">this question</a> for more details and alternative ways to preserve the order when removing duplicates.</p>

<hr>

<p>Finally note that both the <code>set</code> as well as the <code>OrderedDict</code>/<code>dict</code> solutions require your items to be <em>hashable</em>. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop.</p>
",,
127,5,What is the purpose of the word 'self'?,"<p>What is the purpose of the <code>self</code> word in Python? I understand it refers to the specific object created from that class, but I can't see why it explicitly needs to be added to every function as a parameter. To illustrate, in Ruby I can do this:</p>

<pre class=""lang-ruby prettyprint-override""><code>class myClass
    def myFunc(name)
        @name = name
    end
end
</code></pre>

<p>Which I understand, quite easily. However in Python I need to include <code>self</code>:</p>

<pre><code>class myClass:
    def myFunc(self, name):
        self.name = name
</code></pre>

<p>Can anyone talk me through this? It is not something I've come across in my (admittedly limited) experience.</p>
","What is the purpose of the word 'self'?<p>What is the purpose of the <code>self</code> word in Python? I understand it refers to the specific object created from that class, but I can't see why it explicitly needs to be added to every function as a parameter. To illustrate, in Ruby I can do this:</p>

<pre class=""lang-ruby prettyprint-override""><code>class myClass
    def myFunc(name)
        @name = name
    end
end
</code></pre>

<p>Which I understand, quite easily. However in Python I need to include <code>self</code>:</p>

<pre><code>class myClass:
    def myFunc(self, name):
        self.name = name
</code></pre>

<p>Can anyone talk me through this? It is not something I've come across in my (admittedly limited) experience.</p>
",<python><class><oop><self>,self word purpose understand admittedly refers talk illustrate ruby parameter,"<p>The reason you need to use <code>self.</code> is because Python does not use the <code>@</code> syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>

<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>
",,
128,5,Is there a built-in function to print all the current properties and values of an object?,"<p>So what I'm looking for here is something like PHP's <a href=""http://us2.php.net/print_r"" rel=""noreferrer"">print_r</a> function.</p>

<p>This is so I can debug my scripts by seeing what's the state of the object in question.</p>
","Is there a built-in function to print all the current properties and values of an object?<p>So what I'm looking for here is something like PHP's <a href=""http://us2.php.net/print_r"" rel=""noreferrer"">print_r</a> function.</p>

<p>This is so I can debug my scripts by seeing what's the state of the object in question.</p>
",<python><debugging><introspection><pretty-print><python-datamodel>,object printr properties seeing function debug state php scripts built,"<p>You are really mixing together two different things.</p>

<p>Use <a href=""https://docs.python.org/3/library/functions.html#dir"" rel=""noreferrer""><code>dir()</code></a>, <a href=""https://docs.python.org/3/library/functions.html#vars"" rel=""noreferrer""><code>vars()</code></a> or the <a href=""https://docs.python.org/3/library/inspect.html"" rel=""noreferrer""><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>

<pre><code>&gt;&gt;&gt; l = dir(__builtins__)
&gt;&gt;&gt; d = __builtins__.__dict__
</code></pre>

<p>Print that dictionary however fancy you like:</p>

<pre><code>&gt;&gt;&gt; print l
['ArithmeticError', 'AssertionError', 'AttributeError',...
</code></pre>

<p>or</p>

<pre><code>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(l)
['ArithmeticError',
 'AssertionError',
 'AttributeError',
 'BaseException',
 'DeprecationWarning',
...

&gt;&gt;&gt; pprint(d, indent=2)
{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
...
  '_': [ 'ArithmeticError',
         'AssertionError',
         'AttributeError',
         'BaseException',
         'DeprecationWarning',
...
</code></pre>

<p>Pretty printing is also available in the interactive debugger as a command:</p>

<pre><code>(Pdb) pp vars()
{'__builtins__': {'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
                  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
                  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
                  'BaseException': &lt;type 'exceptions.BaseException'&gt;,
                  'BufferError': &lt;type 'exceptions.BufferError'&gt;,
                  ...
                  'zip': &lt;built-in function zip&gt;},
 '__file__': 'pass.py',
 '__name__': '__main__'}
</code></pre>
",,
129,3,Correct way to write line to file?,"<p>I'm used to doing <code>print &gt;&gt;f, ""hi there""</code></p>

<p>However, it seems that <code>print &gt;&gt;</code> is getting deprecated. What is the recommended way to do the line above?</p>

<p><b>Update</b>:
Regarding all those answers with <code>""\n""</code>...is this universal or Unix-specific? IE, should I be doing <code>""\r\n""</code> on Windows?</p>
","Correct way to write line to file?<p>I'm used to doing <code>print &gt;&gt;f, ""hi there""</code></p>

<p>However, it seems that <code>print &gt;&gt;</code> is getting deprecated. What is the recommended way to do the line above?</p>

<p><b>Update</b>:
Regarding all those answers with <code>""\n""</code>...is this universal or Unix-specific? IE, should I be doing <code>""\r\n""</code> on Windows?</p>
",<python><file-io>,print line deprecated universal recommended unix regarding answers update,"<p>This should be as simple as:</p>

<pre><code>with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')
</code></pre>

<p>From The Documentation:</p>

<blockquote>
  <p>Do not use <code>os.linesep</code> as a line terminator when writing files opened in text mode (the default); use a single '\n' instead, on all platforms.</p>
</blockquote>

<p>Some useful reading:</p>

<ul>
<li><a href=""http://docs.python.org/reference/compound_stmts.html#the-with-statement"" rel=""noreferrer"">The <code>with</code> statement</a></li>
<li><a href=""http://docs.python.org/library/functions.html?highlight=open#open"" rel=""noreferrer""><code>open()</code></a>

<ul>
<li>'a' is for append, or use</li>
<li>'w' to write with truncation</li>
</ul></li>
<li><a href=""http://docs.python.org/library/os.html"" rel=""noreferrer""><code>os</code></a> (particularly <a href=""http://docs.python.org/library/os.html?highlight=os.linesep#os.linesep"" rel=""noreferrer""><code>os.linesep</code></a>)</li>
</ul>
",,
130,3,How do I create a constant in Python?,"<p>Is there a way to declare a constant in Python? In Java we can create constant values in this manner:</p>

<pre class=""lang-java prettyprint-override""><code>public static final String CONST_NAME = ""Name"";
</code></pre>

<p>What is the equivalent of the above Java constant declaration in Python?</p>
","How do I create a constant in Python?<p>Is there a way to declare a constant in Python? In Java we can create constant values in this manner:</p>

<pre class=""lang-java prettyprint-override""><code>public static final String CONST_NAME = ""Name"";
</code></pre>

<p>What is the equivalent of the above Java constant declaration in Python?</p>
",<python><constants>,constant java create manner declaration declare equivalent python values way,"<p>No there is not. You cannot declare a variable or value as constant in Python. Just don't change it.</p>
<p>If you are in a class, the equivalent would be:</p>
<pre><code>class Foo(object):
    CONST_NAME = &quot;Name&quot;
</code></pre>
<p>if not, it is just</p>
<pre><code>CONST_NAME = &quot;Name&quot;
</code></pre>
<p>But you might want to have a look at the code snippet <a href=""http://web.archive.org/web/20100523132518/http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991"" rel=""noreferrer"">Constants in Python</a> by Alex Martelli.</p>
<hr />
<p>As of Python 3.8, there's a <a href=""https://docs.python.org/3/library/typing.html#typing.Final"" rel=""noreferrer""><code>typing.Final</code></a> variable annotation that will tell static type checkers (like mypy) that your variable shouldn't be reassigned. This is the closest equivalent to Java's <code>final</code>. However, it <strong>does not actually prevent reassignment</strong>:</p>
<pre><code>from typing import Final

a: Final = 1

# Executes fine, but mypy will report an error if you run mypy on this:
a = 2
</code></pre>
",,
131,0,How can I sort a dictionary by key?,"<p>What would be a nice way to go from <code>{2:3, 1:89, 4:5, 3:0}</code> to <code>{1:89, 2:3, 3:0, 4:5}</code>?<br>
I checked some posts but they all use the ""sorted"" operator that returns tuples. </p>
","How can I sort a dictionary by key?<p>What would be a nice way to go from <code>{2:3, 1:89, 4:5, 3:0}</code> to <code>{1:89, 2:3, 3:0, 4:5}</code>?<br>
I checked some posts but they all use the ""sorted"" operator that returns tuples. </p>
",<python><sorting><dictionary>,checked posts sorted nice tuples sort operator key returns dictionary,"<p>Standard Python dictionaries are unordered (until Python 3.7). Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>
<p>The easiest way is to use <a href=""http://docs.python.org/library/collections.html#collections.OrderedDict"" rel=""noreferrer""><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>
<pre><code>In [1]: import collections

In [2]: d = {2:3, 1:89, 4:5, 3:0}

In [3]: od = collections.OrderedDict(sorted(d.items()))

In [4]: od
Out[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])
</code></pre>
<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>
<pre><code>In [11]: od[1]
Out[11]: 89

In [12]: od[3]
Out[12]: 0

In [13]: for k, v in od.iteritems(): print k, v
   ....: 
1 89
2 3
3 0
4 5
</code></pre>
<h2>Python 3</h2>
<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>
<pre><code>In [13]: for k, v in od.items(): print(k, v)
   ....: 
1 89
2 3
3 0
4 5
</code></pre>
",,
132,2,Get a list from Pandas DataFrame column headers,"<p>I want to get a list of the column headers from a Pandas DataFrame.  The DataFrame will come from user input, so I won't know how many columns there will be or what they will be called.</p>
<p>For example, if I'm given a DataFrame like this:</p>
<pre><code>&gt;&gt;&gt; my_dataframe
    y  gdp  cap
0   1    2    5
1   2    3    9
2   8    7    2
3   3    4    7
4   6    7    7
5   4    8    3
6   8    2    8
7   9    9   10
8   6    6    4
9  10   10    7
</code></pre>
<p>I would get a list like this:</p>
<pre><code>&gt;&gt;&gt; header_list
['y', 'gdp', 'cap']
</code></pre>
","Get a list from Pandas DataFrame column headers<p>I want to get a list of the column headers from a Pandas DataFrame.  The DataFrame will come from user input, so I won't know how many columns there will be or what they will be called.</p>
<p>For example, if I'm given a DataFrame like this:</p>
<pre><code>&gt;&gt;&gt; my_dataframe
    y  gdp  cap
0   1    2    5
1   2    3    9
2   8    7    2
3   3    4    7
4   6    7    7
5   4    8    3
6   8    2    8
7   9    9   10
8   6    6    4
9  10   10    7
</code></pre>
<p>I would get a list like this:</p>
<pre><code>&gt;&gt;&gt; header_list
['y', 'gdp', 'cap']
</code></pre>
",<python><pandas><dataframe>,dataframe column list pandas headers come called columns like,"<p>You can get the values as a list by doing:</p>
<pre><code>list(my_dataframe.columns.values)
</code></pre>
<p>Also you can simply use (as shown in <a href=""https://stackoverflow.com/a/19483602/4909087"">Ed Chum's answer</a>):</p>
<pre><code>list(my_dataframe)
</code></pre>
",,
133,6,"If Python is interpreted, what are .pyc files?","<p>I've been given to understand that Python is an interpreted language...<br>
 However, when I look at my <strong>Python</strong> source code I see <code>.pyc</code> files, which Windows identifies as ""Compiled Python Files"".   </p>

<p>Where do these come in?</p>
","If Python is interpreted, what are .pyc files?<p>I've been given to understand that Python is an interpreted language...<br>
 However, when I look at my <strong>Python</strong> source code I see <code>.pyc</code> files, which Windows identifies as ""Compiled Python Files"".   </p>

<p>Where do these come in?</p>
",<python><compiled><interpreted-language><pyc>,interpreted pyc files identifies compiled python come language look windows,"<p>They contain <a href=""http://en.wikipedia.org/wiki/Bytecode"" rel=""noreferrer"">byte code</a>, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine.</p>
<p><a href=""https://docs.python.org/3/glossary.html#term-interpreted"" rel=""noreferrer"">Python's documentation</a> explains the definition like this:</p>
<blockquote>
<p>Python is an interpreted language, as
opposed to a compiled one, though the
distinction can be blurry because of
the presence of the bytecode compiler.
This means that source files can be
run directly without explicitly
creating an executable which is then
run.</p>
</blockquote>
",,
134,4,How to reverse a list?,"<p>How can I do the following in Python?</p>

<pre><code>array = [0, 10, 20, 40]
for (i = array.length() - 1; i &gt;= 0; i--)
</code></pre>

<p>I need to have the elements of an array, but from the end to the beginning.</p>
","How to reverse a list?<p>How can I do the following in Python?</p>

<pre><code>array = [0, 10, 20, 40]
for (i = array.length() - 1; i &gt;= 0; i--)
</code></pre>

<p>I need to have the elements of an array, but from the end to the beginning.</p>
",<python><list>,beginning reverse end array elements need following list python fori,"<p>You can make use of the <a href=""https://www.python.org/dev/peps/pep-0322/"" rel=""noreferrer""><code>reversed</code></a> function for this as:</p>

<pre><code>&gt;&gt;&gt; array=[0,10,20,40]
&gt;&gt;&gt; for i in reversed(array):
...     print(i)
</code></pre>

<p>Note that <code>reversed(...)</code> does not return a list. You can get a reversed list using <code>list(reversed(array))</code>.</p>
",,
135,2,How to add a new column to an existing DataFrame?,"<p>I have the following indexed DataFrame with named columns and rows not- continuous numbers:</p>

<pre><code>          a         b         c         d
2  0.671399  0.101208 -0.181532  0.241273
3  0.446172 -0.243316  0.051767  1.577318
5  0.614758  0.075793 -0.451460 -0.012493
</code></pre>

<p>I would like to add a new column, <code>'e'</code>, to the existing data frame and do not want to change anything in the data frame (i.e., the new column always has the same length as the DataFrame). </p>

<pre><code>0   -0.335485
1   -1.166658
2   -0.385571
dtype: float64
</code></pre>

<p>How can I add column <code>e</code> to the above example? </p>
","How to add a new column to an existing DataFrame?<p>I have the following indexed DataFrame with named columns and rows not- continuous numbers:</p>

<pre><code>          a         b         c         d
2  0.671399  0.101208 -0.181532  0.241273
3  0.446172 -0.243316  0.051767  1.577318
5  0.614758  0.075793 -0.451460 -0.012493
</code></pre>

<p>I would like to add a new column, <code>'e'</code>, to the existing data frame and do not want to change anything in the data frame (i.e., the new column always has the same length as the DataFrame). </p>

<pre><code>0   -0.335485
1   -1.166658
2   -0.385571
dtype: float64
</code></pre>

<p>How can I add column <code>e</code> to the above example? </p>
",<python><pandas><dataframe><chained-assignment>,column add new dataframe existing frame data indexed continuous named,"<p><strong>Edit 2017</strong></p>
<p>As indicated in the comments and by @Alexander, currently the best method to add the values of a Series as a new column of a DataFrame could be using <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html"" rel=""noreferrer""><strong><code>assign</code></strong></a>:</p>
<pre><code>df1 = df1.assign(e=pd.Series(np.random.randn(sLength)).values)
</code></pre>
<hr />
<p><strong>Edit 2015</strong><br />
Some reported getting the <code>SettingWithCopyWarning</code> with this code.<br />
However, the code still runs perfectly with the current pandas version 0.16.1.</p>
<pre><code>&gt;&gt;&gt; sLength = len(df1['a'])
&gt;&gt;&gt; df1
          a         b         c         d
6 -0.269221 -0.026476  0.997517  1.294385
8  0.917438  0.847941  0.034235 -0.448948

&gt;&gt;&gt; df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)
&gt;&gt;&gt; df1
          a         b         c         d         e
6 -0.269221 -0.026476  0.997517  1.294385  1.757167
8  0.917438  0.847941  0.034235 -0.448948  2.228131

&gt;&gt;&gt; pd.version.short_version
'0.16.1'
</code></pre>
<p>The <code>SettingWithCopyWarning</code> aims to inform of a possibly invalid assignment on a copy of the Dataframe. It doesn't necessarily say you did it wrong (it can trigger false positives) but from 0.13.0 it let you know there are more adequate methods for the same purpose. Then, if you get the warning, just follow its advise: <em>Try using .loc[row_index,col_indexer] = value instead</em></p>
<pre><code>&gt;&gt;&gt; df1.loc[:,'f'] = pd.Series(np.random.randn(sLength), index=df1.index)
&gt;&gt;&gt; df1
          a         b         c         d         e         f
6 -0.269221 -0.026476  0.997517  1.294385  1.757167 -0.050927
8  0.917438  0.847941  0.034235 -0.448948  2.228131  0.006109
&gt;&gt;&gt; 
</code></pre>
<p>In fact, this is currently the more efficient method as <a href=""http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy"" rel=""noreferrer"">described in pandas docs</a></p>
<hr />
<p>Original answer:</p>
<p>Use the original df1 indexes to create the series:</p>
<pre><code>df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)
</code></pre>
",,
136,6,Relative imports for the billionth time,"<p>I've been here:</p>
<ul>
<li><a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">http://www.python.org/dev/peps/pep-0328/</a></li>
<li><a href=""http://docs.python.org/2/tutorial/modules.html#packages"" rel=""noreferrer"">http://docs.python.org/2/tutorial/modules.html#packages</a></li>
<li><a href=""https://stackoverflow.com/questions/10059002/python-packages-relative-imports"">Python packages: relative imports</a></li>
<li><a href=""https://stackoverflow.com/questions/9123062/python-relative-import-example-code-does-not-work"">python relative import example code does not work</a></li>
<li><a href=""https://stackoverflow.com/questions/8299270/ultimate-answer-to-relative-python-imports"">Relative imports in python 2.5</a></li>
<li><a href=""https://stackoverflow.com/questions/4175534/relative-imports-in-python"">Relative imports in Python</a></li>
<li><a href=""https://stackoverflow.com/questions/13233931/python-disabling-relative-import?rq=1"">Python: Disabling relative import</a></li>
</ul>
<p>and plenty of URLs that I did not copy, some on SO, some on other sites, back when I thought I'd have the solution quickly.</p>
<p>The forever-recurring question is this: how do I solve this &quot;Attempted relative import in non-package&quot; message?</p>
<pre><code>ImportError: attempted relative import with no known parent package
</code></pre>
<p>I built an exact replica of the package on pep-0328:</p>
<pre><code>package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
        moduleY.py
    subpackage2/
        __init__.py
        moduleZ.py
    moduleA.py
</code></pre>
<p>The imports were done from the console.</p>
<p>I did make functions named spam and eggs in their appropriate modules.  Naturally, it didn't work.  The answer is apparently in the 4th URL I listed, but it's all alumni to me. There was this response on one of the URLs I visited:</p>
<blockquote>
<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>
</blockquote>
<p>The above response looks promising, but it's all hieroglyphs to me.  So my question, how do I make Python not return to me &quot;Attempted relative import in non-package&quot;? has an answer that involves -m, supposedly.</p>
<p>Can somebody please tell me why Python gives that error message, what it means by &quot;non-package&quot;, why and how do you define a 'package', and <em>the precise answer put in terms easy enough for a kindergartener to understand</em>.</p>
","Relative imports for the billionth time<p>I've been here:</p>
<ul>
<li><a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">http://www.python.org/dev/peps/pep-0328/</a></li>
<li><a href=""http://docs.python.org/2/tutorial/modules.html#packages"" rel=""noreferrer"">http://docs.python.org/2/tutorial/modules.html#packages</a></li>
<li><a href=""https://stackoverflow.com/questions/10059002/python-packages-relative-imports"">Python packages: relative imports</a></li>
<li><a href=""https://stackoverflow.com/questions/9123062/python-relative-import-example-code-does-not-work"">python relative import example code does not work</a></li>
<li><a href=""https://stackoverflow.com/questions/8299270/ultimate-answer-to-relative-python-imports"">Relative imports in python 2.5</a></li>
<li><a href=""https://stackoverflow.com/questions/4175534/relative-imports-in-python"">Relative imports in Python</a></li>
<li><a href=""https://stackoverflow.com/questions/13233931/python-disabling-relative-import?rq=1"">Python: Disabling relative import</a></li>
</ul>
<p>and plenty of URLs that I did not copy, some on SO, some on other sites, back when I thought I'd have the solution quickly.</p>
<p>The forever-recurring question is this: how do I solve this &quot;Attempted relative import in non-package&quot; message?</p>
<pre><code>ImportError: attempted relative import with no known parent package
</code></pre>
<p>I built an exact replica of the package on pep-0328:</p>
<pre><code>package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
        moduleY.py
    subpackage2/
        __init__.py
        moduleZ.py
    moduleA.py
</code></pre>
<p>The imports were done from the console.</p>
<p>I did make functions named spam and eggs in their appropriate modules.  Naturally, it didn't work.  The answer is apparently in the 4th URL I listed, but it's all alumni to me. There was this response on one of the URLs I visited:</p>
<blockquote>
<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>
</blockquote>
<p>The above response looks promising, but it's all hieroglyphs to me.  So my question, how do I make Python not return to me &quot;Attempted relative import in non-package&quot;? has an answer that involves -m, supposedly.</p>
<p>Can somebody please tell me why Python gives that error message, what it means by &quot;non-package&quot;, why and how do you define a 'package', and <em>the precise answer put in terms easy enough for a kindergartener to understand</em>.</p>
",<python><import><relative-path><python-packaging><relative-import>,relative imports package module non import answer urls response attempted,"<p><strong>Script vs. Module</strong></p>
<p>Here's an explanation.  The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else.  <strong>Just knowing what directory a file is in does not determine what package Python thinks it is in.</strong>  That depends, additionally, on how you load the file into Python (by running or by importing).</p>
<p>There are two ways to load a Python file: as the top-level script, or as a
module.  A file is loaded as the top-level script if you execute it directly, for instance by typing <code>python myfile.py</code> on the command line.  It is loaded as a module when an <code>import</code> statement is encountered inside some other file.  There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.</p>
<p><strong>Naming</strong></p>
<p>When a file is loaded, it is given a name (which is stored in its <code>__name__</code> attribute).  If it was loaded as the top-level script, its name is <code>__main__</code>.  If it was loaded as a module, its name is the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots.</p>
<p>So for instance in your example:</p>
<pre><code>package/
    __init__.py
    subpackage1/
        __init__.py
        moduleX.py
    moduleA.py
</code></pre>
<p>if you imported <code>moduleX</code> (note: <em>imported</em>, not directly executed), its name would be <code>package.subpackage1.moduleX</code>.  If you imported <code>moduleA</code>, its name would be <code>package.moduleA</code>.  However, if you <em>directly run</em> <code>moduleX</code> from the command line, its name will instead be <code>__main__</code>, and if you directly run <code>moduleA</code> from the command line, its name will be <code>__main__</code>.  When a module is run as the top-level script, it loses its normal name and its name is instead <code>__main__</code>.</p>
<p><strong>Accessing a module NOT through its containing package</strong></p>
<p>There is an additional wrinkle: the module's name depends on whether it was imported &quot;directly&quot; from the directory it is in or imported via a package.  This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it).  For instance, if you start the Python interpreter in the directory <code>package/subpackage1</code> and then do <code>import moduleX</code>, the name of <code>moduleX</code> will just be <code>moduleX</code>, and not <code>package.subpackage1.moduleX</code>.  This is because Python adds the current directory to its search path when the interpreter is entered interactively; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name.</p>
<p>A special case is if you run the interpreter interactively (e.g., just type <code>python</code> and start entering Python code on the fly).  In this case, the name of that interactive session is <code>__main__</code>.</p>
<p>Now here is the crucial thing for your error message: <strong>if a module's name has no dots, it is not considered to be part of a package</strong>.  It doesn't matter where the file actually is on disk.  All that matters is what its name is, and its name depends on how you loaded it.</p>
<p>Now look at the quote you included in your question:</p>
<blockquote>
<p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top-level module, regardless of where the module is actually located on the file system.</p>
</blockquote>
<p><strong>Relative imports...</strong></p>
<p>Relative imports use the module's <em>name</em> to determine where it is in a package.  When you use a relative import like <code>from .. import foo</code>, the dots indicate to step up some number of levels in the package hierarchy.  For instance, if your current module's name is <code>package.subpackage1.moduleX</code>, then <code>..moduleA</code> would mean <code>package.moduleA</code>.  For a <code>from .. import</code> to work, the module's name must have at least as many dots as there are in the <code>import</code> statement.</p>
<p><strong>... are only relative in a package</strong></p>
<p>However, if your module's name is <code>__main__</code>, it is not considered to be in a package.  Its name has no dots, and therefore you cannot use <code>from .. import</code> statements inside it.  If you try to do so, you will get the &quot;relative-import in non-package&quot; error.</p>
<p><strong>Scripts can't import relative</strong></p>
<p>What you probably did is you tried to run <code>moduleX</code> or the like from the command line.  When you did this, its name was set to <code>__main__</code>, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory &quot;too early&quot; without realizing it is part of a package.</p>
<p>Also remember that when you run the interactive interpreter, the &quot;name&quot; of that interactive session is always <code>__main__</code>.  Thus <strong>you cannot do relative imports directly from an interactive session</strong>.  Relative imports are only for use within module files.</p>
<p><strong>Two solutions:</strong></p>
<ol>
<li><p>If you really do want to run <code>moduleX</code> directly, but you still want it to be considered part of a package, you can do <code>python -m package.subpackage1.moduleX</code>.  The <code>-m</code> tells Python to load it as a module, not as the top-level script.</p>
</li>
<li><p>Or perhaps you don't actually want to <em>run</em> <code>moduleX</code>, you just want to run some other script, say <code>myfile.py</code>, that <em>uses</em> functions inside <code>moduleX</code>.  If that is the case, put <code>myfile.py</code> <em>somewhere else</em> ƒ?? <em>not</em> inside the <code>package</code> directory ƒ?? and run it.  If inside <code>myfile.py</code> you do things like <code>from package.moduleA import spam</code>, it will work fine.</p>
</li>
</ol>
<p><strong>Notes</strong></p>
<ul>
<li><p>For either of these solutions, the package directory (<code>package</code> in your example) must be accessible from the Python module search path (<code>sys.path</code>).  If it is not, you will not be able to use anything in the package reliably at all.</p>
</li>
<li><p>Since Python 2.6, the module's &quot;name&quot; for package-resolution purposes is determined not just by its <code>__name__</code> attributes but also by the <code>__package__</code> attribute.  That's why I'm avoiding using the explicit symbol <code>__name__</code> to refer to the module's &quot;name&quot;.  Since Python 2.6 a module's &quot;name&quot; is effectively <code>__package__ + '.' + __name__</code>, or just <code>__name__</code> if <code>__package__</code> is <code>None</code>.)</p>
</li>
</ul>
",,
137,6,Relative imports in Python 3,"<p>I want to import a function from another file in the same directory.</p>
<p>Sometimes it works for me with <code>from .mymodule import myfunction</code> but sometimes I get a:</p>
<pre class=""lang-none prettyprint-override""><code>SystemError: Parent module '' not loaded, cannot perform relative import
</code></pre>
<p>Sometimes it works with <code>from mymodule import myfunction</code>, but sometimes I also get a:</p>
<pre class=""lang-none prettyprint-override""><code>SystemError: Parent module '' not loaded, cannot perform relative import
</code></pre>
<p>I don't understand the logic here and I couldn't find any explanation. This looks completely random.</p>
<p>Could someone explain to me what's the logic behind all this?</p>
","Relative imports in Python 3<p>I want to import a function from another file in the same directory.</p>
<p>Sometimes it works for me with <code>from .mymodule import myfunction</code> but sometimes I get a:</p>
<pre class=""lang-none prettyprint-override""><code>SystemError: Parent module '' not loaded, cannot perform relative import
</code></pre>
<p>Sometimes it works with <code>from mymodule import myfunction</code>, but sometimes I also get a:</p>
<pre class=""lang-none prettyprint-override""><code>SystemError: Parent module '' not loaded, cannot perform relative import
</code></pre>
<p>I don't understand the logic here and I couldn't find any explanation. This looks completely random.</p>
<p>Could someone explain to me what's the logic behind all this?</p>
",<python><python-3.x><python-import>,mymodule import myfunction logic works completely imports explanation relative random,"<blockquote>
<p>unfortunately, this module needs to be inside the package, and it also
needs to be runnable as a script, sometimes. Any idea how I could
achieve that?</p>
</blockquote>
<p>It's quite common to have a layout like this...</p>
<pre><code>main.py
mypackage/
    __init__.py
    mymodule.py
    myothermodule.py
</code></pre>
<p>...with a <code>mymodule.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

# Exported function
def as_int(a):
    return int(a)

# Test function for module  
def _test():
    assert as_int('1') == 1

if __name__ == '__main__':
    _test()
</code></pre>
<p>...a <code>myothermodule.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

from .mymodule import as_int

# Exported function
def add(a, b):
    return as_int(a) + as_int(b)

# Test function for module  
def _test():
    assert add('1', '1') == 2

if __name__ == '__main__':
    _test()
</code></pre>
<p>...and a <code>main.py</code> like this...</p>
<pre><code>#!/usr/bin/env python3

from mypackage.myothermodule import add

def main():
    print(add('1', '1'))

if __name__ == '__main__':
    main()
</code></pre>
<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>
<pre><code>from .mymodule import as_int
</code></pre>
<p>The way you're supposed to run it is...</p>
<pre><code>python3 -m mypackage.myothermodule
</code></pre>
<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>
<p>The simplest fix for this case, assuming the name <code>mymodule</code> is globally unique, would be to avoid using relative imports, and just use...</p>
<pre><code>from mymodule import as_int
</code></pre>
<p>...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in <code>PYTHONPATH</code>, and do it like this...</p>
<pre><code>from mypackage.mymodule import as_int
</code></pre>
<p>...or if you want it to work &quot;out of the box&quot;, you can frob the <code>PYTHONPATH</code> in code first with this...</p>
<pre><code>import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))

from mypackage.mymodule import as_int
</code></pre>
<p>It's kind of a pain, but there's a clue as to why in <a href=""http://mail.python.org/pipermail/python-3000/2007-April/006793.html"" rel=""noreferrer"">an email</a> written by a certain Guido van Rossum...</p>
<blockquote>
<p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>
machinery. The only use case seems to be running scripts that happen
to be living inside a module's directory, which I've always seen as an
antipattern. To make me change my mind you'd have to convince me that
it isn't.</p>
</blockquote>
<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>
",,
138,2,Create a Pandas Dataframe by appending one row at a time,"<p>I understand that Pandas is designed to load a fully populated <code>DataFrame</code>, but I need to <strong>create an empty DataFrame then add rows, one by one</strong>.
What is the best way to do this?</p>
<p>I successfully created an empty DataFrame with:</p>
<pre><code>res = DataFrame(columns=('lib', 'qty1', 'qty2'))
</code></pre>
<p>Then I can add a new row and fill a field with:</p>
<pre><code>res = res.set_value(len(res), 'qty1', 10.0)
</code></pre>
<p>It works, but it seems very odd :-/ (It fails for adding a string value.)</p>
<p>How can I add a new row to my DataFrame (with a different columns type)?</p>
","Create a Pandas Dataframe by appending one row at a time<p>I understand that Pandas is designed to load a fully populated <code>DataFrame</code>, but I need to <strong>create an empty DataFrame then add rows, one by one</strong>.
What is the best way to do this?</p>
<p>I successfully created an empty DataFrame with:</p>
<pre><code>res = DataFrame(columns=('lib', 'qty1', 'qty2'))
</code></pre>
<p>Then I can add a new row and fill a field with:</p>
<pre><code>res = res.set_value(len(res), 'qty1', 10.0)
</code></pre>
<p>It works, but it seems very odd :-/ (It fails for adding a string value.)</p>
<p>How can I add a new row to my DataFrame (with a different columns type)?</p>
",<python><pandas><dataframe><append>,dataframe row add create new pandas designed populated fully time,"<p>You can use <code>df.loc[i]</code>, where the row with index <code>i</code> will be what you specify it to be in the dataframe.</p>
<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from numpy.random import randint

&gt;&gt;&gt; df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])
&gt;&gt;&gt; for i in range(5):
&gt;&gt;&gt;     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))

&gt;&gt;&gt; df
     lib qty1 qty2
0  name0    3    3
1  name1    2    4
2  name2    2    8
3  name3    2    1
4  name4    9    6
</code></pre>
",,
139,6,How to read a text file into a string variable and strip newlines?,"<p>I use the following code segment to read a file in python:</p>

<pre><code>with open (""data.txt"", ""r"") as myfile:
    data=myfile.readlines()
</code></pre>

<p>Input file is:</p>

<pre class=""lang-none prettyprint-override""><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN
GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE
</code></pre>

<p>and when I print data I get</p>

<pre class=""lang-none prettyprint-override""><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\n', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']
</code></pre>

<p>As I see data is in <code>list</code> form. How do I make it string? And also how do I remove the <code>""\n""</code>, <code>""[""</code>, and <code>""]""</code> characters from it?</p>
","How to read a text file into a string variable and strip newlines?<p>I use the following code segment to read a file in python:</p>

<pre><code>with open (""data.txt"", ""r"") as myfile:
    data=myfile.readlines()
</code></pre>

<p>Input file is:</p>

<pre class=""lang-none prettyprint-override""><code>LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN
GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE
</code></pre>

<p>and when I print data I get</p>

<pre class=""lang-none prettyprint-override""><code>['LLKKKKKKKKMMMMMMMMNNNNNNNNNNNNN\n', 'GGGGGGGGGHHHHHHHHHHHHHHHHHHHHEEEEEEEE']
</code></pre>

<p>As I see data is in <code>list</code> form. How do I make it string? And also how do I remove the <code>""\n""</code>, <code>""[""</code>, and <code>""]""</code> characters from it?</p>
",<python><string>,file read data newlines getas segment string strip form characters,"<p>You could use:</p>
<pre><code>with open('data.txt', 'r') as file:
    data = file.read().replace('\n', '')
</code></pre>
<p>Or if the file content is guaranteed to be one-line</p>
<pre><code>with open('data.txt', 'r') as file:
    data = file.read().rstrip()
</code></pre>
",,
140,3,Does Django scale?,"<p>I'm building a web application with Django. The reasons I chose Django were:</p>

<ul>
<li>I wanted to work with free/open-source tools.</li>
<li>I like Python and feel it's a <strong>long-term</strong> language, whereas regarding Ruby I wasn't sure, and PHP seemed like a huge hassle to learn.</li>
<li>I'm building a prototype for an idea and wasn't thinking too much about the future. Development speed was the main factor, and I already knew Python.</li>
<li>I knew the migration to Google App Engine would be easier should I choose to do so in the future.</li>
<li>I heard Django was ""nice"".</li>
</ul>

<p>Now that I'm getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I'm not saying anything to disregard them, but this is clearly not objective information...).</p>

<p><strong>My questions:</strong></p>

<ul>
<li>What's the ""largest"" site that's built on Django today? (I measure size mostly by user traffic)</li>
<li>Can Django deal with <em>100,000 users daily</em>, each visiting the site for a couple of hours?</li>
<li>Could a site like Stack Overflow run on Django?</li>
</ul>
","Does Django scale?<p>I'm building a web application with Django. The reasons I chose Django were:</p>

<ul>
<li>I wanted to work with free/open-source tools.</li>
<li>I like Python and feel it's a <strong>long-term</strong> language, whereas regarding Ruby I wasn't sure, and PHP seemed like a huge hassle to learn.</li>
<li>I'm building a prototype for an idea and wasn't thinking too much about the future. Development speed was the main factor, and I already knew Python.</li>
<li>I knew the migration to Google App Engine would be easier should I choose to do so in the future.</li>
<li>I heard Django was ""nice"".</li>
</ul>

<p>Now that I'm getting closer to thinking about publishing my work, I start being concerned about scale. The only information I found about the scaling capabilities of Django is provided by the Django team (I'm not saying anything to disregard them, but this is clearly not objective information...).</p>

<p><strong>My questions:</strong></p>

<ul>
<li>What's the ""largest"" site that's built on Django today? (I measure size mostly by user traffic)</li>
<li>Can Django deal with <em>100,000 users daily</em>, each visiting the site for a couple of hours?</li>
<li>Could a site like Stack Overflow run on Django?</li>
</ul>
",<python><django><web-applications><scalability>,django site knew thinking scale building future information work like,"<ol>
<li><p><strong>""What are the largest sites built on Django today?""</strong></p>

<p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations.  First, we have a list of Django sites on the front page of <a href=""http://www.djangoproject.com/"" rel=""noreferrer"">the main Django project page</a> and then a list of Django built sites at <a href=""http://www.djangosites.org/"" rel=""noreferrer"">djangosites.org</a>.  Going through the lists and picking some that I know have decent traffic we see:</p>

<ul>
<li><p><strong><a href=""http://instagram.com"" rel=""noreferrer"">Instagram</a></strong>: <a href=""http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances"" rel=""noreferrer"">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a>.</p></li>
<li><p><strong><a href=""http://pinterest.com/"" rel=""noreferrer"">Pinterest</a></strong>: <a href=""http://www.alexa.com/siteinfo/Pinterest.com"" rel=""noreferrer"">Alexa rank 37 (21.4.2015)</a> and 70 Million users in 2013</p></li>
<li><p><strong><a href=""http://bitbucket.org/"" rel=""noreferrer"">Bitbucket</a></strong>: <a href=""https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/"" rel=""noreferrer"">200TB of Code and 2.500.000 Users</a></p></li>
<li><p><strong><a href=""http://disqus.com"" rel=""noreferrer"">Disqus</a></strong>: <a href=""http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi"" rel=""noreferrer"">Serving 400 million people with Python</a>.</p></li>
<li><p><strong><a href=""http://curse.com/"" rel=""noreferrer"">curse.com</a></strong>: <a href=""http://www.quantcast.com/curse.com"" rel=""noreferrer"">600k daily visits</a>.</p></li>
<li><p><strong><a href=""http://tabblo.com/"" rel=""noreferrer"">tabblo.com</a></strong>: <a href=""http://www.quantcast.com/tabblo.com"" rel=""noreferrer"">44k daily visits</a>, see Ned Batchelder's posts <a href=""http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html"" rel=""noreferrer"">Infrastructure for modern web sites</a>.</p></li>
<li><p><strong><a href=""http://chesspark.com/"" rel=""noreferrer"">chesspark.com</a></strong>: <a href=""http://www.alexa.com/siteinfo/chesspark.com"" rel=""noreferrer"">Alexa</a> rank about 179k.</p></li>
<li><p><strong><a href=""http://pownce.com/"" rel=""noreferrer"">pownce.com</a></strong> (no longer active): <a href=""http://www.alexa.com/siteinfo/pownce.com"" rel=""noreferrer"">alexa</a> rank about 65k.
Mike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href=""http://www.slideshare.net/road76/scaling-django"" rel=""noreferrer"">Scaling Django Web Apps</a></strong> says ""hundreds of hits per second"".  This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li>
<li><p>HP had a site built with Django 1.5: <a href=""http://www.eprintcenter.com"" rel=""noreferrer"">ePrint center</a>. However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (*).</p></li>
</ul></li>
<li><p><strong>""Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?""</strong></p>

<p>Yes, see above.</p></li>
<li><p><strong>""Could a site like Stack Overflow run on Django?""</strong></p>

<p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li>
</ol>

<p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p>

<hr>

<p>Blog post about <a href=""http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom"" rel=""noreferrer"">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href=""http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com"" rel=""noreferrer"">top 10,000 website</a>.  <a href=""http://www.quantcast.com/michaelmoore.com"" rel=""noreferrer"">Quantcast stats</a> and <a href=""http://siteanalytics.compete.com/michaelmoore.com/"" rel=""noreferrer"">compete.com stats</a>.</p>

<hr>

<p><sub>(*) The author of the edit, including such reference, used to work as outsourced developer in that project.</sub></p>
",,
141,6,How to move a file in Python?,"<p>I looked into the Python <a href=""http://docs.python.org/library/os.html""><code>os</code></a> interface, but was unable to locate a method to move a file. How would I do the equivalent of <code>$ mv ...</code> in Python?</p>

<pre><code>&gt;&gt;&gt; source_files = '/PATH/TO/FOLDER/*'
&gt;&gt;&gt; destination_folder = 'PATH/TO/FOLDER'
&gt;&gt;&gt; # equivalent of $ mv source_files destination_folder
</code></pre>
","How to move a file in Python?<p>I looked into the Python <a href=""http://docs.python.org/library/os.html""><code>os</code></a> interface, but was unable to locate a method to move a file. How would I do the equivalent of <code>$ mv ...</code> in Python?</p>

<pre><code>&gt;&gt;&gt; source_files = '/PATH/TO/FOLDER/*'
&gt;&gt;&gt; destination_folder = 'PATH/TO/FOLDER'
&gt;&gt;&gt; # equivalent of $ mv source_files destination_folder
</code></pre>
",<python><file><file-handling><python-os>,mv file locate interface unable looked os equivalent python method,"<p><a href=""http://docs.python.org/library/os.html#os.rename"" rel=""noreferrer""><code>os.rename()</code></a>, <a href=""https://docs.python.org/library/os.html#os.replace"" rel=""noreferrer""><code>os.replace()</code></a>, or <a href=""http://docs.python.org/library/shutil.html#shutil.move"" rel=""noreferrer""><code>shutil.move()</code></a></p>
<p>All employ the same syntax:</p>
<pre><code>import os
import shutil

os.rename(&quot;path/to/current/file.foo&quot;, &quot;path/to/new/destination/for/file.foo&quot;)
os.replace(&quot;path/to/current/file.foo&quot;, &quot;path/to/new/destination/for/file.foo&quot;)
shutil.move(&quot;path/to/current/file.foo&quot;, &quot;path/to/new/destination/for/file.foo&quot;)
</code></pre>
<p>Note that you must include the file name (<code>file.foo</code>) in both the source and destination arguments. If it is changed, the file will be renamed as well as moved.</p>
<p>Note also that in the first two cases the directory in which the new file is being created must already exist. On Windows, a file with that name must not exist or an exception will be raised, but <code>os.replace()</code> will silently replace a file even in that occurrence.</p>
<p>As has been noted in comments on other answers, <code>shutil.move</code> simply calls <code>os.rename</code> in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file.</p>
",,
142,6,How to get line count of a large file cheaply in Python?,"<p>I need to get a line count of a large file (hundreds of thousands of lines) in python. What is the most efficient way both memory- and time-wise?</p>

<p>At the moment I do:</p>

<pre><code>def file_len(fname):
    with open(fname) as f:
        for i, l in enumerate(f):
            pass
    return i + 1
</code></pre>

<p>is it possible to do any better?</p>
","How to get line count of a large file cheaply in Python?<p>I need to get a line count of a large file (hundreds of thousands of lines) in python. What is the most efficient way both memory- and time-wise?</p>

<p>At the moment I do:</p>

<pre><code>def file_len(fname):
    with open(fname) as f:
        for i, l in enumerate(f):
            pass
    return i + 1
</code></pre>

<p>is it possible to do any better?</p>
",<python><text-files><line-count>,large count line cheaply file thousands hundreds wise moment memory,"<p>You can't get any better than that.</p>

<p>After all, any solution will have to read the entire file, figure out how many <code>\n</code> you have, and return that result.</p>

<p>Do you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I/O-bound, best you can do is make sure you don't use unnecessary memory, but it looks like you have that covered.</p>
",,
143,1,How do I find the location of my Python site-packages directory?,"<p>How do I find the location of my site-packages directory?</p>
","How do I find the location of my Python site-packages directory?<p>How do I find the location of my site-packages directory?</p>
",<python><installation>,location site packages directory python,"<p>There are two types of site-packages directories, <em>global</em> and <em>per user</em>.</p>

<ol>
<li><p><strong>Global</strong> site-packages (""<a href=""https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages"">dist-packages</a>"") directories are listed in <code>sys.path</code> when you run:</p>

<pre><code>python -m site
</code></pre>

<p>For a more concise list run <code>getsitepackages</code> from the <a href=""https://docs.python.org/3/library/site.html#site.getsitepackages"" rel=""noreferrer"">site module</a> in Python code:</p>

<pre><code>python -c 'import site; print(site.getsitepackages())'
</code></pre>

<p><em>Note:</em> With virtualenvs <a href=""https://github.com/pypa/virtualenv/issues/228"" rel=""noreferrer"">getsitepackages is not available</a>, <code>sys.path</code> from above will list the virtualenv's site-packages directory correctly, though. In Python 3, you may use the <a href=""https://docs.python.org/3/library/sysconfig.html#using-sysconfig-as-a-script"" rel=""noreferrer"">sysconfig module</a> instead:</p>

<pre><code>python3 -c 'import sysconfig; print(sysconfig.get_paths()[""purelib""])'
</code></pre></li>
<li><p>The <strong>per user</strong> site-packages directory (<a href=""https://www.python.org/dev/peps/pep-0370/"" rel=""noreferrer"">PEP 370</a>) is where Python installs your local packages:</p>

<pre><code>python -m site --user-site
</code></pre>

<p>If this points to a non-existing directory check the exit status of Python and see <code>python -m site --help</code> for explanations.</p>

<p><em>Hint:</em> Running <code>pip list --user</code> or <code>pip freeze --user</code> gives you a list of all installed <em>per user</em> site-packages.</p></li>
</ol>

<hr>

<h2>Practical Tips</h2>

<ul>
<li><p><code>&lt;package&gt;.__path__</code> lets you identify the location(s) of a specific package: (<a href=""https://stackoverflow.com/questions/2699287/what-is-path-useful-for"">details</a>)</p>

<pre><code>$ python -c ""import setuptools as _; print(_.__path__)""
['/usr/lib/python2.7/dist-packages/setuptools']
</code></pre></li>
<li><p><code>&lt;module&gt;.__file__</code> lets you identify the location of a specific module: (<a href=""https://softwareengineering.stackexchange.com/questions/111871/module-vs-package"">difference</a>)</p>

<pre><code>$ python3 -c ""import os as _; print(_.__file__)""
/usr/lib/python3.6/os.py
</code></pre></li>
<li><p>Run <code>pip show &lt;package&gt;</code> to show Debian-style package information:</p>

<pre><code>$ pip show pytest
Name: pytest
Version: 3.8.2
Summary: pytest: simple powerful testing with Python
Home-page: https://docs.pytest.org/en/latest/
Author: Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin and others
Author-email: None
License: MIT license
Location: /home/peter/.local/lib/python3.4/site-packages
Requires: more-itertools, atomicwrites, setuptools, attrs, pathlib2, six, py, pluggy
</code></pre></li>
</ul>
",,
144,5,How does the @property decorator work in Python?,"<p>I would like to understand how the built-in function <code>property</code> works. What confuses me is that <code>property</code> can also be used as a decorator, but it only takes arguments when used as a built-in function and not when used as a decorator.</p>
<p>This example is from the <a href=""http://docs.python.org/3/library/functions.html#property"" rel=""noreferrer"">documentation</a>:</p>
<pre><code>class C:
    def __init__(self):
        self._x = None

    def getx(self):
        return self._x
    def setx(self, value):
        self._x = value
    def delx(self):
        del self._x
    x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)
</code></pre>
<p><code>property</code>'s arguments are <code>getx</code>, <code>setx</code>, <code>delx</code> and a doc string.</p>
<p>In the code below <code>property</code> is used as a decorator. The object of it is the <code>x</code> function, but in the code above there is no place for an object function in the arguments.</p>
<pre><code>class C:
    def __init__(self):
        self._x = None

    @property
    def x(self):
        &quot;&quot;&quot;I'm the 'x' property.&quot;&quot;&quot;
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</code></pre>
<p>How are the <code>x.setter</code> and <code>x.deleter</code> decorators created in this case?</p>
","How does the @property decorator work in Python?<p>I would like to understand how the built-in function <code>property</code> works. What confuses me is that <code>property</code> can also be used as a decorator, but it only takes arguments when used as a built-in function and not when used as a decorator.</p>
<p>This example is from the <a href=""http://docs.python.org/3/library/functions.html#property"" rel=""noreferrer"">documentation</a>:</p>
<pre><code>class C:
    def __init__(self):
        self._x = None

    def getx(self):
        return self._x
    def setx(self, value):
        self._x = value
    def delx(self):
        del self._x
    x = property(getx, setx, delx, &quot;I'm the 'x' property.&quot;)
</code></pre>
<p><code>property</code>'s arguments are <code>getx</code>, <code>setx</code>, <code>delx</code> and a doc string.</p>
<p>In the code below <code>property</code> is used as a decorator. The object of it is the <code>x</code> function, but in the code above there is no place for an object function in the arguments.</p>
<pre><code>class C:
    def __init__(self):
        self._x = None

    @property
    def x(self):
        &quot;&quot;&quot;I'm the 'x' property.&quot;&quot;&quot;
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x
</code></pre>
<p>How are the <code>x.setter</code> and <code>x.deleter</code> decorators created in this case?</p>
",<python><properties><decorator><python-decorators><python-internals>,property decorator used arguments function built object setx getx setter,"<p>The <code>property()</code> function returns a special <a href=""https://docs.python.org/howto/descriptor.html"" rel=""noreferrer"">descriptor object</a>:</p>

<pre class=""lang-python prettyprint-override""><code>&gt;&gt;&gt; property()
&lt;property object at 0x10ff07940&gt;
</code></pre>

<p>It is this object that has <em>extra</em> methods:</p>

<pre><code>&gt;&gt;&gt; property().getter
&lt;built-in method getter of property object at 0x10ff07998&gt;
&gt;&gt;&gt; property().setter
&lt;built-in method setter of property object at 0x10ff07940&gt;
&gt;&gt;&gt; property().deleter
&lt;built-in method deleter of property object at 0x10ff07998&gt;
</code></pre>

<p>These act as decorators <em>too</em>. They return a new property object:</p>

<pre><code>&gt;&gt;&gt; property().getter(None)
&lt;property object at 0x10ff079f0&gt;
</code></pre>

<p>that is a copy of the old object, but with one of the functions replaced.</p>

<p>Remember, that the <code>@decorator</code> syntax is just syntactic sugar; the syntax:</p>

<pre><code>@property
def foo(self): return self._foo
</code></pre>

<p>really means the same thing as</p>

<pre><code>def foo(self): return self._foo
foo = property(foo)
</code></pre>

<p>so <code>foo</code> the function is replaced by <code>property(foo)</code>, which we saw above is a special object. Then when you use <code>@foo.setter()</code>, what you are doing is call that <code>property().setter</code> method I showed you above, which returns a new copy of the property, but this time with the setter function replaced with the decorated method.</p>

<p>The following sequence also creates a full-on property, by using those decorator methods.</p>

<p>First we create some functions and a <code>property</code> object with just a getter:</p>

<pre><code>&gt;&gt;&gt; def getter(self): print('Get!')
... 
&gt;&gt;&gt; def setter(self, value): print('Set to {!r}!'.format(value))
... 
&gt;&gt;&gt; def deleter(self): print('Delete!')
... 
&gt;&gt;&gt; prop = property(getter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is None
True
&gt;&gt;&gt; prop.fdel is None
True
</code></pre>

<p>Next we use the <code>.setter()</code> method to add a setter:</p>

<pre><code>&gt;&gt;&gt; prop = prop.setter(setter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is setter
True
&gt;&gt;&gt; prop.fdel is None
True
</code></pre>

<p>Last we add a deleter with the <code>.deleter()</code> method:</p>

<pre><code>&gt;&gt;&gt; prop = prop.deleter(deleter)
&gt;&gt;&gt; prop.fget is getter
True
&gt;&gt;&gt; prop.fset is setter
True
&gt;&gt;&gt; prop.fdel is deleter
True
</code></pre>

<p>Last but not least, the <code>property</code> object acts as a <a href=""https://docs.python.org/reference/datamodel.html#implementing-descriptors"" rel=""noreferrer"">descriptor object</a>, so it has <a href=""https://docs.python.org/reference/datamodel.html#object.__get__"" rel=""noreferrer""><code>.__get__()</code></a>, <a href=""http://docs.python.org/reference/datamodel.html#object.__set__"" rel=""noreferrer""><code>.__set__()</code></a> and <a href=""http://docs.python.org/reference/datamodel.html#object.__delete__"" rel=""noreferrer""><code>.__delete__()</code></a> methods to hook into instance attribute getting, setting and deleting:</p>

<pre><code>&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; prop.__get__(Foo(), Foo)
Get!
&gt;&gt;&gt; prop.__set__(Foo(), 'bar')
Set to 'bar'!
&gt;&gt;&gt; prop.__delete__(Foo())
Delete!
</code></pre>

<p>The Descriptor Howto includes a <a href=""http://docs.python.org/howto/descriptor.html#properties"" rel=""noreferrer"">pure Python sample implementation</a> of the <code>property()</code> type:</p>

<blockquote>
<pre><code>class Property:
    ""Emulate PyProperty_Type() in Objects/descrobject.c""

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError(""unreadable attribute"")
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError(""can't set attribute"")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError(""can't delete attribute"")
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
</code></pre>
</blockquote>
",,
145,3,How do I check if a variable exists?,"<p>I want to check if a variable exists. Now I'm doing something like this:</p>

<pre><code>try:
   myVar
except NameError:
   # Do something.
</code></pre>

<p>Are there other ways without exceptions?</p>
","How do I check if a variable exists?<p>I want to check if a variable exists. Now I'm doing something like this:</p>

<pre><code>try:
   myVar
except NameError:
   # Do something.
</code></pre>

<p>Are there other ways without exceptions?</p>
",<python><exception><variables>,exists variable check exceptions ways want like zone formatting formatted,"<p>To check the existence of a local variable:</p>

<pre><code>if 'myVar' in locals():
  # myVar exists.
</code></pre>

<p>To check the existence of a global variable:</p>

<pre><code>if 'myVar' in globals():
  # myVar exists.
</code></pre>

<p>To check if an object has an attribute:</p>

<pre><code>if hasattr(obj, 'attr_name'):
  # obj.attr_name exists.
</code></pre>
",,
146,3,How to get the ASCII value of a character,"<p>How do I get the <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""noreferrer"">ASCII</a> value of a character as an <code>int</code> in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>?</p>
","How to get the ASCII value of a character<p>How do I get the <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""noreferrer"">ASCII</a> value of a character as an <code>int</code> in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>?</p>
",<python><ascii>,ascii value characterhow character int python forgotten formatwhich formatting formatted,"<p>From <a href=""http://mail.python.org/pipermail/python-win32/2005-April/003100.html"" rel=""noreferrer"">here</a>:</p>
<blockquote>
<p>The function <strong><code>ord()</code></strong> gets the int value
of the char. And in case you want to
convert back after playing with the
number, function <strong><code>chr()</code></strong> does the trick.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(ord('a') + 3)
'd'
&gt;&gt;&gt;
</code></pre>
<p>In Python 2, there was also the <code>unichr</code> function, returning the <a href=""http://en.wikipedia.org/wiki/Unicode"" rel=""noreferrer"">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>
<pre><code>&gt;&gt;&gt; unichr(97)
u'a'
&gt;&gt;&gt; unichr(1234)
u'\u04d2'
</code></pre>
<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>
<hr>
<p><a href=""https://docs.python.org/3/library/functions.html#ord"" rel=""noreferrer"">ord() - Python 3.6.5rc1 documentation</a></p>
<p><a href=""https://docs.python.org/2/library/functions.html#ord"" rel=""noreferrer"">ord() - Python 2.7.14 documentation</a></p>
",,
147,3,Running shell command and capturing the output,"<p>I want to write a function that will execute a shell command and return its output <strong>as a string</strong>, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.</p>

<p>What would be a code example that would do such a thing?</p>

<p>For example:</p>

<pre><code>def run_command(cmd):
    # ??????

print run_command('mysqladmin create test -uroot -pmysqladmin12')
# Should output something like:
# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'
</code></pre>
","Running shell command and capturing the output<p>I want to write a function that will execute a shell command and return its output <strong>as a string</strong>, no matter, is it an error or success message. I just want to get the same result that I would have gotten with the command line.</p>

<p>What would be a code example that would do such a thing?</p>

<p>For example:</p>

<pre><code>def run_command(cmd):
    # ??????

print run_command('mysqladmin create test -uroot -pmysqladmin12')
# Should output something like:
# mysqladmin: CREATE DATABASE failed; error: 'Can't create database 'test'; database exists'
</code></pre>
",<python><shell><subprocess>,command shell capturing output gotten success example execute want message,"<p>In all officially maintained versions of Python, the simplest approach is to use the <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.check_output"" rel=""noreferrer""><code>subprocess.check_output</code></a> function:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output(['ls', '-l'])
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>
<p>The <code>check_output</code> function works in all officially maintained versions of Python. But for more recent versions, a more flexible approach is available.</p>
<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>
<p>If you're using <strong>Python 3.5+</strong>, and <strong>do not need backwards compatibility</strong>, the new <a href=""https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module"" rel=""noreferrer""><code>run</code></a> function is recommended by the official documentation for most tasks. It provides a very general, high-level API for the <a href=""https://docs.python.org/3/library/subprocess.html"" rel=""noreferrer""><code>subprocess</code></a> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess"" rel=""noreferrer""><code>CompletedProcess</code></a> object:</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)
&gt;&gt;&gt; result.stdout
b'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>
<pre><code>&gt;&gt;&gt; result.stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>This can all be compressed to a one-liner if desired:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>If you want to pass input to the process's <code>stdin</code>, you can pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; ip = 'foo\nfoofoo\n'.encode('utf-8')
&gt;&gt;&gt; result = subprocess.run(cmd, stdout=subprocess.PIPE, input=ip)
&gt;&gt;&gt; result.stdout.decode('utf-8')
'foofoo\n'
</code></pre>
<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). If you want <code>run</code> to throw an exception when the process returns a nonzero exit code, you can pass <code>check=True</code>. (Or you can check the <code>returncode</code> attribute of <code>result</code> above.) When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described at the end of this answer.</p>
<p>Later versions of Python streamline the above further. In Python 3.7+, the above one-liner can be spelled like this:</p>
<pre><code>&gt;&gt;&gt; subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout
'total 0\n-rw-r--r--  1 memyself  staff  0 Mar 14 11:04 files\n'
</code></pre>
<p>Using <code>run</code> this way adds just a bit of complexity, compared to the old way of doing things. But now you can do almost anything you need to do with the <code>run</code> function alone.</p>
<h3>Older versions of Python (3-3.4): more about <code>check_output</code></h3>
<p>If you are using an older version of Python, or need modest backwards compatibility, you can use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>
<pre><code>subprocess.check_output(*popenargs, **kwargs)  
</code></pre>
<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. In Python 3.5+, <code>check_output</code> is equivalent to executing <code>run</code> with <code>check=True</code> and <code>stdout=PIPE</code>, and returning just the <code>stdout</code> attribute.</p>
<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described at the end of this answer.</p>
<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case.</p>
<h3>Complex applications and legacy versions of Python (2.6 and below): <code>Popen</code></h3>
<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> or <code>run</code> provide, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses.</p>
<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href=""https://docs.python.org/3/library/shlex.html"" rel=""noreferrer""><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href=""https://docs.python.org/3/library/subprocess.html#subprocess.Popen"" rel=""noreferrer"">host of different arguments</a> for process IO management and low-level configuration.</p>
<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>
<pre><code>output = subprocess.Popen([&quot;mycmd&quot;, &quot;myarg&quot;], 
                          stdout=subprocess.PIPE).communicate()[0]
</code></pre>
<p>Or</p>
<pre><code>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, 
...                                    stderr=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate()
&gt;&gt;&gt; print out
.
..
foo
</code></pre>
<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>
<pre><code>&gt;&gt;&gt; cmd = ['awk', 'length($0) &gt; 5']
&gt;&gt;&gt; p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
...                           stderr=subprocess.PIPE,
...                           stdin=subprocess.PIPE)
&gt;&gt;&gt; out, err = p.communicate('foo\nfoofoo\n')
&gt;&gt;&gt; print out
foofoo
</code></pre>
<p>Note <a href=""https://stackoverflow.com/a/21867841/577088"">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>
<p>In some rare cases, you may need complex, real-time output capturing. <a href=""https://stackoverflow.com/a/4760274/577088"">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>
<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>
<h3>Notes</h3>
<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>
<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support. For example:</p>
<pre><code>&gt;&gt;&gt; subprocess.check_output('cat books/* | wc', shell=True, text=True)
' 1299377 17005208 101299376\n'
</code></pre>
<p>However, doing this raises <a href=""https://docs.python.org/3/library/subprocess.html#security-considerations"" rel=""noreferrer"">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>
<pre><code>run(cmd, [stdout=etc...], input=other_output)
</code></pre>
<p>Or</p>
<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)
</code></pre>
<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href=""https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses"">this</a>.</p>
",,
148,2,Change column type in pandas,"<p>I want to convert a table, represented as a list of lists, into a <code>Pandas DataFrame</code>. As an extremely simplified example:</p>

<pre><code>a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]
df = pd.DataFrame(a)
</code></pre>

<p>What is the best way to convert the columns to the appropriate types, in this case columns 2 and 3 into floats? Is there a way to specify the types while converting to DataFrame? Or is it better to create the DataFrame first and then loop through the columns to change the type for each column? Ideally I would like to do this in a dynamic way because there can be hundreds of columns and I don't want to specify exactly which columns are of which type. All I can guarantee is that each columns contains values of the same type.</p>
","Change column type in pandas<p>I want to convert a table, represented as a list of lists, into a <code>Pandas DataFrame</code>. As an extremely simplified example:</p>

<pre><code>a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]
df = pd.DataFrame(a)
</code></pre>

<p>What is the best way to convert the columns to the appropriate types, in this case columns 2 and 3 into floats? Is there a way to specify the types while converting to DataFrame? Or is it better to create the DataFrame first and then loop through the columns to change the type for each column? Ideally I would like to do this in a dynamic way because there can be hundreds of columns and I don't want to specify exactly which columns are of which type. All I can guarantee is that each columns contains values of the same type.</p>
",<python><pandas><dataframe><types><casting>,columns type dataframe types specify column change convert guarantee floats,"<p>You have four main options for converting types in pandas:</p>
<ol>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html"" rel=""noreferrer""><code>to_datetime()</code></a> and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html"" rel=""noreferrer""><code>to_timedelta()</code></a>.)</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to <a href=""https://pandas.pydata.org/docs/user_guide/categorical.html"" rel=""noreferrer"">categorial</a> types (very useful).</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a> - a utility method to convert object columns holding Python objects to a pandas type if possible.</p>
</li>
<li><p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html"" rel=""noreferrer""><code>convert_dtypes()</code></a> - convert DataFrame columns to the &quot;best possible&quot;  dtype that supports <code>pd.NA</code> (pandas' object to indicate a missing value).</p>
</li>
</ol>
<p>Read on for more detailed explanations and usage of each of these methods.</p>
<hr />
<h1>1. <code>to_numeric()</code></h1>
<p>The best way to convert one or more columns of a DataFrame to numeric values is to use <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>pandas.to_numeric()</code></a>.</p>
<p>This function will try to change non-numeric objects (such as strings) into integers or floating-point numbers as appropriate.</p>
<h2>Basic usage</h2>
<p>The input to <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> is a Series or a single column of a DataFrame.</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([&quot;8&quot;, 6, &quot;7.5&quot;, 3, &quot;0.9&quot;]) # mixed string and numeric values
&gt;&gt;&gt; s
0      8
1      6
2    7.5
3      3
4    0.9
dtype: object

&gt;&gt;&gt; pd.to_numeric(s) # convert everything to float values
0    8.0
1    6.0
2    7.5
3    3.0
4    0.9
dtype: float64
</code></pre>
<p>As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it:</p>
<pre><code># convert Series
my_series = pd.to_numeric(my_series)

# convert column &quot;a&quot; of a DataFrame
df[&quot;a&quot;] = pd.to_numeric(df[&quot;a&quot;])
</code></pre>
<p>You can also use it to convert multiple columns of a DataFrame via the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html"" rel=""noreferrer""><code>apply()</code></a> method:</p>
<pre><code># convert all columns of DataFrame
df = df.apply(pd.to_numeric) # convert all columns of DataFrame

# convert just columns &quot;a&quot; and &quot;b&quot;
df[[&quot;a&quot;, &quot;b&quot;]] = df[[&quot;a&quot;, &quot;b&quot;]].apply(pd.to_numeric)
</code></pre>
<p>As long as your values can all be converted, that's probably all you need.</p>
<h2>Error handling</h2>
<p>But what if some values can't be converted to a numeric type?</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> also takes an <code>errors</code> keyword argument that allows you to force non-numeric values to be <code>NaN</code>, or simply ignore columns containing these values.</p>
<p>Here's an example using a Series of strings <code>s</code> which has the object dtype:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series(['1', '2', '4.7', 'pandas', '10'])
&gt;&gt;&gt; s
0         1
1         2
2       4.7
3    pandas
4        10
dtype: object
</code></pre>
<p>The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas':</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')
ValueError: Unable to parse string
</code></pre>
<p>Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to <code>NaN</code> as follows using the <code>errors</code> keyword argument:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='coerce')
0     1.0
1     2.0
2     4.7
3     NaN
4    10.0
dtype: float64
</code></pre>
<p>The third option for <code>errors</code> is just to ignore the operation if an invalid value is encountered:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, errors='ignore')
# the original Series is returned untouched
</code></pre>
<p>This last option is particularly useful for converting your entire DataFrame, but don't know which of our columns can be converted reliably to a numeric type. In that case, just write:</p>
<pre><code>df.apply(pd.to_numeric, errors='ignore')
</code></pre>
<p>The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone.</p>
<h2>Downcasting</h2>
<p>By default, conversion with <a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> will give you either an <code>int64</code> or <code>float64</code> dtype (or whatever integer width is native to your platform).</p>
<p>That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like <code>float32</code>, or <code>int8</code>?</p>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.to_numeric.html"" rel=""noreferrer""><code>to_numeric()</code></a> gives you the option to downcast to either <code>'integer'</code>, <code>'signed'</code>, <code>'unsigned'</code>, <code>'float'</code>. Here's an example for a simple series <code>s</code> of integer type:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])
&gt;&gt;&gt; s
0    1
1    2
2   -7
dtype: int64
</code></pre>
<p>Downcasting to <code>'integer'</code> uses the smallest possible integer that can hold the values:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='integer')
0    1
1    2
2   -7
dtype: int8
</code></pre>
<p>Downcasting to <code>'float'</code> similarly picks a smaller than normal floating type:</p>
<pre><code>&gt;&gt;&gt; pd.to_numeric(s, downcast='float')
0    1.0
1    2.0
2   -7.0
dtype: float32
</code></pre>
<hr />
<h1>2. <code>astype()</code></h1>
<p>The <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to any other.</p>
<h2>Basic usage</h2>
<p>Just pick a type: you can use a NumPy dtype (e.g. <code>np.int16</code>), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype).</p>
<p>Call the method on the object you want to convert and <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> will try and convert it for you:</p>
<pre><code># convert all DataFrame columns to the int64 dtype
df = df.astype(int)

# convert column &quot;a&quot; to int64 dtype and &quot;b&quot; to complex type
df = df.astype({&quot;a&quot;: int, &quot;b&quot;: complex})

# convert Series to float16 type
s = s.astype(np.float16)

# convert Series to Python strings
s = s.astype(str)

# convert Series to categorical type - see docs for more details
s = s.astype('category')
</code></pre>
<p>Notice I said &quot;try&quot; - if <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> does not know how to convert a value in the Series or DataFrame, it will raise an error. For example, if you have a <code>NaN</code> or <code>inf</code> value you'll get an error trying to convert it to an integer.</p>
<p>As of pandas 0.20.0, this error can be suppressed by passing <code>errors='ignore'</code>. Your original object will be returned untouched.</p>
<h2>Be careful</h2>
<p><a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.astype.html"" rel=""noreferrer""><code>astype()</code></a> is powerful, but it will sometimes convert values &quot;incorrectly&quot;. For example:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series([1, 2, -7])
&gt;&gt;&gt; s
0    1
1    2
2   -7
dtype: int64
</code></pre>
<p>These are small integers, so how about converting to an unsigned 8-bit type to save memory?</p>
<pre><code>&gt;&gt;&gt; s.astype(np.uint8)
0      1
1      2
2    249
dtype: uint8
</code></pre>
<p>The conversion worked, but the -7 was wrapped round to become 249 (i.e. 2<sup>8</sup> - 7)!</p>
<p>Trying to downcast using <code>pd.to_numeric(s, downcast='unsigned')</code> instead could help prevent this error.</p>
<hr />
<h1>3. <code>infer_objects()</code></h1>
<p>Version 0.21.0 of pandas introduced the method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a> for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions).</p>
<p>For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers:</p>
<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')
&gt;&gt;&gt; df.dtypes
a    object
b    object
dtype: object
</code></pre>
<p>Using <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.infer_objects.html"" rel=""noreferrer""><code>infer_objects()</code></a>, you can change the type of column 'a' to int64:</p>
<pre><code>&gt;&gt;&gt; df = df.infer_objects()
&gt;&gt;&gt; df.dtypes
a     int64
b    object
dtype: object
</code></pre>
<p>Column 'b' has been left alone since its values were strings, not integers. If you wanted to force both columns to an integer type, you could use <code>df.astype(int)</code> instead.</p>
<hr />
<h1>4. <code>convert_dtypes()</code></h1>
<p>Version 1.0 and above includes a method <a href=""https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.convert_dtypes.html"" rel=""noreferrer""><code>convert_dtypes()</code></a> to convert Series and DataFrame columns to the best possible dtype that supports the <code>pd.NA</code> missing value.</p>
<p>Here &quot;best possible&quot; means the type most suited to hold the values. For example, this a pandas integer type, if all of the values are integers (or missing values): an object column of Python integer objects are converted to <code>Int64</code>, a column of NumPy <code>int32</code> values, will become the pandas dtype <code>Int32</code>.</p>
<p>With our <code>object</code> DataFrame <code>df</code>, we get the following result:</p>
<pre><code>&gt;&gt;&gt; df.convert_dtypes().dtypes                                             
a     Int64
b    string
dtype: object
</code></pre>
<p>Since column 'a' held integer values, it was converted to the <code>Int64</code> type (which is capable of holding missing values, unlike <code>int64</code>).</p>
<p>Column 'b' contained string objects, so was changed to pandas' <code>string</code> dtype.</p>
<p>By default, this method will infer the type from object values in each column. We can change this by passing <code>infer_objects=False</code>:</p>
<pre><code>&gt;&gt;&gt; df.convert_dtypes(infer_objects=False).dtypes                          
a    object
b    string
dtype: object
</code></pre>
<p>Now column 'a' remained an object column: pandas knows it can be described as an 'integer' column (internally it ran <a href=""https://github.com/pandas-dev/pandas/blob/6b2d0260c818e62052eaf535767f3a8c4b446c69/pandas/_libs/lib.pyx#L1188-L1434"" rel=""noreferrer""><code>infer_dtype</code></a>) but didn't infer exactly what dtype of integer it should have so did not convert it. Column 'b' was again converted to 'string' dtype as it was recognised as holding 'string' values.</p>
",,
149,6,How do I get the full path of the current file's directory?,"<p>I want to get the current file's directory path.
I tried:</p>

<pre><code>&gt;&gt;&gt; os.path.abspath(__file__)
'C:\\python27\\test.py'
</code></pre>

<p>But how can I retrieve the directory's path?</p>

<p>For example:</p>

<pre><code>'C:\\python27\\'
</code></pre>
","How do I get the full path of the current file's directory?<p>I want to get the current file's directory path.
I tried:</p>

<pre><code>&gt;&gt;&gt; os.path.abspath(__file__)
'C:\\python27\\test.py'
</code></pre>

<p>But how can I retrieve the directory's path?</p>

<p>For example:</p>

<pre><code>'C:\\python27\\'
</code></pre>
",<python><directory>,path directory current file retrieve tried example want zone form,"<p>The special variable <a href=""https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do""><code>__file__</code></a> contains the path to the current file. From that we can get the directory using either <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer"">Pathlib</a> or the <a href=""https://docs.python.org/3.8/library/os.path.html"" rel=""noreferrer"">os.path</a> module.</p>
<h2>Python 3</h2>
<p>For the directory of the script being run:</p>
<pre><code>import pathlib
pathlib.Path(__file__).parent.resolve()
</code></pre>
<p>For the current working directory:</p>
<pre><code>import pathlib
pathlib.Path().resolve()
</code></pre>
<h2>Python 2 and 3</h2>
<p>For the directory of the script being run:</p>
<pre><code>import os
os.path.dirname(os.path.abspath(__file__))
</code></pre>
<p>If you mean the current working directory:</p>
<pre><code>import os
os.path.abspath(os.getcwd())
</code></pre>
<p>Note that before and after <code>file</code> is two underscores, not just one.</p>
<p>Also note that if you are running interactively or have loaded code from something other than a file (eg: a database or online resource), <code>__file__</code> may not be set since there is no notion of &quot;current file&quot;. The above answer assumes the most common scenario of running a python script that is in a file.</p>
<h2>References</h2>
<ol>
<li><a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer"">pathlib</a> in the python documentation.</li>
<li><a href=""https://docs.python.org/2.7/library/os.path.html"" rel=""noreferrer"">os.path - Python 2.7</a>, <a href=""https://docs.python.org/3/library/os.path.html"" rel=""noreferrer"">os.path - Python 3</a></li>
<li><a href=""https://docs.python.org/2.7/library/os.html#os.getcwd"" rel=""noreferrer"">os.getcwd - Python 2.7</a>, <a href=""https://docs.python.org/3/library/os.html#os.getcwd"" rel=""noreferrer"">os.getcwd - Python 3</a></li>
<li><a href=""https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do"">what does the __file__ variable mean/do?</a></li>
</ol>
",,
150,3,"What is a mixin, and why are they useful?","<p>In ""<a href=""https://rads.stackoverflow.com/amzn/click/com/0596009259"" rel=""noreferrer"" rel=""nofollow noreferrer"">Programming Python</a>"", Mark Lutz mentions ""mixins"". I'm from a C/C++/C# background and I have not heard the term before. What is a mixin? </p>

<p>Reading between the lines of <a href=""http://books.google.com/books?id=5zYVUIl7F0QC&amp;pg=RA1-PA584&amp;lpg=RA1-PA584&amp;dq=programming+python+guimixin&amp;source=bl&amp;ots=HU833giXzH&amp;sig=jwLpxSp4m_VbOYQ897UDkGNx_2U&amp;hl=en&amp;ei=x8iRSaTTF5iq-ganpbGPCw&amp;sa=X&amp;oi=book_result&amp;resnum=3&amp;ct=result"" rel=""noreferrer"">this example</a> (which I've linked to because it's quite long), I'm presuming it's a case of using multiple inheritance to extend a class as opposed to 'proper' subclassing. Is this right? </p>

<p>Why would I want to do that rather than put the new functionality into a subclass? For that matter, why would a mixin/multiple inheritance approach be better than using composition?</p>

<p>What separates a mixin from multiple inheritance? Is it just a matter of semantics?</p>
","What is a mixin, and why are they useful?<p>In ""<a href=""https://rads.stackoverflow.com/amzn/click/com/0596009259"" rel=""noreferrer"" rel=""nofollow noreferrer"">Programming Python</a>"", Mark Lutz mentions ""mixins"". I'm from a C/C++/C# background and I have not heard the term before. What is a mixin? </p>

<p>Reading between the lines of <a href=""http://books.google.com/books?id=5zYVUIl7F0QC&amp;pg=RA1-PA584&amp;lpg=RA1-PA584&amp;dq=programming+python+guimixin&amp;source=bl&amp;ots=HU833giXzH&amp;sig=jwLpxSp4m_VbOYQ897UDkGNx_2U&amp;hl=en&amp;ei=x8iRSaTTF5iq-ganpbGPCw&amp;sa=X&amp;oi=book_result&amp;resnum=3&amp;ct=result"" rel=""noreferrer"">this example</a> (which I've linked to because it's quite long), I'm presuming it's a case of using multiple inheritance to extend a class as opposed to 'proper' subclassing. Is this right? </p>

<p>Why would I want to do that rather than put the new functionality into a subclass? For that matter, why would a mixin/multiple inheritance approach be better than using composition?</p>

<p>What separates a mixin from multiple inheritance? Is it just a matter of semantics?</p>
",<python><oop><multiple-inheritance><mixins>,mixin inheritance multiple matter linked subclassing mark mixins composition presuming,"<p>A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:</p>

<ol>
<li>You want to provide a lot of optional features for a class.</li>
<li>You want to use one particular feature in a lot of different classes.</li>
</ol>

<p>For an example of number one, consider <a href=""http://werkzeug.pocoo.org/docs/wrappers/"" rel=""noreferrer"">werkzeug's request and response system</a>.  I can make a plain old request object by saying:</p>

<pre><code>from werkzeug import BaseRequest

class Request(BaseRequest):
    pass
</code></pre>

<p>If I want to add accept header support, I would make that</p>

<pre><code>from werkzeug import BaseRequest, AcceptMixin

class Request(AcceptMixin, BaseRequest):
    pass
</code></pre>

<p>If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:</p>

<pre><code>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin

class Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest):
    pass
</code></pre>

<p>The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, the <code>AuthenticationMixin</code> (for example) would probably be something more like <code>Authenticator</code>.  That is, the class would probably be designed to stand on its own.</p>
",,
151,3,Display number with leading zeros,"<p>Given:</p>
<pre><code>a = 1
b = 10
c = 100
</code></pre>
<p>How do I display a leading zero for all numbers with less than two digits?</p>
<p>This is the output I'm expecting:</p>
<pre class=""lang-none prettyprint-override""><code>01
10
100
</code></pre>
","Display number with leading zeros<p>Given:</p>
<pre><code>a = 1
b = 10
c = 100
</code></pre>
<p>How do I display a leading zero for all numbers with less than two digits?</p>
<p>This is the output I'm expecting:</p>
<pre class=""lang-none prettyprint-override""><code>01
10
100
</code></pre>
",<python><integer><string-formatting>,leading display zerosgiven digits expecting zero numbers number output formatted,"<p>In Python 2 (and Python 3) you can do:</p>

<pre><code>print ""%02d"" % (1,)
</code></pre>

<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprintf</code> (see <a href=""https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting"" rel=""noreferrer"">docs</a>).</p>

<hr>

<p>For Python 3.+, the same behavior can also be achieved with <a href=""https://docs.python.org/3/library/stdtypes.html#str.format"" rel=""noreferrer""><code>format</code></a>:</p>

<pre><code>print(""{:02d}"".format(1))
</code></pre>

<hr>

<p>For Python 3.6+ the same behavior can be achieved with <a href=""https://docs.python.org/3/reference/lexical_analysis.html#f-strings"" rel=""noreferrer"">f-strings</a>:</p>

<pre><code>print(f""{1:02d}"")
</code></pre>
",,
152,5,How do I trim whitespace?,"<p>Is there a Python function that will trim whitespace (spaces and tabs) from a string?</p>

<p>Example: <code>\t example string\t</code> ƒ?? <code>example string</code></p>
","How do I trim whitespace?<p>Is there a Python function that will trim whitespace (spaces and tabs) from a string?</p>

<p>Example: <code>\t example string\t</code> ƒ?? <code>example string</code></p>
",<python><string><whitespace><trim><strip>,trim whitespace string example tabs spaces function python forget formatted,"<p>For whitespace on both sides use <a href=""https://docs.python.org/3/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>str.strip</code></a>:</p>
<pre><code>s = &quot;  \t a string example\t  &quot;
s = s.strip()
</code></pre>
<p>For whitespace on the right side use <a href=""https://docs.python.org/3/library/stdtypes.html#str.rstrip"" rel=""noreferrer""><code>rstrip</code></a>:</p>
<pre><code>s = s.rstrip()
</code></pre>
<p>For whitespace on the left side <a href=""https://docs.python.org/3/library/stdtypes.html#str.lstrip"" rel=""noreferrer""><code>lstrip</code></a>:</p>
<pre><code>s = s.lstrip()
</code></pre>
<p>As <a href=""https://stackoverflow.com/users/84380/thedz"">thedz</a> points out, you can provide an argument to strip arbitrary characters to any of these functions like this:</p>
<pre><code>s = s.strip(' \t\n\r')
</code></pre>
<p>This will strip any space, <code>\t</code>, <code>\n</code>, or <code>\r</code> characters from the left-hand side, right-hand side, or both sides of the string.</p>
<p>The examples above only remove strings from the left-hand and right-hand sides of strings. If you want to also remove characters from the middle of a string, try <a href=""https://docs.python.org/3/library/re.html#re.sub"" rel=""noreferrer""><code>re.sub</code></a>:</p>
<pre><code>import re
print(re.sub('[\s+]', '', s))
</code></pre>
<p>That should print out:</p>
<pre><code>astringexample
</code></pre>
",,
153,0,Getting key with maximum value in dictionary?,"<p>I have a <code>dictionary</code>: keys are strings, values are integers.</p>

<p>Example: </p>

<pre><code>stats = {'a':1000, 'b':3000, 'c': 100}
</code></pre>

<p>I'd like to get <code>'b'</code> as an answer, since it's the key with a higher value.</p>

<p>I did the following, using an intermediate list with reversed key-value tuples:</p>

<pre><code>inverse = [(value, key) for key, value in stats.items()]
print max(inverse)[1]
</code></pre>

<p>Is that one the better (or even more elegant) approach?</p>
","Getting key with maximum value in dictionary?<p>I have a <code>dictionary</code>: keys are strings, values are integers.</p>

<p>Example: </p>

<pre><code>stats = {'a':1000, 'b':3000, 'c': 100}
</code></pre>

<p>I'd like to get <code>'b'</code> as an answer, since it's the key with a higher value.</p>

<p>I did the following, using an intermediate list with reversed key-value tuples:</p>

<pre><code>inverse = [(value, key) for key, value in stats.items()]
print max(inverse)[1]
</code></pre>

<p>Is that one the better (or even more elegant) approach?</p>
",<python><dictionary><max>,key value dictionary reversed intermediate higher approach maximum keys tuples,"<p>You can use <code>operator.itemgetter</code> for that:</p>

<pre><code>import operator
stats = {'a':1000, 'b':3000, 'c': 100}
max(stats.iteritems(), key=operator.itemgetter(1))[0]
</code></pre>

<p>And instead of building a new list in memory use <code>stats.iteritems()</code>. The <code>key</code> parameter to the <code>max()</code> function is a function that computes a key that is used to determine how to rank items.</p>

<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one</strong> of the <strong>two</strong> even though they both have the maximum value. </p>

<pre><code>&gt;&gt;&gt; import operator
&gt;&gt;&gt; stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}
&gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]
'b' 
</code></pre>

<p>If using Python3:</p>

<pre><code>&gt;&gt;&gt; max(stats.items(), key=operator.itemgetter(1))[0]
'b'
</code></pre>
",,
154,6,How to get file creation & modification date/times?,"<p>I have a script that needs to do some stuff based on file creation &amp; modification dates but has to run on <strong>Linux</strong> &amp; <strong>Windows</strong>.</p>

<p>What's the best <strong>cross-platform</strong> way to get file creation &amp; modification <code>date/times</code> in <strong>Python</strong>?</p>
","How to get file creation & modification date/times?<p>I have a script that needs to do some stuff based on file creation &amp; modification dates but has to run on <strong>Linux</strong> &amp; <strong>Windows</strong>.</p>

<p>What's the best <strong>cross-platform</strong> way to get file creation &amp; modification <code>date/times</code> in <strong>Python</strong>?</p>
",<python><file>,modification creation times date file dates stuff cross platform linux,"<p>In Python 3.4 and above, you can use the object oriented <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer"">pathlib module</a> interface which includes wrappers for much of the os module.  Here is an example of getting the file stats.</p>

<pre><code>&gt;&gt;&gt; import pathlib
&gt;&gt;&gt; fname = pathlib.Path('test.py')
&gt;&gt;&gt; assert fname.exists(), f'No such file: {fname}'  # check that the file exists
&gt;&gt;&gt; print(fname.stat())
os.stat_result(st_mode=33206, st_ino=5066549581564298, st_dev=573948050, st_nlink=1, st_uid=0, st_gid=0, st_size=413, st_atime=1523480272, st_mtime=1539787740, st_ctime=1523480272)
</code></pre>

<p>For more information about what <code>os.stat_result</code> contains, refer to <a href=""https://docs.python.org/3/library/os.html#os.stat_result"" rel=""noreferrer"">the documentation</a>. For the modification time you want <code>fname.stat().st_mtime</code>:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; mtime = datetime.datetime.fromtimestamp(fname.stat().st_mtime)
&gt;&gt;&gt; print(mtime)
datetime.datetime(2018, 10, 17, 10, 49, 0, 249980)
</code></pre>

<p>If you want the creation time on Windows, or the most recent metadata change on Unix, you would use <code>fname.stat().st_ctime</code>:</p>

<pre><code>&gt;&gt;&gt; ctime = datetime.datetime.fromtimestamp(fname.stat().st_ctime)
&gt;&gt;&gt; print(ctime)
datetime.datetime(2018, 4, 11, 16, 57, 52, 151953)
</code></pre>

<p><a href=""https://realpython.com/python-pathlib/"" rel=""noreferrer"">This article</a> has more helpful info and examples for the pathlib module.</p>
",,
155,3,What is the difference between null=True and blank=True in Django?,"<p>When we add a database field in django we generally write:</p>

<pre><code>models.CharField(max_length=100, null=True, blank=True)
</code></pre>

<p>The same is done with <code>ForeignKey</code>, <code>DecimalField</code> etc. What is the basic difference in having </p>

<ol>
<li><code>null=True</code> only</li>
<li><code>blank=True</code> only</li>
<li><code>null=True</code>, <code>blank=True</code></li>
</ol>

<p>in respect to different (<code>CharField</code>, <code>ForeignKey</code>, <code>ManyToManyField</code>, <code>DateTimeField</code>) fields. What are the advantages/disadvantages of using 1/2/3?</p>
","What is the difference between null=True and blank=True in Django?<p>When we add a database field in django we generally write:</p>

<pre><code>models.CharField(max_length=100, null=True, blank=True)
</code></pre>

<p>The same is done with <code>ForeignKey</code>, <code>DecimalField</code> etc. What is the basic difference in having </p>

<ol>
<li><code>null=True</code> only</li>
<li><code>blank=True</code> only</li>
<li><code>null=True</code>, <code>blank=True</code></li>
</ol>

<p>in respect to different (<code>CharField</code>, <code>ForeignKey</code>, <code>ManyToManyField</code>, <code>DateTimeField</code>) fields. What are the advantages/disadvantages of using 1/2/3?</p>
",<python><django><django-models>,TRUE foreignkey null blank django difference onlyblank datetimefield manytomanyfield onlynull,"<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>

<p><code>blank</code> determines whether the field will be required in forms. This includes the admin and your custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>

<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>

<p>A few examples:</p>

<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank

models.DateTimeField(null=True) # NULL allowed, but must be filled out in a form
</code></pre>

<p>Obviously, Those two options don't make logical sense to use (though there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, optional when dealing with an object through something like the shell.)</p>

<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''

models.CharField(null=True) # NULL allowed, but will never be set as NULL
</code></pre>

<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>
",,
156,2,"""Large data"" workflows using pandas","<p>I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible as a piece of software for numerous other reasons.</p>

<p>One day I hope to replace my use of SAS with python and pandas, but I currently lack an out-of-core workflow for large datasets.  I'm not talking about ""big data"" that requires a distributed network, but rather files too large to fit in memory but small enough to fit on a hard-drive.</p>

<p>My first thought is to use <code>HDFStore</code> to hold large datasets on disk and pull only the pieces I need into dataframes for analysis.  Others have mentioned MongoDB as an easier to use alternative.  My question is this:</p>

<p>What are some best-practice workflows for accomplishing the following:</p>

<ol>
<li>Loading flat files into a permanent, on-disk database structure</li>
<li>Querying that database to retrieve data to feed into a pandas data structure</li>
<li>Updating the database after manipulating pieces in pandas</li>
</ol>

<p>Real-world examples would be much appreciated, especially from anyone who uses pandas on ""large data"".</p>

<p>Edit -- an example of how I would like this to work:</p>

<ol>
<li>Iteratively import a large flat-file and store it in a permanent, on-disk database structure.  These files are typically too large to fit in memory.</li>
<li>In order to use Pandas, I would like to read subsets of this data (usually just a few columns at a time) that can fit in memory.</li>
<li>I would create new columns by performing various operations on the selected columns.</li>
<li>I would then have to append these new columns into the database structure.</li>
</ol>

<p>I am trying to find a best-practice way of performing these steps. Reading links about pandas and pytables it seems that appending a new column could be a problem.</p>

<p>Edit -- Responding to Jeff's questions specifically:</p>

<ol>
<li>I am building consumer credit risk models. The kinds of data include phone, SSN and address characteristics; property values; derogatory information like criminal records, bankruptcies, etc... The datasets I use every day have nearly 1,000 to 2,000 fields on average of mixed data types: continuous, nominal and ordinal variables of both numeric and character data.  I rarely append rows, but I do perform many operations that create new columns.</li>
<li>Typical operations involve combining several columns using conditional logic into a new, compound column. For example, <code>if var1 &gt; 2 then newvar = 'A' elif var2 = 4 then newvar = 'B'</code>.  The result of these operations is a new column for every record in my dataset.</li>
<li>Finally, I would like to append these new columns into the on-disk data structure.  I would repeat step 2, exploring the data with crosstabs and descriptive statistics trying to find interesting, intuitive relationships to model.</li>
<li>A typical project file is usually about 1GB.  Files are organized into such a manner where a row consists of a record of consumer data.  Each row has the same number of columns for every record.  This will always be the case.</li>
<li>It's pretty rare that I would subset by rows when creating a new column.  However, it's pretty common for me to subset on rows when creating reports or generating descriptive statistics.  For example, I might want to create a simple frequency for a specific line of business, say Retail credit cards.  To do this, I would select only those records where the line of business = retail in addition to whichever columns I want to report on.  When creating new columns, however, I would pull all rows of data and only the columns I need for the operations.</li>
<li>The modeling process requires that I analyze every column, look for interesting relationships with some outcome variable, and create new compound columns that describe those relationships.  The columns that I explore are usually done in small sets.  For example, I will focus on a set of say 20 columns just dealing with property values and observe how they relate to defaulting on a loan.  Once those are explored and new columns are created, I then move on to another group of columns, say college education, and repeat the process.  What I'm doing is creating candidate variables that explain the relationship between my data and some outcome.  At the very end of this process, I apply some learning techniques that create an equation out of those compound columns.</li>
</ol>

<p>It is rare that I would ever add rows to the dataset.  I will nearly always be creating new columns (variables or features in statistics/machine learning parlance).</p>
","""Large data"" workflows using pandas<p>I have tried to puzzle out an answer to this question for many months while learning pandas.  I use SAS for my day-to-day work and it is great for it's out-of-core support.  However, SAS is horrible as a piece of software for numerous other reasons.</p>

<p>One day I hope to replace my use of SAS with python and pandas, but I currently lack an out-of-core workflow for large datasets.  I'm not talking about ""big data"" that requires a distributed network, but rather files too large to fit in memory but small enough to fit on a hard-drive.</p>

<p>My first thought is to use <code>HDFStore</code> to hold large datasets on disk and pull only the pieces I need into dataframes for analysis.  Others have mentioned MongoDB as an easier to use alternative.  My question is this:</p>

<p>What are some best-practice workflows for accomplishing the following:</p>

<ol>
<li>Loading flat files into a permanent, on-disk database structure</li>
<li>Querying that database to retrieve data to feed into a pandas data structure</li>
<li>Updating the database after manipulating pieces in pandas</li>
</ol>

<p>Real-world examples would be much appreciated, especially from anyone who uses pandas on ""large data"".</p>

<p>Edit -- an example of how I would like this to work:</p>

<ol>
<li>Iteratively import a large flat-file and store it in a permanent, on-disk database structure.  These files are typically too large to fit in memory.</li>
<li>In order to use Pandas, I would like to read subsets of this data (usually just a few columns at a time) that can fit in memory.</li>
<li>I would create new columns by performing various operations on the selected columns.</li>
<li>I would then have to append these new columns into the database structure.</li>
</ol>

<p>I am trying to find a best-practice way of performing these steps. Reading links about pandas and pytables it seems that appending a new column could be a problem.</p>

<p>Edit -- Responding to Jeff's questions specifically:</p>

<ol>
<li>I am building consumer credit risk models. The kinds of data include phone, SSN and address characteristics; property values; derogatory information like criminal records, bankruptcies, etc... The datasets I use every day have nearly 1,000 to 2,000 fields on average of mixed data types: continuous, nominal and ordinal variables of both numeric and character data.  I rarely append rows, but I do perform many operations that create new columns.</li>
<li>Typical operations involve combining several columns using conditional logic into a new, compound column. For example, <code>if var1 &gt; 2 then newvar = 'A' elif var2 = 4 then newvar = 'B'</code>.  The result of these operations is a new column for every record in my dataset.</li>
<li>Finally, I would like to append these new columns into the on-disk data structure.  I would repeat step 2, exploring the data with crosstabs and descriptive statistics trying to find interesting, intuitive relationships to model.</li>
<li>A typical project file is usually about 1GB.  Files are organized into such a manner where a row consists of a record of consumer data.  Each row has the same number of columns for every record.  This will always be the case.</li>
<li>It's pretty rare that I would subset by rows when creating a new column.  However, it's pretty common for me to subset on rows when creating reports or generating descriptive statistics.  For example, I might want to create a simple frequency for a specific line of business, say Retail credit cards.  To do this, I would select only those records where the line of business = retail in addition to whichever columns I want to report on.  When creating new columns, however, I would pull all rows of data and only the columns I need for the operations.</li>
<li>The modeling process requires that I analyze every column, look for interesting relationships with some outcome variable, and create new compound columns that describe those relationships.  The columns that I explore are usually done in small sets.  For example, I will focus on a set of say 20 columns just dealing with property values and observe how they relate to defaulting on a loan.  Once those are explored and new columns are created, I then move on to another group of columns, say college education, and repeat the process.  What I'm doing is creating candidate variables that explain the relationship between my data and some outcome.  At the very end of this process, I apply some learning techniques that create an equation out of those compound columns.</li>
</ol>

<p>It is rare that I would ever add rows to the dataset.  I will nearly always be creating new columns (variables or features in statistics/machine learning parlance).</p>
",<python><mongodb><pandas><hdf5><large-data>,columns data new large operations database creating fit disk pandas,"<p>I routinely use tens of gigabytes of data in just this fashion
e.g. I have tables on disk that I read via queries, create data and append back.</p>

<p>It's worth reading <a href=""http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables"" rel=""noreferrer"">the docs</a> and <a href=""https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc"" rel=""noreferrer"">late in this thread</a> for several suggestions for how to store your data.</p>

<p>Details which will affect how you store your data, like:<br>
<em>Give as much detail as you can; and I can help you develop a structure.</em></p>

<ol>
<li>Size of data, # of rows, columns, types of columns; are you appending
rows, or just columns? </li>
<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>
(Giving a toy example could enable us to offer more specific recommendations.)</li>
<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>
<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>
<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>
<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>
</ol>

<h2>Solution</h2>

<p><em>Ensure you have <a href=""http://pandas.pydata.org/getpandas.html"" rel=""noreferrer"">pandas at least <code>0.10.1</code></a> installed.</em></p>

<p>Read <a href=""http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk"" rel=""noreferrer"">iterating files chunk-by-chunk</a> and <a href=""http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries"" rel=""noreferrer"">multiple table queries</a>.</p>

<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>
(The following is pseudocode.)</p>

<pre><code>import numpy as np
import pandas as pd

# create a store
store = pd.HDFStore('mystore.h5')

# this is the key to your storage:
#    this maps your fields to a specific group, and defines 
#    what you want to have as data_columns.
#    you might want to create a nice class wrapping this
#    (as you will want to have this map and its inversion)  
group_map = dict(
    A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),
    B = dict(fields = ['field_10',......        ], dc = ['field_10']),
    .....
    REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),

)

group_map_inverted = dict()
for g, v in group_map.items():
    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))
</code></pre>

<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>

<pre><code>for f in files:
   # read in the file, additional options may be necessary here
   # the chunksize is not strictly necessary, you may be able to slurp each 
   # file into memory in which case just eliminate this part of the loop 
   # (you can also change chunksize if necessary)
   for chunk in pd.read_table(f, chunksize=50000):
       # we are going to append to each table by group
       # we are not going to create indexes at this time
       # but we *ARE* going to create (some) data_columns

       # figure out the field groupings
       for g, v in group_map.items():
             # create the frame for this group
             frame = chunk.reindex(columns = v['fields'], copy = False)    

             # append it
             store.append(g, frame, index=False, data_columns = v['dc'])
</code></pre>

<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>

<p>This is how you get columns and create new ones:</p>

<pre><code>frame = store.select(group_that_I_want)
# you can optionally specify:
# columns = a list of the columns IN THAT GROUP (if you wanted to
#     select only say 3 out of the 20 columns in this sub-table)
# and a where clause if you want a subset of the rows

# do calculations on this frame
new_frame = cool_function_on_frame(frame)

# to 'add columns', create a new group (you probably want to
# limit the columns in this new_group to be only NEW ones
# (e.g. so you don't overlap from the other tables)
# add this info to the group_map
store.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)
</code></pre>

<p>When you are ready for post_processing:</p>

<pre><code># This may be a bit tricky; and depends what you are actually doing.
# I may need to modify this function to be a bit more general:
report_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)
</code></pre>

<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>

<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001&gt;0'])
</code></pre>

<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>

<p>You also might want to:</p>

<ul>
<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>
<li>indexes on certain data columns (makes row-subsetting much faster).</li>
<li>enable compression.</li>
</ul>

<p>Let me know when you have questions!</p>
",,
157,3,How can I represent an 'Enum' in Python?,"<p>I'm mainly a C# developer, but I'm currently working on a project in Python.</p>

<p>How can I represent the equivalent of an Enum in Python?  </p>
","How can I represent an 'Enum' in Python?<p>I'm mainly a C# developer, but I'm currently working on a project in Python.</p>

<p>How can I represent the equivalent of an Enum in Python?  </p>
",<python><python-3.x><enums>,enum represent mainly developer equivalent currently project working python fori,"<p><a href=""https://docs.python.org/3/library/enum.html"" rel=""noreferrer"">Enums</a> have been added to Python 3.4 as described in <a href=""http://www.python.org/dev/peps/pep-0435/"" rel=""noreferrer"">PEP 435</a>.  It has also been <a href=""https://pypi.python.org/pypi/enum34"" rel=""noreferrer"">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi.</p>
<p>For more advanced Enum techniques try the <a href=""https://pypi.python.org/pypi/aenum"" rel=""noreferrer"">aenum library</a> (2.7, 3.3+, same author as <code>enum34</code>. Code is not perfectly compatible between py2 and py3, e.g. you'll need <a href=""https://stackoverflow.com/a/25982264/57461""><code>__order__</code> in python 2</a>).</p>
<ul>
<li>To use <code>enum34</code>, do <code>$ pip install enum34</code></li>
<li>To use <code>aenum</code>, do <code>$ pip install aenum</code></li>
</ul>
<p>Installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>
<hr />
<pre><code>from enum import Enum     # for enum34, or the stdlib version
# from aenum import Enum  # for the aenum version
Animal = Enum('Animal', 'ant bee cat dog')

Animal.ant  # returns &lt;Animal.ant: 1&gt;
Animal['ant']  # returns &lt;Animal.ant: 1&gt; (string lookup)
Animal.ant.name  # returns 'ant' (inverse lookup)
</code></pre>
<p>or equivalently:</p>
<pre><code>class Animal(Enum):
    ant = 1
    bee = 2
    cat = 3
    dog = 4
</code></pre>
<hr />
<p>In earlier versions, one way of accomplishing enums is:</p>
<pre><code>def enum(**enums):
    return type('Enum', (), enums)
</code></pre>
<p>which is used like so:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum(ONE=1, TWO=2, THREE='three')
&gt;&gt;&gt; Numbers.ONE
1
&gt;&gt;&gt; Numbers.TWO
2
&gt;&gt;&gt; Numbers.THREE
'three'
</code></pre>
<p>You can also easily support automatic enumeration with something like this:</p>
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    return type('Enum', (), enums)
</code></pre>
<p>and used like so:</p>
<pre><code>&gt;&gt;&gt; Numbers = enum('ZERO', 'ONE', 'TWO')
&gt;&gt;&gt; Numbers.ZERO
0
&gt;&gt;&gt; Numbers.ONE
1
</code></pre>
<p>Support for converting the values back to names can be added this way:</p>
<pre><code>def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    reverse = dict((value, key) for key, value in enums.iteritems())
    enums['reverse_mapping'] = reverse
    return type('Enum', (), enums)
</code></pre>
<p>This overwrites anything with that name, but it is useful for rendering your enums in output. It will throw a <code>KeyError</code> if the reverse mapping doesn't exist. With the first example:</p>
<pre><code>&gt;&gt;&gt; Numbers.reverse_mapping['three']
'THREE'
</code></pre>
<hr />
<p>If you are using MyPy another way to express &quot;enums&quot; is with <a href=""https://mypy.readthedocs.io/en/stable/literal_types.html#parameterizing-literals"" rel=""noreferrer""><code>typing.Literal</code></a>.</p>
<p>For example:</p>
<pre class=""lang-py prettyprint-override""><code>from typing import Literal #python &gt;=3.8
from typing_extensions import Literal #python 2.7, 3.4-3.7


Animal = Literal['ant', 'bee', 'cat', 'dog']

def hello_animal(animal: Animal):
    print(f&quot;hello {animal}&quot;)

hello_animal('rock') # error
hello_animal('bee') # passes

</code></pre>
",,
158,3,Putting a simple if-then-else statement on one line,"<p>I'm just getting into Python and I really like the terseness of the syntax. However, is there an easier way of writing an <code>if</code>-<code>then</code>-<code>else</code> statement so it fits on one line?</p>

<p>For example:</p>

<pre><code>if count == N:
    count = 0
else:
    count = N + 1
</code></pre>

<p>Is there a simpler way of writing this? I mean, in Objective-C I would write this as:</p>

<pre><code>count = count == N ? 0 : count + 1;
</code></pre>

<p>Is there something similar for Python?</p>

<p><strong>Update</strong></p>

<p>I know that in this instance I can use <code>count == (count + 1) % N</code>. </p>

<p>I'm asking about the general syntax.</p>
","Putting a simple if-then-else statement on one line<p>I'm just getting into Python and I really like the terseness of the syntax. However, is there an easier way of writing an <code>if</code>-<code>then</code>-<code>else</code> statement so it fits on one line?</p>

<p>For example:</p>

<pre><code>if count == N:
    count = 0
else:
    count = N + 1
</code></pre>

<p>Is there a simpler way of writing this? I mean, in Objective-C I would write this as:</p>

<pre><code>count = count == N ? 0 : count + 1;
</code></pre>

<p>Is there something similar for Python?</p>

<p><strong>Update</strong></p>

<p>I know that in this instance I can use <code>count == (count + 1) % N</code>. </p>

<p>I'm asking about the general syntax.</p>
",<python><if-statement><syntax><ternary-operator>,count statement writing syntax fits terseness linei updatei putting objective,"<p>That's more specifically a <a href=""https://en.wikipedia.org/wiki/%3F:#Python"" rel=""noreferrer"">ternary operator</a> expression than an if-then, here's the python syntax</p>

<pre><code>value_when_true if condition else value_when_false
</code></pre>

<p><strong>Better Example:</strong> (thanks <a href=""https://stackoverflow.com/users/253254/joshua-burns"">Mr. Burns</a>)</p>

<p><code>'Yes' if fruit == 'Apple' else 'No'</code> </p>

<p><strong>Now with assignment and contrast with if syntax</strong></p>

<pre><code>fruit = 'Apple'
isApple = True if fruit == 'Apple' else False
</code></pre>

<p><strong>vs</strong></p>

<pre><code>fruit = 'Apple'
isApple = False
if fruit == 'Apple' : isApple = True
</code></pre>
",,
159,4,"Difference between del, remove, and pop on lists","<pre><code>&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; a.remove(2)
&gt;&gt;&gt; a
[1, 3]
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; del a[1]
&gt;&gt;&gt; a
[1, 3]
&gt;&gt;&gt; a= [1,2,3]
&gt;&gt;&gt; a.pop(1)
2
&gt;&gt;&gt; a
[1, 3]
&gt;&gt;&gt; 
</code></pre>

<p>Is there any difference between the above three methods to remove an element from a list?</p>
","Difference between del, remove, and pop on lists<pre><code>&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; a.remove(2)
&gt;&gt;&gt; a
[1, 3]
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; del a[1]
&gt;&gt;&gt; a
[1, 3]
&gt;&gt;&gt; a= [1,2,3]
&gt;&gt;&gt; a.pop(1)
2
&gt;&gt;&gt; a
[1, 3]
&gt;&gt;&gt; 
</code></pre>

<p>Is there any difference between the above three methods to remove an element from a list?</p>
",<python><list>,remove difference del listsis pop element methods list formatting formatted,"<p>The effects of the three different methods to remove an element from a list:</p>
<p><code>remove</code> removes the <em>first</em> matching <em>value</em>, not a specific index:</p>
<pre><code>&gt;&gt;&gt; a = [0, 2, 3, 2]
&gt;&gt;&gt; a.remove(2)
&gt;&gt;&gt; a
[0, 3, 2]
</code></pre>
<p><code>del</code> removes the item at a specific index:</p>
<pre><code>&gt;&gt;&gt; a = [9, 8, 7, 6]
&gt;&gt;&gt; del a[1]
&gt;&gt;&gt; a
[9, 7, 6]
</code></pre>
<p>and <code>pop</code> removes the item at a specific index and returns it.</p>
<pre><code>&gt;&gt;&gt; a = [4, 3, 5]
&gt;&gt;&gt; a.pop(1)
3
&gt;&gt;&gt; a
[4, 5]
</code></pre>
<p>Their error modes are different too:</p>
<pre><code>&gt;&gt;&gt; a = [4, 5, 6]
&gt;&gt;&gt; a.remove(7)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: list.remove(x): x not in list
&gt;&gt;&gt; del a[7]
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: list assignment index out of range
&gt;&gt;&gt; a.pop(7)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
IndexError: pop index out of range
</code></pre>
",,
160,5,Count the number of occurrences of a character in a string,"<p>What's the simplest way to count the number of occurrences of a character in a string?</p>
<p>e.g. count the number of times that <code>'a'</code> appears in <code>'Mary had a little lamb'</code>.</p>
","Count the number of occurrences of a character in a string<p>What's the simplest way to count the number of occurrences of a character in a string?</p>
<p>e.g. count the number of times that <code>'a'</code> appears in <code>'Mary had a little lamb'</code>.</p>
",<python><string><count>,count occurrences number character mary stringwhat lamb little simplest appears,"<blockquote>
<p><a href=""https://docs.python.org/2/library/stdtypes.html#str.count"" rel=""noreferrer"">str.count(sub[, start[, end]])</a></p>
<p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; sentence = 'Mary had a little lamb'
&gt;&gt;&gt; sentence.count('a')
4
</code></pre>
",,
161,4,How can I get a list of locally installed Python modules?,"<p>I would like to get a list of Python modules, which are in my Python installation (UNIX server).</p>

<p>How can you get a list of Python modules installed in your computer?</p>
","How can I get a list of locally installed Python modules?<p>I would like to get a list of Python modules, which are in my Python installation (UNIX server).</p>

<p>How can you get a list of Python modules installed in your computer?</p>
",<python><module><pip>,modules installed list computer locally python installation unix server like,"<h2>Solution</h2>

<h1>Do not use with pip > 10.0!</h1>

<p>My 50 cents for getting a <code>pip freeze</code>-like list from a Python script:</p>

<pre class=""lang-python prettyprint-override""><code>import pip
installed_packages = pip.get_installed_distributions()
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
     for i in installed_packages])
print(installed_packages_list)
</code></pre>

<p>As a (too long) one liner:</p>

<pre class=""lang-python prettyprint-override""><code>sorted([""%s==%s"" % (i.key, i.version) for i in pip.get_installed_distributions()])
</code></pre>

<p>Giving:</p>

<pre class=""lang-js prettyprint-override""><code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', 
 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', 
 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',
 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', 
 'werkzeug==0.9.4']
</code></pre>

<h2>Scope</h2>

<p>This solution applies to the system scope or to a virtual environment scope, and covers packages installed by <code>setuptools</code>, <code>pip</code> and (<a href=""https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install"">god forbid</a>) <code>easy_install</code>.</p>

<h2>My use case</h2>

<p>I added the result of this call to my flask server, so when I call it with <code>http://example.com/exampleServer/environment</code> I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.</p>

<h2>Caveats</h2>

<p>I have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a <code>setup.py</code> file, it does not list the package installed by <code>setup.py</code>.</p>

<h3>Steps to reproduce:</h3>

Create a virtual environment

<pre><code>$ cd /tmp
$ virtualenv test_env
New python executable in test_env/bin/python
Installing setuptools, pip...done.
$ source test_env/bin/activate
(test_env) $ 
</code></pre>

Clone a git repo with <code>setup.py</code>

<pre><code>(test_env) $ git clone https://github.com/behave/behave.git
Cloning into 'behave'...
remote: Reusing existing pack: 4350, done.
remote: Total 4350 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.
Resolving deltas: 100% (2388/2388), done.
Checking connectivity... done.
</code></pre>

<p>We have behave's <code>setup.py</code> in <code>/tmp/behave</code>:</p>

<pre><code>(test_env) $ ls /tmp/behave/setup.py
/tmp/behave/setup.py
</code></pre>

Install the python package from the git repo

<pre><code>(test_env) $ cd /tmp/behave &amp;&amp; pip install . 
running install
...
Installed /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg
Finished processing dependencies for behave==1.2.5a1
</code></pre>

<h3>If we run the aforementioned solution from <code>/tmp</code></h3>

<pre><code>&gt;&gt;&gt; import pip
&gt;&gt;&gt; sorted([""%s==%s"" % (i.key, i.version) for i in pip.get_installed_distributions()])
['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/private/tmp'
</code></pre>

<h3>If we run the aforementioned solution from <code>/tmp/behave</code></h3>

<pre><code>&gt;&gt;&gt; import pip
&gt;&gt;&gt; sorted([""%s==%s"" % (i.key, i.version) for i in pip.get_installed_distributions()])
['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.getcwd()
'/private/tmp/behave'
</code></pre>

<p><code>behave==1.2.5a1</code> is missing from the second example, because the working directory contains <code>behave</code>'s <code>setup.py</code> file.</p>

<p>I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.</p>
",,
162,2,How to drop rows of Pandas DataFrame whose value in a certain column is NaN,"<p>I have this <code>DataFrame</code> and want only the records whose <code>EPS</code> column is not <code>NaN</code>:</p>

<pre><code>&gt;&gt;&gt; df
                 STK_ID  EPS  cash
STK_ID RPT_Date                   
601166 20111231  601166  NaN   NaN
600036 20111231  600036  NaN    12
600016 20111231  600016  4.3   NaN
601009 20111231  601009  NaN   NaN
601939 20111231  601939  2.5   NaN
000001 20111231  000001  NaN   NaN
</code></pre>

<p>...i.e. something like <code>df.drop(....)</code> to get this resulting dataframe:</p>

<pre><code>                  STK_ID  EPS  cash
STK_ID RPT_Date                   
600016 20111231  600016  4.3   NaN
601939 20111231  601939  2.5   NaN
</code></pre>

<p>How do I do that?</p>
","How to drop rows of Pandas DataFrame whose value in a certain column is NaN<p>I have this <code>DataFrame</code> and want only the records whose <code>EPS</code> column is not <code>NaN</code>:</p>

<pre><code>&gt;&gt;&gt; df
                 STK_ID  EPS  cash
STK_ID RPT_Date                   
601166 20111231  601166  NaN   NaN
600036 20111231  600036  NaN    12
600016 20111231  600016  4.3   NaN
601009 20111231  601009  NaN   NaN
601939 20111231  601939  2.5   NaN
000001 20111231  000001  NaN   NaN
</code></pre>

<p>...i.e. something like <code>df.drop(....)</code> to get this resulting dataframe:</p>

<pre><code>                  STK_ID  EPS  cash
STK_ID RPT_Date                   
600016 20111231  600016  4.3   NaN
601939 20111231  601939  2.5   NaN
</code></pre>

<p>How do I do that?</p>
",<python><pandas><dataframe><nan>,drop dataframe column nani eps resulting records nan certain df,"<p>Don't drop, just take the rows where EPS is not NA:</p>

<pre class=""lang-py prettyprint-override""><code>df = df[df['EPS'].notna()]
</code></pre>
",,
163,5,What does the 'b' character do in front of a string literal?,"<p>Apparently, the following is the valid syntax:</p>

<pre><code>my_string = b'The string'
</code></pre>

<p>I would like to know:</p>

<ol>
<li>What does this <code>b</code> character in front of the string mean?</li>
<li>What are the effects of using it?</li>
<li>What are appropriate situations to use it?</li>
</ol>

<p>I found a <a href=""https://stackoverflow.com/q/4749442/346561"">related question</a> right here on SO, but that question is about PHP though, and it states the <code>b</code> is used to indicate the string is binary, as opposed to Unicode, which was needed for code to be compatible from version of PHP &lt; 6, when migrating to PHP 6. I don't think this applies to Python.</p>

<p>I did find <a href=""http://docs.python.org/tutorial/introduction.html#unicode-strings"" rel=""noreferrer"">this documentation</a> on the Python site about using a <code>u</code> character in the same syntax to specify a string as Unicode. Unfortunately, it doesn't mention the <strong>b</strong> character anywhere in that document.</p>

<p>Also, just out of curiosity, are there more symbols than the <code>b</code> and <code>u</code> that do other things?</p>
","What does the 'b' character do in front of a string literal?<p>Apparently, the following is the valid syntax:</p>

<pre><code>my_string = b'The string'
</code></pre>

<p>I would like to know:</p>

<ol>
<li>What does this <code>b</code> character in front of the string mean?</li>
<li>What are the effects of using it?</li>
<li>What are appropriate situations to use it?</li>
</ol>

<p>I found a <a href=""https://stackoverflow.com/q/4749442/346561"">related question</a> right here on SO, but that question is about PHP though, and it states the <code>b</code> is used to indicate the string is binary, as opposed to Unicode, which was needed for code to be compatible from version of PHP &lt; 6, when migrating to PHP 6. I don't think this applies to Python.</p>

<p>I did find <a href=""http://docs.python.org/tutorial/introduction.html#unicode-strings"" rel=""noreferrer"">this documentation</a> on the Python site about using a <code>u</code> character in the same syntax to specify a string as Unicode. Unfortunately, it doesn't mention the <strong>b</strong> character anywhere in that document.</p>

<p>Also, just out of curiosity, are there more symbols than the <code>b</code> and <code>u</code> that do other things?</p>
",<python><string><unicode><binary>,character php string unicode syntax question migrating curiosity applies states,"<p>To quote <a href=""https://docs.python.org/2/reference/lexical_analysis.html#string-literals"" rel=""noreferrer"">the Python 2.x documentation</a>:</p>

<blockquote>
  <p>A prefix of 'b' or 'B' is ignored in
  Python 2; it indicates that the
  literal should become a bytes literal
  in Python 3 (e.g. when code is
  automatically converted with 2to3). A
  'u' or 'b' prefix may be followed by
  an 'r' prefix.</p>
</blockquote>

<p>The <a href=""https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals"" rel=""noreferrer"">Python 3 documentation</a> states:</p>

<blockquote>
  <p>Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.</p>
</blockquote>
",,
164,5,How does Python's super() work with multiple inheritance?,"<p>I'm pretty much new in Python object oriented programming and I have trouble
understanding the <code>super()</code> function (new style classes) especially when it comes to multiple inheritance.</p>
<p>For example if you have something like:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;

class Second(object):
    def __init__(self):
        print &quot;second&quot;

class Third(First, Second):
    def __init__(self):
        super(Third, self).__init__()
        print &quot;that's it&quot;
</code></pre>
<p>What I don't get is: will the <code>Third()</code> class inherit both constructor methods? If yes, then which one will be run with <code>super()</code> and why?</p>
<p>And what if you want to run the other one? I know it has something to do with Python method resolution order (<a href=""http://en.wikipedia.org/wiki/C3_linearization"" rel=""noreferrer"">MRO</a>).</p>
","How does Python's super() work with multiple inheritance?<p>I'm pretty much new in Python object oriented programming and I have trouble
understanding the <code>super()</code> function (new style classes) especially when it comes to multiple inheritance.</p>
<p>For example if you have something like:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;

class Second(object):
    def __init__(self):
        print &quot;second&quot;

class Third(First, Second):
    def __init__(self):
        super(Third, self).__init__()
        print &quot;that's it&quot;
</code></pre>
<p>What I don't get is: will the <code>Third()</code> class inherit both constructor methods? If yes, then which one will be run with <code>super()</code> and why?</p>
<p>And what if you want to run the other one? I know it has something to do with Python method resolution order (<a href=""http://en.wikipedia.org/wiki/C3_linearization"" rel=""noreferrer"">MRO</a>).</p>
",<python><multiple-inheritance>,super inheritance multiple new run mro resolution troubleunderstanding oriented comes,"<p>This is detailed with a reasonable amount of detail by Guido himself in his blog post <a href=""http://python-history.blogspot.com/2010/06/method-resolution-order.html"" rel=""noreferrer"">Method Resolution Order</a> (including two earlier attempts).</p>
<p>In your example, <code>Third()</code> will call <code>First.__init__</code>. Python looks for each attribute in the class's parents as they are listed left to right. In this case, we are looking for <code>__init__</code>. So, if you define</p>
<pre><code>class Third(First, Second):
    ...
</code></pre>
<p>Python will start by looking at <code>First</code>, and, if <code>First</code> doesn't have the attribute, then it will look at <code>Second</code>.</p>
<p>This situation becomes more complex when inheritance starts crossing paths (for example if <code>First</code> inherited from <code>Second</code>). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.</p>
<p>So, for instance, if you had:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;

class Second(First):
    def __init__(self):
        print &quot;second&quot;

class Third(First):
    def __init__(self):
        print &quot;third&quot;

class Fourth(Second, Third):
    def __init__(self):
        super(Fourth, self).__init__()
        print &quot;that's it&quot;
</code></pre>
<p>the MRO would be <code>[Fourth, Second, Third, First].</code></p>
<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to behavior which might surprise the user.</p>
<p>Example of an ambiguous MRO:</p>
<pre><code>class First(object):
    def __init__(self):
        print &quot;first&quot;
        
class Second(First):
    def __init__(self):
        print &quot;second&quot;

class Third(First, Second):
    def __init__(self):
        print &quot;third&quot;
</code></pre>
<p>Should <code>Third</code>'s MRO be <code>[First, Second]</code> or <code>[Second, First]</code>? There's no obvious expectation, and Python will raise an error:</p>
<pre><code>TypeError: Error when calling the metaclass bases
    Cannot create a consistent method resolution order (MRO) for bases Second, First
</code></pre>
<p>Why do the examples above lack <code>super()</code> calls? The point of the examples is to show how the MRO is constructed. They are <strong>not</strong> intended to print <code>&quot;first\nsecond\third&quot;</code> or whatever. You can ƒ?? and should, of course, play around with the example, add <code>super()</code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:</p>
<pre><code>&gt;&gt;&gt; Fourth.__mro__
(&lt;class '__main__.Fourth'&gt;,
 &lt;class '__main__.Second'&gt;, &lt;class '__main__.Third'&gt;,
 &lt;class '__main__.First'&gt;,
 &lt;type 'object'&gt;)
</code></pre>
",,
165,3,How to parse XML and count instances of a particular node attribute?,"<p>I have many rows in a database that contains XML and I'm trying to write a Python script to count instances of a particular node attribute.</p>
<p>My tree looks like:</p>
<pre class=""lang-xml prettyprint-override""><code>&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar=&quot;1&quot;/&gt;
      &lt;type foobar=&quot;2&quot;/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
</code></pre>
<p>How can I access the attributes <code>&quot;1&quot;</code> and <code>&quot;2&quot;</code> in the XML using Python?</p>
","How to parse XML and count instances of a particular node attribute?<p>I have many rows in a database that contains XML and I'm trying to write a Python script to count instances of a particular node attribute.</p>
<p>My tree looks like:</p>
<pre class=""lang-xml prettyprint-override""><code>&lt;foo&gt;
   &lt;bar&gt;
      &lt;type foobar=&quot;1&quot;/&gt;
      &lt;type foobar=&quot;2&quot;/&gt;
   &lt;/bar&gt;
&lt;/foo&gt;
</code></pre>
<p>How can I access the attributes <code>&quot;1&quot;</code> and <code>&quot;2&quot;</code> in the XML using Python?</p>
",<python><xml>,xml node instances attribute particular count attributes tree parse database,"<p>I suggest <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""noreferrer""><code>ElementTree</code></a>.  There are other compatible implementations of the same API, such as <a href=""https://lxml.de/parsing.html"" rel=""noreferrer""><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>

<p>First build an Element instance <code>root</code> from the XML, e.g. with the <a href=""http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML"" rel=""noreferrer"">XML</a> function, or by parsing a file with something like:</p>

<pre><code>import xml.etree.ElementTree as ET
root = ET.parse('thefile.xml').getroot()
</code></pre>

<p>Or any of the many other ways shown at <a href=""http://docs.python.org/library/xml.etree.elementtree.html"" rel=""noreferrer""><code>ElementTree</code></a>. Then do something like:</p>

<pre><code>for type_tag in root.findall('bar/type'):
    value = type_tag.get('foobar')
    print(value)
</code></pre>

<p>And similar, usually pretty simple, code patterns.</p>
",,
166,5,How to make a class JSON serializable,"<p>How to make a Python class serializable?  </p>

<p>A simple class:</p>

<pre><code>class FileItem:
    def __init__(self, fname):
        self.fname = fname
</code></pre>

<p>What should I do to be able to get output of:</p>

<pre><code>&gt;&gt;&gt; import json

&gt;&gt;&gt; my_file = FileItem('/foo/bar')
&gt;&gt;&gt; json.dumps(my_file)
TypeError: Object of type 'FileItem' is not JSON serializable
</code></pre>

<p>Without the error</p>
","How to make a class JSON serializable<p>How to make a Python class serializable?  </p>

<p>A simple class:</p>

<pre><code>class FileItem:
    def __init__(self, fname):
        self.fname = fname
</code></pre>

<p>What should I do to be able to get output of:</p>

<pre><code>&gt;&gt;&gt; import json

&gt;&gt;&gt; my_file = FileItem('/foo/bar')
&gt;&gt;&gt; json.dumps(my_file)
TypeError: Object of type 'FileItem' is not JSON serializable
</code></pre>

<p>Without the error</p>
",<python><json><serialization>,class make serializable json able simple output error python,"<p>Do you have an idea about the expected output? For example, will this do?</p>

<pre><code>&gt;&gt;&gt; f  = FileItem(""/foo/bar"")
&gt;&gt;&gt; magic(f)
'{""fname"": ""/foo/bar""}'
</code></pre>

<p>In that case you can merely call <code>json.dumps(f.__dict__)</code>. </p>

<p>If you want more customized output then you will have to subclass <a href=""https://docs.python.org/library/json.html#json.JSONEncoder"" rel=""noreferrer""><code>JSONEncoder</code></a> and implement your own custom serialization. </p>

<p>For a trivial example, see below.</p>

<pre><code>&gt;&gt;&gt; from json import JSONEncoder
&gt;&gt;&gt; class MyEncoder(JSONEncoder):
        def default(self, o):
            return o.__dict__    

&gt;&gt;&gt; MyEncoder().encode(f)
'{""fname"": ""/foo/bar""}'
</code></pre>

<p>Then you pass this class into the <a href=""https://docs.python.org/library/json.html#json.dumps"" rel=""noreferrer""><code>json.dumps()</code></a> method as <code>cls</code> kwarg:</p>

<pre><code>json.dumps(cls=MyEncoder)
</code></pre>

<p>If you also want to decode then you'll have to supply a custom <code>object_hook</code> to the <a href=""https://docs.python.org/library/json.html#json.JSONDecoder"" rel=""noreferrer""><code>JSONDecoder</code></a> class. For example:</p>

<pre><code>&gt;&gt;&gt; def from_json(json_object):
        if 'fname' in json_object:
            return FileItem(json_object['fname'])
&gt;&gt;&gt; f = JSONDecoder(object_hook = from_json).decode('{""fname"": ""/foo/bar""}')
&gt;&gt;&gt; f
&lt;__main__.FileItem object at 0x9337fac&gt;
&gt;&gt;&gt; 
</code></pre>
",,
167,3,What's the difference between lists and tuples?,"<p>What's the difference?</p>

<p>What are the advantages / disadvantages of tuples / lists?</p>
","What's the difference between lists and tuples?<p>What's the difference?</p>

<p>What are the advantages / disadvantages of tuples / lists?</p>
",<python><list><tuples>,tuples lists difference disadvantages advantages fork forthen forth formatting,"<p>Apart from tuples being immutable there is also a semantic distinction that should guide their usage. Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. <strong>Tuples have structure, lists have order.</strong> </p>

<p>Using this distinction makes code more explicit and understandable.</p>

<p>One example would be pairs of page and line number to reference locations in a book, e.g.:</p>

<pre><code>my_location = (42, 11)  # page number, line number
</code></pre>

<p>You can then use this as a key in a dictionary to store notes on locations. A list on the other hand could be used to store multiple locations. Naturally one might want to add or remove locations from the list, so it makes sense that lists are mutable. On the other hand it doesn't make sense to add or remove items from an existing location - hence tuples are immutable.</p>

<p>There might be situations where you want to change items within an existing location tuple, for example when iterating through the lines of a page. But tuple immutability forces you to create a new location tuple for each new value. This seems inconvenient on the face of it, but using immutable data like this is a cornerstone of value types and functional programming techniques, which can have substantial advantages.</p>

<p>There are some interesting articles on this issue, e.g. <a href=""http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/"" rel=""noreferrer"">""Python Tuples are Not Just Constant Lists""</a> or <a href=""http://news.e-scribe.com/397"" rel=""noreferrer"">""Understanding tuples vs. lists in Python""</a>. The official Python documentation <a href=""http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences"" rel=""noreferrer"">also mentions this</a></p>

<blockquote>
  <p>""Tuples are immutable, and usually contain an heterogeneous sequence ..."".</p>
</blockquote>

<p>In a statically typed language like <em>Haskell</em> the values in a tuple generally have different types and the length of the tuple must be fixed. In a list the values all have the same type and the length is not fixed. So the difference is very obvious.</p>

<p>Finally there is the <a href=""http://docs.python.org/dev/library/collections.html#collections.namedtuple"" rel=""noreferrer"">namedtuple</a> in Python, which makes sense because a tuple is already supposed to have structure. This underlines the idea that tuples are a light-weight alternative to classes and instances.</p>
",,
168,3,How to iterate through two lists in parallel?,"<p>I have two iterables in Python, and I want to go over them in pairs:</p>
<pre><code>foo = (1, 2, 3)
bar = (4, 5, 6)

for (f, b) in some_iterator(foo, bar):
    print(&quot;f: &quot;, f, &quot;; b: &quot;, b)
</code></pre>
<p>It should result in:</p>
<pre><code>f: 1; b: 4
f: 2; b: 5
f: 3; b: 6
</code></pre>
<p><em>One</em> way to do it is to iterate over the indices:</p>
<pre><code>for i in range(len(foo)):
    print(&quot;f: &quot;, foo[i], &quot;; b: &quot;, bar[i])
</code></pre>
<p>But that seems somewhat unpythonic to me. Is there a better way to do it?</p>
","How to iterate through two lists in parallel?<p>I have two iterables in Python, and I want to go over them in pairs:</p>
<pre><code>foo = (1, 2, 3)
bar = (4, 5, 6)

for (f, b) in some_iterator(foo, bar):
    print(&quot;f: &quot;, f, &quot;; b: &quot;, b)
</code></pre>
<p>It should result in:</p>
<pre><code>f: 1; b: 4
f: 2; b: 5
f: 3; b: 6
</code></pre>
<p><em>One</em> way to do it is to iterate over the indices:</p>
<pre><code>for i in range(len(foo)):
    print(&quot;f: &quot;, foo[i], &quot;; b: &quot;, bar[i])
</code></pre>
<p>But that seems somewhat unpythonic to me. Is there a better way to do it?</p>
",<python><list><for-loop><iterator>,iterate unpythonic iterables parallel indices somewhat pairs way result lists,"<h2>Python 3</h2>

<pre><code>for f, b in zip(foo, bar):
    print(f, b)
</code></pre>

<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>

<p>In <strong>Python 3</strong>, <a href=""https://docs.python.org/3/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>
returns an iterator of tuples, like <code>itertools.izip</code> in Python2.  To get a list
of tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are
exhausted, you would use
<a href=""https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest"" rel=""noreferrer"">itertools.zip_longest</a>.</p>

<h2>Python 2</h2>

<p>In <strong>Python 2</strong>, <a href=""https://docs.python.org/2/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a>
returns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If they are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive
temporary variable, and should be replaced by <code>itertools.izip</code> or
<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>

<pre><code>import itertools
for f,b in itertools.izip(foo,bar):
    print(f,b)
for f,b in itertools.izip_longest(foo,bar):
    print(f,b)
</code></pre>

<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.
<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.
When the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href=""http://docs.python.org/library/itertools.html#itertools.izip_longest"" rel=""noreferrer"">full story</a>.</p>

<hr>

<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>

<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], 
                              ['red', 'blue', 'green']):
    print('{} {} {}'.format(num, color, cheese))
</code></pre>

<p>prints</p>

<pre><code>1 red manchego
2 blue stilton
3 green brie
</code></pre>
",,
169,3,What are the most common Python docstring formats?,"<p>I have seen a few different styles of writing docstrings in Python, what are the most popular styles?</p>
","What are the most common Python docstring formats?<p>I have seen a few different styles of writing docstrings in Python, what are the most popular styles?</p>
",<python><coding-style><documentation><docstring>,styles popular docstring docstrings formats common seen writing different python,"<h1>Formats</h1>

<p>Python docstrings can be written following several formats as the other posts showed. However the default Sphinx docstring format was not mentioned and is based on <strong>reStructuredText (reST)</strong>. You can get some information about the main formats in <a href=""http://daouzli.com/blog/docstring.html"" rel=""noreferrer"">this blog post</a>.</p>

<p>Note that the reST is recommended by the <a href=""https://www.python.org/dev/peps/pep-0287"" rel=""noreferrer"">PEP 287</a></p>

<p>There follows the main used formats for docstrings.</p>

<h2>- Epytext</h2>

<p>Historically a <strong>javadoc</strong> like style was prevalent, so it was taken as a base for <a href=""http://epydoc.sourceforge.net"" rel=""noreferrer"">Epydoc</a> (with the called <code>Epytext</code> format) to generate documentation.</p>

<p>Example:</p>

<pre><code>""""""
This is a javadoc style.

@param param1: this is a first param
@param param2: this is a second param
@return: this is a description of what is returned
@raise keyError: raises an exception
""""""
</code></pre>

<h2>- reST</h2>

<p>Nowadays, the probably more prevalent format is the <strong>reStructuredText</strong> (reST) format that is used by <a href=""http://sphinx-doc.org"" rel=""noreferrer"">Sphinx</a> to generate documentation.
Note: it is used by default in JetBrains PyCharm (type triple quotes after defining a method and hit enter). It is also used by default as output format in Pyment.</p>

<p>Example:</p>

<pre><code>""""""
This is a reST style.

:param param1: this is a first param
:param param2: this is a second param
:returns: this is a description of what is returned
:raises keyError: raises an exception
""""""
</code></pre>

<h2>- Google</h2>

<p>Google has their own <a href=""https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings"" rel=""noreferrer"">format</a> that is often used. It also can be interpreted by Sphinx (ie. using <a href=""https://sphinxcontrib-napoleon.readthedocs.io/en/latest/"" rel=""noreferrer"">Napoleon plugin</a>). </p>

<p>Example:</p>

<pre><code>""""""
This is an example of Google style.

Args:
    param1: This is the first param.
    param2: This is a second param.

Returns:
    This is a description of what is returned.

Raises:
    KeyError: Raises an exception.
""""""
</code></pre>

<p>Even <a href=""https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html#example-google"" rel=""noreferrer"">more examples</a></p>

<h2>- Numpydoc</h2>

<p>Note that Numpy recommend to follow their own <a href=""https://numpydoc.readthedocs.io/en/latest/"" rel=""noreferrer"">numpydoc</a> based on Google format and usable by Sphinx.</p>

<pre><code>""""""
My numpydoc description of a kind
of very exhautive numpydoc format docstring.

Parameters
----------
first : array_like
    the 1st param name `first`
second :
    the 2nd param
third : {'value', 'other'}, optional
    the 3rd param, by default 'value'

Returns
-------
string
    a value in a string

Raises
------
KeyError
    when a key error
OtherError
    when an other error
""""""
</code></pre>

<h1>Converting/Generating</h1>

<p>It is possible to use a tool like <a href=""https://github.com/dadadel/pyment"" rel=""noreferrer"">Pyment</a> to automatically generate docstrings to a Python project not yet documented, or to convert existing docstrings (can be mixing several formats) from a format to an other one.</p>

<p>Note: The examples are taken from the <a href=""https://github.com/dadadel/pyment/blob/master/README.rst"" rel=""noreferrer"">Pyment documentation</a></p>
",,
170,4,How to return dictionary keys as a list in Python?,"<p>In <em>Python 2.7</em>, I could get dictionary <em>keys</em>, <em>values</em>, or <em>items</em> as a list:</p>

<pre><code>&gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}
&gt;&gt;&gt; newdict.keys()
[1, 2, 3]
</code></pre>

<p>Now, in <em>Python >= 3.3</em>, I get something like this:</p>

<pre><code>&gt;&gt;&gt; newdict.keys()
dict_keys([1, 2, 3])
</code></pre>

<p>So, I have to do this to get a list:</p>

<pre><code>newlist = list()
for i in newdict.keys():
    newlist.append(i)
</code></pre>

<p>I'm wondering, is there a better way to return a list in <em>Python 3</em>? </p>
","How to return dictionary keys as a list in Python?<p>In <em>Python 2.7</em>, I could get dictionary <em>keys</em>, <em>values</em>, or <em>items</em> as a list:</p>

<pre><code>&gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}
&gt;&gt;&gt; newdict.keys()
[1, 2, 3]
</code></pre>

<p>Now, in <em>Python >= 3.3</em>, I get something like this:</p>

<pre><code>&gt;&gt;&gt; newdict.keys()
dict_keys([1, 2, 3])
</code></pre>

<p>So, I have to do this to get a list:</p>

<pre><code>newlist = list()
for i in newdict.keys():
    newlist.append(i)
</code></pre>

<p>I'm wondering, is there a better way to return a list in <em>Python 3</em>? </p>
",<python><python-3.x><list><dictionary><python-2.x>,list keys return dictionary python wondering items better values like,"<p>Try <code>list(newdict.keys())</code>.</p>

<p>This will convert the <code>dict_keys</code> object to a list.</p>

<p>On the other hand, you should ask yourself whether or not it matters. The Pythonic way to code is to assume duck typing (<em>if it looks like a duck and it quacks like a duck, it's a duck</em>). The <code>dict_keys</code> object will act like a list for most purposes. For instance:</p>

<pre><code>for key in newdict.keys():
  print(key)
</code></pre>

<p>Obviously, insertion operators may not work, but that doesn't make much sense for a list of dictionary keys anyway.</p>
",,
171,3,Fastest way to check if a value exists in a list,"<p>What is the fastest way to know if a value exists in a list (a list with millions of values in it) and what its index is?</p>
<p>I know that all values in the list are unique as in this example.</p>
<p><strong>The first method I try is (3.8 sec in my real code):</strong></p>
<pre><code>a = [4,2,3,1,5,6]

if a.count(7) == 1:
    b=a.index(7)
    &quot;Do something with variable b&quot;
</code></pre>
<p><strong>The second method I try is (2x faster: 1.9 sec for my real code):</strong></p>
<pre><code>a = [4,2,3,1,5,6]

try:
    b=a.index(7)
except ValueError:
    &quot;Do nothing&quot;
else:
    &quot;Do something with variable b&quot;
</code></pre>
<p><strong>Proposed methods from Stack Overflow user (2.74 sec for my real code):</strong></p>
<pre><code>a = [4,2,3,1,5,6]
if 7 in a:
    a.index(7)
</code></pre>
<p>In my real code, the first method takes 3.81 sec and the second method takes 1.88 sec.
It's a good improvement, but:</p>
<p>I'm a beginner with Python/scripting, and is there a faster way to do the same things and save more processing time?</p>
<p><strong>More specific explanation for my application:</strong></p>
<p>In the Blender API I can access a list of particles:</p>
<pre><code>particles = [1, 2, 3, 4, etc.]
</code></pre>
<p>From there, I can access a particle's location:</p>
<pre><code>particles[x].location = [x,y,z]
</code></pre>
<p>And for each particle I test if a neighbour exists by searching each particle location like so:</p>
<pre><code>if [x+1,y,z] in particles.location
    &quot;Find the identity of this neighbour particle in x:the particle's index
    in the array&quot;
    particles.index([x+1,y,z])
</code></pre>
","Fastest way to check if a value exists in a list<p>What is the fastest way to know if a value exists in a list (a list with millions of values in it) and what its index is?</p>
<p>I know that all values in the list are unique as in this example.</p>
<p><strong>The first method I try is (3.8 sec in my real code):</strong></p>
<pre><code>a = [4,2,3,1,5,6]

if a.count(7) == 1:
    b=a.index(7)
    &quot;Do something with variable b&quot;
</code></pre>
<p><strong>The second method I try is (2x faster: 1.9 sec for my real code):</strong></p>
<pre><code>a = [4,2,3,1,5,6]

try:
    b=a.index(7)
except ValueError:
    &quot;Do nothing&quot;
else:
    &quot;Do something with variable b&quot;
</code></pre>
<p><strong>Proposed methods from Stack Overflow user (2.74 sec for my real code):</strong></p>
<pre><code>a = [4,2,3,1,5,6]
if 7 in a:
    a.index(7)
</code></pre>
<p>In my real code, the first method takes 3.81 sec and the second method takes 1.88 sec.
It's a good improvement, but:</p>
<p>I'm a beginner with Python/scripting, and is there a faster way to do the same things and save more processing time?</p>
<p><strong>More specific explanation for my application:</strong></p>
<p>In the Blender API I can access a list of particles:</p>
<pre><code>particles = [1, 2, 3, 4, etc.]
</code></pre>
<p>From there, I can access a particle's location:</p>
<pre><code>particles[x].location = [x,y,z]
</code></pre>
<p>And for each particle I test if a neighbour exists by searching each particle location like so:</p>
<pre><code>if [x+1,y,z] in particles.location
    &quot;Find the identity of this neighbour particle in x:the particle's index
    in the array&quot;
    particles.index([x+1,y,z])
</code></pre>
",<python><performance><list>,sec real particle method exists fastest code location list faster,"<pre><code>7 in a
</code></pre>

<p>Clearest and fastest way to do it.</p>

<p>You can also consider using a <code>set</code>, but constructing that set from your list may take more time than faster membership testing will save. The only way to be certain is to benchmark well. (this also depends on what operations you require)</p>
",,
172,4,Is there a simple way to delete a list element by value?,"<p>I want to remove a value from a list if it exists in the list (which it may not).</p>
<pre><code>a = [1, 2, 3, 4]
b = a.index(6)

del a[b]
print(a)
</code></pre>
<p>The above case (in which it does not exist) shows the following error:</p>
<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File &quot;D:\zjm_code\a.py&quot;, line 6, in &lt;module&gt;
    b = a.index(6)
ValueError: list.index(x): x not in list
</code></pre>
<p>So I have to do this:</p>
<pre><code>a = [1, 2, 3, 4]

try:
    b = a.index(6)
    del a[b]
except:
    pass

print(a)
</code></pre>
<p>But is there not a simpler way to do this?</p>
","Is there a simple way to delete a list element by value?<p>I want to remove a value from a list if it exists in the list (which it may not).</p>
<pre><code>a = [1, 2, 3, 4]
b = a.index(6)

del a[b]
print(a)
</code></pre>
<p>The above case (in which it does not exist) shows the following error:</p>
<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File &quot;D:\zjm_code\a.py&quot;, line 6, in &lt;module&gt;
    b = a.index(6)
ValueError: list.index(x): x not in list
</code></pre>
<p>So I have to do this:</p>
<pre><code>a = [1, 2, 3, 4]

try:
    b = a.index(6)
    del a[b]
except:
    pass

print(a)
</code></pre>
<p>But is there not a simpler way to do this?</p>
",<python><list>,list value exist simpler shows delete element exists case way,"<p>To remove an element's first occurrence in a list, simply use <code>list.remove</code>:</p>

<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; a.remove('b')
&gt;&gt;&gt; print(a)
['a', 'c', 'd']
</code></pre>

<p>Mind that it does not remove all occurrences of your element. Use a list comprehension for that.</p>

<pre><code>&gt;&gt;&gt; a = [10, 20, 30, 40, 20, 30, 40, 20, 70, 20]
&gt;&gt;&gt; a = [x for x in a if x != 20]
&gt;&gt;&gt; print(a)
[10, 30, 40, 30, 40, 70]
</code></pre>
",,
173,5,What is the difference between old style and new style classes in Python?,"<p>What is the difference between old style and new style classes in Python?  When should I use one or the other?</p>
","What is the difference between old style and new style classes in Python?<p>What is the difference between old style and new style classes in Python?  When should I use one or the other?</p>
",<python><class><oop><types><new-style-class>,style old classes new difference python use fool formats forthen,"<p>From <em><a href=""http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes"" rel=""noreferrer"">New-style and classic classes</a></em>:</p>

<blockquote>
  <p><strong>Up to Python 2.1, old-style classes were the only flavour available to the user.</strong></p>
  
  <p>The concept of (old-style) class is unrelated to the concept of type:
  if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code>
  designates the class of <code>x</code>, but <code>type(x)</code> is always <code>&lt;type
  'instance'&gt;</code>. </p>
  
  <p>This reflects the fact that all old-style instances, independently of
  their class, are implemented with a single built-in type, called
  instance.</p>
  
  <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. 
  A new-style class is simply a user-defined type, no more, no less.</p>
  
  <p>If x is an instance of a new-style class, then <code>type(x)</code> is typically
  the same as <code>x.__class__</code> (although this is not guaranteed ƒ?? a
  new-style class instance is permitted to override the value returned
  for <code>x.__class__</code>).</p>
  
  <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. </p>
  
  <p>It also has a number of immediate benefits, like the ability to
  subclass most built-in types, or the introduction of ""descriptors"",
  which enable computed properties.</p>
  
  <p><strong>For compatibility reasons, classes are still old-style by default</strong>. </p>
  
  <p>New-style classes are created by specifying another new-style class
  (i.e. a type) as a parent class, or the ""top-level type"" object if no
  other parent is needed. </p>
  
  <p>The behaviour of new-style classes differs from that of old-style
  classes in a number of important details in addition to what type
  returns. </p>
  
  <p>Some of these changes are fundamental to the new object model, like
  the way special methods are invoked. Others are ""fixes"" that could not
  be implemented before for compatibility concerns, like the method
  resolution order in case of multiple inheritance.</p>
  
  <p><strong>Python 3 only has new-style classes</strong>. </p>
  
  <p>No matter if you subclass from <code>object</code> or not, classes are new-style
  in Python 3.</p>
</blockquote>
",,
174,6,"Extract file name from path, no matter what the os/path format","<p>Which Python library can I use to extract filenames from paths, no matter what the operating system or path format could be?</p>

<p>For example, I'd like all of these paths to return me <code>c</code>:</p>

<pre><code>a/b/c/
a/b/c
\a\b\c
\a\b\c\
a\b\c
a/b/../../a/b/c/
a/b/../../a/b/c
</code></pre>
","Extract file name from path, no matter what the os/path format<p>Which Python library can I use to extract filenames from paths, no matter what the operating system or path format could be?</p>

<p>For example, I'd like all of these paths to return me <code>c</code>:</p>

<pre><code>a/b/c/
a/b/c
\a\b\c
\a\b\c\
a\b\c
a/b/../../a/b/c/
a/b/../../a/b/c
</code></pre>
",<python>,path paths extract matter filenames operating os format library,"<p>Using <code>os.path.split</code> or <code>os.path.basename</code> as others suggest won't work in all cases: if you're running the script on Linux and attempt to process a classic windows-style path, it will fail.</p>

<p>Windows paths can use either backslash or forward slash as path separator. Therefore, the <code>ntpath</code> module (which is equivalent to os.path when running on windows) will work for all<sup>(1)</sup> paths on all platforms.</p>

<pre><code>import ntpath
ntpath.basename(""a/b/c"")
</code></pre>

<p>Of course, if the file ends with a slash, the basename will be empty, so make your own function to deal with it:</p>

<pre><code>def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)
</code></pre>

<p>Verification:</p>

<pre><code>&gt;&gt;&gt; paths = ['a/b/c/', 'a/b/c', '\\a\\b\\c', '\\a\\b\\c\\', 'a\\b\\c', 
...     'a/b/../../a/b/c/', 'a/b/../../a/b/c']
&gt;&gt;&gt; [path_leaf(path) for path in paths]
['c', 'c', 'c', 'c', 'c', 'c', 'c']
</code></pre>

<p><br></p>

<p><sup>(1) There's one caveat: Linux filenames <em>may contain backslashes</em>. So on linux, <code>r'a/b\c'</code> always refers to the file <code>b\c</code> in the <code>a</code> folder, while on Windows, it always refers to the <code>c</code> file in the <code>b</code> subfolder of the <code>a</code> folder. So when both forward and backward slashes are used in a path, you <em>need</em> to know the associated platform to be able to interpret it correctly. In practice it's usually safe to assume it's a windows path since backslashes are seldom used in Linux filenames, but keep this in mind when you code so you don't create accidental security holes.</sup></p>
",,
175,3,How to catch and print the full exception traceback without halting/exiting the program?,"<p>I want to catch and log exceptions without exiting, e.g.,</p>
<pre><code>try:
    do_stuff()
except Exception as err:
    print(Exception, err)
    # I want to print the entire traceback here,
    # not just the exception name and details
</code></pre>
<p>I want to print the exact same output that is printed when the exception is raised without the try..except intercepting the exception, and I do <em>not</em> want it to exit my program.  How do I do this?</p>
","How to catch and print the full exception traceback without halting/exiting the program?<p>I want to catch and log exceptions without exiting, e.g.,</p>
<pre><code>try:
    do_stuff()
except Exception as err:
    print(Exception, err)
    # I want to print the entire traceback here,
    # not just the exception name and details
</code></pre>
<p>I want to print the exact same output that is printed when the exception is raised without the try..except intercepting the exception, and I do <em>not</em> want it to exit my program.  How do I do this?</p>
",<python><exception><try-catch><traceback>,exception exiting catch print program want halting raised intercepting traceback,"<p>Some other answer have already pointed out the <a href=""http://docs.python.org/3/library/traceback.html"">traceback</a> module.</p>

<p>Please notice that with <code>print_exc</code>, in some corner cases, you will not obtain what you would expect. In Python 2.x:</p>

<pre><code>import traceback

try:
    raise TypeError(""Oups!"")
except Exception, err:
    try:
        raise TypeError(""Again !?!"")
    except:
        pass

    traceback.print_exc()
</code></pre>

<p>...will display the traceback of the <em>last</em> exception:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""e.py"", line 7, in &lt;module&gt;
    raise TypeError(""Again !?!"")
TypeError: Again !?!
</code></pre>

<p><strong>If you really need to access the original <em>traceback</em></strong> one solution is to cache the <em>exception infos</em> as returned from <a href=""https://docs.python.org/2/library/sys.html#sys.exc_info""><code>exc_info</code></a> in a local variable and display it using <a href=""https://docs.python.org/2/library/traceback.html#traceback.print_exception""><code>print_exception</code></a>:</p>

<pre><code>import traceback
import sys

try:
    raise TypeError(""Oups!"")
except Exception, err:
    try:
        exc_info = sys.exc_info()

        # do you usefull stuff here
        # (potentially raising an exception)
        try:
            raise TypeError(""Again !?!"")
        except:
            pass
        # end of useful stuff


    finally:
        # Display the *original* exception
        traceback.print_exception(*exc_info)
        del exc_info
</code></pre>

<p>Producing:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""t.py"", line 6, in &lt;module&gt;
    raise TypeError(""Oups!"")
TypeError: Oups!
</code></pre>

<p>Few pitfalls with this though:</p>

<ul>
<li><p>From the doc of <a href=""https://docs.python.org/2/library/sys.html#sys.exc_info""><code>sys_info</code></a>:</p>

<blockquote>
  <p>Assigning the traceback return value to a local variable in a function that is handling an exception will cause a <strong>circular reference</strong>. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. [...] <strong>If you do need the traceback, make sure to delete it after use</strong> (best done with a try ... finally statement)</p>
</blockquote></li>
<li><p>but, from the same doc:</p>

<blockquote>
  <p><strong>Beginning with Python 2.2, such cycles are automatically reclaimed</strong> when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.</p>
</blockquote></li>
</ul>

<hr>

<p>On the other hand, by allowing you to access the traceback <em>associated with</em> an exception, Python 3 produce a less surprising result:</p>

<pre><code>import traceback

try:
    raise TypeError(""Oups!"")
except Exception as err:
    try:
        raise TypeError(""Again !?!"")
    except:
        pass

    traceback.print_tb(err.__traceback__)
</code></pre>

<p>... will display:</p>

<pre class=""lang-none prettyprint-override""><code>  File ""e3.py"", line 4, in &lt;module&gt;
    raise TypeError(""Oups!"")
</code></pre>
",,
176,3,"What are ""named tuples"" in Python?","<p>Reading the <a href=""http://docs.python.org/py3k/whatsnew/3.1.html#new-improved-and-deprecated-modules"" rel=""noreferrer"">changes in Python 3.1</a>, I found something... unexpected:</p>

<blockquote>
  <p>The sys.version_info tuple is now a <strong>named tuple</strong>:</p>
</blockquote>

<p>I never heard about named tuples before, and I thought elements could either be indexed by numbers (like in tuples and lists) or by keys (like in dicts). I never expected they could be indexed both ways.</p>

<p>Thus, my questions are:</p>

<ul>
<li>What are named tuples?</li>
<li>How to use them?</li>
<li>Why/when should I use named tuples instead of normal tuples?</li>
<li>Why/when should I use normal tuples instead of named tuples?</li>
<li>Is there any kind of ""named list"" (a mutable version of the named tuple)?</li>
</ul>
","What are ""named tuples"" in Python?<p>Reading the <a href=""http://docs.python.org/py3k/whatsnew/3.1.html#new-improved-and-deprecated-modules"" rel=""noreferrer"">changes in Python 3.1</a>, I found something... unexpected:</p>

<blockquote>
  <p>The sys.version_info tuple is now a <strong>named tuple</strong>:</p>
</blockquote>

<p>I never heard about named tuples before, and I thought elements could either be indexed by numbers (like in tuples and lists) or by keys (like in dicts). I never expected they could be indexed both ways.</p>

<p>Thus, my questions are:</p>

<ul>
<li>What are named tuples?</li>
<li>How to use them?</li>
<li>Why/when should I use named tuples instead of normal tuples?</li>
<li>Why/when should I use normal tuples instead of named tuples?</li>
<li>Is there any kind of ""named list"" (a mutable version of the named tuple)?</li>
</ul>
",<python><tuples><namedtuple>,named tuples tuple indexed normal instead use versioninfo unexpected mutable,"<p>Named tuples are basically easy-to-create, lightweight object types.  Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax.  They can be used similarly to <code>struct</code> or other common record types, except that they are immutable.  They were added in Python 2.6 and Python 3.0, although there is a <a href=""http://code.activestate.com/recipes/500261/"" rel=""noreferrer"">recipe for implementation in Python 2.4</a>.</p>

<p>For example, it is common to represent a point as a tuple <code>(x, y)</code>.  This leads to code like the following:</p>

<pre><code>pt1 = (1.0, 5.0)
pt2 = (2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
</code></pre>

<p>Using a named tuple it becomes more readable:</p>

<pre><code>from collections import namedtuple
Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)
</code></pre>

<p>However, named tuples are still backwards compatible with normal tuples, so the following will still work:</p>

<pre><code>Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
# use index referencing
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
 # use tuple unpacking
x1, y1 = pt1
</code></pre>

<p>Thus, <strong>you should use named tuples instead of tuples anywhere you think object notation will make your code more pythonic and more easily readable</strong>.  I personally have started using them to represent very simple value types, particularly when passing them as parameters to functions.  It makes the functions more readable, without seeing the context of the tuple packing.</p>

<p>Furthermore, <strong>you can also replace ordinary <em>immutable</em> classes that have no functions</strong>, only fields with them.  You can even use your named tuple types as base classes:</p>

<pre><code>class Point(namedtuple('Point', 'x y')):
    [...]
</code></pre>

<p>However, as with tuples, attributes in named tuples are immutable:</p>

<pre><code>&gt;&gt;&gt; Point = namedtuple('Point', 'x y')
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1.x = 2.0
AttributeError: can't set attribute
</code></pre>

<p>If you want to be able change the values, you need another type.  There is a handy recipe for <a href=""http://code.activestate.com/recipes/576555/"" rel=""noreferrer"">mutable recordtypes</a> which allow you to set new values to attributes.</p>

<pre><code>&gt;&gt;&gt; from rcdtype import *
&gt;&gt;&gt; Point = recordtype('Point', 'x y')
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1 = Point(1.0, 5.0)
&gt;&gt;&gt; pt1.x = 2.0
&gt;&gt;&gt; print(pt1[0])
    2.0
</code></pre>

<p>I am not aware of any form of ""named list"" that lets you add new fields, however.  You may just want to use a dictionary in this situation. Named tuples can be converted to dictionaries using <code>pt1._asdict()</code> which returns <code>{'x': 1.0, 'y': 5.0}</code> and can be operated upon with all the usual dictionary functions.  </p>

<p>As already noted, you should <a href=""http://docs.python.org/py3k/library/collections.html?highlight=namedtuple#collections.namedtuple"" rel=""noreferrer"">check the documentation</a> for more information from which these examples were constructed.</p>
",,
177,6,How do I install a Python package with a .whl file?,"<p>I'm having trouble installing a Python package on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for many other package installations). However, only .whl files are available.</p>

<p><a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype"" rel=""noreferrer"">http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype</a></p>

<p>But how do I install .whl files?</p>

<h2>Notes</h2>

<ul>
<li>I've found <a href=""https://wheel.readthedocs.org/en/latest/"" rel=""noreferrer"">documents on wheel</a>, but they don't seem so staightforward in explaining how to install .whl files.</li>
<li>This question is a duplicate with <a href=""https://stackoverflow.com/questions/27041264/how-to-install-whl-file-in-python-windows"">this question</a>, which wasn't directly answered.</li>
</ul>
","How do I install a Python package with a .whl file?<p>I'm having trouble installing a Python package on my Windows machine, and would like to install it with Christoph Gohlke's Window binaries. (Which, to my experience, alleviated much of the fuss for many other package installations). However, only .whl files are available.</p>

<p><a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype"" rel=""noreferrer"">http://www.lfd.uci.edu/~gohlke/pythonlibs/#jpype</a></p>

<p>But how do I install .whl files?</p>

<h2>Notes</h2>

<ul>
<li>I've found <a href=""https://wheel.readthedocs.org/en/latest/"" rel=""noreferrer"">documents on wheel</a>, but they don't seem so staightforward in explaining how to install .whl files.</li>
<li>This question is a duplicate with <a href=""https://stackoverflow.com/questions/27041264/how-to-install-whl-file-in-python-windows"">this question</a>, which wasn't directly answered.</li>
</ul>
",<python><pip><python-wheel><downloadfile><jpype>,whl install gohlke package files question duplicate staightforward uci binaries,"<p>I just used the following which was quite simple. First open a console then cd to where you've downloaded your file like some-package.whl and use</p>

<pre><code>pip install some-package.whl
</code></pre>

<p>Note: if pip.exe is not recognized, you may find it in the ""Scripts"" directory from where python has been installed. If pip is not installed, this page can help:
<a href=""https://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows"">How do I install pip on Windows?</a></p>

<p><em>Note: for clarification</em><br>
If you copy the <code>*.whl</code> file to your local drive (ex. <strong>C:\some-dir\some-file.whl</strong>) use the following command line parameters --  </p>

<pre><code>pip install C:/some-dir/some-file.whl
</code></pre>
",,
178,0,"How to overcome ""datetime.datetime not JSON serializable""?","<p>I have a basic dict as follows:</p>

<pre class=""lang-py prettyprint-override""><code>sample = {}
sample['title'] = ""String""
sample['somedate'] = somedatetimehere
</code></pre>

<p>When I try to do <code>jsonify(sample)</code> I get:</p>

<pre><code>TypeError: datetime.datetime(2012, 8, 8, 21, 46, 24, 862000) is not JSON serializable
</code></pre>

<p>What can I do such that my dictionary sample can overcome the error above?</p>

<p><strong>Note:</strong> Though it may not be relevant, the dictionaries are generated from the retrieval of records out of <code>mongodb</code> where when I print out <code>str(sample['somedate'])</code>, the output is <code>2012-08-08 21:46:24.862000</code>.</p>
","How to overcome ""datetime.datetime not JSON serializable""?<p>I have a basic dict as follows:</p>

<pre class=""lang-py prettyprint-override""><code>sample = {}
sample['title'] = ""String""
sample['somedate'] = somedatetimehere
</code></pre>

<p>When I try to do <code>jsonify(sample)</code> I get:</p>

<pre><code>TypeError: datetime.datetime(2012, 8, 8, 21, 46, 24, 862000) is not JSON serializable
</code></pre>

<p>What can I do such that my dictionary sample can overcome the error above?</p>

<p><strong>Note:</strong> Though it may not be relevant, the dictionaries are generated from the retrieval of records out of <code>mongodb</code> where when I print out <code>str(sample['somedate'])</code>, the output is <code>2012-08-08 21:46:24.862000</code>.</p>
",<python><json>,sample overcome datetime jsonify somedate retrieval serializable mongodb generated records,"<h1>Updated for 2018</h1>

<p>The original answer accommodated the way MongoDB ""date"" fields were represented as:</p>

<p><code>{""$date"": 1506816000000}</code></p>

<p>If you want a generic Python solution for serializing <code>datetime</code> to json, check out <a href=""https://stackoverflow.com/a/36142844/293064"">@jjmontes' answer</a> for a quick solution which requires no dependencies.</p>

<hr>

<p>As you are using mongoengine (per comments) and pymongo is a dependency, pymongo has built-in utilities to help with json serialization:<br>
<a href=""http://api.mongodb.org/python/1.10.1/api/bson/json_util.html"" rel=""noreferrer"">http://api.mongodb.org/python/1.10.1/api/bson/json_util.html</a></p>

<p>Example usage (serialization):</p>

<pre><code>from bson import json_util
import json

json.dumps(anObject, default=json_util.default)
</code></pre>

<p>Example usage (deserialization):</p>

<pre><code>json.loads(aJsonString, object_hook=json_util.object_hook)
</code></pre>

<hr>

<h2>Django</h2>

<p>Django provides a native <code>DjangoJSONEncoder</code> serializer that deals with this kind of properly.</p>

<p>See <a href=""https://docs.djangoproject.com/en/dev/topics/serialization/#djangojsonencoder"" rel=""noreferrer"">https://docs.djangoproject.com/en/dev/topics/serialization/#djangojsonencoder</a></p>

<pre><code>from django.core.serializers.json import DjangoJSONEncoder

return json.dumps(
  item,
  sort_keys=True,
  indent=1,
  cls=DjangoJSONEncoder
)
</code></pre>

<p>One difference I've noticed between <code>DjangoJSONEncoder</code> and using a custom <code>default</code> like this:</p>

<pre><code>import datetime
import json

def default(o):
    if isinstance(o, (datetime.date, datetime.datetime)):
        return o.isoformat()

return json.dumps(
  item,
  sort_keys=True,
  indent=1,
  default=default
)
</code></pre>

<p>Is that Django strips a bit of the data:</p>

<pre><code> ""last_login"": ""2018-08-03T10:51:42.990"", # DjangoJSONEncoder 
 ""last_login"": ""2018-08-03T10:51:42.990239"", # default
</code></pre>

<p>So, you may need to be careful about that in some cases.</p>
",,
179,4,Get difference between two lists,"<p>I have two lists in Python, like these:</p>
<pre><code>temp1 = ['One', 'Two', 'Three', 'Four']
temp2 = ['One', 'Two']
</code></pre>
<p>I need to create a third list with items from the first list which aren't present in the second one. From the example I have to get</p>
<pre><code>temp3 = ['Three', 'Four']
</code></pre>
<p>Are there any fast ways without cycles and checking?</p>
","Get difference between two lists<p>I have two lists in Python, like these:</p>
<pre><code>temp1 = ['One', 'Two', 'Three', 'Four']
temp2 = ['One', 'Two']
</code></pre>
<p>I need to create a third list with items from the first list which aren't present in the second one. From the example I have to get</p>
<pre><code>temp3 = ['Three', 'Four']
</code></pre>
<p>Are there any fast ways without cycles and checking?</p>
",<python><performance><list><set><set-difference>,getare listsi cycles present fast list checking ways items second,"<p>To get elements which are in <code>temp1</code> but not in <code>temp2</code>ƒ??:</p>
<pre><code>In [5]: list(set(temp1) - set(temp2))
Out[5]: ['Four', 'Three']
</code></pre>
<p>Beware that it is asymmetricƒ??:</p>
<pre><code>In [5]: set([1, 2]) - set([2, 3])
Out[5]: set([1]) 
</code></pre>
<p>where you might expect/want it to equal <code>set([1, 3])</code>. If you do want <code>set([1, 3])</code> as your answer, you can use <code>set([1, 2]).symmetric_difference(set([2, 3]))</code>.</p>
",,
180,3,"Should I put #! (shebang) in Python scripts, and what form should it take?","<p>Should I put the shebang in my Python scripts? In what form?</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python 
</code></pre>

<p>or</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/local/bin/python
</code></pre>

<p>Are these equally portable? Which form is used most?</p>

<p><strong><em>Note:</em></strong> the <a href=""https://github.com/facebook/tornado"" rel=""noreferrer"">tornado</a> project uses the shebang. On the other hand the <a href=""https://www.djangoproject.com/"" rel=""noreferrer"">Django</a> project doesn't.</p>
","Should I put #! (shebang) in Python scripts, and what form should it take?<p>Should I put the shebang in my Python scripts? In what form?</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python 
</code></pre>

<p>or</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/local/bin/python
</code></pre>

<p>Are these equally portable? Which form is used most?</p>

<p><strong><em>Note:</em></strong> the <a href=""https://github.com/facebook/tornado"" rel=""noreferrer"">tornado</a> project uses the shebang. On the other hand the <a href=""https://www.djangoproject.com/"" rel=""noreferrer"">Django</a> project doesn't.</p>
",<python><shell><python-3.x><shebang>,shebang form scripts project tornado hand orare equally portable uses,"<p>The shebang line in any script determines the script's ability to be executed like a standalone executable without typing <code>python</code> beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use <strong>IS</strong> important.</p>
<p><strong>Correct</strong> usage for (defaults to version 3.latest)<strong>Python 3</strong> scripts is:</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python3
</code></pre>
<p><strong>Correct</strong> usage for (defaults to version 2.latest)<strong>Python 2</strong> scripts is:</p>

<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python2
</code></pre>
<p>The following <strong>should NOT be used</strong> (except for the rare case that you are writing code which is compatible with both Python 2.x and 3.x):</p>
<pre class=""lang-none prettyprint-override""><code>#!/usr/bin/env python
</code></pre>
<p>The reason for these recommendations, given in <a href=""https://www.python.org/dev/peps/pep-0394/#recommendation"" rel=""noreferrer"" title=""PEP 394"">PEP 394</a>, is that <code>python</code> can refer either to <code>python2</code> or <code>python3</code> on different systems. It currently refers to <code>python2</code> on most distributions, but that is likely to change at some point.</p>
<p><strong>Also, DO NOT Use:</strong></p>
<pre class=""lang-none prettyprint-override""><code>#!/usr/local/bin/python
</code></pre>
<blockquote>
<p>&quot;python may be installed at /usr/bin/python or /bin/python in those
cases, the above #! will fail.&quot;</p>
</blockquote>
<p>--<a href=""https://mail.python.org/pipermail/tutor/2007-June/054816.html"" rel=""noreferrer"">&quot;#!/usr/bin/env python&quot; vs &quot;#!/usr/local/bin/python&quot;</a></p>
",,
181,3,What is the correct cross-platform way to get the home directory in Python?,"<p>I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:</p>
<pre class=""lang-py prettyprint-override""><code>os.getenv(&quot;HOME&quot;)
</code></pre>
<p>However, this does not work on Windows. What is the correct cross-platform way to do this ?</p>
","What is the correct cross-platform way to get the home directory in Python?<p>I need to get the location of the home directory of the current logged-on user. Currently, I've been using the following on Linux:</p>
<pre class=""lang-py prettyprint-override""><code>os.getenv(&quot;HOME&quot;)
</code></pre>
<p>However, this does not work on Windows. What is the correct cross-platform way to do this ?</p>
",<python><cross-platform><home-directory>,home cross platform correct directory logged location linux currently windows,"<p>You want to use <a href=""http://docs.python.org/library/os.path.html?highlight=os.path#os.path.expanduser"" rel=""noreferrer"">os.path.expanduser</a>.<br>
This will ensure it works on all platforms:</p>

<pre><code>from os.path import expanduser
home = expanduser(""~"")
</code></pre>

<p>If you're on <strong>Python 3.5+</strong> you can use <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.home"" rel=""noreferrer"">pathlib.Path.home()</a>:</p>

<pre><code>from pathlib import Path
home = str(Path.home())
</code></pre>
",,
182,3,Checking whether a variable is an integer or not,"<p>How do I check whether a variable is an integer?</p>
","Checking whether a variable is an integer or not<p>How do I check whether a variable is an integer?</p>
",<python><integer>,integer variable nothow checking check forgotten  formatting formatted formats,"<p>If you need to do this, do</p>
<pre><code>isinstance(&lt;var&gt;, int)
</code></pre>
<p>unless you are in Python 2.x in which case you want</p>
<pre><code>isinstance(&lt;var&gt;, (int, long))
</code></pre>
<p>Do not use <code>type</code>. It is almost never the right answer in Python, since it blocks all the flexibility of polymorphism. For instance, if you subclass <code>int</code>, your new class should register as an <code>int</code>, which <code>type</code> will not do:</p>
<pre><code>class Spam(int): pass
x = Spam(0)
type(x) == int # False
isinstance(x, int) # True
</code></pre>
<p>This adheres to Python's strong polymorphism: you should allow any object that behaves like an <code>int</code>, instead of mandating that it be one.</p>
<h1>BUT</h1>
<p>The classical Python mentality, though, is that it's <em>easier to ask forgiveness than permission</em>. In other words, don't check whether <code>x</code> is an integer; assume that it is and catch the exception results if it isn't:</p>
<pre><code>try:
    x += 1
except TypeError:
    ...
</code></pre>
<p>This mentality is slowly being overtaken by the use of <a href=""http://docs.python.org/library/abc.html"" rel=""noreferrer"">abstract base classes</a>, which let you register exactly what properties your object should have (adding? multiplying? doubling?) by making it inherit from a specially-constructed class. That would be the best solution, since it will permit <em>exactly</em> those objects with the necessary and sufficient attributes, but you will have to read the docs on how to use it.</p>
",,
183,3,Should I use 'has_key()' or 'in' on Python dicts?,"<p>I wonder what is better to do:</p>

<pre><code>d = {'a': 1, 'b': 2}
'a' in d
True
</code></pre>

<p>or:</p>

<pre><code>d = {'a': 1, 'b': 2}
d.has_key('a')
True
</code></pre>
","Should I use 'has_key()' or 'in' on Python dicts?<p>I wonder what is better to do:</p>

<pre><code>d = {'a': 1, 'b': 2}
'a' in d
True
</code></pre>

<p>or:</p>

<pre><code>d = {'a': 1, 'b': 2}
d.has_key('a')
True
</code></pre>
",<python><dictionary>,haskey dicts wonder better use python forgotten formatting formatted formats,"<p><code>in</code> is definitely more pythonic.</p>

<p>In fact <a href=""http://docs.python.org/3.1/whatsnew/3.0.html#builtins"" rel=""noreferrer""><code>has_key()</code> was removed in Python 3.x</a>.</p>
",,
184,3,Get the data received in a Flask request,"<p>I want to be able to get the data sent to my Flask app. I've tried accessing <code>request.data</code> but it is an empty string. How do you access request data?</p>

<pre class=""lang-py prettyprint-override""><code>from flask import request

@app.route('/', methods=['GET', 'POST'])
def parse_request():
    data = request.data  # data is empty
    # need posted data here
</code></pre>

<hr>

<p>The answer to this question led me to ask <a href=""https://stackoverflow.com/q/10999990"">Get raw POST body in Python Flask regardless of Content-Type header</a> next, which is about getting the raw data rather than the parsed data.</p>
","Get the data received in a Flask request<p>I want to be able to get the data sent to my Flask app. I've tried accessing <code>request.data</code> but it is an empty string. How do you access request data?</p>

<pre class=""lang-py prettyprint-override""><code>from flask import request

@app.route('/', methods=['GET', 'POST'])
def parse_request():
    data = request.data  # data is empty
    # need posted data here
</code></pre>

<hr>

<p>The answer to this question led me to ask <a href=""https://stackoverflow.com/q/10999990"">Get raw POST body in Python Flask regardless of Content-Type header</a> next, which is about getting the raw data rather than the parsed data.</p>
",<python><flask><werkzeug>,data flask raw request body request parsed led received sent,"<p>The <a href=""https://flask.palletsprojects.com/api/#flask.Request"" rel=""noreferrer"">docs</a> describe the attributes available on the <code>request</code> object (<code>from flask import request</code>) during a request. In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>
<blockquote>
<p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>
</blockquote>
<ul>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.args"" rel=""noreferrer""><code>request.args</code></a>: the key/value pairs in the URL query string</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.form"" rel=""noreferrer""><code>request.form</code></a>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.files"" rel=""noreferrer""><code>request.files</code></a>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.values"" rel=""noreferrer""><code>request.values</code></a>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>
<li><a href=""https://flask.palletsprojects.com/api/#flask.Request.json"" rel=""noreferrer""><code>request.json</code></a>: parsed JSON data. The request must have the <code>application/json</code> content type, or use <a href=""https://flask.palletsprojects.com/api/#flask.Request.get_json"" rel=""noreferrer""><code>request.get_json(force=True)</code></a> to ignore the content type.</li>
</ul>
<p>All of these are <a href=""https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict"" rel=""noreferrer""><code>MultiDict</code></a> instances (except for <code>json</code>). You can access values using:</p>
<ul>
<li><code>request.form['name']</code>: use indexing if you know the key exists</li>
<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>
<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>
</ul>
",,
185,6,Find all files in a directory with extension .txt in Python,"<p>How can I find all the files in a directory having the extension <code>.txt</code> in python?</p>
","Find all files in a directory with extension .txt in Python<p>How can I find all the files in a directory having the extension <code>.txt</code> in python?</p>
",<python><file-io>,extension txt files directory python followed forget formatted formats,"<p>You can use <a href=""https://docs.python.org/2/library/glob.html"" rel=""noreferrer""><code>glob</code></a>:</p>

<pre><code>import glob, os
os.chdir(""/mydir"")
for file in glob.glob(""*.txt""):
    print(file)
</code></pre>

<p>or simply <a href=""https://docs.python.org/2/library/os.html#os.listdir"" rel=""noreferrer""><code>os.listdir</code></a>:</p>

<pre><code>import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(os.path.join(""/mydir"", file))
</code></pre>

<p>or if you want to traverse directory, use <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk</code></a>:</p>

<pre><code>import os
for root, dirs, files in os.walk(""/mydir""):
    for file in files:
        if file.endswith("".txt""):
             print(os.path.join(root, file))
</code></pre>
",,
186,3,How to print an exception in Python?,"<pre><code>try:
    something here
except:
    print('the whatever error occurred.')
</code></pre>

<p>How can I print the error/exception in my <code>except:</code> block?</p>
","How to print an exception in Python?<pre><code>try:
    something here
except:
    print('the whatever error occurred.')
</code></pre>

<p>How can I print the error/exception in my <code>except:</code> block?</p>
",<python><exception><error-handling>,exception print block error python zone formatting formatted,"<p>For Python 2.6 and later and Python 3.x:</p>

<pre><code>except Exception as e: print(e)
</code></pre>

<p>For Python 2.5 and earlier, use:</p>

<pre><code>except Exception,e: print str(e)
</code></pre>
",,
187,5,Remove all whitespace in a string,"<p>I want to eliminate all the whitespace from a string, on both ends, and in between words.</p>
<p>I have this Python code:</p>
<pre><code>def my_handle(self):
    sentence = ' hello  apple  '
    sentence.strip()
</code></pre>
<p>But that only eliminates the whitespace on both sides of the string. How do I remove all whitespace?</p>
","Remove all whitespace in a string<p>I want to eliminate all the whitespace from a string, on both ends, and in between words.</p>
<p>I have this Python code:</p>
<pre><code>def my_handle(self):
    sentence = ' hello  apple  '
    sentence.strip()
</code></pre>
<p>But that only eliminates the whitespace on both sides of the string. How do I remove all whitespace?</p>
",<python><trim><removing-whitespace>,whitespace remove eliminate sides ends eliminates string words code,"<p>If you want to remove leading and ending spaces, use <a href=""http://docs.python.org/2/library/stdtypes.html#str.strip"" rel=""noreferrer""><code>str.strip()</code></a>: </p>

<pre><code>sentence = ' hello  apple'
sentence.strip()
&gt;&gt;&gt; 'hello  apple'
</code></pre>

<p>If you want to remove all space characters, use <a href=""http://docs.python.org/2/library/stdtypes.html#str.replace"" rel=""noreferrer""><code>str.replace()</code></a>:</p>

<p><em>(NB this only removes the ƒ??normalƒ? ASCII space character <code>' ' U+0020</code> but not <a href=""https://en.wikipedia.org/wiki/Whitespace_character#Unicode"" rel=""noreferrer"">any other whitespace</a>)</em></p>

<pre><code>sentence = ' hello  apple'
sentence.replace("" "", """")
&gt;&gt;&gt; 'helloapple'
</code></pre>

<p>If you want to remove duplicated spaces, use <a href=""http://docs.python.org/2/library/stdtypes.html#str.split"" rel=""noreferrer""><code>str.split()</code></a>:</p>

<pre><code>sentence = ' hello  apple'
"" "".join(sentence.split())
&gt;&gt;&gt; 'hello apple'
</code></pre>
",,
188,6,How to import other Python files?,"<p>How do I import other files in Python?</p>

<ol>
<li>How exactly can I import a specific python file like <code>import file.py</code>?</li>
<li>How can I import a folder instead of a specific file?</li>
<li>I want to load a Python file dynamically at runtime, based on user
input.</li>
<li>I want to know how to load just one specific part from the file.</li>
</ol>

<p>For example, in <code>main.py</code> I have:</p>

<pre><code>from extra import * 
</code></pre>

<p>Although this gives me all the definitions in <code>extra.py</code>, when maybe all I want is a single definition:</p>

<pre><code>def gap():
    print
    print
</code></pre>

<p>What do I add to the <code>import</code> statement to just get <code>gap</code> from <code>extra.py</code>?</p>
","How to import other Python files?<p>How do I import other files in Python?</p>

<ol>
<li>How exactly can I import a specific python file like <code>import file.py</code>?</li>
<li>How can I import a folder instead of a specific file?</li>
<li>I want to load a Python file dynamically at runtime, based on user
input.</li>
<li>I want to know how to load just one specific part from the file.</li>
</ol>

<p>For example, in <code>main.py</code> I have:</p>

<pre><code>from extra import * 
</code></pre>

<p>Although this gives me all the definitions in <code>extra.py</code>, when maybe all I want is a single definition:</p>

<pre><code>def gap():
    print
    print
</code></pre>

<p>What do I add to the <code>import</code> statement to just get <code>gap</code> from <code>extra.py</code>?</p>
",<python><python-import><python-module><python-packaging>,import py file specific load extra files want dynamically userinput,"<p><a href=""https://docs.python.org/3/library/importlib.html#module-importlib"" rel=""noreferrer""><code>importlib</code></a> was added to Python 3 to programmatically import a module.</p>
<pre class=""lang-python prettyprint-override""><code>import importlib

moduleName = input('Enter module name:')
importlib.import_module(moduleName)
</code></pre>
<p>The .py extension should be removed from <code>moduleName</code>. The function also defines a <code>package</code> argument for relative imports.</p>
<p>In python 2.x:</p>
<ul>
<li>Just <code>import file</code> without the .py extension</li>
<li>A folder can be marked as a package, by adding an empty <code>__init__.py</code> file</li>
<li>You can use the <code>__import__</code> function, which takes the module name (without extension) as a string extension</li>
</ul>
<pre class=""lang-python prettyprint-override""><code>pmName = input('Enter module name:')
pm = __import__(pmName)
print(dir(pm))
</code></pre>
<p>Type <code>help(__import__)</code> for more details.</p>
",,
189,3,How do you test that a Python function throws an exception?,"<p>How does one write a unittest that fails only if a function doesn't throw an expected exception?</p>
","How do you test that a Python function throws an exception?<p>How does one write a unittest that fails only if a function doesn't throw an expected exception?</p>
",<python><unit-testing><exception>,exception throw unittest function throws fails expected test write python,"<p>Use <a href=""http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises"" rel=""noreferrer""><code>TestCase.assertRaises</code></a> (or <code>TestCase.failUnlessRaises</code>) from the unittest module, for example:</p>

<pre><code>import mymod

class MyTestCase(unittest.TestCase):
    def test1(self):
        self.assertRaises(SomeCoolException, mymod.myfunc)
</code></pre>
",,
190,3,How to deal with SettingWithCopyWarning in Pandas,"<h2>Background</h2>
<p>I just upgraded my Pandas from 0.11 to 0.13.0rc1. Now, the application is popping out many new warnings. One of them like this:</p>
<pre><code>E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
</code></pre>
<p>I want to know what exactly it means?  Do I need to change something?</p>
<p>How should I suspend the warning if I insist to use <code>quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE</code>?</p>
<h2>The function that gives errors</h2>
<pre><code>def _decode_stock_quote(list_of_150_stk_str):
    &quot;&quot;&quot;decode the webpage and return dataframe&quot;&quot;&quot;

    from cStringIO import StringIO

    str_of_all = &quot;&quot;.join(list_of_150_stk_str)

    quote_df = pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}
    quote_df.rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)
    quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]
    quote_df['TClose'] = quote_df['TPrice']
    quote_df['RT']     = 100 * (quote_df['TPrice']/quote_df['TPCLOSE'] - 1)
    quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
    quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
    quote_df['STK_ID'] = quote_df['STK'].str.slice(13,19)
    quote_df['STK_Name'] = quote_df['STK'].str.slice(21,30)#.decode('gb2312')
    quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
    
    return quote_df
</code></pre>
<h2>More error messages</h2>
<pre><code>E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
E:\FinReporter\FM_EXT.py:450: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
E:\FinReporter\FM_EXT.py:453: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
</code></pre>
","How to deal with SettingWithCopyWarning in Pandas<h2>Background</h2>
<p>I just upgraded my Pandas from 0.11 to 0.13.0rc1. Now, the application is popping out many new warnings. One of them like this:</p>
<pre><code>E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
</code></pre>
<p>I want to know what exactly it means?  Do I need to change something?</p>
<p>How should I suspend the warning if I insist to use <code>quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE</code>?</p>
<h2>The function that gives errors</h2>
<pre><code>def _decode_stock_quote(list_of_150_stk_str):
    &quot;&quot;&quot;decode the webpage and return dataframe&quot;&quot;&quot;

    from cStringIO import StringIO

    str_of_all = &quot;&quot;.join(list_of_150_stk_str)

    quote_df = pd.read_csv(StringIO(str_of_all), sep=',', names=list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefg')) #dtype={'A': object, 'B': object, 'C': np.float64}
    quote_df.rename(columns={'A':'STK', 'B':'TOpen', 'C':'TPCLOSE', 'D':'TPrice', 'E':'THigh', 'F':'TLow', 'I':'TVol', 'J':'TAmt', 'e':'TDate', 'f':'TTime'}, inplace=True)
    quote_df = quote_df.ix[:,[0,3,2,1,4,5,8,9,30,31]]
    quote_df['TClose'] = quote_df['TPrice']
    quote_df['RT']     = 100 * (quote_df['TPrice']/quote_df['TPCLOSE'] - 1)
    quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
    quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
    quote_df['STK_ID'] = quote_df['STK'].str.slice(13,19)
    quote_df['STK_Name'] = quote_df['STK'].str.slice(21,30)#.decode('gb2312')
    quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
    
    return quote_df
</code></pre>
<h2>More error messages</h2>
<pre><code>E:\FinReporter\FM_EXT.py:449: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TVol']   = quote_df['TVol']/TVOL_SCALE
E:\FinReporter\FM_EXT.py:450: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TAmt']   = quote_df['TAmt']/TAMT_SCALE
E:\FinReporter\FM_EXT.py:453: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  quote_df['TDate']  = quote_df.TDate.map(lambda x: x[0:4]+x[5:7]+x[8:10])
</code></pre>
",<python><pandas><dataframe><chained-assignment>,quotedf tvol pandas background insist tvolscale popping upgraded errorsmore rc settingwithcopywarning,"<p>The <code>SettingWithCopyWarning</code> was created to flag potentially confusing &quot;chained&quot; assignments, such as the following, which does not always work as expected, particularly when the first selection returns a <em>copy</em>.  [see <a href=""https://github.com/pydata/pandas/pull/5390"" rel=""noreferrer"">GH5390</a> and <a href=""https://github.com/pydata/pandas/issues/5597"" rel=""noreferrer"">GH5597</a> for background discussion.]</p>
<pre><code>df[df['A'] &gt; 2]['B'] = new_val  # new_val not set in df
</code></pre>
<p>The warning offers a suggestion to rewrite as follows:</p>
<pre><code>df.loc[df['A'] &gt; 2, 'B'] = new_val
</code></pre>
<p>However, this doesn't fit your usage, which is equivalent to:</p>
<pre><code>df = df[df['A'] &gt; 2]
df['B'] = new_val
</code></pre>
<p>While it's clear that you don't care about writes making it back to the original frame (since you are overwriting the reference to it), unfortunately this pattern cannot be differentiated from the first chained assignment example. Hence the (false positive) warning. The potential for false positives is addressed in the <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy"" rel=""noreferrer"">docs on indexing</a>, if you'd like to read further.  You can safely disable this new warning with the following assignment.</p>
<pre><code>import pandas as pd
pd.options.mode.chained_assignment = None  # default='warn'
</code></pre>
<hr />
<h2>Other Resources</h2>
<ul>
<li><a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html"" rel=""noreferrer"">pandas User Guide: Indexing and selecting data</a></li>
<li><a href=""https://jakevdp.github.io/PythonDataScienceHandbook/03.02-data-indexing-and-selection.html"" rel=""noreferrer"">Python Data Science Handbook: Data Indexing and Selection</a></li>
<li><a href=""https://realpython.com/pandas-settingwithcopywarning/"" rel=""noreferrer"">Real Python: SettingWithCopyWarning in Pandas: Views vs Copies</a></li>
<li><a href=""https://www.dataquest.io/blog/settingwithcopywarning/"" rel=""noreferrer"">Dataquest: SettingwithCopyWarning: How to Fix This Warning in Pandas</a></li>
<li><a href=""https://towardsdatascience.com/explaining-the-settingwithcopywarning-in-pandas-ebc19d799d25"" rel=""noreferrer"">Towards Data Science: Explaining the SettingWithCopyWarning in pandas</a></li>
</ul>
",,
191,2,Use a list of values to select rows from a Pandas dataframe,"<p>Letƒ??s say I have the following Pandas dataframe:</p>
<pre><code>df = DataFrame({'A' : [5,6,3,4], 'B' : [1,2,3, 5]})
df

     A   B
0    5   1
1    6   2
2    3   3
3    4   5
</code></pre>
<p>I can subset based on a specific value:</p>
<pre><code>x = df[df['A'] == 3]
x

     A   B
2    3   3
</code></pre>
<p>But how can I subset based on a list of values? - something like this:</p>
<pre><code>list_of_values = [3,6]

y = df[df['A'] in list_of_values]
</code></pre>
<p>To get:</p>
<pre><code>     A    B
1    6    2
2    3    3
</code></pre>
","Use a list of values to select rows from a Pandas dataframe<p>Letƒ??s say I have the following Pandas dataframe:</p>
<pre><code>df = DataFrame({'A' : [5,6,3,4], 'B' : [1,2,3, 5]})
df

     A   B
0    5   1
1    6   2
2    3   3
3    4   5
</code></pre>
<p>I can subset based on a specific value:</p>
<pre><code>x = df[df['A'] == 3]
x

     A   B
2    3   3
</code></pre>
<p>But how can I subset based on a list of values? - something like this:</p>
<pre><code>list_of_values = [3,6]

y = df[df['A'] in list_of_values]
</code></pre>
<p>To get:</p>
<pre><code>     A    B
1    6    2
2    3    3
</code></pre>
",<python><pandas><dataframe>,subset based pandas values dataframe list select rows specific say,"<p>You can use the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html"" rel=""noreferrer""><code>isin</code></a> method:</p>
<pre><code>In [1]: df = pd.DataFrame({'A': [5,6,3,4], 'B': [1,2,3,5]})

In [2]: df
Out[2]:
   A  B
0  5  1
1  6  2
2  3  3
3  4  5

In [3]: df[df['A'].isin([3, 6])]
Out[3]:
   A  B
1  6  2
2  3  3
</code></pre>
<p>And to get the opposite use <code>~</code>:</p>
<pre><code>In [4]: df[~df['A'].isin([3, 6])]
Out[4]:
   A  B
0  5  1
3  4  5
</code></pre>
",,
192,4,How to sort a list of objects based on an attribute of the objects?,"<p>I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:</p>

<pre><code>&gt;&gt;&gt; ut
[&lt;Tag: 128&gt;, &lt;Tag: 2008&gt;, &lt;Tag: &lt;&gt;, &lt;Tag: actionscript&gt;, &lt;Tag: addresses&gt;,
 &lt;Tag: aes&gt;, &lt;Tag: ajax&gt; ...]
</code></pre>

<p>Each object has a count:</p>

<pre><code>&gt;&gt;&gt; ut[1].count
1L
</code></pre>

<p>I need to sort the list by number of counts descending.</p>

<p>I've seen several methods for this, but I'm looking for best practice in Python.</p>
","How to sort a list of objects based on an attribute of the objects?<p>I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:</p>

<pre><code>&gt;&gt;&gt; ut
[&lt;Tag: 128&gt;, &lt;Tag: 2008&gt;, &lt;Tag: &lt;&gt;, &lt;Tag: actionscript&gt;, &lt;Tag: addresses&gt;,
 &lt;Tag: aes&gt;, &lt;Tag: ajax&gt; ...]
</code></pre>

<p>Each object has a count:</p>

<pre><code>&gt;&gt;&gt; ut[1].count
1L
</code></pre>

<p>I need to sort the list by number of counts descending.</p>

<p>I've seen several methods for this, but I'm looking for best practice in Python.</p>
",<python><list><sorting><oop><count>,objects sort list attribute counts practice descending count seen based,"<pre><code># To sort the list in place...
ut.sort(key=lambda x: x.count, reverse=True)

# To return a new list, use the sorted() built-in function...
newlist = sorted(ut, key=lambda x: x.count, reverse=True)
</code></pre>

<p>More on <a href=""http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys"" rel=""noreferrer"">sorting by keys</a>. </p>
",,
193,3,Maximum and Minimum values for ints,"<p>I am looking for minimum and maximum values for integers in python. For eg., in Java, we have <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code>. Is there something like this in python?</p>
","Maximum and Minimum values for ints<p>I am looking for minimum and maximum values for integers in python. For eg., in Java, we have <code>Integer.MIN_VALUE</code> and <code>Integer.MAX_VALUE</code>. Is there something like this in python?</p>
",<python><integer>,minimum maximum integer values intsi minvalue maxvalue java integers looking,"<h3>Python 3</h3>

<p>In Python 3, this question doesn't apply. The plain <code>int</code> type is unbounded.</p>

<p>However, you might actually be looking for information about the current interpreter's <em><a href=""http://en.wikipedia.org/wiki/Word_(computer_architecture)#Table_of_word_sizes"" rel=""noreferrer"">word size</a></em>, which will be the same as the machine's word size in most cases. That information is still available in Python 3 as <code>sys.maxsize</code>, which is the maximum value representable by a signed word. Equivalently, it's the size of the largest possible list or in-memory <a href=""https://docs.python.org/3.9/library/sys.html#sys.maxsize"" rel=""noreferrer"">sequence</a>.</p>

<p>Generally, the maximum value representable by an unsigned word will be <code>sys.maxsize * 2 + 1</code>, and the number of bits in a word will be <code>math.log2(sys.maxsize * 2 + 2)</code>. See <a href=""https://stackoverflow.com/a/6918334/577088"">this answer</a> for more information.</p>

<h3>Python 2</h3>

<p>In Python 2, the maximum value for plain <code>int</code> values is available as <code>sys.maxint</code>:</p>

<pre><code>&gt;&gt;&gt; sys.maxint
9223372036854775807
</code></pre>

<p>You can calculate the minimum value with <code>-sys.maxint - 1</code> as shown <a href=""https://docs.python.org/2/library/sys.html#sys.maxint"" rel=""noreferrer"">here</a>. </p>

<p>Python seamlessly switches from plain to long integers once you exceed this value. So most of the time, you won't need to know it.</p>
",,
194,6,How to download a file over HTTP?,"<p>I have a small utility that I use to download an MP3 file from a website on a schedule and then builds/updates a podcast XML file which I've added to iTunes.</p>

<p>The text processing that creates/updates the XML file is written in Python. However, I use wget inside a Windows <code>.bat</code> file to download the actual MP3 file. I would prefer to have the entire utility written in Python.</p>

<p>I struggled to find a way to actually download the file in Python, thus why I resorted to using <code>wget</code>.</p>

<p>So, how do I download the file using Python?</p>
","How to download a file over HTTP?<p>I have a small utility that I use to download an MP3 file from a website on a schedule and then builds/updates a podcast XML file which I've added to iTunes.</p>

<p>The text processing that creates/updates the XML file is written in Python. However, I use wget inside a Windows <code>.bat</code> file to download the actual MP3 file. I would prefer to have the entire utility written in Python.</p>

<p>I struggled to find a way to actually download the file in Python, thus why I resorted to using <code>wget</code>.</p>

<p>So, how do I download the file using Python?</p>
",<python><http><urllib>,download file mp utility updates wget xml written podcast struggled,"<p>Use <a href=""https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen"" rel=""noreferrer""><code>urllib.request.urlopen()</code></a>:</p>
<pre><code>import urllib.request
with urllib.request.urlopen('http://www.example.com/') as f:
    html = f.read().decode('utf-8')
</code></pre>
<p>This is the most basic way to use the library, minus any error handling. You can also do more complex stuff such as changing headers.</p>
<p>On Python 2, the method is in <a href=""http://docs.python.org/2/library/urllib2.html"" rel=""noreferrer""><code>urllib2</code></a>:</p>
<pre><code>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read()
</code></pre>
",,
195,0,Convert a String representation of a Dictionary to a dictionary?,"<p>How can I convert the <code>str</code> representation of a <code>dict</code>, such as the following string, into a <code>dict</code>?</p>

<pre><code>s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}""
</code></pre>

<p>I prefer not to use <code>eval</code>. What else can I use?</p>

<p>The main reason for this, is one of my coworkers classes he wrote, converts all input into strings. I'm not in the mood to go and modify his classes, to deal with this issue.</p>
","Convert a String representation of a Dictionary to a dictionary?<p>How can I convert the <code>str</code> representation of a <code>dict</code>, such as the following string, into a <code>dict</code>?</p>

<pre><code>s = ""{'muffin' : 'lolz', 'foo' : 'kitty'}""
</code></pre>

<p>I prefer not to use <code>eval</code>. What else can I use?</p>

<p>The main reason for this, is one of my coworkers classes he wrote, converts all input into strings. I'm not in the mood to go and modify his classes, to deal with this issue.</p>
",<python><string><dictionary>,representation dict classes convert dictionary coworkers mood converts eval string,"<p>You can use the built-in <a href=""https://docs.python.org/library/ast.html#ast.literal_eval"" rel=""noreferrer""><code>ast.literal_eval</code></a>:</p>
<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(&quot;{'muffin' : 'lolz', 'foo' : 'kitty'}&quot;)
{'muffin': 'lolz', 'foo': 'kitty'}
</code></pre>
<p>This is safer than using <code>eval</code>.  As its own docs say:</p>
<pre>
>>> help(ast.literal_eval)
Help on function literal_eval in module ast:

literal_eval(node_or_string)
    Safely evaluate an expression node or a string containing a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,
    and None.
</pre>
<p>For example:</p>
<pre><code>&gt;&gt;&gt; eval(&quot;shutil.rmtree('mongo')&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/opt/Python-2.6.1/lib/python2.6/shutil.py&quot;, line 208, in rmtree
    onerror(os.listdir, path, sys.exc_info())
  File &quot;/opt/Python-2.6.1/lib/python2.6/shutil.py&quot;, line 206, in rmtree
    names = os.listdir(path)
OSError: [Errno 2] No such file or directory: 'mongo'
&gt;&gt;&gt; ast.literal_eval(&quot;shutil.rmtree('mongo')&quot;)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
  File &quot;/opt/Python-2.6.1/lib/python2.6/ast.py&quot;, line 68, in literal_eval
    return _convert(node_or_string)
  File &quot;/opt/Python-2.6.1/lib/python2.6/ast.py&quot;, line 67, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</code></pre>
",,
196,6,How do I remove/delete a folder that is not empty?,"<p>I am getting an 'access is denied' error when I attempt to delete a folder that is not empty. I used the following command in my attempt: <code>os.remove(""/folder_name"")</code>. </p>

<p>What is the most effective way of removing/deleting a folder/directory that is not empty?</p>
","How do I remove/delete a folder that is not empty?<p>I am getting an 'access is denied' error when I attempt to delete a folder that is not empty. I used the following command in my attempt: <code>os.remove(""/folder_name"")</code>. </p>

<p>What is the most effective way of removing/deleting a folder/directory that is not empty?</p>
",<python><file>,folder attempt delete remove denied effective foldername deleting removing os,"<pre><code>import shutil

shutil.rmtree('/folder_name')
</code></pre>

<p><a href=""http://docs.python.org/library/shutil.html#shutil.rmtree"" rel=""noreferrer"">Standard Library Reference: shutil.rmtree</a>.</p>

<p>By design, <code>rmtree</code> fails on folder trees containing read-only files. If you want the folder to be deleted regardless of whether it contains read-only files, then use</p>

<pre><code>shutil.rmtree('/folder_name', ignore_errors=True)
</code></pre>
",,
197,4,List comprehension vs. lambda + filter,"<p>I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.</p>

<p>My code looked like this:</p>

<pre><code>my_list = [x for x in my_list if x.attribute == value]
</code></pre>

<p>But then I thought, wouldn't it be better to write it like this?</p>

<pre><code>my_list = filter(lambda x: x.attribute == value, my_list)
</code></pre>

<p>It's more readable, and if needed for performance the lambda could be taken out to gain something.  </p>

<p>Question is: are there any caveats in using the second way? Any performance difference? Am I missing the Pythonic Wayƒ?› entirely and should do it in yet another way (such as using itemgetter instead of the lambda)?</p>
","List comprehension vs. lambda + filter<p>I happened to find myself having a basic filtering need: I have a list and I have to filter it by an attribute of the items.</p>

<p>My code looked like this:</p>

<pre><code>my_list = [x for x in my_list if x.attribute == value]
</code></pre>

<p>But then I thought, wouldn't it be better to write it like this?</p>

<pre><code>my_list = filter(lambda x: x.attribute == value, my_list)
</code></pre>

<p>It's more readable, and if needed for performance the lambda could be taken out to gain something.  </p>

<p>Question is: are there any caveats in using the second way? Any performance difference? Am I missing the Pythonic Wayƒ?› entirely and should do it in yet another way (such as using itemgetter instead of the lambda)?</p>
",<python><list><functional-programming><filter><lambda>,lambda performance happened caveats gain filter entirely way itemgetter readable,"<p>It is strange how much beauty varies for different people. I find the list comprehension much clearer than <code>filter</code>+<code>lambda</code>, but use whichever you find easier.</p>

<p>There are two things that may slow down your use of <code>filter</code>.</p>

<p>The first is the function call overhead: as soon as you use a Python function (whether created by <code>def</code> or <code>lambda</code>) it is likely that filter will be slower than the list comprehension. It almost certainly is not enough to matter, and you shouldn't think much about performance until you've timed your code and found it to be a bottleneck, but the difference will be there.</p>

<p>The other overhead that might apply is that the lambda is being forced to access a scoped variable (<code>value</code>). That is slower than accessing a local variable and in Python 2.x the list comprehension only accesses local variables. If you are using Python 3.x the list comprehension runs in a separate function so it will also be accessing <code>value</code> through a closure and this difference won't apply.</p>

<p>The other option to consider is to use a generator instead of a list comprehension:</p>

<pre><code>def filterbyvalue(seq, value):
   for el in seq:
       if el.attribute==value: yield el
</code></pre>

<p>Then in your main code (which is where readability really matters) you've replaced both list comprehension and filter with a hopefully meaningful function name.</p>
",,
198,3,Usage of __slots__?,"<p>What is the purpose of <a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer""><code>__slots__</code></a> in Python ƒ?? especially with respect to when I would want to use it, and when not?</p>
","Usage of __slots__?<p>What is the purpose of <a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer""><code>__slots__</code></a> in Python ƒ?? especially with respect to when I would want to use it, and when not?</p>
",<python><oop><python-internals><slots>,slots especially respect purpose usage use want python fork forgotten,"<blockquote>
<h1>In Python, what is the purpose of <code>__slots__</code> and what are the cases one should avoid this?</h1>
</blockquote>
<h2>TLDR:</h2>
<p>The special attribute <a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer""><code>__slots__</code></a> allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:</p>
<ol>
<li><strong>faster</strong> attribute access.</li>
<li><strong>space savings</strong> in memory.</li>
</ol>
<p>The space savings is from</p>
<ol>
<li>Storing value references in slots instead of <code>__dict__</code>.</li>
<li>Denying <a href=""https://docs.python.org/3/library/stdtypes.html#object.__dict__"" rel=""noreferrer""><code>__dict__</code></a> and <a href=""https://stackoverflow.com/questions/36787603/what-exactly-is-weakref-in-python""><code>__weakref__</code></a> creation if parent classes deny them and you declare <code>__slots__</code>.</li>
</ol>
<h3>Quick Caveats</h3>
<p>Small caveat, you should only declare a particular slot one time in an inheritance tree. For example:</p>
<pre><code>class Base:
    __slots__ = 'foo', 'bar'

class Right(Base):
    __slots__ = 'baz', 

class Wrong(Base):
    __slots__ = 'foo', 'bar', 'baz'        # redundant foo and bar
</code></pre>
<p>Python doesn't object when you get this wrong (it probably should), problems might not otherwise manifest, but your objects will take up more space than they otherwise should. Python 3.8:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; from sys import getsizeof
&gt;&gt;&gt; getsizeof(Right()), getsizeof(Wrong())
(56, 72)
</code></pre>
<p>This is because the Base's slot descriptor has a slot separate from the Wrong's. This shouldn't usually come up, but it could:</p>
<pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; w = Wrong()
&gt;&gt;&gt; w.foo = 'foo'
&gt;&gt;&gt; Base.foo.__get__(w)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: foo
&gt;&gt;&gt; Wrong.foo.__get__(w)
'foo'
</code></pre>
<p>The biggest caveat is for multiple inheritance - multiple &quot;parent classes with nonempty slots&quot; cannot be combined.</p>
<p>To accommodate this restriction, follow best practices: Factor out all but one or all parents' abstraction which their concrete class respectively and your new concrete class collectively will inherit from - giving the abstraction(s) empty slots (just like abstract base classes in the standard library).</p>
<p>See section on multiple inheritance below for an example.</p>
<h3>Requirements:</h3>
<ul>
<li><p>To have attributes named in <code>__slots__</code> to actually be stored in slots instead of a <code>__dict__</code>, a class must inherit from <code>object</code> (automatic in Python 3, but must be explicit in Python 2).</p>
</li>
<li><p>To prevent the creation of a <code>__dict__</code>, you must inherit from <code>object</code> and all classes in the inheritance must declare <code>__slots__</code> and none of them can have a <code>'__dict__'</code> entry.</p>
</li>
</ul>
<p>There are a lot of details if you wish to keep reading.</p>
<h2>Why use <code>__slots__</code>: Faster attribute access.</h2>
<p>The creator of Python, Guido van Rossum, <a href=""http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html"" rel=""noreferrer"">states</a> that he actually created <code>__slots__</code> for faster attribute access.</p>
<p>It is trivial to demonstrate measurably significant faster access:</p>
<pre><code>import timeit

class Foo(object): __slots__ = 'foo',

class Bar(object): pass

slotted = Foo()
not_slotted = Bar()

def get_set_delete_fn(obj):
    def get_set_delete():
        obj.foo = 'foo'
        obj.foo
        del obj.foo
    return get_set_delete
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(slotted)))
0.2846834529991611
&gt;&gt;&gt; min(timeit.repeat(get_set_delete_fn(not_slotted)))
0.3664822799983085
</code></pre>
<p>The slotted access is almost 30% faster in Python 3.5 on Ubuntu.</p>
<pre><code>&gt;&gt;&gt; 0.3664822799983085 / 0.2846834529991611
1.2873325658284342
</code></pre>
<p>In Python 2 on Windows I have measured it about 15% faster.</p>
<h2>Why use <code>__slots__</code>:  Memory Savings</h2>
<p>Another purpose of <code>__slots__</code> is to reduce the space in memory that each object instance takes up.</p>
<p><a href=""https://docs.python.org/3/reference/datamodel.html#slots"" rel=""noreferrer"">My own contribution to the documentation clearly states the reasons behind this</a>:</p>
<blockquote>
<p>The space saved over using <code>__dict__</code> can be significant.</p>
</blockquote>
<p><a href=""http://docs.sqlalchemy.org/en/rel_1_0/changelog/migration_10.html#significant-improvements-in-structural-memory-use"" rel=""noreferrer"">SQLAlchemy attributes</a> a lot of memory savings to <code>__slots__</code>.</p>
<p>To verify this, using the Anaconda distribution of Python 2.7 on Ubuntu Linux, with <code>guppy.hpy</code> (aka heapy) and <code>sys.getsizeof</code>, the size of a class instance without <code>__slots__</code> declared, and nothing else, is 64 bytes. That does <em>not</em> include the <code>__dict__</code>. Thank you Python for lazy evaluation again, the <code>__dict__</code> is apparently not called into existence until it is referenced, but classes without data are usually useless. When called into existence, the <code>__dict__</code> attribute is a minimum of 280 bytes additionally.</p>
<p>In contrast, a class instance with <code>__slots__</code> declared to be <code>()</code> (no data) is only 16 bytes, and 56 total bytes with one item in slots, 64 with two.</p>
<p>For 64 bit Python, I illustrate the memory consumption in bytes in Python 2.7 and 3.6, for <code>__slots__</code> and <code>__dict__</code> (no slots defined) for each point where the dict grows in 3.6 (except for 0, 1, and 2 attributes):</p>
<pre><code>       Python 2.7             Python 3.6
attrs  __slots__  __dict__*   __slots__  __dict__* | *(no slots defined)
none   16         56 + 272ƒ?ÿ   16         56 + 112ƒ?ÿ | ƒ?ÿif __dict__ referenced
one    48         56 + 272    48         56 + 112
two    56         56 + 272    56         56 + 112
six    88         56 + 1040   88         56 + 152
11     128        56 + 1040   128        56 + 240
22     216        56 + 3344   216        56 + 408     
43     384        56 + 3344   384        56 + 752
</code></pre>
<p>So, in spite of smaller dicts in Python 3, we see how nicely <code>__slots__</code> scale for instances to save us memory, and that is a major reason you would want to use <code>__slots__</code>.</p>
<p>Just for completeness of my notes, note that there is a one-time cost per slot in the class's namespace of 64 bytes in Python 2, and 72 bytes in Python 3, because slots use data descriptors like properties, called &quot;members&quot;.</p>
<pre><code>&gt;&gt;&gt; Foo.foo
&lt;member 'foo' of 'Foo' objects&gt;
&gt;&gt;&gt; type(Foo.foo)
&lt;class 'member_descriptor'&gt;
&gt;&gt;&gt; getsizeof(Foo.foo)
72
</code></pre>
<h2>Demonstration of <code>__slots__</code>:</h2>
<p>To deny the creation of a <code>__dict__</code>, you must subclass <code>object</code>. Everything subclasses <code>object</code> in Python 3, but in Python 2 you had to be explicit:</p>
<pre><code>class Base(object): 
    __slots__ = ()
</code></pre>
<p>now:</p>
<pre><code>&gt;&gt;&gt; b = Base()
&gt;&gt;&gt; b.a = 'a'
Traceback (most recent call last):
  File &quot;&lt;pyshell#38&gt;&quot;, line 1, in &lt;module&gt;
    b.a = 'a'
AttributeError: 'Base' object has no attribute 'a'
</code></pre>
<p>Or subclass another class that defines <code>__slots__</code></p>
<pre><code>class Child(Base):
    __slots__ = ('a',)
</code></pre>
<p>and now:</p>
<pre><code>c = Child()
c.a = 'a'
</code></pre>
<p>but:</p>
<pre><code>&gt;&gt;&gt; c.b = 'b'
Traceback (most recent call last):
  File &quot;&lt;pyshell#42&gt;&quot;, line 1, in &lt;module&gt;
    c.b = 'b'
AttributeError: 'Child' object has no attribute 'b'
</code></pre>
<p>To allow <code>__dict__</code> creation while subclassing slotted objects, just add <code>'__dict__'</code> to the <code>__slots__</code> (note that slots are ordered, and you shouldn't repeat slots that are already in parent classes):</p>
<pre><code>class SlottedWithDict(Child): 
    __slots__ = ('__dict__', 'b')

swd = SlottedWithDict()
swd.a = 'a'
swd.b = 'b'
swd.c = 'c'
</code></pre>
<p>and</p>
<pre><code>&gt;&gt;&gt; swd.__dict__
{'c': 'c'}
</code></pre>
<p>Or you don't even need to declare <code>__slots__</code> in your subclass, and you will still use slots from the parents, but not restrict the creation of a <code>__dict__</code>:</p>
<pre><code>class NoSlots(Child): pass
ns = NoSlots()
ns.a = 'a'
ns.b = 'b'
</code></pre>
<p>And:</p>
<pre><code>&gt;&gt;&gt; ns.__dict__
{'b': 'b'}
</code></pre>
<p>However, <code>__slots__</code> may cause problems for multiple inheritance:</p>
<pre><code>class BaseA(object): 
    __slots__ = ('a',)

class BaseB(object): 
    __slots__ = ('b',)
</code></pre>
<p>Because creating a child class from parents with both non-empty slots fails:</p>
<pre><code>&gt;&gt;&gt; class Child(BaseA, BaseB): __slots__ = ()
Traceback (most recent call last):
  File &quot;&lt;pyshell#68&gt;&quot;, line 1, in &lt;module&gt;
    class Child(BaseA, BaseB): __slots__ = ()
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</code></pre>
<p>If you run into this problem, You <em>could</em> just remove <code>__slots__</code> from the parents, or if you have control of the parents, give them empty slots, or refactor to abstractions:</p>
<pre><code>from abc import ABC

class AbstractA(ABC):
    __slots__ = ()

class BaseA(AbstractA): 
    __slots__ = ('a',)

class AbstractB(ABC):
    __slots__ = ()

class BaseB(AbstractB): 
    __slots__ = ('b',)

class Child(AbstractA, AbstractB): 
    __slots__ = ('a', 'b')

c = Child() # no problem!
</code></pre>
<h3>Add <code>'__dict__'</code> to <code>__slots__</code> to get dynamic assignment:</h3>
<pre><code>class Foo(object):
    __slots__ = 'bar', 'baz', '__dict__'
</code></pre>
<p>and now:</p>
<pre><code>&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.boink = 'boink'
</code></pre>
<p>So with <code>'__dict__'</code> in slots we lose some of the size benefits with the upside of having dynamic assignment and still having slots for the names we do expect.</p>
<p>When you inherit from an object that isn't slotted, you get the same sort of semantics when you use <code>__slots__</code> - names that are in <code>__slots__</code> point to  slotted values, while any other values are put in the instance's <code>__dict__</code>.</p>
<p>Avoiding <code>__slots__</code> because you want to be able to add attributes on the fly is actually not a good reason - just add <code>&quot;__dict__&quot;</code> to your <code>__slots__</code> if this is required.</p>
<p>You can similarly add <code>__weakref__</code> to <code>__slots__</code> explicitly if you need that feature.</p>
<h3>Set to empty tuple when subclassing a namedtuple:</h3>
<p>The namedtuple builtin make immutable instances that are very lightweight (essentially, the size of tuples) but to get the benefits, you need to do it yourself if you subclass them:</p>
<pre><code>from collections import namedtuple
class MyNT(namedtuple('MyNT', 'bar baz')):
    &quot;&quot;&quot;MyNT is an immutable and lightweight object&quot;&quot;&quot;
    __slots__ = ()
</code></pre>
<p>usage:</p>
<pre><code>&gt;&gt;&gt; nt = MyNT('bar', 'baz')
&gt;&gt;&gt; nt.bar
'bar'
&gt;&gt;&gt; nt.baz
'baz'
</code></pre>
<p>And trying to assign an unexpected attribute raises an <code>AttributeError</code> because we have prevented the creation of <code>__dict__</code>:</p>
<pre><code>&gt;&gt;&gt; nt.quux = 'quux'
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: 'MyNT' object has no attribute 'quux'
</code></pre>
<p>You <em>can</em> allow <code>__dict__</code> creation by leaving off <code>__slots__ = ()</code>, but you can't use non-empty <code>__slots__</code> with subtypes of tuple.</p>
<h2>Biggest Caveat: Multiple inheritance</h2>
<p>Even when non-empty slots are the same for multiple parents, they cannot be used together:</p>
<pre><code>class Foo(object): 
    __slots__ = 'foo', 'bar'
class Bar(object):
    __slots__ = 'foo', 'bar' # alas, would work if empty, i.e. ()

&gt;&gt;&gt; class Baz(Foo, Bar): pass
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</code></pre>
<p>Using an empty <code>__slots__</code> in the parent seems to provide the most flexibility, <strong>allowing the child to choose to prevent or allow</strong> (by adding <code>'__dict__'</code> to get dynamic assignment, see section above) <strong>the creation of a <code>__dict__</code></strong>:</p>
<pre><code>class Foo(object): __slots__ = ()
class Bar(object): __slots__ = ()
class Baz(Foo, Bar): __slots__ = ('foo', 'bar')
b = Baz()
b.foo, b.bar = 'foo', 'bar'
</code></pre>
<p>You don't <em>have</em> to have slots - so if you add them, and remove them later, it shouldn't cause any problems.</p>
<p><strong>Going out on a limb here</strong>: If you're composing <a href=""https://stackoverflow.com/questions/860245/mixin-vs-inheritance/27907511#27907511"">mixins</a> or using <a href=""https://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python/31439126#31439126"">abstract base classes</a>, which aren't intended to be instantiated, an empty <code>__slots__</code> in those parents seems to be the best way to go in terms of flexibility for subclassers.</p>
<p>To demonstrate, first, let's create a class with code we'd like to use under multiple inheritance</p>
<pre><code>class AbstractBase:
    __slots__ = ()
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def __repr__(self):
        return f'{type(self).__name__}({repr(self.a)}, {repr(self.b)})'
</code></pre>
<p>We could use the above directly by inheriting and declaring the expected slots:</p>
<pre><code>class Foo(AbstractBase):
    __slots__ = 'a', 'b'
</code></pre>
<p>But we don't care about that, that's trivial single inheritance, we need another class we might also inherit from, maybe with a noisy attribute:</p>
<pre><code>class AbstractBaseC:
    __slots__ = ()
    @property
    def c(self):
        print('getting c!')
        return self._c
    @c.setter
    def c(self, arg):
        print('setting c!')
        self._c = arg
</code></pre>
<p>Now if both bases had nonempty slots, we couldn't do the below. (In fact, if we wanted, we could have given <code>AbstractBase</code> nonempty slots a and b, and left them out of the below declaration - leaving them in would be wrong):</p>
<pre><code>class Concretion(AbstractBase, AbstractBaseC):
    __slots__ = 'a b _c'.split()
</code></pre>
<p>And now we have functionality from both via multiple inheritance, and can still deny <code>__dict__</code> and <code>__weakref__</code> instantiation:</p>
<pre><code>&gt;&gt;&gt; c = Concretion('a', 'b')
&gt;&gt;&gt; c.c = c
setting c!
&gt;&gt;&gt; c.c
getting c!
Concretion('a', 'b')
&gt;&gt;&gt; c.d = 'd'
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: 'Concretion' object has no attribute 'd'
</code></pre>
<h2>Other cases to avoid slots:</h2>
<ul>
<li>Avoid them when you want to perform <code>__class__</code> assignment with another class that doesn't have them (and you can't add them) unless the slot layouts are identical. (I am very interested in learning who is doing this and why.)</li>
<li>Avoid them if you want to subclass variable length builtins like long, tuple, or str, and you want to add attributes to them.</li>
<li>Avoid them if you insist on providing default values via class attributes for instance variables.</li>
</ul>
<p>You may be able to tease out further caveats from the rest of the <code>__slots__</code> <a href=""https://docs.python.org/3.7/reference/datamodel.html#slots"" rel=""noreferrer"">documentation (the 3.7 dev docs are the most current)</a>, which I have made significant recent contributions to.</p>
<h2>Critiques of other answers</h2>
<p>The current top answers cite outdated information and are quite hand-wavy and miss the mark in some important ways.</p>
<h3>Do not &quot;only use <code>__slots__</code> when instantiating lots of objects&quot;</h3>
<p>I quote:</p>
<blockquote>
<p>&quot;You would want to use <code>__slots__</code> if you are going to instantiate a lot (hundreds, thousands) of objects of the same class.&quot;</p>
</blockquote>
<p>Abstract Base Classes, for example, from the <code>collections</code> module, are not instantiated, yet <code>__slots__</code> are declared for them.</p>
<p>Why?</p>
<p>If a user wishes to deny <code>__dict__</code> or <code>__weakref__</code> creation, those things must not be available in the parent classes.</p>
<p><code>__slots__</code> contributes to reusability when creating interfaces or mixins.</p>
<p>It is true that many Python users aren't writing for reusability, but when you are, having the option to deny unnecessary space usage is valuable.</p>
<h3><code>__slots__</code> doesn't break pickling</h3>
<p>When pickling a slotted object, you may find it complains with a misleading <code>TypeError</code>:</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f))
TypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled
</code></pre>
<p>This is actually incorrect. This message comes from the oldest protocol, which is the default. You can select the latest protocol with the <code>-1</code> argument. In Python 2.7 this would be <code>2</code> (which was introduced in 2.3), and in 3.6 it is <code>4</code>.</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, -1))
&lt;__main__.Foo object at 0x1129C770&gt;
</code></pre>
<p>in Python 2.7:</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 2))
&lt;__main__.Foo object at 0x1129C770&gt;
</code></pre>
<p>in Python 3.6</p>
<pre><code>&gt;&gt;&gt; pickle.loads(pickle.dumps(f, 4))
&lt;__main__.Foo object at 0x1129C770&gt;
</code></pre>
<p>So I would keep this in mind, as it is a solved problem.</p>
<h2>Critique of the (until Oct 2, 2016) accepted answer</h2>
<p>The first paragraph is half short explanation, half predictive. Here's the only part that actually answers the question</p>
<blockquote>
<p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots</p>
</blockquote>
<p>The second half is wishful thinking, and off the mark:</p>
<blockquote>
<p>While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.</p>
</blockquote>
<p>Python actually does something similar to this, only creating the <code>__dict__</code> when it is accessed, but creating lots of objects with no data is fairly ridiculous.</p>
<p>The second paragraph oversimplifies and misses actual reasons to avoid <code>__slots__</code>. The below is <em>not</em> a real reason to avoid slots (for <em>actual</em> reasons, see the rest of my answer above.):</p>
<blockquote>
<p>They change the behavior of the objects that have slots in a way that can be abused by control freaks and static typing weenies.</p>
</blockquote>
<p>It then goes on to discuss other ways of accomplishing that perverse goal with Python, not discussing anything to do with <code>__slots__</code>.</p>
<p>The third paragraph is more wishful thinking. Together it is mostly off-the-mark content that the answerer didn't even author and contributes to ammunition for critics of the site.</p>
<h1>Memory usage evidence</h1>
<p>Create some normal objects and slotted objects:</p>
<pre><code>&gt;&gt;&gt; class Foo(object): pass
&gt;&gt;&gt; class Bar(object): __slots__ = ()
</code></pre>
<p>Instantiate a million of them:</p>
<pre><code>&gt;&gt;&gt; foos = [Foo() for f in xrange(1000000)]
&gt;&gt;&gt; bars = [Bar() for b in xrange(1000000)]
</code></pre>
<p>Inspect with <code>guppy.hpy().heap()</code>:</p>
<pre><code>&gt;&gt;&gt; guppy.hpy().heap()
Partition of a set of 2028259 objects. Total size = 99763360 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0 1000000  49 64000000  64  64000000  64 __main__.Foo
     1     169   0 16281480  16  80281480  80 list
     2 1000000  49 16000000  16  96281480  97 __main__.Bar
     3   12284   1   987472   1  97268952  97 str
...
</code></pre>
<p>Access the regular objects and their <code>__dict__</code> and inspect again:</p>
<pre><code>&gt;&gt;&gt; for f in foos:
...     f.__dict__
&gt;&gt;&gt; guppy.hpy().heap()
Partition of a set of 3028258 objects. Total size = 379763480 bytes.
 Index  Count   %      Size    % Cumulative  % Kind (class / dict of class)
     0 1000000  33 280000000  74 280000000  74 dict of __main__.Foo
     1 1000000  33  64000000  17 344000000  91 __main__.Foo
     2     169   0  16281480   4 360281480  95 list
     3 1000000  33  16000000   4 376281480  99 __main__.Bar
     4   12284   0    987472   0 377268952  99 str
...
</code></pre>
<p>This is consistent with the history of Python, from <a href=""https://www.python.org/download/releases/2.2.2/descrintro/"" rel=""noreferrer"">Unifying types and classes in Python 2.2</a></p>
<blockquote>
<p>If you subclass a built-in type, extra space is automatically added to the instances to accomodate <code>__dict__</code> and <code>__weakrefs__</code>. (The <code>__dict__</code> is not initialized until you use it though, so you shouldn't worry about the space occupied by an empty dictionary for each instance you create.) If you don't need this extra space, you can add the phrase &quot;<code>__slots__ = []</code>&quot; to your class.</p>
</blockquote>
",,
199,5,Converting from a string to boolean in Python?,"<p>Does anyone know how to do convert from a string to a boolean in Python? I found <a href=""http://codecomments.wordpress.com/2008/04/08/converting-a-string-to-a-boolean-value-in-python/"" rel=""noreferrer"">this link</a>. But it doesn't look like a proper way to do it.  I.e. using built-in functionality, etc.</p>

<p>The reason I'm asking this is because I learned about <code>int(""string"")</code> from here. But when trying <code>bool(""string"")</code> it always returns <code>True</code>:</p>

<pre><code>&gt;&gt;&gt; bool(""False"")
True
</code></pre>
","Converting from a string to boolean in Python?<p>Does anyone know how to do convert from a string to a boolean in Python? I found <a href=""http://codecomments.wordpress.com/2008/04/08/converting-a-string-to-a-boolean-value-in-python/"" rel=""noreferrer"">this link</a>. But it doesn't look like a proper way to do it.  I.e. using built-in functionality, etc.</p>

<p>The reason I'm asking this is because I learned about <code>int(""string"")</code> from here. But when trying <code>bool(""string"")</code> it always returns <code>True</code>:</p>

<pre><code>&gt;&gt;&gt; bool(""False"")
True
</code></pre>
",<python><string><boolean>,string boolean learned link bool converting asking functionality proper reason,"<p>Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:</p>

<pre><code>s == 'True'
</code></pre>

<p>Or to checks against a whole bunch of values:</p>

<pre><code>s.lower() in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']
</code></pre>

<p>Be cautious when using the following:</p>

<pre><code>&gt;&gt;&gt; bool(""foo"")
True
&gt;&gt;&gt; bool("""")
False
</code></pre>

<p>Empty strings evaluate to <code>False</code>, but everything else evaluates to <code>True</code>. So this should not be used for any kind of parsing purposes.</p>
",,
200,3,How to print number with commas as thousands separators?,"<p>I am trying to print an integer in <em>Python 2.6.1</em> with commas as thousands separators. For example, I want to show the number <code>1234567</code> as <code>1,234,567</code>. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.</p>

<p>It does not need to be locale-specific to decide between periods and commas. I would prefer something as simple as reasonably possible.</p>
","How to print number with commas as thousands separators?<p>I am trying to print an integer in <em>Python 2.6.1</em> with commas as thousands separators. For example, I want to show the number <code>1234567</code> as <code>1,234,567</code>. How would I go about doing this? I have seen many examples on Google, but I am looking for the simplest practical way.</p>

<p>It does not need to be locale-specific to decide between periods and commas. I would prefer something as simple as reasonably possible.</p>
",<python><number-formatting>,commas separators thousands print number locale periods reasonably decide practical,"<h3>Locale unaware</h3>

<pre><code>'{:,}'.format(value)  # For Python ƒ?2.7
f'{value:,}'  # For Python ƒ?3.6
</code></pre>

<h3>Locale aware</h3>

<pre><code>import locale
locale.setlocale(locale.LC_ALL, '')  # Use '' for auto, or force e.g. to 'en_US.UTF-8'

'{:n}'.format(value)  # For Python ƒ?2.7
f'{value:n}'  # For Python ƒ?3.6
</code></pre>

<h3>Reference</h3>

<p>Per <a href=""https://docs.python.org/library/string.html#format-specification-mini-language"" rel=""noreferrer"">Format Specification Mini-Language</a>,</p>

<blockquote>
  <p>The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p>
</blockquote>
",,
201,3,How to emulate a do-while loop?,"<p>I need to emulate a do-while loop in a Python program. Unfortunately, the following straightforward code does not work:</p>

<pre><code>list_of_ints = [ 1, 2, 3 ]
iterator = list_of_ints.__iter__()
element = None

while True:
  if element:
    print element

  try:
    element = iterator.next()
  except StopIteration:
    break

print ""done""
</code></pre>

<p>Instead of ""1,2,3,done"", it prints the following output:</p>

<pre><code>[stdout:]1
[stdout:]2
[stdout:]3
None['Traceback (most recent call last):
', '  File ""test_python.py"", line 8, in &lt;module&gt;
    s = i.next()
', 'StopIteration
']
</code></pre>

<p>What can I do in order to catch the 'stop iteration' exception and break a while
loop properly?</p>

<p>An example of why such a thing may be needed is shown below as pseudocode.</p>

<p>State machine:</p>

<pre><code>s = """"
while True :
  if state is STATE_CODE :
    if ""//"" in s :
      tokens.add( TOKEN_COMMENT, s.split( ""//"" )[1] )
      state = STATE_COMMENT
    else :
      tokens.add( TOKEN_CODE, s )
  if state is STATE_COMMENT :
    if ""//"" in s :
      tokens.append( TOKEN_COMMENT, s.split( ""//"" )[1] )
    else
      state = STATE_CODE
      # Re-evaluate same line
      continue
  try :
    s = i.next()
  except StopIteration :
    break
</code></pre>
","How to emulate a do-while loop?<p>I need to emulate a do-while loop in a Python program. Unfortunately, the following straightforward code does not work:</p>

<pre><code>list_of_ints = [ 1, 2, 3 ]
iterator = list_of_ints.__iter__()
element = None

while True:
  if element:
    print element

  try:
    element = iterator.next()
  except StopIteration:
    break

print ""done""
</code></pre>

<p>Instead of ""1,2,3,done"", it prints the following output:</p>

<pre><code>[stdout:]1
[stdout:]2
[stdout:]3
None['Traceback (most recent call last):
', '  File ""test_python.py"", line 8, in &lt;module&gt;
    s = i.next()
', 'StopIteration
']
</code></pre>

<p>What can I do in order to catch the 'stop iteration' exception and break a while
loop properly?</p>

<p>An example of why such a thing may be needed is shown below as pseudocode.</p>

<p>State machine:</p>

<pre><code>s = """"
while True :
  if state is STATE_CODE :
    if ""//"" in s :
      tokens.add( TOKEN_COMMENT, s.split( ""//"" )[1] )
      state = STATE_COMMENT
    else :
      tokens.add( TOKEN_CODE, s )
  if state is STATE_COMMENT :
    if ""//"" in s :
      tokens.append( TOKEN_COMMENT, s.split( ""//"" )[1] )
    else
      state = STATE_CODE
      # Re-evaluate same line
      continue
  try :
    s = i.next()
  except StopIteration :
    break
</code></pre>
",<python><while-loop><do-while>,emulate loop pseudocode whileloop straightforward iteration following catch state prints,"<p>I am not sure what you are trying to do. You can implement a do-while loop like this:</p>

<pre><code>while True:
  stuff()
  if fail_condition:
    break
</code></pre>

<p>Or:</p>

<pre><code>stuff()
while not fail_condition:
  stuff()
</code></pre>

<p>What are you doing trying to use a do while loop to print the stuff in the list? Why not just use:</p>

<pre><code>for i in l:
  print i
print ""done""
</code></pre>

<p>Update:</p>

<p>So do you have a list of lines? And you want to keep iterating through it? How about: </p>

<pre><code>for s in l: 
  while True: 
    stuff() 
    # use a ""break"" instead of s = i.next()
</code></pre>

<p>Does that seem like something close to what you would want? With your code example, it would be:</p>

<pre><code>for s in some_list:
  while True:
    if state is STATE_CODE:
      if ""//"" in s:
        tokens.add( TOKEN_COMMENT, s.split( ""//"" )[1] )
        state = STATE_COMMENT
      else :
        tokens.add( TOKEN_CODE, s )
    if state is STATE_COMMENT:
      if ""//"" in s:
        tokens.append( TOKEN_COMMENT, s.split( ""//"" )[1] )
        break # get next s
      else:
        state = STATE_CODE
        # re-evaluate same line
        # continues automatically
</code></pre>
",,
202,3,How do I unload (reload) a Python module?,"<p>I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?</p>

<pre><code>if foo.py has changed:
    unimport foo  &lt;-- How do I do this?
    import foo
    myfoo = foo.Foo()
</code></pre>
","How do I unload (reload) a Python module?<p>I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?</p>

<pre><code>if foo.py has changed:
    unimport foo  &lt;-- How do I do this?
    import foo
    myfoo = foo.Foo()
</code></pre>
",<python><module><reload><python-import>,server unload restarting reload service upgrade long running able module,"<p>You can reload a module when it has already been imported by using <a href=""https://docs.python.org/3/library/importlib.html#importlib.reload"" rel=""noreferrer""><code>importlib.reload()</code></a>:</p>
<pre><code>from importlib import reload  # Python 3.4+
import foo

while True:
    # Do some things.
    if is_changed(foo):
        foo = reload(foo)
</code></pre>
<p>In Python 2, <a href=""https://docs.python.org/2.7/library/functions.html#reload"" rel=""noreferrer""><code>reload</code></a> was a builtin. In Python 3, it was <a href=""https://docs.python.org/3/whatsnew/3.0.html#builtins"" rel=""noreferrer"">moved</a> to the <a href=""https://docs.python.org/3/library/imp.html"" rel=""noreferrer""><code>imp</code></a> module. In 3.4, <code>imp</code> was <a href=""https://docs.python.org/3/whatsnew/3.4.html#importlib"" rel=""noreferrer"">deprecated</a> in favor of <a href=""https://docs.python.org/3/library/importlib.html"" rel=""noreferrer""><code>importlib</code></a>. When targeting 3 or later, either reference the appropriate module when calling <code>reload</code> or import it.</p>
<p>I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.</p>
<p>To quote from the docs:</p>
<blockquote>
<ul>
<li>Python moduleƒ??s code is recompiled and the module-level code re-executed, defining a new set of objects which are bound to names in the moduleƒ??s dictionary by reusing the <a href=""https://docs.python.org/3/glossary.html#term-loader"" rel=""noreferrer"">loader</a> which originally loaded the module. The <code>init</code> function of extension modules is not called a second time.</li>
<li>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</li>
<li>The names in the module namespace are updated to point to any new or changed objects.</li>
<li>Other references to the old objects (such as names external to the module) are not rebound to refer to the new objects and must be updated in each namespace where they occur if that is desired.</li>
</ul>
</blockquote>
<p>As you noted in your question, you'll have to reconstruct <code>Foo</code> objects if the <code>Foo</code> class resides in the <code>foo</code> module.</p>
",,
203,6,How can I check file size in Python?,"<p>I am writing a Python script in Windows. I want to do something based on the file size. For example, if the size is greater than 0, I will send an email to somebody, otherwise continue to other things. </p>

<p>How do I check the file size?</p>
","How can I check file size in Python?<p>I am writing a Python script in Windows. I want to do something based on the file size. For example, if the size is greater than 0, I will send an email to somebody, otherwise continue to other things. </p>

<p>How do I check the file size?</p>
",<python><file>,size file check send continue email greater somebody things based,"<p>You need the <a href=""https://docs.python.org/library/os.html#os.stat_result.st_size"" rel=""noreferrer""><code>st_size</code></a> property of <a href=""https://docs.python.org/library/os.html#os.stat_result"" rel=""noreferrer"">the object returned by <code>os.stat</code></a>. You can get it by either using <a href=""https://docs.python.org/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> (Python 3.4+):</p>

<pre><code>&gt;&gt;&gt; from pathlib import Path
&gt;&gt;&gt; Path('somefile.txt').stat()
os.stat_result(st_mode=33188, st_ino=6419862, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=1564, st_atime=1584299303, st_mtime=1584299400, st_ctime=1584299400)
&gt;&gt;&gt; Path('somefile.txt').stat().st_size
1564
</code></pre>

<p>or using <a href=""https://docs.python.org/library/os.html#os.stat"" rel=""noreferrer""><code>os.stat</code></a>:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.stat('somefile.txt')
os.stat_result(st_mode=33188, st_ino=6419862, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=1564, st_atime=1584299303, st_mtime=1584299400, st_ctime=1584299400)
&gt;&gt;&gt; os.stat('somefile.txt').st_size
1564
</code></pre>

<p>Output is in bytes.</p>
",,
204,5,How to subtract a day from a date?,"<p>I have a Python <a href=""https://docs.python.org/library/datetime.html#datetime-objects"" rel=""noreferrer""><code>datetime.datetime</code></a> object. What is the best way to subtract one day?</p>
","How to subtract a day from a date?<p>I have a Python <a href=""https://docs.python.org/library/datetime.html#datetime-objects"" rel=""noreferrer""><code>datetime.datetime</code></a> object. What is the best way to subtract one day?</p>
",<python><datetime><date>,subtract day datetime date best object way python font fori,"<p>You can use a <a href=""http://docs.python.org/library/datetime.html#timedelta-objects"" rel=""noreferrer""><code>timedelta</code></a> object:</p>
<pre><code>from datetime import datetime, timedelta
    
d = datetime.today() - timedelta(days=days_to_subtract)
</code></pre>
",,
205,3,How are lambdas useful?,"<p>I'm trying to figure out Python lambdas. Is <code>lambda</code> one of those &quot;interesting&quot; language items that in real life should be forgotten?</p>
<p>I'm sure there are some edge cases where it might be needed, but given the obscurity of it, the potential of it being redefined in future releases (my assumption based on the various definitions of it) and the reduced coding clarity - should it be avoided?</p>
<p>This reminds me of overflowing (buffer overflow) of C types - pointing to the top variable and overloading to set the other field values.  It feels like sort of a techie showmanship but maintenance coder nightmare.</p>
","How are lambdas useful?<p>I'm trying to figure out Python lambdas. Is <code>lambda</code> one of those &quot;interesting&quot; language items that in real life should be forgotten?</p>
<p>I'm sure there are some edge cases where it might be needed, but given the obscurity of it, the potential of it being redefined in future releases (my assumption based on the various definitions of it) and the reduced coding clarity - should it be avoided?</p>
<p>This reminds me of overflowing (buffer overflow) of C types - pointing to the top variable and overloading to set the other field values.  It feels like sort of a techie showmanship but maintenance coder nightmare.</p>
",<python><function><lambda><closures>,lambdas assumption clarity forgotten avoided reminds showmanship techie obscurity overflowing,"<p>Are you talking about <a href=""https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions"" rel=""nofollow noreferrer"">lambda expressions</a>? Like</p>
<pre><code>lambda x: x**2 + 2*x - 5
</code></pre>
<p>Those things are actually quite useful.  Python supports a style of programming called <em>functional programming</em> where you can pass functions to other functions to do stuff. Example:</p>
<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>sets <code>mult3</code> to <code>[3, 6, 9]</code>, those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than</p>
<pre><code>def filterfunc(x):
    return x % 3 == 0
mult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</code></pre>
<p>Of course, in this particular case, you could do the same thing as a list comprehension:</p>
<pre><code>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]
</code></pre>
<p>(or even as <code>range(3,10,3)</code>), but there are many other, more sophisticated use cases where you can't use a list comprehension and a lambda function may be the shortest way to write something out.</p>
<ul>
<li><p>Returning a function from another function</p>
<pre><code>  &gt;&gt;&gt; def transform(n):
  ...     return lambda x: x + n
  ...
  &gt;&gt;&gt; f = transform(3)
  &gt;&gt;&gt; f(4)
  7
</code></pre>
<p>This is often used to create function wrappers, such as Python's decorators.</p>
</li>
<li><p>Combining elements of an iterable sequence with <code>reduce()</code></p>
<pre><code>  &gt;&gt;&gt; reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])
  '1, 2, 3, 4, 5, 6, 7, 8, 9'
</code></pre>
</li>
<li><p>Sorting by an alternate key</p>
<pre><code>  &gt;&gt;&gt; sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))
  [5, 4, 6, 3, 7, 2, 8, 1, 9]
</code></pre>
</li>
</ul>
<p>I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language.</p>
",,
206,3,Python's equivalent of && (logical-and) in an if-statement,"<p>Here's my code:</p>

<pre><code>def front_back(a, b):
  # +++your code here+++
  if len(a) % 2 == 0 &amp;&amp; len(b) % 2 == 0:
    return a[:(len(a)/2)] + b[:(len(b)/2)] + a[(len(a)/2):] + b[(len(b)/2):] 
  else:
    #todo! Not yet done. :P
  return
</code></pre>

<p>I'm getting an error in the <strong>IF</strong> conditional.<br>
What am I doing wrong?</p>
","Python's equivalent of && (logical-and) in an if-statement<p>Here's my code:</p>

<pre><code>def front_back(a, b):
  # +++your code here+++
  if len(a) % 2 == 0 &amp;&amp; len(b) % 2 == 0:
    return a[:(len(a)/2)] + b[:(len(b)/2)] + a[(len(a)/2):] + b[(len(b)/2):] 
  else:
    #todo! Not yet done. :P
  return
</code></pre>

<p>I'm getting an error in the <strong>IF</strong> conditional.<br>
What am I doing wrong?</p>
",<python>,statementhere logical conditional wrong equivalent getting error code python force,"<p>You would want <code>and</code> instead of <code>&amp;&amp;</code>.</p>
",,
207,3,Peak detection in a 2D array,"<p>I'm helping a veterinary clinic measuring pressure under a dogs paw. I use Python for my data analysis and now I'm stuck trying to divide the paws into (anatomical) subregions.</p>
<p>I made a 2D array of each paw, that consists of the maximal values for each sensor that has been loaded by the paw over time. Here's an example of one paw, where I used Excel to draw the areas I want to 'detect'. These are 2 by 2 boxes around the sensor with local maxima's, that together have the largest sum.</p>
<p><img src=""https://i.stack.imgur.com/BuUbq.png"" alt=""alt text"" /></p>
<p>So I tried some experimenting and decide to simply look for the maximums of each column and row (can't look in one direction due to the shape of the paw). This seems to 'detect' the location of the separate toes fairly well, but it also marks neighboring sensors.</p>
<p><img src=""https://i.stack.imgur.com/UyNRU.png"" alt=""alt text"" /></p>
<p>So what would be the best way to tell Python which of these maximums are the ones I want?</p>
<p><strong>Note: The 2x2 squares can't overlap, since they have to be separate toes!</strong></p>
<p>Also I took 2x2 as a convenience, any more advanced solution is welcome, but I'm simply a human movement scientist, so I'm neither a real programmer or a mathematician, so please keep it 'simple'.</p>
<p>Here's a <a href=""https://upl.io/0liy07"" rel=""noreferrer"">version that can be loaded with <code>np.loadtxt</code></a></p>
<hr />
<h2>Results</h2>
<p>So I tried @jextee's solution (see the results below). As you can see, it works very on the front paws, but it works less well for the hind legs.</p>
<p>More specifically, it can't recognize the small peak that's the fourth toe. This is obviously inherent to the fact that the loop looks top down towards the lowest value, without taking into account where this is.</p>
<p>Would anyone know how to tweak @jextee's algorithm, so that it might be able to find the 4th toe too?</p>
<p><img src=""https://i.stack.imgur.com/FFX0x.png"" alt=""alt text"" /></p>
<p>Since I haven't processed any other trials yet, I can't supply any other samples. But the data I gave before were the averages of each paw. This file is an array with the maximal data of 9 paws in the order they made contact with the plate.</p>
<p>This image shows how they were spatially spread out over the plate.</p>
<p><img src=""https://i.stack.imgur.com/iPXEv.png"" alt=""alt text"" /></p>
<h2>Update:</h2>
<p><strong><a href=""http://www.flipserd.com/blog/ivoflipse/post/toe-detection-revisited"" rel=""noreferrer"">I have set up a blog for anyone interested</a></strong> and <a href=""https://1drv.ms/u/s!AjVZ_ROiXWgOhDEn4KrRB8mrOZWM?e=aUCCm4"" rel=""noreferrer"">I have setup a OneDrive with all the raw measurements.</a> So to anyone requesting more data: more power to you!</p>
<hr />
<h2>New update:</h2>
<p>So after the help I got with my questions regarding <a href=""https://stackoverflow.com/q/4087919/77595"">paw detection</a> and <a href=""https://stackoverflow.com/q/4502656/77595"">paw sorting</a>, I was finally able to check the toe detection for every paw! Turns out, it doesn't work so well in anything but paws sized like the one in my own example. Off course in hindsight, it's my own fault for choosing the 2x2 so arbitrarily.</p>
<p>Here's a nice example of where it goes wrong: a nail is being recognized as a toe and the 'heel' is so wide, it gets recognized twice!</p>
<p><img src=""https://i.stack.imgur.com/JEpIa.png"" alt=""alt text"" /></p>
<p>The paw is too large, so taking a 2x2 size with no overlap, causes some toes to be detected twice. The other way around, in small dogs it often fails to find a 5th toe, which I suspect is being caused by the 2x2 area being too large.</p>
<p>After <a href=""http://www.flipserd.com/blog/ivoflipse/post/toe-detection-revisited"" rel=""noreferrer"">trying the current solution on all my measurements</a> I came to the staggering conclusion that for nearly all my small dogs it didn't find a 5th toe and that in over 50% of the impacts for the large dogs it would find more!</p>
<p>So clearly I need to change it. My own guess was changing the size of the <code>neighborhood</code> to something smaller for small dogs and larger for large dogs. But <code>generate_binary_structure</code> wouldn't let me change the size of the array.</p>
<p>Therefore, I'm hoping that anyone else has a better suggestion for locating the toes, perhaps having the toe area scale with the paw size?</p>
","Peak detection in a 2D array<p>I'm helping a veterinary clinic measuring pressure under a dogs paw. I use Python for my data analysis and now I'm stuck trying to divide the paws into (anatomical) subregions.</p>
<p>I made a 2D array of each paw, that consists of the maximal values for each sensor that has been loaded by the paw over time. Here's an example of one paw, where I used Excel to draw the areas I want to 'detect'. These are 2 by 2 boxes around the sensor with local maxima's, that together have the largest sum.</p>
<p><img src=""https://i.stack.imgur.com/BuUbq.png"" alt=""alt text"" /></p>
<p>So I tried some experimenting and decide to simply look for the maximums of each column and row (can't look in one direction due to the shape of the paw). This seems to 'detect' the location of the separate toes fairly well, but it also marks neighboring sensors.</p>
<p><img src=""https://i.stack.imgur.com/UyNRU.png"" alt=""alt text"" /></p>
<p>So what would be the best way to tell Python which of these maximums are the ones I want?</p>
<p><strong>Note: The 2x2 squares can't overlap, since they have to be separate toes!</strong></p>
<p>Also I took 2x2 as a convenience, any more advanced solution is welcome, but I'm simply a human movement scientist, so I'm neither a real programmer or a mathematician, so please keep it 'simple'.</p>
<p>Here's a <a href=""https://upl.io/0liy07"" rel=""noreferrer"">version that can be loaded with <code>np.loadtxt</code></a></p>
<hr />
<h2>Results</h2>
<p>So I tried @jextee's solution (see the results below). As you can see, it works very on the front paws, but it works less well for the hind legs.</p>
<p>More specifically, it can't recognize the small peak that's the fourth toe. This is obviously inherent to the fact that the loop looks top down towards the lowest value, without taking into account where this is.</p>
<p>Would anyone know how to tweak @jextee's algorithm, so that it might be able to find the 4th toe too?</p>
<p><img src=""https://i.stack.imgur.com/FFX0x.png"" alt=""alt text"" /></p>
<p>Since I haven't processed any other trials yet, I can't supply any other samples. But the data I gave before were the averages of each paw. This file is an array with the maximal data of 9 paws in the order they made contact with the plate.</p>
<p>This image shows how they were spatially spread out over the plate.</p>
<p><img src=""https://i.stack.imgur.com/iPXEv.png"" alt=""alt text"" /></p>
<h2>Update:</h2>
<p><strong><a href=""http://www.flipserd.com/blog/ivoflipse/post/toe-detection-revisited"" rel=""noreferrer"">I have set up a blog for anyone interested</a></strong> and <a href=""https://1drv.ms/u/s!AjVZ_ROiXWgOhDEn4KrRB8mrOZWM?e=aUCCm4"" rel=""noreferrer"">I have setup a OneDrive with all the raw measurements.</a> So to anyone requesting more data: more power to you!</p>
<hr />
<h2>New update:</h2>
<p>So after the help I got with my questions regarding <a href=""https://stackoverflow.com/q/4087919/77595"">paw detection</a> and <a href=""https://stackoverflow.com/q/4502656/77595"">paw sorting</a>, I was finally able to check the toe detection for every paw! Turns out, it doesn't work so well in anything but paws sized like the one in my own example. Off course in hindsight, it's my own fault for choosing the 2x2 so arbitrarily.</p>
<p>Here's a nice example of where it goes wrong: a nail is being recognized as a toe and the 'heel' is so wide, it gets recognized twice!</p>
<p><img src=""https://i.stack.imgur.com/JEpIa.png"" alt=""alt text"" /></p>
<p>The paw is too large, so taking a 2x2 size with no overlap, causes some toes to be detected twice. The other way around, in small dogs it often fails to find a 5th toe, which I suspect is being caused by the 2x2 area being too large.</p>
<p>After <a href=""http://www.flipserd.com/blog/ivoflipse/post/toe-detection-revisited"" rel=""noreferrer"">trying the current solution on all my measurements</a> I came to the staggering conclusion that for nearly all my small dogs it didn't find a 5th toe and that in over 50% of the impacts for the large dogs it would find more!</p>
<p>So clearly I need to change it. My own guess was changing the size of the <code>neighborhood</code> to something smaller for small dogs and larger for large dogs. But <code>generate_binary_structure</code> wouldn't let me change the size of the array.</p>
<p>Therefore, I'm hoping that anyone else has a better suggestion for locating the toes, perhaps having the toe area scale with the paw size?</p>
",<python><image-processing>,paw toe dogs toes paws large small size detection th,"<p>I detected the peaks using a <strong>local maximum filter</strong>. Here is the result on your first dataset of 4 paws:
<img src=""https://i.stack.imgur.com/Kgt4H.png"" alt=""Peaks detection result""></p>

<p>I also ran it on the second dataset of 9 paws and <a href=""https://i.stack.imgur.com/4CKCh.png"" rel=""noreferrer"">it worked as well</a>.</p>

<p>Here is how you do it:</p>

<pre><code>import numpy as np
from scipy.ndimage.filters import maximum_filter
from scipy.ndimage.morphology import generate_binary_structure, binary_erosion
import matplotlib.pyplot as pp

#for some reason I had to reshape. Numpy ignored the shape header.
paws_data = np.loadtxt(""paws.txt"").reshape(4,11,14)

#getting a list of images
paws = [p.squeeze() for p in np.vsplit(paws_data,4)]


def detect_peaks(image):
    """"""
    Takes an image and detect the peaks usingthe local maximum filter.
    Returns a boolean mask of the peaks (i.e. 1 when
    the pixel's value is the neighborhood maximum, 0 otherwise)
    """"""

    # define an 8-connected neighborhood
    neighborhood = generate_binary_structure(2,2)

    #apply the local maximum filter; all pixel of maximal value 
    #in their neighborhood are set to 1
    local_max = maximum_filter(image, footprint=neighborhood)==image
    #local_max is a mask that contains the peaks we are 
    #looking for, but also the background.
    #In order to isolate the peaks we must remove the background from the mask.

    #we create the mask of the background
    background = (image==0)

    #a little technicality: we must erode the background in order to 
    #successfully subtract it form local_max, otherwise a line will 
    #appear along the background border (artifact of the local maximum filter)
    eroded_background = binary_erosion(background, structure=neighborhood, border_value=1)

    #we obtain the final mask, containing only peaks, 
    #by removing the background from the local_max mask (xor operation)
    detected_peaks = local_max ^ eroded_background

    return detected_peaks


#applying the detection and plotting results
for i, paw in enumerate(paws):
    detected_peaks = detect_peaks(paw)
    pp.subplot(4,2,(2*i+1))
    pp.imshow(paw)
    pp.subplot(4,2,(2*i+2) )
    pp.imshow(detected_peaks)

pp.show()
</code></pre>

<p>All you need to do after is use <code>scipy.ndimage.measurements.label</code> on the mask to label all distinct objects. Then you'll be able to play with them individually.</p>

<p><strong>Note</strong> that the method works well because the background is not noisy. If it were, you would detect a bunch of other unwanted peaks in the background. Another important factor is the size of the <em>neighborhood</em>. You will need to adjust it if the peak size changes (the should remain roughly proportional).</p>
",,
208,1,Why use pip over easy_install?,"<p>A <a href=""http://twitter.com/jperras/statuses/18160589493"" rel=""noreferrer"">tweet</a> reads: </p>

<blockquote>
  <p>Don't use easy_install, unless you
  like stabbing yourself in the face.
  Use pip.</p>
</blockquote>

<p>Why use pip over easy_install? Doesn't the <a href=""http://mail.python.org/pipermail/catalog-sig/2010-June/002985.html"" rel=""noreferrer"">fault lie with PyPI and package authors mostly</a>? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to <strong>strongly</strong> favor pip over easy_install?</p>

<p>(Let's assume that we're talking about easy_install from the Distribute package, that is maintained by the community)</p>
","Why use pip over easy_install?<p>A <a href=""http://twitter.com/jperras/statuses/18160589493"" rel=""noreferrer"">tweet</a> reads: </p>

<blockquote>
  <p>Don't use easy_install, unless you
  like stabbing yourself in the face.
  Use pip.</p>
</blockquote>

<p>Why use pip over easy_install? Doesn't the <a href=""http://mail.python.org/pipermail/catalog-sig/2010-June/002985.html"" rel=""noreferrer"">fault lie with PyPI and package authors mostly</a>? If an author uploads crap source tarball (eg: missing files, no setup.py) to PyPI, then both pip and easy_install will fail. Other than cosmetic differences, why do Python people (like in the above tweet) seem to <strong>strongly</strong> favor pip over easy_install?</p>

<p>(Let's assume that we're talking about easy_install from the Distribute package, that is maintained by the community)</p>
",<python><pip><setuptools><easy-install><pypi>,easyinstall pip tweet pypi use package community strongly lie uploads,"<p>Many of the answers here are out of date for 2015 (although <a href=""https://stackoverflow.com/a/3220572/908494"">the initially accepted one from Daniel Roseman</a> is not). Here's the current state of things:</p>

<ul>
<li>Binary packages are now distributed as wheels (<code>.whl</code> files)ƒ??not just on PyPI, but in third-party repositories like <a href=""http://www.lfd.uci.edu/~gohlke/pythonlibs/"" rel=""noreferrer"">Christoph Gohlke's Extension Packages for Windows</a>. <code>pip</code> can handle wheels; <code>easy_install</code> cannot.</li>
<li>Virtual environments (which come built-in with 3.4, or can be added to 2.6+/3.1+ with <a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer""><code>virtualenv</code></a>) have become a very important and prominent tool (and recommended in <a href=""https://docs.python.org/3/installing/index.html"" rel=""noreferrer"">the official docs</a>); they include <code>pip</code> out of the box, but don't even work properly with <code>easy_install</code>.</li>
<li>The <code>distribute</code> package that included <code>easy_install</code> is no longer maintained. Its improvements over <code>setuptools</code> got merged back into <code>setuptools</code>. Trying to install <code>distribute</code> will just install <code>setuptools</code> instead.</li>
<li><code>easy_install</code> itself is only quasi-maintained.</li>
<li>All of the cases where <code>pip</code> used to be inferior to <code>easy_install</code>ƒ??installing from an unpacked source tree, from a DVCS repo, etc.ƒ??are long-gone; you can <code>pip install .</code>, <code>pip install git+https://</code>.</li>
<li><code>pip</code> comes with the official Python 2.7 and 3.4+ packages from python.org, and a <code>pip</code> bootstrap is included by default if you build from source.</li>
<li>The various incomplete bits of documentation on installing, using, and building packages have been replaced by the <a href=""https://packaging.python.org/"" rel=""noreferrer"">Python Packaging User Guide</a>. Python's own documentation on <a href=""https://docs.python.org/3/installing/index.html"" rel=""noreferrer"">Installing Python Modules</a> now defers to this user guide, and explicitly calls out <code>pip</code> as ""the preferred installer program"".</li>
<li>Other new features have been added to <code>pip</code> over the years that will never be in <code>easy_install</code>. For example, <code>pip</code> makes it easy to clone your site-packages by building a requirements file and then installing it with a single command on each side. Or to convert your requirements file to a local repo to use for in-house development. And so on.</li>
</ul>

<p>The only good reason that I know of to use <code>easy_install</code> in 2015 is the special case of using Apple's pre-installed Python versions with OS X 10.5-10.8. Since 10.5, Apple has included <code>easy_install</code>, but as of 10.10 they still don't include <code>pip</code>. With 10.9+, you should still just use <code>get-pip.py</code>, but for 10.5-10.8, this has some problems, so it's easier to <code>sudo easy_install pip</code>. (In general, <code>easy_install pip</code> is a bad idea; it's only for OS X 10.5-10.8 that you want to do this.) Also, 10.5-10.8 include <code>readline</code> in a way that <code>easy_install</code> knows how to kludge around but <code>pip</code> doesn't, so you also want to <code>sudo easy_install readline</code> if you want to upgrade that.</p>
",,
209,3,Behaviour of increment and decrement operators in Python,"<p>I notice that a pre-increment/decrement operator can be applied on a variable (like <code>++count</code>). It compiles, but it does not actually change the value of the variable!</p>

<p>What is the behavior of the pre-increment/decrement operators (++/--) in Python? </p>

<p>Why does Python deviate from the behavior of these operators seen in C/C++?</p>
","Behaviour of increment and decrement operators in Python<p>I notice that a pre-increment/decrement operator can be applied on a variable (like <code>++count</code>). It compiles, but it does not actually change the value of the variable!</p>

<p>What is the behavior of the pre-increment/decrement operators (++/--) in Python? </p>

<p>Why does Python deviate from the behavior of these operators seen in C/C++?</p>
",<python><operators><increment><decrement>,increment decrement operators pre behavior variable deviate compiles notice applied,"<p><code>++</code> is not an operator. It is two <code>+</code> operators. The <code>+</code> operator is the <strong>identity</strong> operator, which does nothing. (Clarification: the <code>+</code> and <code>-</code> unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical <code>++</code> operator to work on strings.)</p>

<pre><code>++count
</code></pre>

<p>Parses as</p>

<pre><code>+(+count)
</code></pre>

<p>Which translates to</p>

<pre><code>count
</code></pre>

<p>You have to use the slightly longer <code>+=</code> operator to do what you want to do:</p>

<pre><code>count += 1
</code></pre>

<p>I suspect the <code>++</code> and <code>--</code> operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:</p>

<ul>
<li>Simpler parsing. Technically, parsing <code>++count</code> is ambiguous, as it could be <code>+</code>, <code>+</code>, <code>count</code> (two unary <code>+</code> operators) just as easily as it could be <code>++</code>, <code>count</code> (one unary <code>++</code> operator). It's not a significant syntactic ambiguity, but it does exist.</li>
<li>Simpler language. <code>++</code> is nothing more than a synonym for <code>+= 1</code>. It was a shorthand invented because C compilers were stupid and didn't know how to optimize <code>a += 1</code> into the <code>inc</code> instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable.</li>
<li>Confusing side-effects. One common newbie error in languages with <code>++</code> operators is mixing up the differences (both in precedence and in return value) between the pre- and post-increment/decrement operators, and Python likes to eliminate language ""gotcha""-s. The <a href=""https://en.cppreference.com/w/c/language/operator_precedence"" rel=""noreferrer"">precedence issues</a> of <a href=""https://stackoverflow.com/a/17819123/1449799"">pre-/post-increment in C</a> are pretty hairy, and incredibly easy to mess up.</li>
</ul>
",,
210,2,Convert list of dictionaries to a pandas DataFrame,"<p>I have a list of dictionaries like this:</p>

<pre><code>[{'points': 50, 'time': '5:00', 'year': 2010}, 
{'points': 25, 'time': '6:00', 'month': ""february""}, 
{'points':90, 'time': '9:00', 'month': 'january'}, 
{'points_h1':20, 'month': 'june'}]
</code></pre>

<p>And I want to turn this into a pandas <code>DataFrame</code> like this:</p>

<pre><code>      month  points  points_h1  time  year
0       NaN      50        NaN  5:00  2010
1  february      25        NaN  6:00   NaN
2   january      90        NaN  9:00   NaN
3      june     NaN         20   NaN   NaN
</code></pre>

<p>Note: Order of the columns does not matter.</p>

<p>How can I turn the list of dictionaries into a pandas DataFrame as shown above?</p>
","Convert list of dictionaries to a pandas DataFrame<p>I have a list of dictionaries like this:</p>

<pre><code>[{'points': 50, 'time': '5:00', 'year': 2010}, 
{'points': 25, 'time': '6:00', 'month': ""february""}, 
{'points':90, 'time': '9:00', 'month': 'january'}, 
{'points_h1':20, 'month': 'june'}]
</code></pre>

<p>And I want to turn this into a pandas <code>DataFrame</code> like this:</p>

<pre><code>      month  points  points_h1  time  year
0       NaN      50        NaN  5:00  2010
1  february      25        NaN  6:00   NaN
2   january      90        NaN  9:00   NaN
3      june     NaN         20   NaN   NaN
</code></pre>

<p>Note: Order of the columns does not matter.</p>

<p>How can I turn the list of dictionaries into a pandas DataFrame as shown above?</p>
",<python><dictionary><pandas><dataframe>,dictionaries turn pandas list dataframe shown dataframe matter columns like,"<p>Supposing <code>d</code> is your list of dicts, simply:</p>
<pre><code>df = pd.DataFrame(d)
</code></pre>
<p>Note: this does not work with nested data.</p>
",,
211,4,How to remove the first Item from a list?,"<p>I have the list <code>[0, 1, 2, 3, 4]</code> I'd like to make it into <code>[1, 2, 3, 4]</code>. How do I go about this? </p>
","How to remove the first Item from a list?<p>I have the list <code>[0, 1, 2, 3, 4]</code> I'd like to make it into <code>[1, 2, 3, 4]</code>. How do I go about this? </p>
",<python><arrays><list>,list item remove make like foreignkey formats format form fork,"<p>You can find a short collection of useful list functions <a href=""https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"" rel=""noreferrer"">here</a>.</p>
<p><a href=""https://www.programiz.com/python-programming/methods/list/pop"" rel=""noreferrer""><code>list.pop(index)</code></a></p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; l.pop(0)
'a'
&gt;&gt;&gt; l
['b', 'c', 'd']
&gt;&gt;&gt; 
</code></pre>
<p><a href=""https://docs.python.org/3/tutorial/datastructures.html#the-del-statement"" rel=""noreferrer""><code>del list[index]</code></a></p>
<pre><code>&gt;&gt;&gt; l = ['a', 'b', 'c', 'd']
&gt;&gt;&gt; del l[0]
&gt;&gt;&gt; l
['b', 'c', 'd']
&gt;&gt;&gt; 
</code></pre>
<p>These both modify your original list.</p>
<p>Others have suggested using slicing:</p>
<ul>
<li>Copies the list</li>
<li>Can return a subset</li>
</ul>
<p>Also, if you are performing many <code>pop(0)</code>, you should look at <a href=""http://docs.python.org/library/collections.html#collections.deque"" rel=""noreferrer""><code>collections.deque</code></a></p>
<pre><code>from collections import deque
&gt;&gt;&gt; l = deque(['a', 'b', 'c', 'd'])
&gt;&gt;&gt; l.popleft()
'a'
&gt;&gt;&gt; l
deque(['b', 'c', 'd'])
</code></pre>
<ul>
<li>Provides higher performance popping from left end of the list</li>
</ul>
",,
212,3,mkdir -p functionality in Python,"<p>Is there a way to get functionality similar to <code>mkdir -p</code> on the shell from within Python.  I am looking for a solution other than a system call.  I am sure the code is less than 20 lines, and I am wondering if someone has already written it?</p>
","mkdir -p functionality in Python<p>Is there a way to get functionality similar to <code>mkdir -p</code> on the shell from within Python.  I am looking for a solution other than a system call.  I am sure the code is less than 20 lines, and I am wondering if someone has already written it?</p>
",<python><path><directory-structure><mkdir>,mkdir functionality pythonis shell written similar lines wondering solution sure,"<p>For Python ƒ? 3.5, use <a href=""https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir"" rel=""noreferrer""><code>pathlib.Path.mkdir</code></a>:</p>
<pre><code>import pathlib
pathlib.Path(&quot;/tmp/path/to/desired/directory&quot;).mkdir(parents=True, exist_ok=True)
</code></pre>
<p>The <code>exist_ok</code> parameter was added in Python 3.5.</p>
<hr />
<p>For Python ƒ? 3.2, <a href=""https://docs.python.org/library/os.html#os.makedirs"" rel=""noreferrer""><code>os.makedirs</code></a> has an <a href=""https://docs.python.org/3/library/os.html?highlight=exist_ok#os.makedirs"" rel=""noreferrer"">optional third argument <code>exist_ok</code></a> that, when <code>True</code>, enables the <code>mkdir -p</code> functionalityƒ??<em>unless</em> <code>mode</code> is provided and the existing directory has different permissions than the intended ones; in that case, <code>OSError</code> is raised as previously:</p>
<pre><code>import os
os.makedirs(&quot;/tmp/path/to/desired/directory&quot;, exist_ok=True)
</code></pre>
<hr />
<p>For even older versions of Python, you can use <code>os.makedirs</code> and ignore the error:</p>
<pre><code>import errno    
import os

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python ƒ? 2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        # possibly handle other errno cases here, otherwise finally:
        else:
            raise
</code></pre>
",,
213,2,Pretty-print an entire Pandas Series / DataFrame,"<p>I work with Series and DataFrames on the terminal a lot. The default <code>__repr__</code> for a Series returns a reduced sample, with some head and tail values, but the rest missing.</p>

<p>Is there a builtin way to pretty-print the entire Series / DataFrame?  Ideally, it would support proper alignment, perhaps borders between columns, and maybe even color-coding for the different columns.</p>
","Pretty-print an entire Pandas Series / DataFrame<p>I work with Series and DataFrames on the terminal a lot. The default <code>__repr__</code> for a Series returns a reduced sample, with some head and tail values, but the rest missing.</p>

<p>Is there a builtin way to pretty-print the entire Series / DataFrame?  Ideally, it would support proper alignment, perhaps borders between columns, and maybe even color-coding for the different columns.</p>
",<python><pandas><dataframe>,series entire pretty columns print color borders alignment terminal repr,"<p>You can also use the <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.option_context.html"" rel=""noreferrer""><code>option_context</code></a>, with one or more options:</p>

<pre><code>with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
    print(df)
</code></pre>

<p>This will automatically return the options to their previous values.</p>

<p>If you are working on jupyter-notebook, using <code>display(df)</code> instead of <code>print(df)</code> will use jupyter rich display logic <a href=""https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display"" rel=""noreferrer"">(like so)</a>.</p>
",,
214,5,How to get a function name as a string?,"<p>In Python, how do I get a function name as a string, without calling the function?</p>

<pre><code>def my_function():
    pass

print get_function_name_as_string(my_function) # my_function is not in quotes
</code></pre>

<p>should output <code>""my_function""</code>.</p>

<p>Is such function available in Python? If not, any ideas on how to implement <code>get_function_name_as_string</code>, in Python?</p>
","How to get a function name as a string?<p>In Python, how do I get a function name as a string, without calling the function?</p>

<pre><code>def my_function():
    pass

print get_function_name_as_string(my_function) # my_function is not in quotes
</code></pre>

<p>should output <code>""my_function""</code>.</p>

<p>Is such function available in Python? If not, any ideas on how to implement <code>get_function_name_as_string</code>, in Python?</p>
",<python><string><function>,function getfunctionnameasstring myfunction string calling ideas implement available python output,"<pre><code>my_function.__name__
</code></pre>

<p>Using <code>__name__</code> is the preferred method as it applies uniformly. Unlike <code>func_name</code>, it works on built-in functions as well:</p>

<pre><code>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time.func_name
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in ?
AttributeError: 'builtin_function_or_method' object has no attribute 'func_name'
&gt;&gt;&gt; time.time.__name__ 
'time'
</code></pre>

<p>Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a <code>__name__</code> attribute too, so you only have remember one special name.</p>
",,
215,3,Multiprocessing vs Threading Python,"<p>I am trying to understand the advantages of <a href=""http://docs.python.org/library/multiprocessing"" rel=""noreferrer"">multiprocessing</a> over <a href=""http://docs.python.org/library/threading"" rel=""noreferrer"">threading</a>. I know that <strong>multiprocessing</strong> gets around the Global Interpreter Lock, but what other advantages are there, and can <strong>threading</strong> not do the same thing?</p>
","Multiprocessing vs Threading Python<p>I am trying to understand the advantages of <a href=""http://docs.python.org/library/multiprocessing"" rel=""noreferrer"">multiprocessing</a> over <a href=""http://docs.python.org/library/threading"" rel=""noreferrer"">threading</a>. I know that <strong>multiprocessing</strong> gets around the Global Interpreter Lock, but what other advantages are there, and can <strong>threading</strong> not do the same thing?</p>
",<python><multithreading><multiprocessing>,threading multiprocessing advantages lock gets global interpreter vs thing pythoni,"<p>The <code>threading</code> module uses threads, the <code>multiprocessing</code> module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.</p>

<p>Spawning processes is a bit slower than spawning threads.</p>
",,
216,4,How to remove items from a list while iterating?,"<p>I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. </p>

<pre><code>for tup in somelist:
    if determine(tup):
         code_to_remove_tup
</code></pre>

<p>What should I use in place of <code>code_to_remove_tup</code>? I can't figure out how to remove the item in this fashion.</p>
","How to remove items from a list while iterating?<p>I'm iterating over a list of tuples in Python, and am attempting to remove them if they meet certain criteria. </p>

<pre><code>for tup in somelist:
    if determine(tup):
         code_to_remove_tup
</code></pre>

<p>What should I use in place of <code>code_to_remove_tup</code>? I can't figure out how to remove the item in this fashion.</p>
",<python><iteration>,remove iterating criteria codetoremovetup fashion attempting meet list place certain,"<p>You can use a list comprehension to create a new list containing only the elements you don't want to remove:</p>
<pre><code>somelist = [x for x in somelist if not determine(x)]
</code></pre>
<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>
<pre><code>somelist[:] = [x for x in somelist if not determine(x)]
</code></pre>
<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>
<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>
<pre><code>from itertools import ifilterfalse
somelist[:] = ifilterfalse(determine, somelist)
</code></pre>
<p>Or in Python 3:</p>
<pre><code>from itertools import filterfalse
somelist[:] = filterfalse(determine, somelist)
</code></pre>
",,
217,1,Find which version of package is installed with pip,"<p>Using pip, is it possible to figure out which version of a package is currently installed?</p>

<p>I know about <code>pip install XYZ --upgrade</code> but I am wondering if there is anything like <code>pip info XYZ</code>.  If not what would be the best way to tell what version I am currently using.</p>
","Find which version of package is installed with pip<p>Using pip, is it possible to figure out which version of a package is currently installed?</p>

<p>I know about <code>pip install XYZ --upgrade</code> but I am wondering if there is anything like <code>pip info XYZ</code>.  If not what would be the best way to tell what version I am currently using.</p>
",<python><pip>,version pip xyz currently installed package pipusing info upgrade figure,"<p>As of <a href=""https://github.com/pypa/pip/blob/1.3/CHANGES.txt#L54"" rel=""noreferrer"">pip 1.3</a>, there is a <code>pip show</code> command.</p>

<pre><code>$ pip show Jinja2
---
Name: Jinja2
Version: 2.7.3
Location: /path/to/virtualenv/lib/python2.7/site-packages
Requires: markupsafe
</code></pre>

<p>In older versions, <code>pip freeze</code> and <code>grep</code> should do the job nicely.</p>

<pre><code>$ pip freeze | grep Jinja2
Jinja2==2.7.3
</code></pre>
",,
218,1,What is the difference between pip and conda?,"<p>I know <code>pip</code> is a package manager for python packages. However, I saw the installation on IPython's website use <code>conda</code> to install IPython.</p>

<p>Can I use <code>pip</code> to install IPython? Why should I use <code>conda</code> as another python package manager when I already have <code>pip</code>?</p>

<p>What is the difference between <code>pip</code> and <code>conda</code>?</p>
","What is the difference between pip and conda?<p>I know <code>pip</code> is a package manager for python packages. However, I saw the installation on IPython's website use <code>conda</code> to install IPython.</p>

<p>Can I use <code>pip</code> to install IPython? Why should I use <code>conda</code> as another python package manager when I already have <code>pip</code>?</p>

<p>What is the difference between <code>pip</code> and <code>conda</code>?</p>
",<python><pip><ipython><package-managers><conda>,conda pip ipython manager package install use difference saw website,"<p>Quoting from the <a href=""http://web.archive.org/web/20170415041123/www.continuum.io/blog/developer-blog/python-packages-and-environments-conda"" rel=""noreferrer"">Conda blog</a>:</p>
<blockquote>
<p>Having been involved in the python world for so long, we are all aware of pip, easy_install, and virtualenv, but these tools did not meet all of our specific requirements. The main problem is that they are focused around Python, neglecting non-Python library dependencies, such as HDF5, MKL, LLVM, etc., which do not have a setup.py in their source code and also do not install files into Pythonƒ??s site-packages directory.</p>
</blockquote>
<p>So Conda is a packaging tool and installer that aims to do more than what <code>pip</code> does; handle library dependencies <em>outside</em> of the Python packages as well as the Python packages themselves. Conda also creates a virtual environment, like <code>virtualenv</code> does.</p>
<p>As such, Conda should be compared to <a href=""http://www.buildout.org/en/latest/"" rel=""noreferrer"">Buildout</a> perhaps, another tool that lets you handle both Python and non-Python installation tasks.</p>
<p>Because Conda introduces a new packaging format, you cannot use <code>pip</code> and Conda interchangeably;  <code>pip</code> cannot install the Conda package format. You can use the two tools side by side (by installing <code>pip</code> with <code>conda install pip</code>) but they do not interoperate either.</p>
<p>Since writing this answer, Anaconda has published a <a href=""https://www.anaconda.com/understanding-conda-and-pip/"" rel=""noreferrer"">new page on <em>Understanding Conda and Pip</em></a>, which echoes this as well:</p>
<blockquote>
<p>This highlights a key difference between conda and pip. Pip installs Python packages whereas conda installs packages which may contain software written in any language. For example, before using pip, a Python interpreter must be installed via a system package manager or by downloading and running an installer. Conda on the other hand can install Python packages as well as the Python interpreter directly.</p>
</blockquote>
<p>and further on</p>
<blockquote>
<p>Occasionally a package is needed which is not available as a conda package but is available on PyPI and can be installed with pip. In these cases, it makes sense to try to use both conda and pip.</p>
</blockquote>
",,
219,3,Python integer incrementing with ++,"<p>I've always laughed to myself when I've looked back at my VB6 days and thought, &quot;What modern language doesn't allow incrementing with double plus signs?&quot;:</p>
<pre><code>number++
</code></pre>
<p>To my surprise, I can't find anything about this in the Python docs. Must I really subject myself to <code>number = number + 1</code>? Don't people use the <code>++</code> / <code>--</code> notation?</p>
","Python integer incrementing with ++<p>I've always laughed to myself when I've looked back at my VB6 days and thought, &quot;What modern language doesn't allow incrementing with double plus signs?&quot;:</p>
<pre><code>number++
</code></pre>
<p>To my surprise, I can't find anything about this in the Python docs. Must I really subject myself to <code>number = number + 1</code>? Don't people use the <code>++</code> / <code>--</code> notation?</p>
",<python><syntax><increment>,incrementing number laughed signs subject vb surprise days allow notation,"<p>Python doesn't support <code>++</code>, but you can do:</p>

<pre><code>number += 1
</code></pre>
",,
220,5,What is the naming convention in Python for variable and function names?,"<p>Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase:</p>

<pre class=""lang-cs prettyprint-override""><code>// C# example
string thisIsMyVariable = ""a""
public void ThisIsMyMethod()
</code></pre>

<p>In Python, I have seen the above but I have also seen underscores being used:</p>

<pre class=""lang-py prettyprint-override""><code># python example
this_is_my_variable = 'a'
def this_is_my_function():
</code></pre>

<p>Is there a more preferable, definitive coding style for Python?</p>
","What is the naming convention in Python for variable and function names?<p>Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase:</p>

<pre class=""lang-cs prettyprint-override""><code>// C# example
string thisIsMyVariable = ""a""
public void ThisIsMyMethod()
</code></pre>

<p>In Python, I have seen the above but I have also seen underscores being used:</p>

<pre class=""lang-py prettyprint-override""><code># python example
this_is_my_variable = 'a'
def this_is_my_function():
</code></pre>

<p>Is there a more preferable, definitive coding style for Python?</p>
",<python><variables><function><naming-conventions>,naming convention names seen camelcase pascalcase preferable coming background definitive,"<p>See Python <a href=""https://www.python.org/dev/peps/pep-0008/#function-and-variable-names"" rel=""noreferrer"">PEP 8: Function and Variable Names</a>:</p>
<blockquote>
<p>Function names should be <a href=""https://en.wikipedia.org/wiki/Snake_case"" rel=""noreferrer"">lowercase, with words separated by underscores</a> as necessary to improve readability.</p>
<p>Variable names follow the same convention as function names.</p>
<p><a href=""https://en.wikipedia.org/wiki/MixedCase"" rel=""noreferrer"">mixedCase</a> is allowed only in contexts where that's already the prevailing style (e.g. <a href=""https://docs.python.org/library/threading.html"" rel=""noreferrer"">threading.py</a>), to retain backwards compatibility.</p>
</blockquote>
",,
221,6,How to retrieve a module's path?,"<p>I want to detect whether module has changed. Now, using inotify is simple, you just need to know the directory you want to get notifications from.</p>

<p>How do I retrieve a module's path in python?</p>
","How to retrieve a module's path?<p>I want to detect whether module has changed. Now, using inotify is simple, you just need to know the directory you want to get notifications from.</p>

<p>How do I retrieve a module's path in python?</p>
",<python><module><inotify>,module retrieve path notifications inotify detect changed want simple directory,"<pre><code>import a_module
print(a_module.__file__)
</code></pre>

<p>Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do:</p>

<pre><code>import os
path = os.path.abspath(a_module.__file__)
</code></pre>

<p>You can also try:</p>

<pre><code>path = os.path.dirname(a_module.__file__)
</code></pre>

<p>To get the module's directory.</p>
",,
222,3,How to make IPython notebook matplotlib plot inline,"<p>I am trying to use IPython notebook on MacOS X with Python 2.7.2 and IPython 1.1.0.</p>

<p>I cannot get matplotlib graphics to show up inline.</p>

<pre><code>import matplotlib
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline  
</code></pre>

<p>I have also tried <code>%pylab inline</code> and the ipython command line arguments <code>--pylab=inline</code> but this makes no difference.</p>

<pre><code>x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()
</code></pre>

<p>Instead of inline graphics, I get this:</p>

<pre><code>&lt;matplotlib.figure.Figure at 0x110b9c450&gt;
</code></pre>

<p>And <code>matplotlib.get_backend()</code> shows that I have the <code>'module://IPython.kernel.zmq.pylab.backend_inline'</code> backend.</p>
","How to make IPython notebook matplotlib plot inline<p>I am trying to use IPython notebook on MacOS X with Python 2.7.2 and IPython 1.1.0.</p>

<p>I cannot get matplotlib graphics to show up inline.</p>

<pre><code>import matplotlib
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline  
</code></pre>

<p>I have also tried <code>%pylab inline</code> and the ipython command line arguments <code>--pylab=inline</code> but this makes no difference.</p>

<pre><code>x = np.linspace(0, 3*np.pi, 500)
plt.plot(x, np.sin(x**2))
plt.title('A simple chirp')
plt.show()
</code></pre>

<p>Instead of inline graphics, I get this:</p>

<pre><code>&lt;matplotlib.figure.Figure at 0x110b9c450&gt;
</code></pre>

<p>And <code>matplotlib.get_backend()</code> shows that I have the <code>'module://IPython.kernel.zmq.pylab.backend_inline'</code> backend.</p>
",<python><matplotlib><jupyter-notebook><ipython><data-visualization>,ipython inline pylab matplotlib graphics notebook kernel backendinline getbackend backend,"<p>I used <code>%matplotlib inline</code> in the first cell of the notebook and it works. I think you should try:</p>

<pre><code>%matplotlib inline

import matplotlib
import numpy as np
import matplotlib.pyplot as plt
</code></pre>

<p>You can also always start all your IPython kernels in inline mode by default by setting the following config options in your config files:</p>

<pre><code>c.IPKernelApp.matplotlib=&lt;CaselessStrEnum&gt;
  Default: None
  Choices: ['auto', 'gtk', 'gtk3', 'inline', 'nbagg', 'notebook', 'osx', 'qt', 'qt4', 'qt5', 'tk', 'wx']
  Configure matplotlib for interactive use with the default matplotlib backend.
</code></pre>
",,
223,0,Why dict.get(key) instead of dict[key]?,"<p>Today, I came across the <code>dict</code> method <code>get</code> which, given a key in the dictionary, returns the associated value.</p>

<p>For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do <code>dict[key]</code>, and it returns the same thing:</p>

<pre><code>dictionary = {""Name"": ""Harry"", ""Age"": 17}
dictionary[""Name""]
dictionary.get(""Name"")
</code></pre>
","Why dict.get(key) instead of dict[key]?<p>Today, I came across the <code>dict</code> method <code>get</code> which, given a key in the dictionary, returns the associated value.</p>

<p>For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do <code>dict[key]</code>, and it returns the same thing:</p>

<pre><code>dictionary = {""Name"": ""Harry"", ""Age"": 17}
dictionary[""Name""]
dictionary.get(""Name"")
</code></pre>
",<python><dictionary>,key dict associated returns dictionary value came useful today purpose,"<p>It allows you to provide a default value if the key is missing:</p>

<pre><code>dictionary.get(""bogus"", default_value)
</code></pre>

<p>returns <code>default_value</code> (whatever you choose it to be), whereas</p>

<pre><code>dictionary[""bogus""]
</code></pre>

<p>would raise a <code>KeyError</code>.  </p>

<p>If omitted, <code>default_value</code> is <code>None</code>, such that</p>

<pre><code>dictionary.get(""bogus"")  # &lt;-- No default specified -- defaults to None
</code></pre>

<p>returns <code>None</code> just like </p>

<pre><code>dictionary.get(""bogus"", None)
</code></pre>

<p>would. </p>
",,
224,3,How can I make a Python script standalone executable to run without ANY dependency?,"<p>I'm building a Python application and don't want to force my clients to install Python and modules.</p>
<p>So, is there a way to compile a Python script to be a standalone executable?</p>
","How can I make a Python script standalone executable to run without ANY dependency?<p>I'm building a Python application and don't want to force my clients to install Python and modules.</p>
<p>So, is there a way to compile a Python script to be a standalone executable?</p>
",<python><executable>,standalone executable script clients dependency compile python building force modules,"<p>You can use <a href=""http://www.py2exe.org/"" rel=""noreferrer"">py2exe</a> as already answered and use <a href=""http://cython.org/"" rel=""noreferrer"">Cython</a> to convert your key <code>.py</code> files in <code>.pyc</code>, C compiled files, like <code>.dll</code> in Windows and <code>.so</code> on Linux.</p>
<p>It is much harder to revert than common <code>.pyo</code> and <code>.pyc</code> files (and also gain in performance!).</p>
",,
225,6,How to get an absolute file path in Python,"<p>Given a path such as <code>""mydir/myfile.txt""</code>, how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:</p>

<pre><code>""C:/example/cwd/mydir/myfile.txt""
</code></pre>
","How to get an absolute file path in Python<p>Given a path such as <code>""mydir/myfile.txt""</code>, how do I find the file's absolute path relative to the current working directory in Python? E.g. on Windows, I might end up with:</p>

<pre><code>""C:/example/cwd/mydir/myfile.txt""
</code></pre>
",<python><path><relative-path><absolute-path>,path absolute python mydir file myfile txt relative end working,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""mydir/myfile.txt"")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>

<p>Also works if it is already an absolute path:</p>

<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath(""C:/example/cwd/mydir/myfile.txt"")
'C:/example/cwd/mydir/myfile.txt'
</code></pre>
",,
226,1,pip install mysql-python fails with EnvironmentError: mysql_config not found,"<p><strong>This is the error I get</strong></p>

<pre><code>(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python
Downloading/unpacking mysql-python
  Downloading MySQL-python-1.2.3.tar.gz (70Kb): 70Kb downloaded
  Running setup.py egg_info for package mysql-python
    sh: mysql_config: not found
    Traceback (most recent call last):
      File ""&lt;string&gt;"", line 14, in &lt;module&gt;
      File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;
        metadata, options = get_config()
      File ""setup_posix.py"", line 43, in get_config
        libs = mysql_config(""libs_r"")
      File ""setup_posix.py"", line 24, in mysql_config
        raise EnvironmentError(""%s not found"" % (mysql_config.path,))
    EnvironmentError: mysql_config not found
    Complete output from command python setup.py egg_info:
    sh: mysql_config: not found

Traceback (most recent call last):

  File ""&lt;string&gt;"", line 14, in &lt;module&gt;

  File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;

    metadata, options = get_config()

  File ""setup_posix.py"", line 43, in get_config

    libs = mysql_config(""libs_r"")

  File ""setup_posix.py"", line 24, in mysql_config

    raise EnvironmentError(""%s not found"" % (mysql_config.path,))

EnvironmentError: mysql_config not found

----------------------------------------
Command python setup.py egg_info failed with error code 1
Storing complete log in /home/zjm1126/.pip/pip.log
(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python
Downloading/unpacking mysql-python
  Running setup.py egg_info for package mysql-python
    sh: mysql_config: not found
    Traceback (most recent call last):
      File ""&lt;string&gt;"", line 14, in &lt;module&gt;
      File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;
        metadata, options = get_config()
      File ""setup_posix.py"", line 43, in get_config
        libs = mysql_config(""libs_r"")
      File ""setup_posix.py"", line 24, in mysql_config
        raise EnvironmentError(""%s not found"" % (mysql_config.path,))
    EnvironmentError: mysql_config not found
    Complete output from command python setup.py egg_info:
    sh: mysql_config: not found

Traceback (most recent call last):

  File ""&lt;string&gt;"", line 14, in &lt;module&gt;

  File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;

    metadata, options = get_config()

  File ""setup_posix.py"", line 43, in get_config

    libs = mysql_config(""libs_r"")

  File ""setup_posix.py"", line 24, in mysql_config

    raise EnvironmentError(""%s not found"" % (mysql_config.path,))

EnvironmentError: mysql_config not found

----------------------------------------
Command python setup.py egg_info failed with error code 1
Storing complete log in /home/zjm1126/.pip/pip.log
</code></pre>

<p>What can I do to resolve this?</p>
","pip install mysql-python fails with EnvironmentError: mysql_config not found<p><strong>This is the error I get</strong></p>

<pre><code>(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python
Downloading/unpacking mysql-python
  Downloading MySQL-python-1.2.3.tar.gz (70Kb): 70Kb downloaded
  Running setup.py egg_info for package mysql-python
    sh: mysql_config: not found
    Traceback (most recent call last):
      File ""&lt;string&gt;"", line 14, in &lt;module&gt;
      File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;
        metadata, options = get_config()
      File ""setup_posix.py"", line 43, in get_config
        libs = mysql_config(""libs_r"")
      File ""setup_posix.py"", line 24, in mysql_config
        raise EnvironmentError(""%s not found"" % (mysql_config.path,))
    EnvironmentError: mysql_config not found
    Complete output from command python setup.py egg_info:
    sh: mysql_config: not found

Traceback (most recent call last):

  File ""&lt;string&gt;"", line 14, in &lt;module&gt;

  File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;

    metadata, options = get_config()

  File ""setup_posix.py"", line 43, in get_config

    libs = mysql_config(""libs_r"")

  File ""setup_posix.py"", line 24, in mysql_config

    raise EnvironmentError(""%s not found"" % (mysql_config.path,))

EnvironmentError: mysql_config not found

----------------------------------------
Command python setup.py egg_info failed with error code 1
Storing complete log in /home/zjm1126/.pip/pip.log
(mysite)zjm1126@zjm1126-G41MT-S2:~/zjm_test/mysite$ pip install mysql-python
Downloading/unpacking mysql-python
  Running setup.py egg_info for package mysql-python
    sh: mysql_config: not found
    Traceback (most recent call last):
      File ""&lt;string&gt;"", line 14, in &lt;module&gt;
      File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;
        metadata, options = get_config()
      File ""setup_posix.py"", line 43, in get_config
        libs = mysql_config(""libs_r"")
      File ""setup_posix.py"", line 24, in mysql_config
        raise EnvironmentError(""%s not found"" % (mysql_config.path,))
    EnvironmentError: mysql_config not found
    Complete output from command python setup.py egg_info:
    sh: mysql_config: not found

Traceback (most recent call last):

  File ""&lt;string&gt;"", line 14, in &lt;module&gt;

  File ""/home/zjm1126/zjm_test/mysite/build/mysql-python/setup.py"", line 15, in &lt;module&gt;

    metadata, options = get_config()

  File ""setup_posix.py"", line 43, in get_config

    libs = mysql_config(""libs_r"")

  File ""setup_posix.py"", line 24, in mysql_config

    raise EnvironmentError(""%s not found"" % (mysql_config.path,))

EnvironmentError: mysql_config not found

----------------------------------------
Command python setup.py egg_info failed with error code 1
Storing complete log in /home/zjm1126/.pip/pip.log
</code></pre>

<p>What can I do to resolve this?</p>
",<python><pip><mysql-python>,mysqlconfig environmenterror foundthis getwhat mysql resolve fails pip install error,"<p>It seems mysql_config is missing on your system or the installer could not find it.
Be sure mysql_config is really installed.</p>

<p>For example on Debian/Ubuntu you must install the package:</p>

<pre><code>sudo apt-get install libmysqlclient-dev
</code></pre>

<p>Maybe the mysql_config is not in your path, it will be the case when you compile by yourself
the mysql suite.</p>

<p><strong>Update:</strong> For recent versions of debian/ubuntu (as of 2018) it is </p>

<pre><code>sudo apt install default-libmysqlclient-dev
</code></pre>
",,
227,3,How to create a GUID/UUID in Python,"<p>How do I create a GUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?</p>
","How to create a GUID/UUID in Python<p>How do I create a GUID in Python that is platform independent? I hear there is a method using ActivePython on Windows but it's Windows only because it uses COM. Is there a method using plain Python?</p>
",<python><uuid><guid><uniqueidentifier>,guid windows create method activepython hear independent uuid plain com,"<blockquote>
<p>The <a href=""https://docs.python.org/3/library/uuid.html"" rel=""noreferrer"">uuid module</a> provides immutable UUID objects (the UUID class) and the functions <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid1"" rel=""noreferrer""><code>uuid1()</code></a>, <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid3"" rel=""noreferrer""><code>uuid3()</code></a>, <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid4"" rel=""noreferrer""><code>uuid4()</code></a>, <a href=""https://docs.python.org/3/library/uuid.html#uuid.uuid5"" rel=""noreferrer""><code>uuid5()</code></a> for generating version 1, 3, 4, and 5 UUIDs as specified in <a href=""https://www.rfc-editor.org/rfc/rfc4122"" rel=""noreferrer"">RFC 4122</a>.</p>
</blockquote>
<blockquote>
<p>If all you want is a unique ID, you should probably call <code>uuid1()</code> or <code>uuid4()</code>. <strong>Note that <code>uuid1()</code> may compromise privacy since it creates a UUID containing the computerƒ??s network address.</strong> <code>uuid4()</code> creates a random UUID.</p>
</blockquote>
<p>Docs:</p>
<ul>
<li><a href=""https://docs.python.org/2/library/uuid.html"" rel=""noreferrer"">Python 2</a></li>
<li><a href=""https://docs.python.org/3/library/uuid.html"" rel=""noreferrer"">Python 3</a></li>
</ul>
<p>Examples (for both Python 2 and 3):</p>
<pre><code>&gt;&gt;&gt; import uuid

&gt;&gt;&gt; # make a random UUID
&gt;&gt;&gt; uuid.uuid4()
UUID('bd65600d-8669-4903-8a14-af88203add38')

&gt;&gt;&gt; # Convert a UUID to a string of hex digits in standard form
&gt;&gt;&gt; str(uuid.uuid4())
'f50ec0b7-f960-400d-91f0-c42a6d44e3d0'

&gt;&gt;&gt; # Convert a UUID to a 32-character hexadecimal string
&gt;&gt;&gt; uuid.uuid4().hex
'9fe2c4e93f654fdbb24c02b15259716c'
</code></pre>
",,
228,3,How to use a decimal range() step value?,"<p>Is there a way to step between 0 and 1 by 0.1? </p>

<p>I thought I could do it like the following, but it failed:</p>

<pre><code>for i in range(0, 1, 0.1):
    print i
</code></pre>

<p>Instead, it says that the step argument cannot be zero, which I did not expect.</p>
","How to use a decimal range() step value?<p>Is there a way to step between 0 and 1 by 0.1? </p>

<p>I thought I could do it like the following, but it failed:</p>

<pre><code>for i in range(0, 1, 0.1):
    print i
</code></pre>

<p>Instead, it says that the step argument cannot be zero, which I did not expect.</p>
",<python><floating-point><range>,step failed decimal says zero range expect argument thought instead,"<p>Rather than using a decimal step directly, it's much safer to express this in terms of how many points you want. Otherwise, floating-point rounding error is likely to give you a wrong result.</p>

<p>You can use the <a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html"" rel=""noreferrer"">linspace</a> function from the <a href=""http://en.wikipedia.org/wiki/NumPy"" rel=""noreferrer"">NumPy</a> library (which isn't part of the standard library but is relatively easy to obtain). <code>linspace</code> takes a number of points to return, and also lets you specify whether or not to include the right endpoint:</p>

<pre><code>&gt;&gt;&gt; np.linspace(0,1,11)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ])
&gt;&gt;&gt; np.linspace(0,1,10,endpoint=False)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])
</code></pre>

<p>If you really want to use a floating-point step value, you can, with <code>numpy.arange</code>.</p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.arange(0.0, 1.0, 0.1)
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])
</code></pre>

<p>Floating-point rounding error <em>will</em> cause problems, though. Here's a simple case where rounding error causes <code>arange</code> to produce a length-4 array when it should only produce 3 numbers:</p>

<pre><code>&gt;&gt;&gt; numpy.arange(1, 1.3, 0.1)
array([1. , 1.1, 1.2, 1.3])
</code></pre>
",,
229,3,"What are the differences between the urllib, urllib2, urllib3 and requests module?","<p>In Python, what are the differences between the <a href=""https://docs.python.org/library/urllib.html"" rel=""noreferrer""><code>urllib</code></a>, <a href=""https://docs.python.org/2.7/library/urllib2.html"" rel=""noreferrer""><code>urllib2</code></a>, <a href=""https://urllib3.readthedocs.io/en/latest/"" rel=""noreferrer""><code>urllib3</code></a> and <a href=""https://requests.readthedocs.io"" rel=""noreferrer""><code>requests</code></a> modules? Why are there three? They seem to do the same thing...</p>
","What are the differences between the urllib, urllib2, urllib3 and requests module?<p>In Python, what are the differences between the <a href=""https://docs.python.org/library/urllib.html"" rel=""noreferrer""><code>urllib</code></a>, <a href=""https://docs.python.org/2.7/library/urllib2.html"" rel=""noreferrer""><code>urllib2</code></a>, <a href=""https://urllib3.readthedocs.io/en/latest/"" rel=""noreferrer""><code>urllib3</code></a> and <a href=""https://requests.readthedocs.io"" rel=""noreferrer""><code>requests</code></a> modules? Why are there three? They seem to do the same thing...</p>
",<python><python-requests><urllib2><urllib><python-2.x>,urllib requests differences thing modules module python format form fork,"<p>I know it's been said already, but I'd highly recommend the <a href=""https://requests.readthedocs.io/"" rel=""noreferrer""><code>requests</code></a> Python package.</p>
<p>If you've used languages other than python, you're probably thinking <code>urllib</code> and <code>urllib2</code> are easy to use, not much code, and highly capable, that's how I used to think.  But the <code>requests</code> package is so unbelievably useful and short that everyone should be using it.</p>
<p>First, it supports a fully restful API, and is as easy as:</p>
<pre><code>import requests

resp = requests.get('http://www.mywebsite.com/user')
resp = requests.post('http://www.mywebsite.com/user')
resp = requests.put('http://www.mywebsite.com/user/put')
resp = requests.delete('http://www.mywebsite.com/user/delete')
</code></pre>
<p>Regardless of whether GET / POST, you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go:</p>
<pre><code>userdata = {&quot;firstname&quot;: &quot;John&quot;, &quot;lastname&quot;: &quot;Doe&quot;, &quot;password&quot;: &quot;jdoe123&quot;}
resp = requests.post('http://www.mywebsite.com/user', data=userdata)
</code></pre>
<p>Plus it even has a built in JSON decoder (again, I know <code>json.loads()</code> isn't a lot more to write, but this sure is convenient):</p>
<pre><code>resp.json()
</code></pre>
<p>Or if your response data is just text, use:</p>
<pre><code>resp.text
</code></pre>
<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>
<ul>
<li>International Domains and URLs</li>
<li>Keep-Alive &amp; Connection Pooling</li>
<li>Sessions with Cookie Persistence</li>
<li>Browser-style SSL Verification</li>
<li>Basic/Digest Authentication</li>
<li>Elegant Key/Value Cookies</li>
<li>Automatic Decompression</li>
<li>Unicode Response Bodies</li>
<li>Multipart File Uploads</li>
<li>Connection Timeouts</li>
<li>.netrc support</li>
<li>List item</li>
<li>Python 2.7, 3.6ƒ??3.9</li>
<li>Thread-safe.</li>
</ul>
",,
230,3,How can I write a `try`/`except` block that catches all exceptions?,"<p>How can I write a <code>try</code>/<code>except</code> block that catches all exceptions?</p>
","How can I write a `try`/`except` block that catches all exceptions?<p>How can I write a <code>try</code>/<code>except</code> block that catches all exceptions?</p>
",<python><exception>,catches exceptions block try write zone fork forth formatwhich formatting,"<p>You can but you probably shouldn't:</p>
<pre><code>try:
    do_something()
except:
    print(&quot;Caught it!&quot;)
</code></pre>
<p>However, this will also catch exceptions like <code>KeyboardInterrupt</code> and you usually don't want that, do you? Unless you re-raise the exception right away - see the following example <a href=""http://docs.python.org/tutorial/errors.html"" rel=""noreferrer"">from the docs</a>:</p>
<pre><code>try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except IOError as (errno, strerror):
    print(&quot;I/O error({0}): {1}&quot;.format(errno, strerror))
except ValueError:
    print(&quot;Could not convert data to an integer.&quot;)
except:
    print(&quot;Unexpected error:&quot;, sys.exc_info()[0])
    raise
</code></pre>
",,
231,0,Traverse a list in reverse order in Python,"<p>So I can start from <code>collection[len(collection)-1]</code> and end in <code>collection[0]</code>.</p>
<p>I also want to be able to access the loop index.</p>
","Traverse a list in reverse order in Python<p>So I can start from <code>collection[len(collection)-1]</code> and end in <code>collection[0]</code>.</p>
<p>I also want to be able to access the loop index.</p>
",<python><loops><reverse>,collection pythonso traverse len reverse start end loop index order,"<p>Use the built-in <a href=""https://docs.python.org/library/functions.html#reversed"" rel=""noreferrer""><code>reversed()</code></a> function:</p>

<pre><code>&gt;&gt;&gt; a = [""foo"", ""bar"", ""baz""]
&gt;&gt;&gt; for i in reversed(a):
...     print(i)
... 
baz
bar
foo
</code></pre>

<p>To also access the original index, use <a href=""https://docs.python.org/library/functions.html#enumerate"" rel=""noreferrer""><code>enumerate()</code></a> on your list before passing it to <code>reversed()</code>:</p>

<pre><code>&gt;&gt;&gt; for i, e in reversed(list(enumerate(a))):
...     print(i, e)
... 
2 baz
1 bar
0 foo
</code></pre>

<p>Since <code>enumerate()</code> returns a generator and generators can't be reversed, you need to convert it to a <code>list</code> first.</p>
",,
232,4,How do you remove duplicates from a list whilst preserving order?,"<p>Is there a built-in that removes duplicates from list in Python, whilst preserving order? I know that I can use a set to remove duplicates, but that destroys the original order. I also know that I can roll my own like this:</p>

<pre><code>def uniq(input):
  output = []
  for x in input:
    if x not in output:
      output.append(x)
  return output
</code></pre>

<p>(Thanks to <a href=""https://stackoverflow.com/users/28169/unwind"">unwind</a> for that <a href=""https://stackoverflow.com/questions/479897/how-do-you-remove-duplicates-from-a-list-in-python#479921"">code sample</a>.)</p>

<p>But I'd like to avail myself of a built-in or a more Pythonic idiom if possible.</p>

<p>Related question: <a href=""https://stackoverflow.com/questions/89178/in-python-what-is-the-fastest-algorithm-for-removing-duplicates-from-a-list-so-t"">In Python, what is the fastest algorithm for removing duplicates from a list so that all elements are unique <em>while preserving order</em>?</a></p>
","How do you remove duplicates from a list whilst preserving order?<p>Is there a built-in that removes duplicates from list in Python, whilst preserving order? I know that I can use a set to remove duplicates, but that destroys the original order. I also know that I can roll my own like this:</p>

<pre><code>def uniq(input):
  output = []
  for x in input:
    if x not in output:
      output.append(x)
  return output
</code></pre>

<p>(Thanks to <a href=""https://stackoverflow.com/users/28169/unwind"">unwind</a> for that <a href=""https://stackoverflow.com/questions/479897/how-do-you-remove-duplicates-from-a-list-in-python#479921"">code sample</a>.)</p>

<p>But I'd like to avail myself of a built-in or a more Pythonic idiom if possible.</p>

<p>Related question: <a href=""https://stackoverflow.com/questions/89178/in-python-what-is-the-fastest-algorithm-for-removing-duplicates-from-a-list-so-t"">In Python, what is the fastest algorithm for removing duplicates from a list so that all elements are unique <em>while preserving order</em>?</a></p>
",<python><list><duplicates><unique>,duplicates preserving order whilst built remove list unwind destroys idiom,"<p>Here you have some alternatives: <a href=""http://www.peterbe.com/plog/uniqifiers-benchmark"" rel=""noreferrer"">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>

<p>Fastest one:</p>

<pre><code>def f7(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]
</code></pre>

<p>Why assign <code>seen.add</code> to <code>seen_add</code> instead of just calling <code>seen.add</code>? Python is a dynamic language, and resolving <code>seen.add</code> each iteration is more costly than resolving a local variable. <code>seen.add</code> could have changed between iterations, and the runtime isn't smart enough to rule that out. To play it safe, it has to check the object each time.</p>

<p>If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: <a href=""http://code.activestate.com/recipes/528878/"" rel=""noreferrer"">http://code.activestate.com/recipes/528878/</a></p>

<p><em>O</em>(1) insertion, deletion and member-check per operation.</p>

<p>(Small additional note: <code>seen.add()</code> always returns <code>None</code>, so the <em><code>or</code></em> above is there only as a way to attempt a set update, and not as an integral part of the logical test.)</p>
",,
233,3,How to use glob() to find files recursively?,"<p>This is what I have:</p>

<pre><code>glob(os.path.join('src','*.c'))
</code></pre>

<p>but I want to search the subfolders of src. Something like this would work:</p>

<pre><code>glob(os.path.join('src','*.c'))
glob(os.path.join('src','*','*.c'))
glob(os.path.join('src','*','*','*.c'))
glob(os.path.join('src','*','*','*','*.c'))
</code></pre>

<p>But this is obviously limited and clunky.</p>
","How to use glob() to find files recursively?<p>This is what I have:</p>

<pre><code>glob(os.path.join('src','*.c'))
</code></pre>

<p>but I want to search the subfolders of src. Something like this would work:</p>

<pre><code>glob(os.path.join('src','*.c'))
glob(os.path.join('src','*','*.c'))
glob(os.path.join('src','*','*','*.c'))
glob(os.path.join('src','*','*','*','*.c'))
</code></pre>

<p>But this is obviously limited and clunky.</p>
",<python><path><filesystems><glob><fnmatch>,recursively subfolders glob src obviously clunky limited search files work,"<p><strong>pathlib.Path.rglob</strong></p>
<p>Use <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob"" rel=""noreferrer""><code>pathlib.Path.rglob</code></a> from the the <a href=""https://docs.python.org/3/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a> module, which was introduced in Python 3.5.</p>
<pre><code>from pathlib import Path

for path in Path('src').rglob('*.c'):
    print(path.name)
</code></pre>
<p>If you don't want to use pathlib, use can use <a href=""https://docs.python.org/3/library/glob.html#glob.glob"" rel=""noreferrer""><code>glob.glob('**/*.c')</code></a>, but don't forget to pass in the <code>recursive</code> keyword parameter and it will use inordinate amount of time on large directories.</p>
<p>For cases where matching files beginning with a dot (<code>.</code>); like files in the current directory or hidden files on Unix based system, use the <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk</code></a> solution below.</p>
<p><strong>os.walk</strong></p>
<p>For older Python versions, use <a href=""https://docs.python.org/2/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk</code></a> to recursively walk a directory and <a href=""https://docs.python.org/2/library/fnmatch.html#fnmatch.filter"" rel=""noreferrer""><code>fnmatch.filter</code></a> to match against a simple expression:</p>
<pre><code>import fnmatch
import os

matches = []
for root, dirnames, filenames in os.walk('src'):
    for filename in fnmatch.filter(filenames, '*.c'):
        matches.append(os.path.join(root, filename))
</code></pre>
",,
234,5,Convert hex string to int in Python,"<p>How do I convert a hex string to an int in Python? </p>

<p>I may have it as ""<code>0xffff</code>"" or just ""<code>ffff</code>"".</p>
","Convert hex string to int in Python<p>How do I convert a hex string to an int in Python? </p>

<p>I may have it as ""<code>0xffff</code>"" or just ""<code>ffff</code>"".</p>
",<python><string><hex>,hex int convert ffff xffff string pythonhow python formatwhich formatted,"<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>
<pre><code>x = int(&quot;deadbeef&quot;, 16)
</code></pre>
<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>
<pre><code>&gt;&gt;&gt; print(int(&quot;0xdeadbeef&quot;, 0))
3735928559
&gt;&gt;&gt; print(int(&quot;10&quot;, 0))
10
</code></pre>
<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; if you omit the second parameter <a href=""https://docs.python.org/library/functions.html#int"" rel=""noreferrer""><code>int()</code></a> will assume base-10.)</p>
",,
235,2,Writing a pandas DataFrame to CSV file,"<p>I have a dataframe in pandas which I would like to write to a CSV file.</p>
<p>I am doing this using:</p>
<pre><code>df.to_csv('out.csv')
</code></pre>
<p>And getting the following error:</p>
<pre><code>UnicodeEncodeError: 'ascii' codec can't encode character u'\u03b1' in position 20: ordinal not in range(128)
</code></pre>
<ul>
<li>Is there any way to get around this easily (i.e. I have unicode characters in my data frame)?</li>
<li>And is there a way to write to a tab delimited file instead of a CSV using e.g. a 'to-tab' method (that I don't think exists)?</li>
</ul>
","Writing a pandas DataFrame to CSV file<p>I have a dataframe in pandas which I would like to write to a CSV file.</p>
<p>I am doing this using:</p>
<pre><code>df.to_csv('out.csv')
</code></pre>
<p>And getting the following error:</p>
<pre><code>UnicodeEncodeError: 'ascii' codec can't encode character u'\u03b1' in position 20: ordinal not in range(128)
</code></pre>
<ul>
<li>Is there any way to get around this easily (i.e. I have unicode characters in my data frame)?</li>
<li>And is there a way to write to a tab delimited file instead of a CSV using e.g. a 'to-tab' method (that I don't think exists)?</li>
</ul>
",<python><csv><pandas><dataframe>,csv tab write dataframe pandas delimited file filei easily using,"<p>To delimit by a tab you can use the <code>sep</code> argument of <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html""><code>to_csv</code></a>:</p>

<pre><code>df.to_csv(file_name, sep='\t')
</code></pre>

<p>To use a specific encoding (e.g. 'utf-8') use the <code>encoding</code> argument:</p>

<pre><code>df.to_csv(file_name, sep='\t', encoding='utf-8')
</code></pre>
",,
236,1,What is the easiest way to remove all packages installed by pip?,"<p>I'm trying to fix up one of my virtualenvs - I'd like to reset all of the installed libraries back to the ones that match production.</p>

<p>Is there a quick and easy way to do this with pip?</p>
","What is the easiest way to remove all packages installed by pip?<p>I'm trying to fix up one of my virtualenvs - I'd like to reset all of the installed libraries back to the ones that match production.</p>

<p>Is there a quick and easy way to do this with pip?</p>
",<python><pip><virtualenv><python-packaging>,installed pip virtualenvs production reset libraries easiest ones match quick,"<p>I've found this snippet as an alternative solution. It's a more graceful removal of libraries than remaking the virtualenv:</p>

<pre><code>pip freeze | xargs pip uninstall -y
</code></pre>

<hr>

<p>In case you have packages installed via VCS, you need to exclude those lines and remove the packages manually (elevated from the comments below):</p>

<pre><code>pip freeze | grep -v ""^-e"" | xargs pip uninstall -y
</code></pre>
",,
237,4,How to concatenate items in a list to a single string?,"<p>Is there a simpler way to concatenate string items in a list into a single string?  Can I use the <code>str.join()</code> function?</p>

<p>E.g. this is the input <code>['this','is','a','sentence']</code> and this is the desired output <code>this-is-a-sentence</code></p>

<pre><code>sentence = ['this','is','a','sentence']
sent_str = """"
for i in sentence:
    sent_str += str(i) + ""-""
sent_str = sent_str[:-1]
print sent_str
</code></pre>
","How to concatenate items in a list to a single string?<p>Is there a simpler way to concatenate string items in a list into a single string?  Can I use the <code>str.join()</code> function?</p>

<p>E.g. this is the input <code>['this','is','a','sentence']</code> and this is the desired output <code>this-is-a-sentence</code></p>

<pre><code>sentence = ['this','is','a','sentence']
sent_str = """"
for i in sentence:
    sent_str += str(i) + ""-""
sent_str = sent_str[:-1]
print sent_str
</code></pre>
",<python><string><list><concatenation>,sentence concatenate items single string desired join simpler list str,"<p>Use <a href=""https://docs.python.org/library/stdtypes.html#str.join"" rel=""noreferrer""><code>str.join</code></a>:</p>
<pre><code>&gt;&gt;&gt; sentence = ['this', 'is', 'a', 'sentence']
&gt;&gt;&gt; '-'.join(sentence)
'this-is-a-sentence'
&gt;&gt;&gt; ' '.join(sentence)
'this is a sentence'
</code></pre>
",,
238,3,Why does Python code run faster in a function?,"<pre><code>def main():
    for i in xrange(10**8):
        pass
main()
</code></pre>

<p>This piece of code in Python runs in  (Note: The timing is done with the time function in BASH in Linux.)</p>

<pre><code>real    0m1.841s
user    0m1.828s
sys     0m0.012s
</code></pre>

<p>However, if the for loop isn't placed within a function, </p>

<pre><code>for i in xrange(10**8):
    pass
</code></pre>

<p>then it runs for a much longer time:</p>

<pre><code>real    0m4.543s
user    0m4.524s
sys     0m0.012s
</code></pre>

<p>Why is this?</p>
","Why does Python code run faster in a function?<pre><code>def main():
    for i in xrange(10**8):
        pass
main()
</code></pre>

<p>This piece of code in Python runs in  (Note: The timing is done with the time function in BASH in Linux.)</p>

<pre><code>real    0m1.841s
user    0m1.828s
sys     0m0.012s
</code></pre>

<p>However, if the for loop isn't placed within a function, </p>

<pre><code>for i in xrange(10**8):
    pass
</code></pre>

<p>then it runs for a much longer time:</p>

<pre><code>real    0m4.543s
user    0m4.524s
sys     0m0.012s
</code></pre>

<p>Why is this?</p>
",<python><performance><profiling><benchmarking><cpython>,runs function time placed longer bash timing code piece faster,"<p>You might ask <em>why</em> it is faster to store local variables than globals. This is a CPython implementation detail.</p>

<p>Remember that CPython is compiled to bytecode, which the interpreter runs. When a function is compiled, the local variables are stored in a fixed-size array (<em>not</em> a <code>dict</code>) and variable names are assigned to indexes. This is possible because you can't dynamically add local variables to a function. Then retrieving a local variable is literally a pointer lookup into the list and a refcount increase on the <code>PyObject</code> which is trivial.</p>

<p>Contrast this to a global lookup (<code>LOAD_GLOBAL</code>), which is a true <code>dict</code> search involving a hash and so on. Incidentally, this is why you need to specify <code>global i</code> if you want it to be global: if you ever assign to a variable inside a scope, the compiler will issue <code>STORE_FAST</code>s for its access unless you tell it not to.</p>

<p>By the way, global lookups are still pretty optimised. Attribute lookups <code>foo.bar</code> are the <em>really</em> slow ones!</p>

<p>Here is small <a href=""https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Local_Variables"" rel=""noreferrer"">illustration</a> on local variable efficiency.</p>
",,
239,3,Python `if x is not None` or `if not x is None`?,"<p>I've always thought of the <code>if not x is None</code> version to be more clear, but Google's <a href=""https://google.github.io/styleguide/pyguide.html?showone=True/False_evaluations#True/False_evaluations"" rel=""noreferrer"">style guide</a> and <a href=""https://www.python.org/dev/peps/pep-0008/#programming-recommendations"" rel=""noreferrer"">PEP-8</a> both use <code>if x is not None</code>. Are there any minor performance differences (I'm assuming not), and is there any case where one really doesn't fit (making the other a clear winner for my convention)?*</p>
<p>*I'm referring to any singleton, rather than just <code>None</code>.</p>
<blockquote>
<p>...to compare singletons like
None. Use is  or is not.</p>
</blockquote>
","Python `if x is not None` or `if not x is None`?<p>I've always thought of the <code>if not x is None</code> version to be more clear, but Google's <a href=""https://google.github.io/styleguide/pyguide.html?showone=True/False_evaluations#True/False_evaluations"" rel=""noreferrer"">style guide</a> and <a href=""https://www.python.org/dev/peps/pep-0008/#programming-recommendations"" rel=""noreferrer"">PEP-8</a> both use <code>if x is not None</code>. Are there any minor performance differences (I'm assuming not), and is there any case where one really doesn't fit (making the other a clear winner for my convention)?*</p>
<p>*I'm referring to any singleton, rather than just <code>None</code>.</p>
<blockquote>
<p>...to compare singletons like
None. Use is  or is not.</p>
</blockquote>
",<python><coding-style><nonetype><boolean-expression><pep8>,clear likenone winner minor fit convention singleton singletons guide referring,"<p>There's no performance difference, as they compile to the same bytecode:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(&quot;not x is None&quot;)
  1           0 LOAD_NAME                0 (x)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               9 (is not)
              6 RETURN_VALUE
&gt;&gt;&gt; dis.dis(&quot;x is not None&quot;)
  1           0 LOAD_NAME                0 (x)
              2 LOAD_CONST               0 (None)
              4 COMPARE_OP               9 (is not)
              6 RETURN_VALUE
</code></pre>
<p>Stylistically, I try to avoid <code>not x is y</code>, a human reader might misunderstand it as <code>(not x) is y</code>. If I write <code>x is not y</code> then there is no ambiguity.</p>
",,
240,3,How to POST JSON data with Python Requests?,"<p>I need to POST a JSON from a client to a server. I'm using Python 2.7.1 and simplejson. The client is using Requests. The server is CherryPy. I can GET a hard-coded JSON from the server (code not shown), but when I try to POST a JSON to the server, I get ""400 Bad Request"".</p>

<p>Here is my client code:</p>

<pre><code>data = {'sender':   'Alice',
    'receiver': 'Bob',
    'message':  'We did it!'}
data_json = simplejson.dumps(data)
payload = {'json_payload': data_json}
r = requests.post(""http://localhost:8080"", data=payload)
</code></pre>

<p>Here is the server code.</p>

<pre><code>class Root(object):

    def __init__(self, content):
        self.content = content
        print self.content  # this works

    exposed = True

    def GET(self):
        cherrypy.response.headers['Content-Type'] = 'application/json'
        return simplejson.dumps(self.content)

    def POST(self):
        self.content = simplejson.loads(cherrypy.request.body.read())
</code></pre>

<p>Any ideas?</p>
","How to POST JSON data with Python Requests?<p>I need to POST a JSON from a client to a server. I'm using Python 2.7.1 and simplejson. The client is using Requests. The server is CherryPy. I can GET a hard-coded JSON from the server (code not shown), but when I try to POST a JSON to the server, I get ""400 Bad Request"".</p>

<p>Here is my client code:</p>

<pre><code>data = {'sender':   'Alice',
    'receiver': 'Bob',
    'message':  'We did it!'}
data_json = simplejson.dumps(data)
payload = {'json_payload': data_json}
r = requests.post(""http://localhost:8080"", data=payload)
</code></pre>

<p>Here is the server code.</p>

<pre><code>class Root(object):

    def __init__(self, content):
        self.content = content
        print self.content  # this works

    exposed = True

    def GET(self):
        cherrypy.response.headers['Content-Type'] = 'application/json'
        return simplejson.dumps(self.content)

    def POST(self):
        self.content = simplejson.loads(cherrypy.request.body.read())
</code></pre>

<p>Any ideas?</p>
",<python><json><python-requests><cherrypy>,server json client post requests code simplejson coded cherrypy bad,"<p>Starting with Requests version 2.4.2, you can use the <a href=""https://requests.readthedocs.io/en/master/user/quickstart/#more-complicated-post-requests"" rel=""noreferrer""><code>json=</code> parameter</a> (which takes a dictionary) instead of <code>data=</code> (which takes a string) in the call:</p>
<pre><code>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.post('http://httpbin.org/post', json={&quot;key&quot;: &quot;value&quot;})
&gt;&gt;&gt; r.status_code
200
&gt;&gt;&gt; r.json()
{'args': {},
 'data': '{&quot;key&quot;: &quot;value&quot;}',
 'files': {},
 'form': {},
 'headers': {'Accept': '*/*',
             'Accept-Encoding': 'gzip, deflate',
             'Connection': 'close',
             'Content-Length': '16',
             'Content-Type': 'application/json',
             'Host': 'httpbin.org',
             'User-Agent': 'python-requests/2.4.3 CPython/3.4.0',
             'X-Request-Id': 'xx-xx-xx'},
 'json': {'key': 'value'},
 'origin': 'x.x.x.x',
 'url': 'http://httpbin.org/post'}
</code></pre>
",,
241,1,pip install from git repo branch,"<p>Trying to <code>pip</code> install a repo's specific branch. Google tells me to</p>
<pre><code>pip install https://github.com/user/repo.git@branch
</code></pre>
<p>The branch's name is <code>issue/34/oscar-0.6</code> so I did <code>pip  install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6</code> but its returning a 404.</p>
<p>How do I install this branch?</p>
","pip install from git repo branch<p>Trying to <code>pip</code> install a repo's specific branch. Google tells me to</p>
<pre><code>pip install https://github.com/user/repo.git@branch
</code></pre>
<p>The branch's name is <code>issue/34/oscar-0.6</code> so I did <code>pip  install https://github.com/tangentlabs/django-oscar-paypal.git@/issue/34/oscar-0.6</code> but its returning a 404.</p>
<p>How do I install this branch?</p>
",<python><git><pip>,oscar branch install repo pip git issue tangentlabs tothe branchtrying,"<p>Prepend the url prefix <code>git+</code> (See <a href=""https://pip.pypa.io/en/stable/topics/vcs-support/"" rel=""noreferrer"">VCS Support</a>):</p>
<pre><code>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6
</code></pre>
<p>And specify the branch name without the leading <code>/</code>.</p>
",,
242,3,Is there any way to kill a Thread?,"<p>Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?</p>
","Is there any way to kill a Thread?<p>Is it possible to terminate a running thread without setting/checking any flags/semaphores/etc.?</p>
",<python><multithreading><kill><terminate>,thread semaphores setting flags kill terminate checking running possible way,"<p>It is generally a bad pattern to kill a thread abruptly, in Python, and in any language. Think of the following cases:</p>
<ul>
<li>the thread is holding a critical resource that must be closed properly</li>
<li>the thread has created several other threads that must be killed as well.</li>
</ul>
<p>The nice way of handling this, if you can afford it (if you are managing your own threads), is to have an exit_request flag that each thread checks on a regular interval to see if it is time for it to exit.</p>
<p><strong>For example:</strong></p>
<pre><code>import threading

class StoppableThread(threading.Thread):
    &quot;&quot;&quot;Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition.&quot;&quot;&quot;

    def __init__(self,  *args, **kwargs):
        super(StoppableThread, self).__init__(*args, **kwargs)
        self._stop_event = threading.Event()

    def stop(self):
        self._stop_event.set()

    def stopped(self):
        return self._stop_event.is_set()
</code></pre>
<p>In this code, you should call <code>stop()</code> on the thread when you want it to exit, and wait for the thread to exit properly using <code>join()</code>. The thread should check the stop flag at regular intervals.</p>
<p>There are cases, however, when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls, and you want to interrupt it.</p>
<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>
<pre><code>def _async_raise(tid, exctype):
    '''Raises an exception in the threads with id tid'''
    if not inspect.isclass(exctype):
        raise TypeError(&quot;Only types can be raised (not instances)&quot;)
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),
                                                     ctypes.py_object(exctype))
    if res == 0:
        raise ValueError(&quot;invalid thread id&quot;)
    elif res != 1:
        # &quot;if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect&quot;
        ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)
        raise SystemError(&quot;PyThreadState_SetAsyncExc failed&quot;)

class ThreadWithExc(threading.Thread):
    '''A thread class that supports raising an exception in the thread from
       another thread.
    '''
    def _get_my_tid(self):
        &quot;&quot;&quot;determines this (self's) thread id

        CAREFUL: this function is executed in the context of the caller
        thread, to get the identity of the thread represented by this
        instance.
        &quot;&quot;&quot;
        if not self.isAlive():
            raise threading.ThreadError(&quot;the thread is not active&quot;)

        # do we have it cached?
        if hasattr(self, &quot;_thread_id&quot;):
            return self._thread_id

        # no, look for it in the _active dict
        for tid, tobj in threading._active.items():
            if tobj is self:
                self._thread_id = tid
                return tid

        # TODO: in python 2.6, there's a simpler way to do: self.ident

        raise AssertionError(&quot;could not determine the thread's id&quot;)

    def raiseExc(self, exctype):
        &quot;&quot;&quot;Raises the given exception type in the context of this thread.

        If the thread is busy in a system call (time.sleep(),
        socket.accept(), ...), the exception is simply ignored.

        If you are sure that your exception should terminate the thread,
        one way to ensure that it works is:

            t = ThreadWithExc( ... )
            ...
            t.raiseExc( SomeException )
            while t.isAlive():
                time.sleep( 0.1 )
                t.raiseExc( SomeException )

        If the exception is to be caught by the thread, you need a way to
        check that your thread has caught it.

        CAREFUL: this function is executed in the context of the
        caller thread, to raise an exception in the context of the
        thread represented by this instance.
        &quot;&quot;&quot;
        _async_raise( self._get_my_tid(), exctype )
</code></pre>
<p>(Based on <a href=""http://tomerfiliba.com/recipes/Thread2/"" rel=""noreferrer"">Killable Threads</a> by Tomer Filiba. The quote about the return value of <code>PyThreadState_SetAsyncExc</code> appears to be from an <a href=""https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c"" rel=""noreferrer"">old version of Python</a>.)</p>
<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>
<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>
",,
243,6,python setup.py uninstall,"<p>I have installed a python package with <code>python setup.py install</code>.</p>

<p>How do I uninstall it?</p>
","python setup.py uninstall<p>I have installed a python package with <code>python setup.py install</code>.</p>

<p>How do I uninstall it?</p>
",<python><setup.py><pypi>,setup py uninstalli uninstall installed python package install forgotten forever,"<p>Note: Avoid using <code>python setup.py install</code> use <code>pip install .</code></p>

<p>You need to remove all files manually, and also undo any other stuff that installation did manually.</p>

<p>If you don't know the list of all files, you can reinstall it with the <code>--record</code> option, and take a look at the list this produces.</p>

<p>To record a list of installed files, you can use:</p>

<pre><code>python setup.py install --record files.txt
</code></pre>

<p>Once you want to uninstall you can use xargs to do the removal:</p>

<pre><code>xargs rm -rf &lt; files.txt
</code></pre>

<p>Or if you're running Windows, use Powershell:  </p>

<pre><code>Get-Content files.txt | ForEach-Object {Remove-Item $_ -Recurse -Force}
</code></pre>

<p>Then delete also the containing directory, e.g. <code>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/my_module-0.1.egg/</code> on <code>macOS</code>. It has no files, but Python will still import an empty module:</p>

<pre><code>&gt;&gt;&gt; import my_module
&gt;&gt;&gt; my_module.__file__
None
</code></pre>

<p>Once deleted, Python shows:</p>

<pre><code>&gt;&gt;&gt; import my_module
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
ModuleNotFoundError: No module named 'my_module'
</code></pre>
",,
244,3,How to properly ignore exceptions,"<p>When you just want to do a try-except without handling the exception, how do you do it in Python?</p>

<p>Is the following the right way to do it?</p>

<pre><code>try:
    shutil.rmtree(path)
except:
    pass
</code></pre>
","How to properly ignore exceptions<p>When you just want to do a try-except without handling the exception, how do you do it in Python?</p>

<p>Is the following the right way to do it?</p>

<pre><code>try:
    shutil.rmtree(path)
except:
    pass
</code></pre>
",<python><exception><try-except>,ignore exceptionswhen handling properly exception try right following want way,"<pre><code>try:
    doSomething()
except: 
    pass
</code></pre>

<p>or</p>

<pre><code>try:
    doSomething()
except Exception: 
    pass
</code></pre>

<p>The difference is that the first one will also catch <code>KeyboardInterrupt</code>, <code>SystemExit</code> and stuff like that, which are derived directly from <code>exceptions.BaseException</code>, not <code>exceptions.Exception</code>.</p>

<p>See documentation for details:</p>

<ul>
<li><a href=""http://docs.python.org/reference/compound_stmts.html#try"" rel=""noreferrer""><code>try</code> statement</a></li>
<li><a href=""http://docs.python.org/library/exceptions"" rel=""noreferrer"">exceptions</a></li>
</ul>
",,
245,4,Is there a list of Pytz Timezones?,"<p>I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?</p>
","Is there a list of Pytz Timezones?<p>I would like to know what are all the possible values for the timezone argument in the Python library pytz. How to do it?</p>
",<python><django><pytz>,pytz timezones timezone argument library possible values know list like,"<p>You can list all the available timezones with <code>pytz.all_timezones</code>:</p>

<pre><code>In [40]: import pytz
In [41]: pytz.all_timezones
Out[42]: 
['Africa/Abidjan',
 'Africa/Accra',
 'Africa/Addis_Ababa',
 ...]
</code></pre>

<p>There is also <code>pytz.common_timezones</code>:</p>

<pre><code>In [45]: len(pytz.common_timezones)
Out[45]: 403

In [46]: len(pytz.all_timezones)
Out[46]: 563
</code></pre>
",,
246,6,Importing modules from parent folder,"<p>I am running Python 2.5.</p>

<p>This is my folder tree:</p>

<pre><code>ptdraft/
  nib.py
  simulations/
    life/
      life.py
</code></pre>

<p>(I also have <code>__init__.py</code> in each folder, omitted here for readability)</p>

<p>How do I import the <code>nib</code> module from inside the <code>life</code> module? I am hoping it is possible to do without tinkering with sys.path.</p>

<p>Note: The main module being run is in the <code>ptdraft</code> folder.</p>
","Importing modules from parent folder<p>I am running Python 2.5.</p>

<p>This is my folder tree:</p>

<pre><code>ptdraft/
  nib.py
  simulations/
    life/
      life.py
</code></pre>

<p>(I also have <code>__init__.py</code> in each folder, omitted here for readability)</p>

<p>How do I import the <code>nib</code> module from inside the <code>life</code> module? I am hoping it is possible to do without tinkering with sys.path.</p>

<p>Note: The main module being run is in the <code>ptdraft</code> folder.</p>
",<python><module><path><directory><python-import>,folder module importing ptdraft omitted folderi nib parent readability tinkering,"<p>It seems that the problem is not related to the module being in a parent directory or anything like that.</p>

<p>You need to add the directory that contains <code>ptdraft</code> to PYTHONPATH</p>

<p>You said that <code>import nib</code> worked with you, that probably means that you added <code>ptdraft</code> itself (not its parent) to PYTHONPATH.</p>
",,
247,6,Running unittest with typical test directory structure,"<p>The very common directory structure for even a simple Python module seems to be to separate the unit tests into their own <code>test</code> directory:</p>

<pre><code>new_project/
    antigravity/
        antigravity.py
    test/
        test_antigravity.py
    setup.py
    etc.
</code></pre>

<p>for example see this <a href=""http://infinitemonkeycorps.net/docs/pph/"" rel=""noreferrer"">Python project howto</a>.</p>

<p>My question is simply <strong>What's the usual way of actually running the tests?</strong> I suspect this is obvious to everyone except me, but you can't just run <code>python test_antigravity.py</code> from the test directory as its <code>import antigravity</code> will fail as the module is not on the path.</p>

<p>I know I could modify PYTHONPATH and other search path related tricks, but I can't believe that's the simplest way - it's fine if you're the developer but not realistic to expect your users to use if they just want to check the tests are passing.</p>

<p>The other alternative is just to copy the test file into the other directory, but it seems a bit dumb and misses the point of having them in a separate directory to start with.</p>

<p>So, if you had just downloaded the source to my new project how would you run the unit tests? I'd prefer an answer that would let me say to my users: ""To run the unit tests do X.""</p>
","Running unittest with typical test directory structure<p>The very common directory structure for even a simple Python module seems to be to separate the unit tests into their own <code>test</code> directory:</p>

<pre><code>new_project/
    antigravity/
        antigravity.py
    test/
        test_antigravity.py
    setup.py
    etc.
</code></pre>

<p>for example see this <a href=""http://infinitemonkeycorps.net/docs/pph/"" rel=""noreferrer"">Python project howto</a>.</p>

<p>My question is simply <strong>What's the usual way of actually running the tests?</strong> I suspect this is obvious to everyone except me, but you can't just run <code>python test_antigravity.py</code> from the test directory as its <code>import antigravity</code> will fail as the module is not on the path.</p>

<p>I know I could modify PYTHONPATH and other search path related tricks, but I can't believe that's the simplest way - it's fine if you're the developer but not realistic to expect your users to use if they just want to check the tests are passing.</p>

<p>The other alternative is just to copy the test file into the other directory, but it seems a bit dumb and misses the point of having them in a separate directory to start with.</p>

<p>So, if you had just downloaded the source to my new project how would you run the unit tests? I'd prefer an answer that would let me say to my users: ""To run the unit tests do X.""</p>
",<python><unit-testing>,tests directory test unit run users separate project running path,"<p>The best solution in my opinion is to use the <code>unittest</code> <a href=""https://docs.python.org/2/library/unittest.html#command-line-interface"" rel=""noreferrer"">command line interface</a> which will add the directory to the <code>sys.path</code> so you don't have to (done in the <code>TestLoader</code> class).</p>

<p>For example for a directory structure like this:</p>

<pre><code>new_project
ƒ??ƒ??ƒ?? antigravity.py
ƒ??ƒ??ƒ?? test_antigravity.py
</code></pre>

<p>You can just run:</p>

<pre><code>$ cd new_project
$ python -m unittest test_antigravity
</code></pre>

<p>For a directory structure like yours:</p>

<pre><code>new_project
ƒ??ƒ??ƒ?? antigravity
ƒ???ÿ?ÿ ƒ??ƒ??ƒ?? __init__.py         # make it a package
ƒ???ÿ?ÿ ƒ??ƒ??ƒ?? antigravity.py
ƒ??ƒ??ƒ?? test
    ƒ??ƒ??ƒ?? __init__.py         # also make test a package
    ƒ??ƒ??ƒ?? test_antigravity.py
</code></pre>

<p>And in the test modules inside the <code>test</code> package, you can import the <code>antigravity</code> package and its modules as usual:</p>

<pre><code># import the package
import antigravity

# import the antigravity module
from antigravity import antigravity

# or an object inside the antigravity module
from antigravity.antigravity import my_object
</code></pre>

<p><strong>Running a single test module:</strong></p>

<p>To run a single test module, in this case <code>test_antigravity.py</code>:</p>

<pre><code>$ cd new_project
$ python -m unittest test.test_antigravity
</code></pre>

<p>Just reference the test module the same way you import it.</p>

<p><strong>Running a single test case or test method:</strong></p>

<p>Also you can run a single <code>TestCase</code> or a single test method:</p>

<pre><code>$ python -m unittest test.test_antigravity.GravityTestCase
$ python -m unittest test.test_antigravity.GravityTestCase.test_method
</code></pre>

<p><strong>Running all tests:</strong></p>

<p>You can also use <a href=""https://docs.python.org/2/library/unittest.html#test-discovery"" rel=""noreferrer"">test discovery</a> which will discover and run all the tests for you, they must be modules or packages named <code>test*.py</code> (can be changed with the <code>-p, --pattern</code> flag):</p>

<pre><code>$ cd new_project
$ python -m unittest discover
$ # Also works without discover for Python 3
$ # as suggested by @Burrito in the comments
$ python -m unittest
</code></pre>

<p>This will run all the <code>test*.py</code> modules inside the <code>test</code> package.</p>
",,
248,4,Shuffling a list of objects,"<p>I have a list of objects and I want to shuffle them. I thought I could use the <code>random.shuffle</code> method, but this seems to fail when the list is of objects. Is there a method for shuffling objects or another way around this?</p>

<pre><code>import random

class A:
    foo = ""bar""

a1 = a()
a2 = a()
b = [a1, a2]

print(random.shuffle(b))
</code></pre>

<p>This will fail.</p>
","Shuffling a list of objects<p>I have a list of objects and I want to shuffle them. I thought I could use the <code>random.shuffle</code> method, but this seems to fail when the list is of objects. Is there a method for shuffling objects or another way around this?</p>

<pre><code>import random

class A:
    foo = ""bar""

a1 = a()
a2 = a()
b = [a1, a2]

print(random.shuffle(b))
</code></pre>

<p>This will fail.</p>
",<python><list><random><shuffle>,objects shuffling shuffle fail list method objects random thought use,"<p><a href=""https://docs.python.org/library/random.html#random.shuffle"" rel=""noreferrer""><code>random.shuffle</code></a> should work.  Here's an example, where the objects are lists:</p>

<pre><code>from random import shuffle
x = [[i] for i in range(10)]
shuffle(x)

# print(x)  gives  [[9], [2], [7], [0], [4], [5], [3], [1], [8], [6]]
# of course your results will vary
</code></pre>

<p>Note that shuffle works <strong>in place</strong>, and returns None.</p>
",,
249,0,Reverse / invert a dictionary mapping,"<p>Given a dictionary like so:</p>

<pre><code>my_map = {'a': 1, 'b': 2}
</code></pre>

<p>How can one invert this map to get:</p>

<pre><code>inv_map = {1: 'a', 2: 'b'}
</code></pre>
","Reverse / invert a dictionary mapping<p>Given a dictionary like so:</p>

<pre><code>my_map = {'a': 1, 'b': 2}
</code></pre>

<p>How can one invert this map to get:</p>

<pre><code>inv_map = {1: 'a', 2: 'b'}
</code></pre>
",<python><dictionary><mapping><reverse>,invert dictionary mapping given reverse map like zone forget formatting formatted,"<p>Python 3+:</p>
<pre><code>inv_map = {v: k for k, v in my_map.items()}
</code></pre>
<p>Python 2:</p>
<pre><code>inv_map = {v: k for k, v in my_map.iteritems()}
</code></pre>
",,
250,4,List comprehension vs map,"<p>Is there a reason to prefer using <code>map()</code> over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?</p>
","List comprehension vs map<p>Is there a reason to prefer using <code>map()</code> over list comprehension or vice versa?  Is either of them generally more efficient or considered generally more pythonic than the other?</p>
",<python><list-comprehension><map-function>,generally comprehension vice versa map considered list prefer efficient map,"<p><code>map</code> may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.</p>
<p>An example of the tiny speed advantage of map when using exactly the same function:</p>
<pre><code>$ python -m timeit -s'xs=range(10)' 'map(hex, xs)'
100000 loops, best of 3: 4.86 usec per loop
$ python -m timeit -s'xs=range(10)' '[hex(x) for x in xs]'
100000 loops, best of 3: 5.58 usec per loop
</code></pre>
<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>
<pre><code>$ python -m timeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'
100000 loops, best of 3: 4.24 usec per loop
$ python -m timeit -s'xs=range(10)' '[x+2 for x in xs]'
100000 loops, best of 3: 2.32 usec per loop
</code></pre>
",,
251,3,What is the best project structure for a Python application?,"<p>Imagine that you want to develop a non-trivial end-user desktop (not web) application in Python. What is the best way to structure the project's folder hierarchy?</p>

<p>Desirable features are ease of maintenance, IDE-friendliness, suitability for source control branching/merging, and easy generation of install packages.</p>

<p>In particular:</p>

<ol>
<li>Where do you put the source?</li>
<li>Where do you put application startup scripts?</li>
<li>Where do you put the IDE project cruft?</li>
<li>Where do you put the unit/acceptance tests?</li>
<li>Where do you put non-Python data such as config files?</li>
<li>Where do you put non-Python sources such as C++ for pyd/so binary extension modules?</li>
</ol>
","What is the best project structure for a Python application?<p>Imagine that you want to develop a non-trivial end-user desktop (not web) application in Python. What is the best way to structure the project's folder hierarchy?</p>

<p>Desirable features are ease of maintenance, IDE-friendliness, suitability for source control branching/merging, and easy generation of install packages.</p>

<p>In particular:</p>

<ol>
<li>Where do you put the source?</li>
<li>Where do you put application startup scripts?</li>
<li>Where do you put the IDE project cruft?</li>
<li>Where do you put the unit/acceptance tests?</li>
<li>Where do you put non-Python data such as config files?</li>
<li>Where do you put non-Python sources such as C++ for pyd/so binary extension modules?</li>
</ol>
",<python><directory-structure><organization><project-structure>,non application project ide structure source best branching acceptance desktop,"<p>Doesn't too much matter.  Whatever makes you happy will work.  There aren't a lot of silly rules because Python projects can be simple.</p>

<ul>
<li><code>/scripts</code> or <code>/bin</code> for that kind of command-line interface stuff</li>
<li><code>/tests</code> for your tests</li>
<li><code>/lib</code> for your C-language libraries</li>
<li><code>/doc</code> for most documentation</li>
<li><code>/apidoc</code> for the Epydoc-generated API docs.</li>
</ul>

<p>And the top-level directory can contain README's, Config's and whatnot.</p>

<p>The hard choice is whether or not to use a <code>/src</code> tree.  Python doesn't have a distinction between <code>/src</code>, <code>/lib</code>, and <code>/bin</code> like Java or C has.</p>

<p>Since a top-level <code>/src</code> directory is seen by some as meaningless, your top-level directory can be the top-level architecture of your application.</p>

<ul>
<li><code>/foo</code></li>
<li><code>/bar</code></li>
<li><code>/baz</code></li>
</ul>

<p>I recommend putting all of this under the ""name-of-my-product"" directory.  So, if you're writing an application named <code>quux</code>, the directory that contains all this stuff is named  <code>/quux</code>.</p>

<p>Another project's <code>PYTHONPATH</code>, then, can include <code>/path/to/quux/foo</code> to reuse the <code>QUUX.foo</code> module.  </p>

<p>In my case, since I use Komodo Edit, my IDE cuft is a single .KPF file.  I actually put that in the top-level <code>/quux</code> directory, and omit adding it to SVN.</p>
",,
252,3,How to check version of python modules?,"<p>I just installed the python modules: <code>construct</code> and <code>statlib</code> with <code>setuptools</code> like this:</p>

<pre><code># Install setuptools to be able to download the following
sudo apt-get install python-setuptools

# Install statlib for lightweight statistical tools
sudo easy_install statlib

# Install construct for packing/unpacking binary data
sudo easy_install construct
</code></pre>

<p>I want to be able to (programmatically) check their versions.  Is there an equivalent to <code>python --version</code> I can run from the command line?</p>

<p>My python version is <code>2.7.3</code>.</p>
","How to check version of python modules?<p>I just installed the python modules: <code>construct</code> and <code>statlib</code> with <code>setuptools</code> like this:</p>

<pre><code># Install setuptools to be able to download the following
sudo apt-get install python-setuptools

# Install statlib for lightweight statistical tools
sudo easy_install statlib

# Install construct for packing/unpacking binary data
sudo easy_install construct
</code></pre>

<p>I want to be able to (programmatically) check their versions.  Is there an equivalent to <code>python --version</code> I can run from the command line?</p>

<p>My python version is <code>2.7.3</code>.</p>
",<python>,version modules check statlib programmatically python construct setuptools versions equivalent,"<p>I suggest using <a href=""https://stackoverflow.com/a/3220572/1265154"">pip in place of easy_install</a>. With pip, you can list all installed packages and their versions with </p>

<pre><code>pip freeze
</code></pre>

<p>In most linux systems, you can pipe this to <code>grep</code>(or <code>findstr</code> on Windows) to find the row for the particular package you're interested in:</p>

<pre><code>Linux:
$ pip freeze | grep lxml
lxml==2.3

Windows:
c:\&gt; pip freeze | findstr lxml
lxml==2.3
</code></pre>

<p>For an individual module, you can try the <a href=""http://www.python.org/dev/peps/pep-0396/"" rel=""noreferrer""><code>__version__</code> attribute</a>, however there are modules without it:</p>

<pre><code>$ python -c ""import requests; print(requests.__version__)""
2.14.2
$ python -c ""import lxml; print(lxml.__version__)""
Traceback (most recent call last):
  File ""&lt;string&gt;"", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__version__'
</code></pre>

<p>Lastly, as the commands in your question are prefixed with <code>sudo</code>, it appears you're installing to the global python environment. Strongly advise to take look into python <a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer"">virtual environment</a> managers, for example <a href=""http://virtualenvwrapper.readthedocs.org/en/latest/"" rel=""noreferrer"">virtualenvwrapper</a></p>
",,
253,5,How do I type hint a method with the type of the enclosing class?,"<p>I have the following code in Python 3:</p>
<pre><code>class Position:

    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y

    def __add__(self, other: Position) -&gt; Position:
        return Position(self.x + other.x, self.y + other.y)
</code></pre>
<p>But my editor (PyCharm) says that the reference <code>Position</code> can not be resolved (in the <code>__add__</code> method). How should I specify that I expect the return type to be of type <code>Position</code>?</p>
<p>Edit: I think this is actually a PyCharm issue. It actually uses the information in its warnings, and code completion.</p>
<p><img src=""https://i.imgur.com/yjjCWw3.png"" alt="""" /></p>
<p>But correct me if I'm wrong, and need to use some other syntax.</p>
","How do I type hint a method with the type of the enclosing class?<p>I have the following code in Python 3:</p>
<pre><code>class Position:

    def __init__(self, x: int, y: int):
        self.x = x
        self.y = y

    def __add__(self, other: Position) -&gt; Position:
        return Position(self.x + other.x, self.y + other.y)
</code></pre>
<p>But my editor (PyCharm) says that the reference <code>Position</code> can not be resolved (in the <code>__add__</code> method). How should I specify that I expect the return type to be of type <code>Position</code>?</p>
<p>Edit: I think this is actually a PyCharm issue. It actually uses the information in its warnings, and code completion.</p>
<p><img src=""https://i.imgur.com/yjjCWw3.png"" alt="""" /></p>
<p>But correct me if I'm wrong, and need to use some other syntax.</p>
",<python><python-3.x><pycharm><type-hinting><python-typing>,type pycharm position actually method completion hint resolved enclosing editor,"<p><strong>TL;DR</strong>: As of today (2019), in Python 3.7+ you must turn this feature on using a &quot;future&quot; statement, <code>from __future__ import annotations</code>.</p>
<p>(The behaviour enabled by <code>from __future__ import annotations</code> <em>might</em> become the default in future versions of Python, and <a href=""https://www.python.org/dev/peps/pep-0563/"" rel=""noreferrer"">was going</a> to be made the default in Python 3.10. However, the change in 3.10 <a href=""https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/"" rel=""noreferrer"">was reverted</a> at the last minute, and now may not happen at all.)</p>
<p>In Python 3.6 or below, you should use a string.</p>
<hr />
<p>I guess you got this exception:</p>
<pre><code>NameError: name 'Position' is not defined
</code></pre>
<p>This is because <code>Position</code> must be defined before you can use it in an annotation, unless you are using Python with <a href=""https://www.python.org/dev/peps/pep-0563/"" rel=""noreferrer"">PEP 563</a> changes enabled.</p>
<h2>Python 3.7+: <code>from __future__ import annotations</code></h2>
<p>Python 3.7 introduces <a href=""https://www.python.org/dev/peps/pep-0563/"" rel=""noreferrer"">PEP 563: postponed evaluation of annotations</a>. A module that uses the future statement <code>from __future__ import annotations</code> will store annotations as strings automatically:</p>
<pre><code>from __future__ import annotations

class Position:
    def __add__(self, other: Position) -&gt; Position:
        ...
</code></pre>
<p>This had been scheduled to become the default in Python 3.10, but this change has now been postponed. Since Python still is a dynamically typed language so no type-checking is done at runtime, typing annotations should have no performance impact, right? Wrong! Before Python 3.7, the typing module used to be <a href=""https://www.python.org/dev/peps/pep-0560/#performance"" rel=""noreferrer"">one of the slowest python modules in core</a> so <strong>for code that involves importing the <code>typing</code> module, you will see an <a href=""https://docs.python.org/3.7/whatsnew/3.7.html#pep-560-core-support-for-typing-module-and-generic-types"" rel=""noreferrer"">up to 7 times increase in performance</a> when you upgrade to 3.7.</strong></p>
<h2>Python &lt;3.7: use a string</h2>
<p><a href=""https://www.python.org/dev/peps/pep-0484/#forward-references"" rel=""noreferrer"">According to PEP 484</a>, you should use a string instead of the class itself:</p>
<pre><code>class Position:
    ...
    def __add__(self, other: 'Position') -&gt; 'Position':
       ...
</code></pre>
<p>If you use the Django framework, this may be familiar, as Django models also use strings for forward references (foreign key definitions where the foreign model is <code>self</code> or is not declared yet). This should work with Pycharm and other tools.</p>
<h2>Sources</h2>
<p>The relevant parts of PEP 484 and PEP 563, to spare you the trip:</p>
<blockquote>
<h1><a href=""https://www.python.org/dev/peps/pep-0484/#forward-references"" rel=""noreferrer"">Forward references</a></h1>
<p>When a type hint contains names that have not been defined yet, that definition may be expressed as a string literal, to be resolved later.</p>
<p>A situation where this occurs commonly is the definition of a container class, where the class being defined occurs in the signature of some of the methods. For example, the following code (the start of a simple binary tree implementation) does not work:</p>
<pre><code>class Tree:
    def __init__(self, left: Tree, right: Tree):
        self.left = left
        self.right = right
</code></pre>
<p>To address this, we write:</p>
<pre><code>class Tree:
    def __init__(self, left: 'Tree', right: 'Tree'):
        self.left = left
        self.right = right
</code></pre>
<p>The string literal should contain a valid Python expression (i.e., compile(lit, '', 'eval') should be a valid code object) and it should evaluate without errors once the module has been fully loaded. The local and global namespace in which it is evaluated should be the same namespaces in which default arguments to the same function would be evaluated.</p>
</blockquote>
<p>and PEP 563:</p>
<blockquote>
<h1><a href=""https://www.python.org/dev/peps/pep-0563/#implementation"" rel=""noreferrer"">Implementation</a></h1>
<p>In Python 3.10, function and variable annotations will no longer be evaluated at definition time. Instead, a string form will be preserved in the respective?ÿ<code>__annotations__</code>?ÿdictionary. Static type checkers will see no difference in behavior, whereas tools using annotations at runtime will have to perform postponed evaluation.</p>
<p>...</p>
<h2><a href=""https://www.python.org/dev/peps/pep-0563/#enabling-the-future-behavior-in-python-3-7"" rel=""noreferrer"">Enabling the future behavior in Python 3.7</a></h2>
<p>The functionality described above can be enabled starting from Python 3.7 using the following special import:</p>
<pre><code>from __future__ import annotations
</code></pre>
</blockquote>
<h2>Things that you may be tempted to do instead</h2>
<h3>A. Define a dummy <code>Position</code></h3>
<p>Before the class definition, place a dummy definition:</p>
<pre><code>class Position(object):
    pass


class Position(object):
    ...
</code></pre>
<p>This will get rid of the <code>NameError</code> and may even look OK:</p>
<pre><code>&gt;&gt;&gt; Position.__add__.__annotations__
{'other': __main__.Position, 'return': __main__.Position}
</code></pre>
<p>But is it?</p>
<pre><code>&gt;&gt;&gt; for k, v in Position.__add__.__annotations__.items():
...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  
return is Position: False
other is Position: False
</code></pre>
<h3>B. Monkey-patch in order to add the annotations:</h3>
<p>You may want to try some Python metaprogramming magic and write a decorator
to monkey-patch the class definition in order to add annotations:</p>
<pre><code>class Position:
    ...
    def __add__(self, other):
        return self.__class__(self.x + other.x, self.y + other.y)
</code></pre>
<p>The decorator should be responsible for the equivalent of this:</p>
<pre><code>Position.__add__.__annotations__['return'] = Position
Position.__add__.__annotations__['other'] = Position
</code></pre>
<p>At least it seems right:</p>
<pre><code>&gt;&gt;&gt; for k, v in Position.__add__.__annotations__.items():
...     print(k, 'is Position:', v is Position)                                                                                                                                                                                                                  
return is Position: True
other is Position: True
</code></pre>
<p>Probably too much trouble.</p>
",,
254,5,"What is a clean, Pythonic way to have multiple constructors in Python?","<p>I can't find a definitive answer for this. As far as I know, you can't have multiple <code>__init__</code> functions in a Python class. So how do I solve this problem?</p>
<p>Suppose I have a class called <code>Cheese</code> with the <code>number_of_holes</code> property. How can I have two ways of creating cheese objects...</p>
<ol>
<li>One that takes a number of holes like this: <code>parmesan = Cheese(num_holes = 15)</code></li>
<li>And one that takes no arguments and just randomizes the <code>number_of_holes</code> property: <code>gouda = Cheese()</code></li>
</ol>
<p>I can think of only one way to do this, but this seems clunky:</p>
<pre><code>class Cheese():
    def __init__(self, num_holes = 0):
        if (num_holes == 0):
            # Randomize number_of_holes
        else:
            number_of_holes = num_holes
</code></pre>
<p>What do you say? Is there another way?</p>
","What is a clean, Pythonic way to have multiple constructors in Python?<p>I can't find a definitive answer for this. As far as I know, you can't have multiple <code>__init__</code> functions in a Python class. So how do I solve this problem?</p>
<p>Suppose I have a class called <code>Cheese</code> with the <code>number_of_holes</code> property. How can I have two ways of creating cheese objects...</p>
<ol>
<li>One that takes a number of holes like this: <code>parmesan = Cheese(num_holes = 15)</code></li>
<li>And one that takes no arguments and just randomizes the <code>number_of_holes</code> property: <code>gouda = Cheese()</code></li>
</ol>
<p>I can think of only one way to do this, but this seems clunky:</p>
<pre><code>class Cheese():
    def __init__(self, num_holes = 0):
        if (num_holes == 0):
            # Randomize number_of_holes
        else:
            number_of_holes = num_holes
</code></pre>
<p>What do you say? Is there another way?</p>
",<python><constructor>,cheese numberofholes property takes multiple class holes randomizes numholes constructors,"<p>Actually <code>None</code> is much better for ""magic"" values:</p>

<pre><code>class Cheese():
    def __init__(self, num_holes = None):
        if num_holes is None:
            ...
</code></pre>

<p>Now if you want complete freedom of adding more parameters:</p>

<pre><code>class Cheese():
    def __init__(self, *args, **kwargs):
        #args -- tuple of anonymous arguments
        #kwargs -- dictionary of named arguments
        self.num_holes = kwargs.get('num_holes',random_holes())
</code></pre>

<p>To better explain the concept of <code>*args</code> and <code>**kwargs</code> (you can actually change these names):</p>

<pre><code>def f(*args, **kwargs):
   print 'args: ', args, ' kwargs: ', kwargs

&gt;&gt;&gt; f('a')
args:  ('a',)  kwargs:  {}
&gt;&gt;&gt; f(ar='a')
args:  ()  kwargs:  {'ar': 'a'}
&gt;&gt;&gt; f(1,2,param=3)
args:  (1, 2)  kwargs:  {'param': 3}
</code></pre>

<p><a href=""http://docs.python.org/reference/expressions.html#calls"" rel=""noreferrer"">http://docs.python.org/reference/expressions.html#calls</a></p>
",,
255,3,How do I detect whether a Python variable is a function?,"<p>I have a variable, <code>x</code>, and I want to know whether it is pointing to a function or not.</p>

<p>I had hoped I could do something like:</p>

<pre><code>&gt;&gt;&gt; isinstance(x, function)
</code></pre>

<p>But that gives me:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in ?
NameError: name 'function' is not defined
</code></pre>

<p>The reason I picked that is because</p>

<pre><code>&gt;&gt;&gt; type(x)
&lt;type 'function'&gt;
</code></pre>
","How do I detect whether a Python variable is a function?<p>I have a variable, <code>x</code>, and I want to know whether it is pointing to a function or not.</p>

<p>I had hoped I could do something like:</p>

<pre><code>&gt;&gt;&gt; isinstance(x, function)
</code></pre>

<p>But that gives me:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in ?
NameError: name 'function' is not defined
</code></pre>

<p>The reason I picked that is because</p>

<pre><code>&gt;&gt;&gt; type(x)
&lt;type 'function'&gt;
</code></pre>
",<python>,variable picked hoped pointing function detect reason gives know want,"<p>If this is for Python 2.x or for Python 3.2+, you can use <a href=""https://docs.python.org/3/library/functions.html#callable"" rel=""noreferrer""><code>callable()</code></a>. It used to be deprecated, but is now undeprecated, so you can use it again. You can read the discussion here: <a href=""http://bugs.python.org/issue10518"" rel=""noreferrer"">http://bugs.python.org/issue10518</a>. You can do this with:</p>
<pre><code>callable(obj)
</code></pre>
<p>If this is for Python 3.x but before 3.2, check if the object has a <code>__call__</code> attribute. You can do this with:</p>
<pre><code>hasattr(obj, '__call__')
</code></pre>
<p>The oft-suggested <a href=""https://docs.python.org/3/library/types.html#types.FunctionType"" rel=""noreferrer""><code>types.FunctionTypes</code></a> or <a href=""https://docs.python.org/3/library/inspect.html#inspect.isfunction"" rel=""noreferrer""><code>inspect.isfunction</code></a> approach (both do <a href=""https://github.com/python/cpython/blob/ea46c7bc503d1103d60c0ec7023bb52c5defa11d/Lib/inspect.py#L159-L170"" rel=""noreferrer"">the exact same thing</a>) comes with a number of caveats. It returns <code>False</code> for non-Python functions. Most <a href=""https://docs.python.org/3/library/functions.html"" rel=""noreferrer"">builtin functions</a>, for example, are implemented in C and not Python, so they return <code>False</code>:</p>
<pre><code>&gt;&gt;&gt; isinstance(open, types.FunctionType)
False
&gt;&gt;&gt; callable(open)
True
</code></pre>
<p>so <code>types.FunctionType</code> might give you surprising results. The proper way to check properties of duck-typed objects is to ask them if they quack, not to see if they fit in a duck-sized container.</p>
",,
256,5,How do I convert a datetime to date?,"<p>How do I convert a <code>datetime.datetime</code> object (e.g., the return value of <code>datetime.datetime.now())</code> to a <code>datetime.date</code> object in Python?</p>
","How do I convert a datetime to date?<p>How do I convert a <code>datetime.datetime</code> object (e.g., the return value of <code>datetime.datetime.now())</code> to a <code>datetime.date</code> object in Python?</p>
",<python><datetime>,datetime date convert object return value python zone forget formatted,"<p>Use the <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.date"" rel=""noreferrer""><code>date()</code></a> method:</p>
<pre><code>datetime.datetime.now().date()
</code></pre>
",,
257,1,Using Python 3 in virtualenv,"<p>Using <a href=""https://virtualenv.pypa.io/en/latest/"">virtualenv</a>, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4. </p>

<p>I used <code>brew install python3</code> to install it on my Mac. Now, how do I create a virtualenv that uses the new version?</p>

<p>e.g. sudo virtualenv envPython3</p>

<p>If I try:</p>

<pre><code>virtualenv -p python3 test
</code></pre>

<p>I get:</p>

<pre><code>Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix '/usr/local/Cellar/python3/3.4.0_1/Frameworks/Python.framework/Versions/3.4'
New python executable in test/bin/python3.4
Also creating executable in test/bin/python
Failed to import the site module
Traceback (most recent call last):
  File ""/Users/user/Documents/workspace/test/test/bin/../lib/python3.4/site.py"", line 67, in &lt;module&gt;
    import os
  File ""/Users/user/Documents/workspace/test/test/bin/../lib/python3.4/os.py"", line 634, in &lt;module&gt;
    from _collections_abc import MutableMapping
ImportError: No module named '_collections_abc'
ERROR: The executable test/bin/python3.4 is not functioning
ERROR: It thinks sys.prefix is '/Users/user/Documents/workspace/test' (should be '/Users/user/Documents/workspace/test/test')
ERROR: virtualenv is not compatible with this system or executable
</code></pre>
","Using Python 3 in virtualenv<p>Using <a href=""https://virtualenv.pypa.io/en/latest/"">virtualenv</a>, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4. </p>

<p>I used <code>brew install python3</code> to install it on my Mac. Now, how do I create a virtualenv that uses the new version?</p>

<p>e.g. sudo virtualenv envPython3</p>

<p>If I try:</p>

<pre><code>virtualenv -p python3 test
</code></pre>

<p>I get:</p>

<pre><code>Running virtualenv with interpreter /usr/local/bin/python3
Using base prefix '/usr/local/Cellar/python3/3.4.0_1/Frameworks/Python.framework/Versions/3.4'
New python executable in test/bin/python3.4
Also creating executable in test/bin/python
Failed to import the site module
Traceback (most recent call last):
  File ""/Users/user/Documents/workspace/test/test/bin/../lib/python3.4/site.py"", line 67, in &lt;module&gt;
    import os
  File ""/Users/user/Documents/workspace/test/test/bin/../lib/python3.4/os.py"", line 634, in &lt;module&gt;
    from _collections_abc import MutableMapping
ImportError: No module named '_collections_abc'
ERROR: The executable test/bin/python3.4 is not functioning
ERROR: It thinks sys.prefix is '/Users/user/Documents/workspace/test' (should be '/Users/user/Documents/workspace/test/test')
ERROR: virtualenv is not compatible with this system or executable
</code></pre>
",<python><python-3.x><virtualenv>,virtualenv version install virtualenvusing projects envpythonif brew sudo mac python,"<p>simply run</p>

<pre><code>virtualenv -p python3 envname
</code></pre>

<p>Update after OP's edit:</p>

<p>There was a bug in the OP's version of virtualenv, as described <a href=""https://github.com/pypa/virtualenv/issues/463"" rel=""noreferrer"">here</a>. The problem was fixed by running:</p>

<pre><code>pip install --upgrade virtualenv
</code></pre>
",,
258,3,Parsing boolean values with argparse,"<p>I would like to use argparse to parse boolean command-line arguments written as ""--foo True"" or ""--foo False"". For example:</p>

<pre><code>my_program --my_boolean_flag False
</code></pre>

<p>However, the following test code does not do what I would like:</p>

<pre><code>import argparse
parser = argparse.ArgumentParser(description=""My parser"")
parser.add_argument(""--my_bool"", type=bool)
cmd_line = [""--my_bool"", ""False""]
parsed_args = parser.parse(cmd_line)
</code></pre>

<p>Sadly, <code>parsed_args.my_bool</code> evaluates to <code>True</code>. This is the case even when I change <code>cmd_line</code> to be <code>[""--my_bool"", """"]</code>, which is surprising, since <code>bool("""")</code> evalutates to <code>False</code>.</p>

<p>How can I get argparse to parse <code>""False""</code>, <code>""F""</code>, and their lower-case variants to be <code>False</code>?</p>
","Parsing boolean values with argparse<p>I would like to use argparse to parse boolean command-line arguments written as ""--foo True"" or ""--foo False"". For example:</p>

<pre><code>my_program --my_boolean_flag False
</code></pre>

<p>However, the following test code does not do what I would like:</p>

<pre><code>import argparse
parser = argparse.ArgumentParser(description=""My parser"")
parser.add_argument(""--my_bool"", type=bool)
cmd_line = [""--my_bool"", ""False""]
parsed_args = parser.parse(cmd_line)
</code></pre>

<p>Sadly, <code>parsed_args.my_bool</code> evaluates to <code>True</code>. This is the case even when I change <code>cmd_line</code> to be <code>[""--my_bool"", """"]</code>, which is surprising, since <code>bool("""")</code> evalutates to <code>False</code>.</p>

<p>How can I get argparse to parse <code>""False""</code>, <code>""F""</code>, and their lower-case variants to be <code>False</code>?</p>
",<python><boolean><argparse><command-line-arguments>,FALSE mybool boolean argparse parse foo TRUE case evaluates parsedargs,"<p>This is actually outdated. For Python 3.7+, <a href=""https://docs.python.org/3/library/argparse.html"" rel=""nofollow noreferrer"">Argparse now supports boolean args</a> (search BooleanOptionalAction).</p>
<p>The implementation looks like this:</p>
<pre><code>import argparse

ap = argparse.ArgumentParser()

# List of args
ap.add_argument('--foo', default=True, type=bool, help='Some helpful text that is not bar. Default = True')

# Importable object
args = ap.parse_args()
</code></pre>
<p>One other thing to mention: this will block all entries other than True and False for the argument via argparse.ArgumentTypeError. You can create a custom error class for this if you want to try to change this for any reason.</p>
",,
259,4,Remove empty strings from a list of strings,"<p>I want to remove all empty strings from a list of strings in python.</p>

<p>My idea looks like this:</p>

<pre><code>while '' in str_list:
    str_list.remove('')
</code></pre>

<p>Is there any more pythonic way to do this?</p>
","Remove empty strings from a list of strings<p>I want to remove all empty strings from a list of strings in python.</p>

<p>My idea looks like this:</p>

<pre><code>while '' in str_list:
    str_list.remove('')
</code></pre>

<p>Is there any more pythonic way to do this?</p>
",<python><string><list>,strings remove strings list idea looks pythonic want like way,"<p>I would use <a href=""http://docs.python.org/library/functions.html#filter"" rel=""noreferrer""><code>filter</code></a>:</p>

<pre><code>str_list = filter(None, str_list)
str_list = filter(bool, str_list)
str_list = filter(len, str_list)
str_list = filter(lambda item: item, str_list)
</code></pre>

<p>Python 3 returns an iterator from <code>filter</code>, so should be wrapped in a call to <code>list()</code></p>

<pre><code>str_list = list(filter(None, str_list))
</code></pre>
",,
260,6,How to import the class within the same directory or sub directory?,"<p>I have a directory that stores all the <strong>.py</strong> files.</p>

<pre><code>bin/
   main.py
   user.py # where class User resides
   dir.py # where class Dir resides
</code></pre>

<p>I want to use classes from <strong>user.py</strong> and <strong>dir.py</strong> in <strong>main.py</strong>.<br>
How can I import these Python classes into <strong>main.py</strong>?<br>
Furthermore, how can I import class <code>User</code> if <strong>user.py</strong> is in a sub directory?</p>

<pre><code>bin/
    dir.py
    main.py
    usr/
        user.py
</code></pre>
","How to import the class within the same directory or sub directory?<p>I have a directory that stores all the <strong>.py</strong> files.</p>

<pre><code>bin/
   main.py
   user.py # where class User resides
   dir.py # where class Dir resides
</code></pre>

<p>I want to use classes from <strong>user.py</strong> and <strong>dir.py</strong> in <strong>main.py</strong>.<br>
How can I import these Python classes into <strong>main.py</strong>?<br>
Furthermore, how can I import class <code>User</code> if <strong>user.py</strong> is in a sub directory?</p>

<pre><code>bin/
    dir.py
    main.py
    usr/
        user.py
</code></pre>
",<python><python-import>,py directory user import sub main classes class stores furthermore,"<h1>Python 2</h1>

<p>Make an empty file called <code>__init__.py</code> in the same directory as the files. That will signify to Python that it's ""ok to import from this directory"".</p>

<p>Then just do...</p>

<pre><code>from user import User
from dir import Dir
</code></pre>

<p>The same holds true if the files are in a subdirectory - put an <code>__init__.py</code> in the subdirectory as well, and then use regular import statements, with dot notation. For each level of directory, you need to add to the import path. </p>

<pre><code>bin/
    main.py
    classes/
        user.py
        dir.py
</code></pre>

<p>So if the directory was named ""classes"", then you'd do this:</p>

<pre><code>from classes.user import User
from classes.dir import Dir
</code></pre>

<h1>Python 3</h1>

<p>Same as previous, but prefix the module name with a <code>.</code> if not using a subdirectory:</p>

<pre><code>from .user import User
from .dir import Dir
</code></pre>
",,
261,2,How do I expand the output display to see more columns of a Pandas DataFrame?,"<p>Is there a way to widen the display of output in either interactive or script-execution mode?</p>
<p>Specifically, I am using the <code>describe()</code> function on a Pandas <code>DataFrame</code>.  When the <code>DataFrame</code> is five columns (labels) wide, I get the descriptive statistics that I want.  However, if the <code>DataFrame</code> has any more columns, the statistics are suppressed and something like this is returned:</p>
<pre class=""lang-none prettyprint-override""><code>&gt;&gt; Index: 8 entries, count to max
&gt;&gt; Data columns:
&gt;&gt; x1          8  non-null values
&gt;&gt; x2          8  non-null values
&gt;&gt; x3          8  non-null values
&gt;&gt; x4          8  non-null values
&gt;&gt; x5          8  non-null values
&gt;&gt; x6          8  non-null values
&gt;&gt; x7          8  non-null values
</code></pre>
<p>The &quot;8&quot; value is given whether there are 6 or 7 columns.  What does the &quot;8&quot; refer to?</p>
<p>I have already tried dragging the <a href=""https://en.wikipedia.org/wiki/IDLE"" rel=""noreferrer"">IDLE</a> window larger, as well as increasing the &quot;Configure IDLE&quot; width options, to no avail.</p>
<p>My purpose in using Pandas and <code>describe()</code> is to avoid using a second program like Stata to do basic data manipulation and investigation.</p>
","How do I expand the output display to see more columns of a Pandas DataFrame?<p>Is there a way to widen the display of output in either interactive or script-execution mode?</p>
<p>Specifically, I am using the <code>describe()</code> function on a Pandas <code>DataFrame</code>.  When the <code>DataFrame</code> is five columns (labels) wide, I get the descriptive statistics that I want.  However, if the <code>DataFrame</code> has any more columns, the statistics are suppressed and something like this is returned:</p>
<pre class=""lang-none prettyprint-override""><code>&gt;&gt; Index: 8 entries, count to max
&gt;&gt; Data columns:
&gt;&gt; x1          8  non-null values
&gt;&gt; x2          8  non-null values
&gt;&gt; x3          8  non-null values
&gt;&gt; x4          8  non-null values
&gt;&gt; x5          8  non-null values
&gt;&gt; x6          8  non-null values
&gt;&gt; x7          8  non-null values
</code></pre>
<p>The &quot;8&quot; value is given whether there are 6 or 7 columns.  What does the &quot;8&quot; refer to?</p>
<p>I have already tried dragging the <a href=""https://en.wikipedia.org/wiki/IDLE"" rel=""noreferrer"">IDLE</a> window larger, as well as increasing the &quot;Configure IDLE&quot; width options, to no avail.</p>
<p>My purpose in using Pandas and <code>describe()</code> is to avoid using a second program like Stata to do basic data manipulation and investigation.</p>
",<python><pandas><printing><column-width>,columns dataframe idle statistics pandas display using output widen width,"<p><strong>Update: Pandas 0.23.4 onwards</strong></p>
<p>This is not necessary. Pandas autodetects the size of your terminal window if you set <code>pd.options.display.width = 0</code>. (For older versions see at bottom.)</p>
<p><code>pandas.set_printoptions(...)</code> is deprecated. Instead, use <code>pandas.set_option(optname, val)</code>, or equivalently <code>pd.options.&lt;opt.hierarchical.name&gt; = val</code>. Like:</p>
<pre><code>import pandas as pd
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)
</code></pre>
<p>Here is the <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html"" rel=""noreferrer"">help for <code>set_option</code></a>:</p>
<pre>
set_option(pat,value) - Sets the value of the specified option

Available options:
display.[chop_threshold, colheader_justify, column_space, date_dayfirst,
         date_yearfirst, encoding, expand_frame_repr, float_format, height,
         line_width, max_columns, max_colwidth, max_info_columns, max_info_rows,
         max_rows, max_seq_items, mpl_style, multi_sparse, notebook_repr_html,
         pprint_nest_depth, precision, width]
mode.[sim_interactive, use_inf_as_null]

Parameters
----------
pat - str/regexp which should match a single option.

Note: partial matches are supported for convenience, but unless you use the
full option name (e.g., *x.y.z.option_name*), your code may break in future
versions if new options with similar names are introduced.

value - new value of option.

Returns
-------
None

Raises
------
KeyError if no such option exists

display.chop_threshold: [default: None] [currently: None]
: float or None
        if set to a float value, all float values smaller then the given threshold
        will be displayed as exactly 0 by repr and friends.
display.colheader_justify: [default: right] [currently: right]
: 'left'/'right'
        Controls the justification of column headers. used by DataFrameFormatter.
display.column_space: [default: 12] [currently: 12]No description available.

display.date_dayfirst: [default: False] [currently: False]
: boolean
        When True, prints and parses dates with the day first, eg 20/01/2005
display.date_yearfirst: [default: False] [currently: False]
: boolean
        When True, prints and parses dates with the year first, e.g., 2005/01/20
display.encoding: [default: UTF-8] [currently: UTF-8]
: str/unicode
        Defaults to the detected encoding of the console.
        Specifies the encoding to be used for strings returned by to_string,
        these are generally strings meant to be displayed on the console.
display.expand_frame_repr: [default: True] [currently: True]
: boolean
        Whether to print out the full DataFrame repr for wide DataFrames
        across multiple lines, `max_columns` is still respected, but the output will
        wrap-around across multiple ""pages"" if it's width exceeds `display.width`.
display.float_format: [default: None] [currently: None]
: callable
        The callable should accept a floating point number and return
        a string with the desired format of the number. This is used
        in some places like SeriesFormatter.
        See core.format.EngFormatter for an example.
display.height: [default: 60] [currently: 1000]
: int
        Deprecated.
        (Deprecated, use `display.height` instead.)

display.line_width: [default: 80] [currently: 1000]
: int
        Deprecated.
        (Deprecated, use `display.width` instead.)

display.max_columns: [default: 20] [currently: 500]
: int
        max_rows and max_columns are used in __repr__() methods to decide if
        to_string() or info() is used to render an object to a string.  In case
        python/IPython is running in a terminal this can be set to 0 and Pandas
        will correctly auto-detect the width the terminal and swap to a smaller
        format in case all columns would not fit vertically. The IPython notebook,
        IPython qtconsole, or IDLE do not run in a terminal and hence it is not
        possible to do correct auto-detection.
        'None' value means unlimited.
display.max_colwidth: [default: 50] [currently: 50]
: int
        The maximum width in characters of a column in the repr of
        a Pandas data structure. When the column overflows, a ""...""
        placeholder is embedded in the output.
display.max_info_columns: [default: 100] [currently: 100]
: int
        max_info_columns is used in DataFrame.info method to decide if
        per column information will be printed.
display.max_info_rows: [default: 1690785] [currently: 1690785]
: int or None
        max_info_rows is the maximum number of rows for which a frame will
        perform a null check on its columns when repr'ing To a console.
        The default is 1,000,000 rows. So, if a DataFrame has more
        1,000,000 rows there will be no null check performed on the
        columns and thus the representation will take much less time to
        display in an interactive session. A value of None means always
        perform a null check when repr'ing.
display.max_rows: [default: 60] [currently: 500]
: int
        This sets the maximum number of rows Pandas should output when printing
        out various output. For example, this value determines whether the repr()
        for a dataframe prints out fully or just a summary repr.
        'None' value means unlimited.
display.max_seq_items: [default: None] [currently: None]
: int or None

        when pretty-printing a long sequence, no more then `max_seq_items`
        will be printed. If items are ommitted, they will be denoted by the addition
        of ""..."" to the resulting string.

        If set to None, the number of items to be printed is unlimited.
display.mpl_style: [default: None] [currently: None]
: bool

        Setting this to 'default' will modify the rcParams used by matplotlib
        to give plots a more pleasing visual style by default.
        Setting this to None/False restores the values to their initial value.
display.multi_sparse: [default: True] [currently: True]
: boolean
        ""sparsify"" MultiIndex display (don't display repeated
        elements in outer levels within groups)
display.notebook_repr_html: [default: True] [currently: True]
: boolean
        When True, IPython notebook will use html representation for
        Pandas objects (if it is available).
display.pprint_nest_depth: [default: 3] [currently: 3]
: int
        Controls the number of nested levels to process when pretty-printing
display.precision: [default: 7] [currently: 7]
: int
        Floating point output precision (number of significant digits). This is
        only a suggestion
display.width: [default: 80] [currently: 1000]
: int
        Width of the display in characters. In case python/IPython is running in
        a terminal this can be set to None and Pandas will correctly auto-detect the
        width.
        Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a
        terminal and hence it is not possible to correctly detect the width.
mode.sim_interactive: [default: False] [currently: False]
: boolean
        Whether to simulate interactive mode for purposes of testing
mode.use_inf_as_null: [default: False] [currently: False]
: boolean
        True means treat None, NaN, INF, -INF as null (old way),
        False means None and NaN are null, but INF, -INF are not null
        (new way).
Call def:   pd.set_option(self, *args, **kwds)
</pre>
<hr />
<p>Older version information. Much of this has been deprecated.</p>
<p>As @bmu <a href=""https://stackoverflow.com/a/11708664/623735"">mentioned</a>, Pandas auto detects (by default) the size of the display area, a summary view will be used when an object repr does not fit on the display. You mentioned resizing the IDLE window, to no effect. If you do <code>print df.describe().to_string()</code> does it fit on the IDLE window?</p>
<p>The terminal size is determined by <code>pandas.util.terminal.get_terminal_size()</code> (deprecated and removed), this returns a tuple containing the <code>(width, height)</code> of the display. Does the output match the size of your IDLE window? There might be an issue (there was one before when running a terminal in Emacs).</p>
<p>Note that it is possible to bypass the autodetect, <code>pandas.set_printoptions(max_rows=200, max_columns=10)</code> will never switch to summary view if number of rows, columns does not exceed the given limits.</p>
<hr />
<p>The 'max_colwidth' option helps in seeing untruncated form of each column.</p>
<p><a href=""https://i.stack.imgur.com/J412l.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/J412l.png"" alt=""TruncatedColumnDisplay"" /></a></p>
",,
262,3,"What is __future__ in Python used for and how/when to use it, and how it works","<p><code>__future__</code> frequently appears in Python modules. I do not understand what <code>__future__</code> is for and how/when to use it even after reading <a href=""http://docs.python.org/library/__future__.html"" rel=""noreferrer"">the Python's <code>__future__</code> doc</a>. </p>

<p>Can anyone explain with examples?</p>

<p>A few answers regarding the basic usage of <code>__future__</code> I've received seemed correct. </p>

<p>However, I need to understand one more thing regarding how <code>__future__</code> works:</p>

<p>The most confusing concept for me is how a current python release includes features for future releases, and how a program using a feature from a future release can be be compiled successfully in the current version of Python.</p>

<p>I am guessing that the current release is packaged with potential features for the future. However, the features are available only by using <code>__future__</code> because they are not the current standard. Let me know if I am right.</p>
","What is __future__ in Python used for and how/when to use it, and how it works<p><code>__future__</code> frequently appears in Python modules. I do not understand what <code>__future__</code> is for and how/when to use it even after reading <a href=""http://docs.python.org/library/__future__.html"" rel=""noreferrer"">the Python's <code>__future__</code> doc</a>. </p>

<p>Can anyone explain with examples?</p>

<p>A few answers regarding the basic usage of <code>__future__</code> I've received seemed correct. </p>

<p>However, I need to understand one more thing regarding how <code>__future__</code> works:</p>

<p>The most confusing concept for me is how a current python release includes features for future releases, and how a program using a feature from a future release can be be compiled successfully in the current version of Python.</p>

<p>I am guessing that the current release is packaged with potential features for the future. However, the features are available only by using <code>__future__</code> because they are not the current standard. Let me know if I am right.</p>
",<python><python-2.x>,future release features current regarding understand python frequently packaged worksfuture,"<p>With <code>__future__</code> module's inclusion, you can slowly be accustomed to incompatible changes or to such ones introducing new keywords.</p>

<p>E.g., for using context managers, you had to do <code>from __future__ import with_statement</code> in 2.5, as the <code>with</code> keyword was new and shouldn't be used as variable names any longer. In order to use <code>with</code> as a Python keyword in Python 2.5 or older, you will need to use the import from above.</p>

<p>Another example is</p>

<pre><code>from __future__ import division
print 8/7  # prints 1.1428571428571428
print 8//7 # prints 1
</code></pre>

<p>Without the <code>__future__</code> stuff, both <code>print</code> statements would print <code>1</code>.</p>

<p>The internal difference is that without that import, <code>/</code> is mapped to the <code>__div__()</code> method, while with it, <code>__truediv__()</code> is used. (In any case, <code>//</code> calls <code>__floordiv__()</code>.)</p>

<p>Apropos <code>print</code>: <code>print</code> becomes a function in 3.x, losing its special property as a keyword. So it is the other way round.</p>

<pre><code>&gt;&gt;&gt; print

&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; print
&lt;built-in function print&gt;
&gt;&gt;&gt;
</code></pre>
",,
263,6,How can I parse a YAML file in Python,"<p>How can I parse a YAML file in Python?</p>
","How can I parse a YAML file in Python<p>How can I parse a YAML file in Python?</p>
",<python><yaml>,yaml parse file python,"<p>The easiest and purest method without relying on C headers is PyYaml (<a href=""http://pyyaml.org/wiki/PyYAMLDocumentation"" rel=""noreferrer"">documentation</a>), which can be installed via <strong><code>pip install pyyaml</code></strong>:</p>
<pre><code>#!/usr/bin/env python

import yaml

with open(&quot;example.yaml&quot;, &quot;r&quot;) as stream:
    try:
        print(yaml.safe_load(stream))
    except yaml.YAMLError as exc:
        print(exc)
</code></pre>
<p>And that's it. A plain <code>yaml.load()</code> function also exists, but <code>yaml.safe_load()</code> should always be preferred unless you explicitly need the arbitrary object serialization/deserialization provided in order to avoid introducing the possibility for arbitrary code execution.</p>
<p>Note the PyYaml project supports versions up through the <a href=""https://yaml.org/spec/1.1/spec.html"" rel=""noreferrer"">YAML 1.1 specification</a>. If <a href=""https://yaml.org/spec/1.2/spec.html"" rel=""noreferrer"">YAML 1.2 specification</a> support is needed, see <a href=""https://yaml.readthedocs.io/"" rel=""noreferrer"">ruamel.yaml</a> as noted in <a href=""https://stackoverflow.com/a/38922434/313192"">this answer</a>.</p>
<p>Also, you could also use a drop in replacement for pyyaml, that keeps your yaml file ordered <em>the same way you had it</em>, called <a href=""https://github.com/wimglenn/oyaml"" rel=""noreferrer"">oyaml</a>. View <a href=""https://snyk.io/advisor/python/oyaml"" rel=""noreferrer"">synk of oyaml here</a></p>
",,
264,4,Writing a list to a file with Python,"<p>Is this the cleanest way to write a list to a file, since <code>writelines()</code> doesn't insert newline characters?</p>

<pre><code>file.writelines([""%s\n"" % item  for item in list])
</code></pre>

<p>It seems like there would be a standard way...</p>
","Writing a list to a file with Python<p>Is this the cleanest way to write a list to a file, since <code>writelines()</code> doesn't insert newline characters?</p>

<pre><code>file.writelines([""%s\n"" % item  for item in list])
</code></pre>

<p>It seems like there would be a standard way...</p>
",<python><file><list><file-io><newline>,writelines cleanest file newline insert pythonis list characters standard writing,"<p>You can use a loop:</p>

<pre><code>with open('your_file.txt', 'w') as f:
    for item in my_list:
        f.write(""%s\n"" % item)
</code></pre>

<p>In Python 2, you can also use</p>

<pre><code>with open('your_file.txt', 'w') as f:
    for item in my_list:
        print &gt;&gt; f, item
</code></pre>

<p>If you're keen on a single function call, at least remove the square brackets <code>[]</code>, so that the strings to be printed get made one at a time (a genexp rather than a listcomp) -- no reason to take up all the memory required to materialize the whole list of strings.</p>
",,
265,5,How do you get the logical xor of two variables in Python?,"<p>How do you get the <a href=""http://en.wikipedia.org/wiki/Exclusive_or"" rel=""noreferrer"">logical xor</a> of two variables in Python?</p>

<p>For example, I have two variables that I expect to be strings. I want to test that only one of them contains a True value (is not None or the empty string):</p>

<pre><code>str1 = raw_input(""Enter string one:"")
str2 = raw_input(""Enter string two:"")
if logical_xor(str1, str2):
    print ""ok""
else:
    print ""bad""
</code></pre>

<p>The <code>^</code> operator seems to be bitwise, and not defined on all objects:</p>

<pre><code>&gt;&gt;&gt; 1 ^ 1
0
&gt;&gt;&gt; 2 ^ 1
3
&gt;&gt;&gt; ""abc"" ^ """"
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for ^: 'str' and 'str'
</code></pre>
","How do you get the logical xor of two variables in Python?<p>How do you get the <a href=""http://en.wikipedia.org/wiki/Exclusive_or"" rel=""noreferrer"">logical xor</a> of two variables in Python?</p>

<p>For example, I have two variables that I expect to be strings. I want to test that only one of them contains a True value (is not None or the empty string):</p>

<pre><code>str1 = raw_input(""Enter string one:"")
str2 = raw_input(""Enter string two:"")
if logical_xor(str1, str2):
    print ""ok""
else:
    print ""bad""
</code></pre>

<p>The <code>^</code> operator seems to be bitwise, and not defined on all objects:</p>

<pre><code>&gt;&gt;&gt; 1 ^ 1
0
&gt;&gt;&gt; 2 ^ 1
3
&gt;&gt;&gt; ""abc"" ^ """"
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
TypeError: unsupported operand type(s) for ^: 'str' and 'str'
</code></pre>
",<python><logical-operators>,variables xor logical bitwise defined expect operator TRUE test contains,"<p>If you're already normalizing the inputs to booleans, then != is xor.</p>

<pre><code>bool(a) != bool(b)
</code></pre>
",,
266,0,Get key by value in dictionary,"<p>I made a function which will look up ages in a <code>Dictionary</code> and show the matching name:</p>

<pre><code>dictionary = {'george' : 16, 'amber' : 19}
search_age = raw_input(""Provide age"")
for age in dictionary.values():
    if age == search_age:
        name = dictionary[age]
        print name
</code></pre>

<p>I know how to compare and find the age I just don't know how to show the name of the person. Additionally, I am getting a <code>KeyError</code> because of line 5. I know it's not correct but I can't figure out how to make it search backwards.</p>
","Get key by value in dictionary<p>I made a function which will look up ages in a <code>Dictionary</code> and show the matching name:</p>

<pre><code>dictionary = {'george' : 16, 'amber' : 19}
search_age = raw_input(""Provide age"")
for age in dictionary.values():
    if age == search_age:
        name = dictionary[age]
        print name
</code></pre>

<p>I know how to compare and find the age I just don't know how to show the name of the person. Additionally, I am getting a <code>KeyError</code> because of line 5. I know it's not correct but I can't figure out how to make it search backwards.</p>
",<python><dictionary>,know age matching ages person dictionary keyerror additionally backwards compare invert ,"<p>There is none. <code>dict</code> is not intended to be used this way.</p>

<pre><code>dictionary = {'george': 16, 'amber': 19}
search_age = input(""Provide age"")
for name, age in dictionary.items():  # for name, age in dictionary.iteritems():  (for Python 2.x)
    if age == search_age:
        print(name)
</code></pre>
",,
267,3,How to define a two-dimensional array?,"<p>I want to define a two-dimensional array without an initialized length like this:</p>

<pre><code>Matrix = [][]
</code></pre>

<p>but it does not work...</p>

<p>I've tried the code below, but it is wrong too:</p>

<pre><code>Matrix = [5][5]
</code></pre>

<p><strong><em>Error:</em></strong></p>

<pre><code>Traceback ...

IndexError: list index out of range
</code></pre>

<p>What is my mistake?</p>
","How to define a two-dimensional array?<p>I want to define a two-dimensional array without an initialized length like this:</p>

<pre><code>Matrix = [][]
</code></pre>

<p>but it does not work...</p>

<p>I've tried the code below, but it is wrong too:</p>

<pre><code>Matrix = [5][5]
</code></pre>

<p><strong><em>Error:</em></strong></p>

<pre><code>Traceback ...

IndexError: list index out of range
</code></pre>

<p>What is my mistake?</p>
",<python><matrix><syntax-error>,dimensional define array mistake initialized length wrong tried work error,"<p>You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this
&quot;list comprehension&quot;.</p>
<pre><code># Creates a list containing 5 lists, each of 8 items, all set to 0
w, h = 8, 5
Matrix = [[0 for x in range(w)] for y in range(h)] 
</code></pre>
<p>#You can now add items to the list:</p>
<pre><code>Matrix[0][0] = 1
Matrix[6][0] = 3 # error! range... 
Matrix[0][6] = 3 # valid
</code></pre>
<p>Note that the matrix is &quot;y&quot; address major, in other words, the &quot;y index&quot; comes before the &quot;x index&quot;.</p>
<pre><code>print Matrix[0][0] # prints 1
x, y = 0, 6 
print Matrix[x][y] # prints 3; be careful with indexing! 
</code></pre>
<p>Although you can name them as you wish, I look at it this way to avoid some confusion that could arise with the indexing, if you use &quot;x&quot; for both the inner and outer lists, and want a non-square Matrix.</p>
",,
268,4,List of lists changes reflected across sublists unexpectedly,"<p>I needed to create a list of lists in Python, so I typed the following:</p>
<pre><code>my_list = [[1] * 4] * 3
</code></pre>
<p>The list looked like this:</p>
<pre><code>[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]  
</code></pre>
<p>Then I changed one of the innermost values:</p>
<pre><code>my_list[0][0] = 5
</code></pre>
<p>Now my list looks like this:</p>
<pre><code>[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]  
</code></pre>
<p>which is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?</p>
","List of lists changes reflected across sublists unexpectedly<p>I needed to create a list of lists in Python, so I typed the following:</p>
<pre><code>my_list = [[1] * 4] * 3
</code></pre>
<p>The list looked like this:</p>
<pre><code>[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]  
</code></pre>
<p>Then I changed one of the innermost values:</p>
<pre><code>my_list[0][0] = 5
</code></pre>
<p>Now my list looks like this:</p>
<pre><code>[[5, 1, 1, 1], [5, 1, 1, 1], [5, 1, 1, 1]]  
</code></pre>
<p>which is not what I wanted or expected. Can someone please explain what's going on, and how to get around it?</p>
",<python><list><nested-lists><mutable>,list lists innermost reflected sublists unexpectedly typed changed needed changes,"<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it:</p>

<pre><code>x = [1] * 4
l = [x] * 3
print(f""id(x): {id(x)}"")
# id(x): 140560897920048
print(
    f""id(l[0]): {id(l[0])}\n""
    f""id(l[1]): {id(l[1])}\n""
    f""id(l[2]): {id(l[2])}""
)
# id(l[0]): 140560897920048
# id(l[1]): 140560897920048
# id(l[2]): 140560897920048

x[0] = 42
print(f""x: {x}"")
# x: [42, 1, 1, 1]
print(f""l: {l}"")
# l: [[42, 1, 1, 1], [42, 1, 1, 1], [42, 1, 1, 1]]
</code></pre>

<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>

<pre><code>[[1]*4 for _ in range(3)]
</code></pre>

<p>which will reevaluate <code>[1]*4</code> each time instead of evaluating it once and making 3 references to 1 list.</p>

<hr>

<p>You might wonder why <code>*</code> can't make independent objects the way the list comprehension does. That's because the multiplication operator <code>*</code> operates on objects, without seeing expressions. When you use <code>*</code> to multiply <code>[[1] * 4]</code> by 3, <code>*</code> only sees the 1-element list <code>[[1] * 4]</code> evaluates to, not the <code>[[1] * 4</code> expression text. <code>*</code> has no idea how to make copies of that element, no idea how to reevaluate <code>[[1] * 4]</code>, and no idea you even want copies, and in general, there might not even be a way to copy the element.</p>

<p>The only option <code>*</code> has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</p>

<p>In contrast, a list comprehension reevaluates the element expression on every iteration. <code>[[1] * 4 for n in range(3)]</code> reevaluates <code>[1] * 4</code> every time for the same reason <code>[x**2 for x in range(3)]</code> reevaluates <code>x**2</code> every time. Every evaluation of <code>[1] * 4</code> generates a new list, so the list comprehension does what you wanted.</p>

<p>Incidentally, <code>[1] * 4</code> also doesn't copy the elements of <code>[1]</code>, but that doesn't matter, since integers are immutable. You can't do something like <code>1.value = 2</code> and turn a 1 into a 2.</p>
",,
269,3,How do I do a not equal in Django queryset filtering?,"<p>In Django model QuerySets, I see that there is a <code>__gt</code> and <code>__lt</code> for comparative values, but is there a <code>__ne</code> or <code>!=</code> (<strong>not equals</strong>)? I want to filter out using a not equals. For example, for</p>
<pre><code>Model:
    bool a;
    int x;
</code></pre>
<p>I want to do</p>
<pre><code>results = Model.objects.exclude(a=True, x!=5)
</code></pre>
<p>The <code>!=</code> is not correct syntax. I also tried <code>__ne</code>.</p>
<p>I ended up using:</p>
<pre><code>results = Model.objects.exclude(a=True, x__lt=5).exclude(a=True, x__gt=5)
</code></pre>
","How do I do a not equal in Django queryset filtering?<p>In Django model QuerySets, I see that there is a <code>__gt</code> and <code>__lt</code> for comparative values, but is there a <code>__ne</code> or <code>!=</code> (<strong>not equals</strong>)? I want to filter out using a not equals. For example, for</p>
<pre><code>Model:
    bool a;
    int x;
</code></pre>
<p>I want to do</p>
<pre><code>results = Model.objects.exclude(a=True, x!=5)
</code></pre>
<p>The <code>!=</code> is not correct syntax. I also tried <code>__ne</code>.</p>
<p>I ended up using:</p>
<pre><code>results = Model.objects.exclude(a=True, x__lt=5).exclude(a=True, x__gt=5)
</code></pre>
",<python><django><django-models><django-queryset>,equals ne django gt comparative lt fori ended queryset querysets,"<p>You can use <a href=""https://docs.djangoproject.com/en/stable/topics/db/queries/#complex-lookups-with-q"" rel=""noreferrer"">Q objects</a> for this. They can be negated with the <code>~</code> operator and combined much like normal Python expressions:</p>
<pre><code>from myapp.models import Entry
from django.db.models import Q

Entry.objects.filter(~Q(id=3))
</code></pre>
<p>will return all entries except the one(s) with <code>3</code> as their ID:</p>
<pre><code>[&lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, &lt;Entry: Entry object&gt;, ...]
</code></pre>
",,
270,3,not None test in Python,"<p>Out of these not None tests.</p>

<pre><code>if val != None:

if not (val is None):

if val is not None:
</code></pre>

<p>Which one is preferable, and why?</p>
","not None test in Python<p>Out of these not None tests.</p>

<pre><code>if val != None:

if not (val is None):

if val is not None:
</code></pre>

<p>Which one is preferable, and why?</p>
",<python><nonetype>,pythonout preferable tests test forgotten formatwhich formatting formatted formats format,"<pre><code>if val is not None:
    # ...
</code></pre>

<p>is the Pythonic idiom for testing that a variable is not set to <code>None</code>. This idiom has particular uses in the case of <a href=""http://effbot.org/zone/default-values.htm"" rel=""noreferrer"">declaring keyword functions with default parameters</a>. <code>is</code> tests identity in Python. Because there is one and only one instance of <code>None</code> present in a running Python script/program, <code>is</code> is the optimal test for this. As <a href=""https://stackoverflow.com/questions/3965104/not-none-test-in-python/3965165#3965165"">Johnsyweb points out</a>, this is discussed in <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">PEP 8</a> under ""Programming Recommendations"".</p>

<p>As for why this is preferred to </p>

<pre><code>if not (val is None):
    # ...
</code></pre>

<p>this is simply part of the <a href=""http://www.python.org/dev/peps/pep-0020/"" rel=""noreferrer"">Zen of Python</a>: ""Readability counts."" Good Python is often close to good <a href=""http://en.wikipedia.org/wiki/Pseudocode"" rel=""noreferrer"">pseudocode</a>.</p>
",,
271,3,What does functools.wraps do?,"<p>In a comment on this <a href=""https://stackoverflow.com/questions/306130/python-decorator-makes-function-forget-that-it-belongs-to-a-class#306277"">answer to another question</a>, someone said that they weren't sure what <code>functools.wraps</code> was doing. So, I'm asking this question so that there will be a record of it on StackOverflow for future reference: what does <code>functools.wraps</code> do, exactly?</p>
","What does functools.wraps do?<p>In a comment on this <a href=""https://stackoverflow.com/questions/306130/python-decorator-makes-function-forget-that-it-belongs-to-a-class#306277"">answer to another question</a>, someone said that they weren't sure what <code>functools.wraps</code> was doing. So, I'm asking this question so that there will be a record of it on StackOverflow for future reference: what does <code>functools.wraps</code> do, exactly?</p>
",<python><decorator><functools>,wraps functools question stackoverflow said comment record reference future asking,"<p>When you use a decorator, you're replacing one function with another.  In other words, if you have a decorator</p>

<pre><code>def logged(func):
    def with_logging(*args, **kwargs):
        print(func.__name__ + "" was called"")
        return func(*args, **kwargs)
    return with_logging
</code></pre>

<p>then when you say</p>

<pre><code>@logged
def f(x):
   """"""does some math""""""
   return x + x * x
</code></pre>

<p>it's exactly the same as saying</p>

<pre><code>def f(x):
    """"""does some math""""""
    return x + x * x
f = logged(f)
</code></pre>

<p>and your function <code>f</code> is replaced with the function <code>with_logging</code>.  Unfortunately, this means that if you then say</p>

<pre><code>print(f.__name__)
</code></pre>

<p>it will print <code>with_logging</code> because that's the name of your new function.  In fact, if you look at the docstring for <code>f</code>, it will be blank because <code>with_logging</code> has no docstring, and so the docstring you wrote won't be there anymore.  Also, if you look at the pydoc result for that function, it won't be listed as taking one argument <code>x</code>; instead it'll be listed as taking <code>*args</code> and <code>**kwargs</code> because that's what with_logging takes.</p>

<p>If using a decorator always meant losing this information about a function, it would be a serious problem.  That's why we have <code>functools.wraps</code>.  This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc.  And since <code>wraps</code> is itself a decorator, the following code does the correct thing:</p>

<pre><code>from functools import wraps
def logged(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print(func.__name__ + "" was called"")
        return func(*args, **kwargs)
    return with_logging

@logged
def f(x):
   """"""does some math""""""
   return x + x * x

print(f.__name__)  # prints 'f'
print(f.__doc__)   # prints 'does some math'
</code></pre>
",,
272,3,What is the purpose and use of **kwargs?,"<p>What are the uses for <code>**kwargs</code> in Python?</p>

<p>I know you can do an <code>objects.filter</code> on a table and pass in a <code>**kwargs</code> argument. &nbsp;</p>

<p>Can I also do this for specifying time deltas i.e. <code>timedelta(hours = time1)</code>? </p>

<p>How exactly does it work? Is it classes as 'unpacking'? Like <code>a,b=1,2</code>?</p>
","What is the purpose and use of **kwargs?<p>What are the uses for <code>**kwargs</code> in Python?</p>

<p>I know you can do an <code>objects.filter</code> on a table and pass in a <code>**kwargs</code> argument. &nbsp;</p>

<p>Can I also do this for specifying time deltas i.e. <code>timedelta(hours = time1)</code>? </p>

<p>How exactly does it work? Is it classes as 'unpacking'? Like <code>a,b=1,2</code>?</p>
",<python><keyword-argument>,kwargs time unpacking timedelta specifying deltas hours table filter pass,"<p>You can use <code>**kwargs</code> to let your functions take an arbitrary number of keyword arguments (&quot;kwargs&quot; means &quot;keyword arguments&quot;):</p>
<pre><code>&gt;&gt;&gt; def print_keyword_args(**kwargs):
...     # kwargs is a dict of the keyword args passed to the function
...     for key, value in kwargs.iteritems():
...         print &quot;%s = %s&quot; % (key, value)
... 
&gt;&gt;&gt; print_keyword_args(first_name=&quot;John&quot;, last_name=&quot;Doe&quot;)
first_name = John
last_name = Doe
</code></pre>
<p>You can also use the <code>**kwargs</code> syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:</p>
<pre><code>&gt;&gt;&gt; kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}
&gt;&gt;&gt; print_keyword_args(**kwargs)
first_name = Bobby
last_name = Smith
</code></pre>
<p>The <a href=""http://docs.python.org/tutorial/controlflow.html#keyword-arguments"" rel=""noreferrer"">Python Tutorial</a> contains a good explanation of how it works, along with some nice examples.</p>
<h2>Python 3 update</h2>
<p>For Python 3, instead of <code>iteritems()</code>, use <a href=""https://docs.python.org/3/library/stdtypes.html#dict.items"" rel=""noreferrer""><code>items()</code></a></p>
",,
273,5,Convert date to datetime in Python,"<p>Is there a built-in method for converting a <code>date</code> to a <code>datetime</code> in Python, for example getting the <code>datetime</code> for the midnight of the given date? The opposite conversion is easy: <code>datetime</code> has a <code>.date()</code> method.</p>

<p>Do I really have to manually call <code>datetime(d.year, d.month, d.day)</code>?</p>
","Convert date to datetime in Python<p>Is there a built-in method for converting a <code>date</code> to a <code>datetime</code> in Python, for example getting the <code>datetime</code> for the midnight of the given date? The opposite conversion is easy: <code>datetime</code> has a <code>.date()</code> method.</p>

<p>Do I really have to manually call <code>datetime(d.year, d.month, d.day)</code>?</p>
",<python><datetime><date>,datetime date method midnight opposite year month conversion manually pythonis,"<p>You can use <a href=""https://docs.python.org/2/library/datetime.html#datetime.datetime.combine"" rel=""noreferrer""><code>datetime.combine(date, time)</code></a>; for the time, you create a <code>datetime.time</code> object initialized to midnight.</p>

<pre><code>from datetime import date
from datetime import datetime

dt = datetime.combine(date.today(), datetime.min.time())
</code></pre>
",,
274,6,"How can I open multiple files using ""with open"" in Python?","<p>I want to change a couple of files at one time, <strong>iff</strong> I can write to all of them. I'm wondering if I somehow can combine the multiple open calls with the <code>with</code> statement:</p>

<pre><code>try:
  with open('a', 'w') as a and open('b', 'w') as b:
    do_something()
except IOError as e:
  print 'Operation failed: %s' % e.strerror
</code></pre>

<p>If that's not possible, what would an elegant solution to this problem look like?</p>
","How can I open multiple files using ""with open"" in Python?<p>I want to change a couple of files at one time, <strong>iff</strong> I can write to all of them. I'm wondering if I somehow can combine the multiple open calls with the <code>with</code> statement:</p>

<pre><code>try:
  with open('a', 'w') as a and open('b', 'w') as b:
    do_something()
except IOError as e:
  print 'Operation failed: %s' % e.strerror
</code></pre>

<p>If that's not possible, what would an elegant solution to this problem look like?</p>
",<python><file-io>,open multiple files combine iff couple calls elegant statement wondering,"<p>As of Python 2.7 (or 3.1 respectively) you can write</p>

<pre><code>with open('a', 'w') as a, open('b', 'w') as b:
    do_something()
</code></pre>

<p>In earlier versions of Python, you can sometimes use 
<a href=""http://docs.python.org/library/contextlib.html#contextlib.nested"" rel=""noreferrer""><code>contextlib.nested()</code></a> to nest context managers.  This won't work as expected for opening multiples files, though -- see the linked documentation for details.</p>

<hr>

<p>In the rare case that you want to open a variable number of files all at the same time, you can use <a href=""https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack"" rel=""noreferrer""><code>contextlib.ExitStack</code></a>, starting from Python version 3.3:</p>

<pre><code>with ExitStack() as stack:
    files = [stack.enter_context(open(fname)) for fname in filenames]
    # Do something with ""files""
</code></pre>

<p>Most of the time you have a variable set of files, you likely want to open them one after the other, though.</p>
",,
275,3,How can I use Python to get the system hostname?,"<p>I'm writing a chat program for a local network. I would like be able to identify computers and get the user-set computer name with Python.</p>
","How can I use Python to get the system hostname?<p>I'm writing a chat program for a local network. I would like be able to identify computers and get the user-set computer name with Python.</p>
",<python><hostname>,hostname chat identify computers computer network local writing user set,"<p>Use <a href=""http://docs.python.org/library/socket.html"" rel=""noreferrer""><code>socket</code></a> and its <a href=""http://docs.python.org/library/socket.html#socket.gethostname"" rel=""noreferrer""><code>gethostname()</code></a> functionality. This will get the <code>hostname</code> of the computer where the Python interpreter is running:</p>

<pre><code>import socket
print(socket.gethostname())
</code></pre>
",,
276,6,open() in Python does not create a file if it doesn't exist,"<p>What is the best way to open a file as read/write if it exists, or if it does not, then create it and open it as read/write? From what I read, <code>file = open('myfile.dat', 'rw')</code> should do this, right?</p>

<p>It is not working for me (Python 2.6.2) and I'm wondering if it is a version problem, or not supposed to work like that or what.</p>

<p>The bottom line is, I just need a solution for the problem. I am curious about the other stuff, but all I need is a nice way to do the opening part.</p>

<p>The enclosing directory was writeable by user and group, not other (I'm on a Linux system... so permissions 775 in other words), and the exact error was:</p>

<blockquote>
  <p>IOError: no such file or directory.</p>
</blockquote>
","open() in Python does not create a file if it doesn't exist<p>What is the best way to open a file as read/write if it exists, or if it does not, then create it and open it as read/write? From what I read, <code>file = open('myfile.dat', 'rw')</code> should do this, right?</p>

<p>It is not working for me (Python 2.6.2) and I'm wondering if it is a version problem, or not supposed to work like that or what.</p>

<p>The bottom line is, I just need a solution for the problem. I am curious about the other stuff, but all I need is a nice way to do the opening part.</p>

<p>The enclosing directory was writeable by user and group, not other (I'm on a Linux system... so permissions 775 in other words), and the exact error was:</p>

<blockquote>
  <p>IOError: no such file or directory.</p>
</blockquote>
",<python><linux><file-io><file-permissions>,open file read problem write create directory writeable ioerror rw,"<p>You should use <code>open</code> with the <code>w+</code> mode:</p>

<pre><code>file = open('myfile.dat', 'w+')
</code></pre>
",,
277,4,How to sort a list/tuple of lists/tuples by the element at a given index?,"<p>I have some data either in a list of lists or a list of tuples, like this:</p>

<pre><code>data = [[1,2,3], [4,5,6], [7,8,9]]
data = [(1,2,3), (4,5,6), (7,8,9)]
</code></pre>

<p>And I want to sort by the 2nd element in the subset. Meaning, sorting by 2,5,8 where <code>2</code> is from <code>(1,2,3)</code>, <code>5</code> is from <code>(4,5,6)</code>. What is the common way to do this? Should I store tuples or lists in my list?</p>
","How to sort a list/tuple of lists/tuples by the element at a given index?<p>I have some data either in a list of lists or a list of tuples, like this:</p>

<pre><code>data = [[1,2,3], [4,5,6], [7,8,9]]
data = [(1,2,3), (4,5,6), (7,8,9)]
</code></pre>

<p>And I want to sort by the 2nd element in the subset. Meaning, sorting by 2,5,8 where <code>2</code> is from <code>(1,2,3)</code>, <code>5</code> is from <code>(4,5,6)</code>. What is the common way to do this? Should I store tuples or lists in my list?</p>
",<python><list><sorting><tuples>,tuples lists list sort element nd sorting subset store tuple,"<pre><code>sorted_by_second = sorted(data, key=lambda tup: tup[1])
</code></pre>
<p>or:</p>
<pre><code>data.sort(key=lambda tup: tup[1])  # sorts in place
</code></pre>
<p>The default sort mode is ascending. To sort in descending order use the option <a href=""https://docs.python.org/3/howto/sorting.html#ascending-and-descending"" rel=""noreferrer""><code>reverse=True</code></a>:</p>
<pre><code>sorted_by_second = sorted(data, key=lambda tup: tup[1], reverse=True)
</code></pre>
<p>or:</p>
<pre><code>data.sort(key=lambda tup: tup[1], reverse=True)  # sorts in place
</code></pre>
",,
278,2,How are iloc and loc different?,"<p>Can someone explain how these two methods of slicing are different?<br />
I've seen <a href=""http://pandas.pydata.org/pandas-docs/stable/indexing.html"" rel=""noreferrer"">the docs</a>,
and I've seen <a href=""https://stackoverflow.com/questions/28757389/loc-vs-iloc-vs-ix-vs-at-vs-iat"">these</a> <a href=""https://stackoverflow.com/questions/27667759/is-ix-always-better-than-loc-and-iloc-since-it-is-faster-and-supports-i"">answers</a>, but I still find myself unable to understand how the three are different. To me, they seem interchangeable in large part, because they are at the lower levels of slicing.</p>
<p>For example, say we want to get the first five rows of a <code>DataFrame</code>.  How is it that these two work?</p>
<pre><code>df.loc[:5]
df.iloc[:5]
</code></pre>
<p>Can someone present three cases where the distinction in uses are clearer?</p>
<hr />
<p>Once upon a time, I also wanted to know how these two functions differ from <code>df.ix[:5]</code> but <code>ix</code> has been removed from pandas 1.0, so I don't care anymore.</p>
","How are iloc and loc different?<p>Can someone explain how these two methods of slicing are different?<br />
I've seen <a href=""http://pandas.pydata.org/pandas-docs/stable/indexing.html"" rel=""noreferrer"">the docs</a>,
and I've seen <a href=""https://stackoverflow.com/questions/28757389/loc-vs-iloc-vs-ix-vs-at-vs-iat"">these</a> <a href=""https://stackoverflow.com/questions/27667759/is-ix-always-better-than-loc-and-iloc-since-it-is-faster-and-supports-i"">answers</a>, but I still find myself unable to understand how the three are different. To me, they seem interchangeable in large part, because they are at the lower levels of slicing.</p>
<p>For example, say we want to get the first five rows of a <code>DataFrame</code>.  How is it that these two work?</p>
<pre><code>df.loc[:5]
df.iloc[:5]
</code></pre>
<p>Can someone present three cases where the distinction in uses are clearer?</p>
<hr />
<p>Once upon a time, I also wanted to know how these two functions differ from <code>df.ix[:5]</code> but <code>ix</code> has been removed from pandas 1.0, so I don't care anymore.</p>
",<python><pandas><dataframe><indexing><pandas-loc>,ix different slicing seen loc clearer levels anymore iloc distinction,"<h2>Label <em>vs.</em> Location</h2>
<p>The main distinction between the two methods is:</p>
<ul>
<li><p><code>loc</code> gets rows (and/or columns) with particular <strong>labels</strong>.</p>
</li>
<li><p><code>iloc</code> gets rows (and/or columns) at integer <strong>locations</strong>.</p>
</li>
</ul>
<p>To demonstrate, consider a series <code>s</code> of characters with a non-monotonic integer index:</p>
<pre><code>&gt;&gt;&gt; s = pd.Series(list(&quot;abcdef&quot;), index=[49, 48, 47, 0, 1, 2]) 
49    a
48    b
47    c
0     d
1     e
2     f

&gt;&gt;&gt; s.loc[0]    # value at index label 0
'd'

&gt;&gt;&gt; s.iloc[0]   # value at index location 0
'a'

&gt;&gt;&gt; s.loc[0:1]  # rows at index labels between 0 and 1 (inclusive)
0    d
1    e

&gt;&gt;&gt; s.iloc[0:1] # rows at index location between 0 and 1 (exclusive)
49    a
</code></pre>
<p>Here are some of the differences/similarities between <code>s.loc</code> and <code>s.iloc</code> when passed various objects:</p>
<div class=""s-table-container"">
<table class=""s-table"">
<thead>
<tr>
<th>&lt;object&gt;</th>
<th>description</th>
<th><code>s.loc[&lt;object&gt;]</code></th>
<th><code>s.iloc[&lt;object&gt;]</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>single item</td>
<td>Value at index <em>label</em> <code>0</code> (the string <code>'d'</code>)</td>
<td>Value at index <em>location</em> 0 (the string <code>'a'</code>)</td>
</tr>
<tr>
<td><code>0:1</code></td>
<td>slice</td>
<td><strong>Two</strong> rows (labels <code>0</code> and <code>1</code>)</td>
<td><strong>One</strong> row (first row at location 0)</td>
</tr>
<tr>
<td><code>1:47</code></td>
<td>slice with out-of-bounds end</td>
<td><strong>Zero</strong> rows (empty Series)</td>
<td><strong>Five</strong> rows (location 1 onwards)</td>
</tr>
<tr>
<td><code>1:47:-1</code></td>
<td>slice with negative step</td>
<td><strong>three</strong> rows (labels <code>1</code> back to <code>47</code>)</td>
<td><strong>Zero</strong> rows (empty Series)</td>
</tr>
<tr>
<td><code>[2, 0]</code></td>
<td>integer list</td>
<td><strong>Two</strong> rows with given labels</td>
<td><strong>Two</strong> rows with given locations</td>
</tr>
<tr>
<td><code>s &gt; 'e'</code></td>
<td>Bool series (indicating which values have the property)</td>
<td><strong>One</strong> row (containing <code>'f'</code>)</td>
<td><code>NotImplementedError</code></td>
</tr>
<tr>
<td><code>(s&gt;'e').values</code></td>
<td>Bool array</td>
<td><strong>One</strong> row (containing <code>'f'</code>)</td>
<td>Same as <code>loc</code></td>
</tr>
<tr>
<td><code>999</code></td>
<td>int object not in index</td>
<td><code>KeyError</code></td>
<td><code>IndexError</code> (out of bounds)</td>
</tr>
<tr>
<td><code>-1</code></td>
<td>int object not in index</td>
<td><code>KeyError</code></td>
<td>Returns last value in <code>s</code></td>
</tr>
<tr>
<td><code>lambda x: x.index[3]</code></td>
<td>callable applied to series (here returning 3<sup>rd</sup> item in index)</td>
<td><code>s.loc[s.index[3]]</code></td>
<td><code>s.iloc[s.index[3]]</code></td>
</tr>
</tbody>
</table>
</div>
<p><code>loc</code>'s label-querying capabilities extend well-beyond integer indexes and it's worth highlighting a couple of additional examples.</p>
<p>Here's a Series where the index contains string objects:</p>
<pre><code>&gt;&gt;&gt; s2 = pd.Series(s.index, index=s.values)
&gt;&gt;&gt; s2
a    49
b    48
c    47
d     0
e     1
f     2
</code></pre>
<p>Since <code>loc</code> is label-based, it can fetch the first value in the Series using <code>s2.loc['a']</code>. It can also slice with non-integer objects:</p>
<pre><code>&gt;&gt;&gt; s2.loc['c':'e']  # all rows lying between 'c' and 'e' (inclusive)
c    47
d     0
e     1
</code></pre>
<p>For DateTime indexes, we don't need to pass the exact date/time to fetch by label. For example:</p>
<pre><code>&gt;&gt;&gt; s3 = pd.Series(list('abcde'), pd.date_range('now', periods=5, freq='M')) 
&gt;&gt;&gt; s3
2021-01-31 16:41:31.879768    a
2021-02-28 16:41:31.879768    b
2021-03-31 16:41:31.879768    c
2021-04-30 16:41:31.879768    d
2021-05-31 16:41:31.879768    e
</code></pre>
<p>Then to fetch the row(s) for March/April 2021 we only need:</p>
<pre><code>&gt;&gt;&gt; s3.loc['2021-03':'2021-04']
2021-03-31 17:04:30.742316    c
2021-04-30 17:04:30.742316    d
</code></pre>
<h2>Rows and Columns</h2>
<p><code>loc</code> and <code>iloc</code> work the same way with DataFrames as they do with Series. It's useful to note that both methods can address columns and rows together.</p>
<p>When given a tuple, the first element is used to index the rows and, if it exists, the second element is used to index the columns.</p>
<p>Consider the DataFrame defined below:</p>
<pre><code>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; df = pd.DataFrame(np.arange(25).reshape(5, 5),  
                      index=list('abcde'), 
                      columns=['x','y','z', 8, 9])
&gt;&gt;&gt; df
    x   y   z   8   9
a   0   1   2   3   4
b   5   6   7   8   9
c  10  11  12  13  14
d  15  16  17  18  19
e  20  21  22  23  24
</code></pre>
<p>Then for example:</p>
<pre><code>&gt;&gt;&gt; df.loc['c': , :'z']  # rows 'c' and onwards AND columns up to 'z'
    x   y   z
c  10  11  12
d  15  16  17
e  20  21  22

&gt;&gt;&gt; df.iloc[:, 3]        # all rows, but only the column at index location 3
a     3
b     8
c    13
d    18
e    23
</code></pre>
<p>Sometimes we want to mix label and positional indexing methods for the rows and columns, somehow combining the capabilities of <code>loc</code> and <code>iloc</code>.</p>
<p>For example, consider the following DataFrame. How best to slice the rows up to and including 'c' <em>and</em> take the first four columns?</p>
<pre><code>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; df = pd.DataFrame(np.arange(25).reshape(5, 5),  
                      index=list('abcde'), 
                      columns=['x','y','z', 8, 9])
&gt;&gt;&gt; df
    x   y   z   8   9
a   0   1   2   3   4
b   5   6   7   8   9
c  10  11  12  13  14
d  15  16  17  18  19
e  20  21  22  23  24
</code></pre>
<p>We can achieve this result using <code>iloc</code> and the help of another method:</p>
<pre><code>&gt;&gt;&gt; df.iloc[:df.index.get_loc('c') + 1, :4]
    x   y   z   8
a   0   1   2   3
b   5   6   7   8
c  10  11  12  13
</code></pre>
<p><a href=""http://pandas.pydata.org/pandas-docs/version/0.19.1/generated/pandas.Index.get_loc.html"" rel=""noreferrer""><code>get_loc()</code></a> is an index method meaning &quot;get the position of the label in this index&quot;. Note that since slicing with <code>iloc</code> is exclusive of its endpoint, we must add 1 to this value if we want row 'c' as well.</p>
",,
279,3,Python: What OS am I running on?,"<p>What do I need to look at to see whether I'm on Windows or Unix, etc?</p>
","Python: What OS am I running on?<p>What do I need to look at to see whether I'm on Windows or Unix, etc?</p>
",<python><cross-platform><platform-specific><platform-agnostic>,unix os look running windows need python forget formatted formats,"<pre><code>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.name
'posix'
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Linux'
&gt;&gt;&gt; platform.release()
'2.6.22-15-generic'
</code></pre>

<p>The output of <a href=""https://docs.python.org/library/platform.html#platform.system"" rel=""noreferrer""><code>platform.system()</code></a> is as follows:</p>

<ul>
<li>Linux: <code>Linux</code></li>
<li>Mac: <code>Darwin</code></li>
<li>Windows: <code>Windows</code></li>
</ul>

<p>See: <a href=""https://docs.python.org/library/platform.html"" rel=""noreferrer""><code>platform</code> ƒ?? Access to underlying platformƒ??s identifying data</a></p>
",,
280,6,"How to fix ""Attempted relative import in non-package"" even with __init__.py","<p>I'm trying to follow <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">PEP 328</a>, with the following directory structure:</p>

<pre><code>pkg/
  __init__.py
  components/
    core.py
    __init__.py
  tests/
    core_test.py
    __init__.py
</code></pre>

<p>In <code>core_test.py</code> I have the following import statement</p>

<pre><code>from ..components.core import GameLoopEvents
</code></pre>

<p>However, when I run, I get the following error:</p>

<pre><code>tests$ python core_test.py 
Traceback (most recent call last):
  File ""core_test.py"", line 3, in &lt;module&gt;
    from ..components.core import GameLoopEvents
ValueError: Attempted relative import in non-package
</code></pre>

<p>Searching around I found ""<a href=""https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py"">relative path not working even with __init__.py</a>"" and ""<a href=""https://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder/6098238#6098238"">Import a module from a relative path</a>"" but they didn't help.</p>

<p>Is there anything I'm missing here?</p>
","How to fix ""Attempted relative import in non-package"" even with __init__.py<p>I'm trying to follow <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">PEP 328</a>, with the following directory structure:</p>

<pre><code>pkg/
  __init__.py
  components/
    core.py
    __init__.py
  tests/
    core_test.py
    __init__.py
</code></pre>

<p>In <code>core_test.py</code> I have the following import statement</p>

<pre><code>from ..components.core import GameLoopEvents
</code></pre>

<p>However, when I run, I get the following error:</p>

<pre><code>tests$ python core_test.py 
Traceback (most recent call last):
  File ""core_test.py"", line 3, in &lt;module&gt;
    from ..components.core import GameLoopEvents
ValueError: Attempted relative import in non-package
</code></pre>

<p>Searching around I found ""<a href=""https://stackoverflow.com/questions/9427037/relative-path-not-working-even-with-init-py"">relative path not working even with __init__.py</a>"" and ""<a href=""https://stackoverflow.com/questions/279237/python-import-a-module-from-a-folder/6098238#6098238"">Import a module from a relative path</a>"" but they didn't help.</p>

<p>Is there anything I'm missing here?</p>
",<python><package><python-import><importerror><init>,relative import following init path py coretest statement however pyi follow,"<p>Yes. You're not using it as a package.</p>

<pre><code>python -m pkg.tests.core_test
</code></pre>
",,
281,3,What is the difference between range and xrange functions in Python 2.X?,"<p>Apparently xrange is faster but I have no idea why it's faster (and no proof besides the anecdotal so far that it is faster) or what besides that is different about</p>

<pre><code>for i in range(0, 20):
for i in xrange(0, 20):
</code></pre>
","What is the difference between range and xrange functions in Python 2.X?<p>Apparently xrange is faster but I have no idea why it's faster (and no proof besides the anecdotal so far that it is faster) or what besides that is different about</p>

<pre><code>for i in range(0, 20):
for i in xrange(0, 20):
</code></pre>
",<python><loops><range><python-2.x><xrange>,faster xrange anecdotal proof apparently range idea functions far different,"<p><strong>In Python 2.x:</strong></p>
<ul>
<li><p><code>range</code> creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>9999999</code> elements.</p>
</li>
<li><p><code>xrange</code> is a sequence object that  evaluates lazily.</p>
</li>
</ul>
<p><strong>In Python 3:</strong></p>
<ul>
<li><code>range</code> does the equivalent of Python 2's <code>xrange</code>. To get the list, you have to explicitly use <code>list(range(...))</code>.</li>
<li><code>xrange</code> no longer exists.</li>
</ul>
",,
282,5,Print string to text file,"<p>I'm using Python to open a text document:</p>

<pre><code>text_file = open(""Output.txt"", ""w"")

text_file.write(""Purchase Amount: "" 'TotalAmount')

text_file.close()
</code></pre>

<p>I want to substitute the value of a string variable <code>TotalAmount</code> into the text document. Can someone please let me know how to do this?</p>
","Print string to text file<p>I'm using Python to open a text document:</p>

<pre><code>text_file = open(""Output.txt"", ""w"")

text_file.write(""Purchase Amount: "" 'TotalAmount')

text_file.close()
</code></pre>

<p>I want to substitute the value of a string variable <code>TotalAmount</code> into the text document. Can someone please let me know how to do this?</p>
",<python><string><text><file-io>,text document totalamount substitute filei string let open print variable,"<p>It is strongly advised to use a context manager. As an advantage, it is made sure the file is always closed, no matter what:</p>
<pre><code>with open(&quot;Output.txt&quot;, &quot;w&quot;) as text_file:
    text_file.write(&quot;Purchase Amount: %s&quot; % TotalAmount)
</code></pre>
<p>This is the explicit version (but always remember, the context manager version from above should be preferred):</p>
<pre><code>text_file = open(&quot;Output.txt&quot;, &quot;w&quot;)
text_file.write(&quot;Purchase Amount: %s&quot; % TotalAmount)
text_file.close()
</code></pre>
<p>If you're using Python2.6 or higher, it's preferred to use <code>str.format()</code></p>
<pre><code>with open(&quot;Output.txt&quot;, &quot;w&quot;) as text_file:
    text_file.write(&quot;Purchase Amount: {0}&quot;.format(TotalAmount))
</code></pre>
<p>For python2.7 and higher you can use <code>{}</code> instead of <code>{0}</code></p>
<p>In Python3, there is an optional <code>file</code> parameter to the <code>print</code> function</p>
<pre><code>with open(&quot;Output.txt&quot;, &quot;w&quot;) as text_file:
    print(&quot;Purchase Amount: {}&quot;.format(TotalAmount), file=text_file)
</code></pre>
<p>Python3.6 introduced <a href=""https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals"" rel=""noreferrer"">f-strings</a> for another alternative</p>
<pre><code>with open(&quot;Output.txt&quot;, &quot;w&quot;) as text_file:
    print(f&quot;Purchase Amount: {TotalAmount}&quot;, file=text_file)
</code></pre>
",,
283,5,How to change a string into uppercase,"<p>I have problem in changing a string into uppercase with Python. In my research, I got <code>string.ascii_uppercase</code> but it doesn't work.</p>

<p>The following code:</p>

<pre><code> &gt;&gt;s = 'sdsd'
 &gt;&gt;s.ascii_uppercase
</code></pre>

<p>Gives this error message:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;console&gt;"", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'ascii_uppercase'
</code></pre>

<p>My question is: <strong>how can I convert a string into uppercase in Python?</strong></p>
","How to change a string into uppercase<p>I have problem in changing a string into uppercase with Python. In my research, I got <code>string.ascii_uppercase</code> but it doesn't work.</p>

<p>The following code:</p>

<pre><code> &gt;&gt;s = 'sdsd'
 &gt;&gt;s.ascii_uppercase
</code></pre>

<p>Gives this error message:</p>

<pre><code>Traceback (most recent call last):
  File ""&lt;console&gt;"", line 1, in &lt;module&gt;
AttributeError: 'str' object has no attribute 'ascii_uppercase'
</code></pre>

<p>My question is: <strong>how can I convert a string into uppercase in Python?</strong></p>
",<python><string><uppercase>,string uppercase research uppercasei asciiuppercase changing message gives got problem,"<pre><code>&gt;&gt;&gt; s = 'sdsd'
&gt;&gt;&gt; s.upper()
'SDSD'
</code></pre>

<p>See <a href=""https://docs.python.org/2/library/stdtypes.html#string-methods"" rel=""noreferrer"">String Methods</a>.</p>
",,
284,2,Deleting DataFrame row in Pandas based on column value,"<p>I have the following DataFrame:</p>

<pre><code>             daysago  line_race rating        rw    wrating
 line_date                                                 
 2007-03-31       62         11     56  1.000000  56.000000
 2007-03-10       83         11     67  1.000000  67.000000
 2007-02-10      111          9     66  1.000000  66.000000
 2007-01-13      139         10     83  0.880678  73.096278
 2006-12-23      160         10     88  0.793033  69.786942
 2006-11-09      204          9     52  0.636655  33.106077
 2006-10-22      222          8     66  0.581946  38.408408
 2006-09-29      245          9     70  0.518825  36.317752
 2006-09-16      258         11     68  0.486226  33.063381
 2006-08-30      275          8     72  0.446667  32.160051
 2006-02-11      475          5     65  0.164591  10.698423
 2006-01-13      504          0     70  0.142409   9.968634
 2006-01-02      515          0     64  0.134800   8.627219
 2005-12-06      542          0     70  0.117803   8.246238
 2005-11-29      549          0     70  0.113758   7.963072
 2005-11-22      556          0     -1  0.109852  -0.109852
 2005-11-01      577          0     -1  0.098919  -0.098919
 2005-10-20      589          0     -1  0.093168  -0.093168
 2005-09-27      612          0     -1  0.083063  -0.083063
 2005-09-07      632          0     -1  0.075171  -0.075171
 2005-06-12      719          0     69  0.048690   3.359623
 2005-05-29      733          0     -1  0.045404  -0.045404
 2005-05-02      760          0     -1  0.039679  -0.039679
 2005-04-02      790          0     -1  0.034160  -0.034160
 2005-03-13      810          0     -1  0.030915  -0.030915
 2004-11-09      934          0     -1  0.016647  -0.016647
</code></pre>

<p>I need to remove the rows where <code>line_race</code> is equal to <code>0</code>. What's the most efficient way to do this?</p>
","Deleting DataFrame row in Pandas based on column value<p>I have the following DataFrame:</p>

<pre><code>             daysago  line_race rating        rw    wrating
 line_date                                                 
 2007-03-31       62         11     56  1.000000  56.000000
 2007-03-10       83         11     67  1.000000  67.000000
 2007-02-10      111          9     66  1.000000  66.000000
 2007-01-13      139         10     83  0.880678  73.096278
 2006-12-23      160         10     88  0.793033  69.786942
 2006-11-09      204          9     52  0.636655  33.106077
 2006-10-22      222          8     66  0.581946  38.408408
 2006-09-29      245          9     70  0.518825  36.317752
 2006-09-16      258         11     68  0.486226  33.063381
 2006-08-30      275          8     72  0.446667  32.160051
 2006-02-11      475          5     65  0.164591  10.698423
 2006-01-13      504          0     70  0.142409   9.968634
 2006-01-02      515          0     64  0.134800   8.627219
 2005-12-06      542          0     70  0.117803   8.246238
 2005-11-29      549          0     70  0.113758   7.963072
 2005-11-22      556          0     -1  0.109852  -0.109852
 2005-11-01      577          0     -1  0.098919  -0.098919
 2005-10-20      589          0     -1  0.093168  -0.093168
 2005-09-27      612          0     -1  0.083063  -0.083063
 2005-09-07      632          0     -1  0.075171  -0.075171
 2005-06-12      719          0     69  0.048690   3.359623
 2005-05-29      733          0     -1  0.045404  -0.045404
 2005-05-02      760          0     -1  0.039679  -0.039679
 2005-04-02      790          0     -1  0.034160  -0.034160
 2005-03-13      810          0     -1  0.030915  -0.030915
 2004-11-09      934          0     -1  0.016647  -0.016647
</code></pre>

<p>I need to remove the rows where <code>line_race</code> is equal to <code>0</code>. What's the most efficient way to do this?</p>
",<python><pandas>,dataframe valuei linerace equal deleting efficient row based rows column,"<p>If I'm understanding correctly, it should be as simple as:</p>

<pre><code>df = df[df.line_race != 0]
</code></pre>
",,
285,3,Styling multi-line conditions in 'if' statements?,"<p>Sometimes I break long conditions in <code>if</code>s onto several lines. The most obvious way to do this is:</p>

<pre><code>  if (cond1 == 'val1' and cond2 == 'val2' and
      cond3 == 'val3' and cond4 == 'val4'):
      do_something
</code></pre>

<p>Isn't very very appealing visually, because the action blends with the conditions. However, it is the natural way using correct Python indentation of 4 spaces.</p>

<p>For the moment I'm using:</p>

<pre><code>  if (    cond1 == 'val1' and cond2 == 'val2' and
          cond3 == 'val3' and cond4 == 'val4'):
      do_something
</code></pre>

<p>But this isn't very pretty. :-)</p>

<p>Can you recommend an alternative way?</p>
","Styling multi-line conditions in 'if' statements?<p>Sometimes I break long conditions in <code>if</code>s onto several lines. The most obvious way to do this is:</p>

<pre><code>  if (cond1 == 'val1' and cond2 == 'val2' and
      cond3 == 'val3' and cond4 == 'val4'):
      do_something
</code></pre>

<p>Isn't very very appealing visually, because the action blends with the conditions. However, it is the natural way using correct Python indentation of 4 spaces.</p>

<p>For the moment I'm using:</p>

<pre><code>  if (    cond1 == 'val1' and cond2 == 'val2' and
          cond3 == 'val3' and cond4 == 'val4'):
      do_something
</code></pre>

<p>But this isn't very pretty. :-)</p>

<p>Can you recommend an alternative way?</p>
",<python><coding-style><if-statement>,conditions appealing ifs blends styling visually way indentation natural statements,"<p>You don't need to use 4 spaces on your second conditional line.  Maybe use:</p>

<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'):
    do_something
</code></pre>

<p>Also, don't forget the whitespace is more flexible than you might think:</p>

<pre><code>if (   
       cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'
   ):
    do_something
if    (cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'):
    do_something
</code></pre>

<p>Both of those are fairly ugly though.</p>

<p>Maybe lose the brackets (the <a href=""https://www.python.org/dev/peps/pep-0008/#multiline-if-statements"" rel=""noreferrer"">Style Guide</a> discourages this though)?</p>

<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \
   cond3 == 'val3' and cond4 == 'val4':
    do_something
</code></pre>

<p>This at least gives you some differentiation.</p>

<p>Or even:</p>

<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \
                       cond3 == 'val3' and \
                       cond4 == 'val4':
    do_something
</code></pre>

<p>I think I prefer:</p>

<pre><code>if cond1 == 'val1' and \
   cond2 == 'val2' and \
   cond3 == 'val3' and \
   cond4 == 'val4':
    do_something
</code></pre>

<p>Here's the <a href=""https://www.python.org/dev/peps/pep-0008/#multiline-if-statements"" rel=""noreferrer"">Style Guide</a>, which (since 2010) recommends using brackets.</p>
",,
286,6,Import a module from a relative path,"<p>How do I import a Python module given its relative path?</p>

<p>For example, if <code>dirFoo</code> contains <code>Foo.py</code> and <code>dirBar</code>, and <code>dirBar</code> contains <code>Bar.py</code>, how do I import <code>Bar.py</code> into <code>Foo.py</code>?</p>

<p>Here's a visual representation:</p>

<pre><code>dirFoo\
    Foo.py
    dirBar\
        Bar.py
</code></pre>

<p><code>Foo</code> wishes to include <code>Bar</code>, but restructuring the folder hierarchy is not an option.</p>
","Import a module from a relative path<p>How do I import a Python module given its relative path?</p>

<p>For example, if <code>dirFoo</code> contains <code>Foo.py</code> and <code>dirBar</code>, and <code>dirBar</code> contains <code>Bar.py</code>, how do I import <code>Bar.py</code> into <code>Foo.py</code>?</p>

<p>Here's a visual representation:</p>

<pre><code>dirFoo\
    Foo.py
    dirBar\
        Bar.py
</code></pre>

<p><code>Foo</code> wishes to include <code>Bar</code>, but restructuring the folder hierarchy is not an option.</p>
",<python><relative-path><python-import>,bar py foo dirbar import relative contains module pathhow visual,"<p>Assuming that both your directories are real Python packages (do have the <code>__init__.py</code> file inside them), here is a safe solution for inclusion of modules relatively to the location of the script.</p>

<p>I assume that you want to do this, because you need to include a set of modules with your script. I use this in production in several products and works in many special scenarios like: scripts called from another directory or executed with python execute instead of opening a new interpreter.</p>

<pre><code> import os, sys, inspect
 # realpath() will make your script run, even if you symlink it :)
 cmd_folder = os.path.realpath(os.path.abspath(os.path.split(inspect.getfile( inspect.currentframe() ))[0]))
 if cmd_folder not in sys.path:
     sys.path.insert(0, cmd_folder)

 # Use this if you want to include modules from a subfolder
 cmd_subfolder = os.path.realpath(os.path.abspath(os.path.join(os.path.split(inspect.getfile( inspect.currentframe() ))[0],""subfolder"")))
 if cmd_subfolder not in sys.path:
     sys.path.insert(0, cmd_subfolder)

 # Info:
 # cmd_folder = os.path.dirname(os.path.abspath(__file__)) # DO NOT USE __file__ !!!
 # __file__ fails if the script is called in different ways on Windows.
 # __file__ fails if someone does os.chdir() before.
 # sys.argv[0] also fails, because it doesn't not always contains the path.
</code></pre>

<p>As a bonus, this approach does let you force Python to use your module instead of the ones installed on the system.</p>

<p>Warning! I don't really know what is happening when current module is inside an <code>egg</code> file. It probably fails too.</p>
",,
287,6,UnicodeDecodeError: 'charmap' codec can't decode byte X in position Y: character maps to <undefined>,"<p>I'm trying to get a Python 3 program to do some manipulations with a text file filled with information. However, when trying to read the file I get the following error:</p>

<pre><code> Traceback (most recent call last):  
     File ""SCRIPT LOCATION"", line NUMBER, in &lt;module&gt;  
     `text = file.read()`  
     File ""C:\Python31\lib\encodings\cp1252.py"", line 23, in decode  
     `return codecs.charmap_decode(input,self.errors,decoding_table)[0]`  
     UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 2907500: character maps to `&lt;undefined&gt;`  
</code></pre>
","UnicodeDecodeError: 'charmap' codec can't decode byte X in position Y: character maps to <undefined><p>I'm trying to get a Python 3 program to do some manipulations with a text file filled with information. However, when trying to read the file I get the following error:</p>

<pre><code> Traceback (most recent call last):  
     File ""SCRIPT LOCATION"", line NUMBER, in &lt;module&gt;  
     `text = file.read()`  
     File ""C:\Python31\lib\encodings\cp1252.py"", line 23, in decode  
     `return codecs.charmap_decode(input,self.errors,decoding_table)[0]`  
     UnicodeDecodeError: 'charmap' codec can't decode byte 0x90 in position 2907500: character maps to `&lt;undefined&gt;`  
</code></pre>
",<windows><python-3.x><unicode><file-io><decode>,trying charmap filled maps manipulations file unicode decode error decode codec byte,"<p>The file in question is not using the <code>CP1252</code> encoding. It's using another encoding. Which one you have to figure out yourself. Common ones are <code>Latin-1</code> and <code>UTF-8</code>. Since <em>0x90</em> doesn't actually mean anything in <code>Latin-1</code>, <code>UTF-8</code> (where <em>0x90</em> is a continuation byte) is more likely.</p>

<p>You specify the encoding when you open the file:</p>

<pre><code>file = open(filename, encoding=""utf8"")
</code></pre>
",,
288,6,Equivalent of shell 'cd' command to change the working directory?,"<p><code>cd</code> is the shell command to change the working directory.</p>
<p>How do I change the current working directory in Python?</p>
","Equivalent of shell 'cd' command to change the working directory?<p><code>cd</code> is the shell command to change the working directory.</p>
<p>How do I change the current working directory in Python?</p>
",<python><cd>,working cd change directory shell command equivalent current python fork,"<p>You can change the working directory with:</p>

<pre class=""lang-py prettyprint-override""><code>import os

os.chdir(path)
</code></pre>

<p>There are two best practices to follow when using this method:</p>

<ol>
<li>Catch the exception (WindowsError, OSError) on invalid path.  If the exception is thrown, do not perform any recursive operations, especially destructive ones.  They will operate on the old path and not the new one.</li>
<li>Return to your old directory when you're done.  This can be done in an exception-safe manner by wrapping your chdir call in a context manager, like Brian M. Hunt did in <a href=""https://stackoverflow.com/questions/431684/how-do-i-cd-in-python/13197763#13197763"">his answer</a>.</li>
</ol>

<p>Changing the current working directory in a subprocess does not change the current working directory in the parent process.  This is true of the Python interpreter as well.  You cannot use <code>os.chdir()</code> to change the CWD of the calling process.</p>
",,
289,3,"What does the ""at"" (@) symbol do in Python?","<p>I'm looking at some Python code which used the <code>@</code> symbol, but I have no idea what it does. I also do not know what to search for as searching Python docs or Google does not return relevant results when the <code>@</code> symbol is included.</p>
","What does the ""at"" (@) symbol do in Python?<p>I'm looking at some Python code which used the <code>@</code> symbol, but I have no idea what it does. I also do not know what to search for as searching Python docs or Google does not return relevant results when the <code>@</code> symbol is included.</p>
",<python><syntax><python-decorators>,symbol included relevant searching idea google docs results search python,"<p>An <code>@</code> symbol at the beginning of a line is used for class, function and method <em>decorators</em>.</p>
<p>Read more here:</p>
<p><a href=""http://www.python.org/dev/peps/pep-0318/"" rel=""noreferrer"">PEP 318: Decorators</a></p>
<p><a href=""http://wiki.python.org/moin/PythonDecorators"" rel=""noreferrer"">Python Decorators</a></p>
<p>The most common Python decorators you'll run into are:</p>
<p><a href=""http://docs.python.org/library/functions.html#property"" rel=""noreferrer"">@property</a></p>
<p><a href=""http://docs.python.org/library/functions.html#classmethod"" rel=""noreferrer"">@classmethod</a></p>
<p><a href=""http://docs.python.org/library/functions.html#staticmethod"" rel=""noreferrer"">@staticmethod</a></p>
<p>If you see an <code>@</code> in the middle of a line, that's a different thing, matrix multiplication. <a href=""https://stackoverflow.com/a/28997112/229792"">See this answer showing the use of <code>@</code> as a binary operator.</a></p>
",,
290,4,Python: Find in list,"<p>I have come across this:</p>

<pre><code>item = someSortOfSelection()
if item in myList:
    doMySpecialFunction(item)
</code></pre>

<p>but sometimes it does not work with all my items, as if they weren't recognized in the list (when it's a list of string).</p>

<p>Is this the most 'pythonic' way of finding an item in a list: <code>if x in l:</code>?</p>
","Python: Find in list<p>I have come across this:</p>

<pre><code>item = someSortOfSelection()
if item in myList:
    doMySpecialFunction(item)
</code></pre>

<p>but sometimes it does not work with all my items, as if they weren't recognized in the list (when it's a list of string).</p>

<p>Is this the most 'pythonic' way of finding an item in a list: <code>if x in l:</code>?</p>
",<python><find>,list recognized list finding come items item pythonic work string,"<p>As for your first question: that code is perfectly fine and should work if <code>item</code> equals one of the elements inside <code>myList</code>. Maybe you try to find a string that does not <em>exactly</em> match one of the items or maybe you are using a float value which suffers from inaccuracy.</p>

<p>As for your second question: There's actually several possible ways if ""finding"" things in lists.</p>

<h3>Checking if something is inside</h3>

<p>This is the use case you describe: Checking whether something is inside a list or not. As you know, you can use the <code>in</code> operator for that:</p>

<pre><code>3 in [1, 2, 3] # =&gt; True
</code></pre>

<h3>Filtering a collection</h3>

<p>That is, finding all elements in a sequence that meet a certain condition. You can use list comprehension or generator expressions for that:</p>

<pre><code>matches = [x for x in lst if fulfills_some_condition(x)]
matches = (x for x in lst if x &gt; 6)
</code></pre>

<p>The latter will return a <em>generator</em> which you can imagine as a sort of lazy list that will only be built as soon as you iterate through it. By the way, the first one is exactly equivalent to</p>

<pre><code>matches = filter(fulfills_some_condition, lst)
</code></pre>

<p>in Python 2. Here you can see higher-order functions at work. In Python 3, <code>filter</code> doesn't return a list, but a generator-like object.</p>

<h3>Finding the first occurrence</h3>

<p>If you only want the first thing that matches a condition (but you don't know what it is yet), it's fine to use a for loop (possibly using the <code>else</code> clause as well, which is not really well-known). You can also use</p>

<pre><code>next(x for x in lst if ...)
</code></pre>

<p>which will return the first match or raise a <code>StopIteration</code> if none is found. Alternatively, you can use</p>

<pre><code>next((x for x in lst if ...), [default value])
</code></pre>

<h3>Finding the location of an item</h3>

<p>For lists, there's also the <code>index</code> method that can sometimes be useful if you want to know <em>where</em> a certain element is in the list:</p>

<pre><code>[1,2,3].index(2) # =&gt; 1
[1,2,3].index(4) # =&gt; ValueError
</code></pre>

<p>However, note that if you have duplicates, <code>.index</code> always returns the lowest index:......</p>

<pre><code>[1,2,3,2].index(2) # =&gt; 1
</code></pre>

<p>If there are duplicates and you want all the indexes then you can use <code>enumerate()</code> instead:</p>

<pre><code>[i for i,x in enumerate([1,2,3,2]) if x==2] # =&gt; [1, 3]
</code></pre>
",,
291,4,Getting a list of all subdirectories in the current directory,"<p>Is there a way to return a list of all the subdirectories in the current directory in Python?</p>

<p>I know you can do this with files, but I need to get the list of directories instead.</p>
","Getting a list of all subdirectories in the current directory<p>Is there a way to return a list of all the subdirectories in the current directory in Python?</p>

<p>I know you can do this with files, but I need to get the list of directories instead.</p>
",<python><directory><subdirectory>,subdirectories current list directory directories instead getting return files directory,"<p>Do you mean immediate subdirectories, or every directory right down the tree? </p>

<p>Either way, you could use <a href=""http://docs.python.org/library/os.html#os.walk"" rel=""noreferrer""><code>os.walk</code></a> to do this:</p>

<pre><code>os.walk(directory)
</code></pre>

<p>will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so</p>

<pre><code>[x[0] for x in os.walk(directory)]
</code></pre>

<p>should give you all of the subdirectories, recursively.</p>

<p>Note that the second entry in the tuple is the list of child directories of the entry in the first position, so you could use this instead, but it's not likely to save you much.</p>

<p>However, you could use it just to give you the immediate child directories:</p>

<pre><code>next(os.walk('.'))[1]
</code></pre>

<p>Or see the other solutions already posted, using <a href=""http://docs.python.org/library/os.html#os.listdir"" rel=""noreferrer""><code>os.listdir</code></a> and <a href=""http://docs.python.org/library/os.path.html#os.path.isdir"" rel=""noreferrer""><code>os.path.isdir</code></a>, including those at ""<a href=""https://stackoverflow.com/questions/800197/get-all-of-the-immediate-subdirectories-in-python"">How to get all of the immediate subdirectories in Python</a>"".</p>
",,
292,5,How do I get the day of week given a date?,"<p>I want to find out the following:
given a date (<code>datetime</code> object), what is the corresponding day of the week?</p>

<p>For instance, Sunday is the first day, Monday: second day.. and so on</p>

<p>And then if the input is something like today's date.</p>

<h2>Example</h2>

<pre><code>&gt;&gt;&gt; today = datetime.datetime(2017, 10, 20)
&gt;&gt;&gt; today.get_weekday()  # what I look for
</code></pre>

<p>The output is maybe <code>6</code> (since it's Friday)</p>
","How do I get the day of week given a date?<p>I want to find out the following:
given a date (<code>datetime</code> object), what is the corresponding day of the week?</p>

<p>For instance, Sunday is the first day, Monday: second day.. and so on</p>

<p>And then if the input is something like today's date.</p>

<h2>Example</h2>

<pre><code>&gt;&gt;&gt; today = datetime.datetime(2017, 10, 20)
&gt;&gt;&gt; today.get_weekday()  # what I look for
</code></pre>

<p>The output is maybe <code>6</code> (since it's Friday)</p>
",<python><date><datetime><time><weekday>,day date week given friday sunday monday examplethe onand corresponding,"<p>Use <code>weekday()</code>:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.today()
datetime.datetime(2012, 3, 23, 23, 24, 55, 173504)
&gt;&gt;&gt; datetime.datetime.today().weekday()
4
</code></pre>
<p>From the <a href=""https://docs.python.org/3/library/datetime.html#datetime.datetime.weekday"" rel=""noreferrer"">documentation</a>:</p>
<blockquote>
<p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6.</p>
</blockquote>
",,
293,5,"What exactly do ""u"" and ""r"" string flags do, and what are raw string literals?","<p>While asking <a href=""https://stackoverflow.com/questions/2081622/python-raw-strings-and-unicode-how-to-use-web-for-input-as-regexp-patterns"">this question</a>, I realized I didn't know much about raw strings. For somebody claiming to be a Django trainer, this sucks.</p>

<p>I know what an encoding is, and I know what <code>u''</code> alone does since I get what is Unicode.</p>

<ul>
<li><p>But what does <code>r''</code> do exactly? What kind of string does it result in?</p></li>
<li><p>And above all, what the heck does <code>ur''</code> do?</p></li>
<li><p>Finally, is there any reliable way to go back from a Unicode string to a simple raw string?</p></li>
<li><p>Ah, and by the way, if your system and your text editor charset are set to UTF-8, does <code>u''</code> actually do anything?</p></li>
</ul>
","What exactly do ""u"" and ""r"" string flags do, and what are raw string literals?<p>While asking <a href=""https://stackoverflow.com/questions/2081622/python-raw-strings-and-unicode-how-to-use-web-for-input-as-regexp-patterns"">this question</a>, I realized I didn't know much about raw strings. For somebody claiming to be a Django trainer, this sucks.</p>

<p>I know what an encoding is, and I know what <code>u''</code> alone does since I get what is Unicode.</p>

<ul>
<li><p>But what does <code>r''</code> do exactly? What kind of string does it result in?</p></li>
<li><p>And above all, what the heck does <code>ur''</code> do?</p></li>
<li><p>Finally, is there any reliable way to go back from a Unicode string to a simple raw string?</p></li>
<li><p>Ah, and by the way, if your system and your text editor charset are set to UTF-8, does <code>u''</code> actually do anything?</p></li>
</ul>
",<python><unicode><python-2.x><rawstring>,raw string unicode exactly know realized heck trainer encoding charset,"<p>There's not really any ""raw <em>string</em>""; there are raw <em>string literals</em>, which are exactly the string literals marked by an <code>'r'</code> before the opening quote.</p>

<p>A ""raw string literal"" is a slightly different syntax for a string literal, in which a backslash, <code>\</code>, is taken as meaning ""just a backslash"" (except when it comes right before a quote that would otherwise terminate the literal) -- no ""escape sequences"" to represent newlines, tabs, backspaces, form-feeds, and so on.  In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence.</p>

<p>This syntax variant exists mostly because the syntax of regular expression patterns is heavy with backslashes (but never at the end, so the ""except"" clause above doesn't matter) and it looks a bit better when you avoid doubling up each of them -- that's all.  It also gained some popularity to express native Windows file paths (with backslashes instead of regular slashes like on other platforms), but that's very rarely needed (since normal slashes mostly work fine on Windows too) and imperfect (due to the ""except"" clause above).</p>

<p><code>r'...'</code> is a byte string (in Python 2.*), <code>ur'...'</code> is a Unicode string (again, in Python 2.*), and any of the other three kinds of quoting also produces exactly the same types of strings (so for example <code>r'...'</code>, <code>r'''...'''</code>, <code>r""...""</code>, <code>r""""""...""""""</code> are all byte strings, and so on).</p>

<p>Not sure what you mean by ""going <em>back</em>"" - there is no intrinsically back and forward directions, because there's no raw string <strong>type</strong>, it's just an alternative syntax to express perfectly normal string objects, byte or unicode as they may be.</p>

<p>And yes, in Python 2.*, <code>u'...'</code> <strong>is</strong> of course always distinct from just <code>'...'</code> -- the former is a unicode string, the latter is a byte string. What encoding the literal might be expressed in is a completely orthogonal issue.</p>

<p>E.g., consider (Python 2.6):</p>

<pre><code>&gt;&gt;&gt; sys.getsizeof('ciao')
28
&gt;&gt;&gt; sys.getsizeof(u'ciao')
34
</code></pre>

<p>The Unicode object of course takes more memory space (very small difference for a very short string, obviously ;-).</p>
",,
294,6,How can I iterate over files in a given directory?,"<p>I need to iterate through all <code>.asm</code> files inside a given directory and do some actions on them. </p>

<p>How can this be done in a efficient way?</p>
","How can I iterate over files in a given directory?<p>I need to iterate through all <code>.asm</code> files inside a given directory and do some actions on them. </p>

<p>How can this be done in a efficient way?</p>
",<python><iterator><directory>,iterate given files directory asm actions efficient inside need way,"<p>Python 3.6 version of the above answer, using <a href=""https://docs.python.org/3.6/library/os.html"" rel=""noreferrer""><code>os</code></a> - assuming that you have the directory path as a <code>str</code> object in a variable called <code>directory_in_str</code>:</p>
<pre class=""lang-py prettyprint-override""><code>import os

directory = os.fsencode(directory_in_str)
    
for file in os.listdir(directory):
     filename = os.fsdecode(file)
     if filename.endswith(&quot;.asm&quot;) or filename.endswith(&quot;.py&quot;): 
         # print(os.path.join(directory, filename))
         continue
     else:
         continue
</code></pre>
<p>Or recursively, using <a href=""https://docs.python.org/3.6/library/pathlib.html"" rel=""noreferrer""><code>pathlib</code></a>:</p>
<pre class=""lang-py prettyprint-override""><code>from pathlib import Path

pathlist = Path(directory_in_str).glob('**/*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)
</code></pre>
<ul>
<li>Use <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob"" rel=""noreferrer""><code>rglob</code></a> to replace <code>glob('**/*.asm')</code> with <code>rglob('*.asm')</code>
<ul>
<li><em>This is like calling <a href=""https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob"" rel=""noreferrer""><code>Path.glob()</code></a> with <code>'**/'</code> added in front of the given relative pattern:</em></li>
</ul>
</li>
</ul>
<pre class=""lang-py prettyprint-override""><code>from pathlib import Path

pathlist = Path(directory_in_str).rglob('*.asm')
for path in pathlist:
     # because path is object not string
     path_in_str = str(path)
     # print(path_in_str)
</code></pre>
<hr />
<p>Original answer:</p>
<pre class=""lang-py prettyprint-override""><code>import os

for filename in os.listdir(&quot;/path/to/dir/&quot;):
    if filename.endswith(&quot;.asm&quot;) or filename.endswith(&quot;.py&quot;): 
         # print(os.path.join(directory, filename))
        continue
    else:
        continue
</code></pre>
",,
295,3,Best way to strip punctuation from a string,"<p>It seems like there should be a simpler way than:</p>

<pre><code>import string
s = ""string. With. Punctuation?"" # Sample string 
out = s.translate(string.maketrans("""",""""), string.punctuation)
</code></pre>

<p>Is there?</p>
","Best way to strip punctuation from a string<p>It seems like there should be a simpler way than:</p>

<pre><code>import string
s = ""string. With. Punctuation?"" # Sample string 
out = s.translate(string.maketrans("""",""""), string.punctuation)
</code></pre>

<p>Is there?</p>
",<python><string><punctuation>,stringit punctuation strip simpler way best like font forgotten formatwhich,"<p>From an efficiency perspective, you're not going to beat </p>

<pre><code>s.translate(None, string.punctuation)
</code></pre>

<p>For higher versions of Python use the following code:</p>

<pre><code>s.translate(str.maketrans('', '', string.punctuation))
</code></pre>

<p>It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.</p>

<p>If speed isn't a worry, another option though is:</p>

<pre><code>exclude = set(string.punctuation)
s = ''.join(ch for ch in s if ch not in exclude)
</code></pre>

<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.</p>

<p>Timing code:</p>

<pre><code>import re, string, timeit

s = ""string. With. Punctuation""
exclude = set(string.punctuation)
table = string.maketrans("""","""")
regex = re.compile('[%s]' % re.escape(string.punctuation))

def test_set(s):
    return ''.join(ch for ch in s if ch not in exclude)

def test_re(s):  # From Vinko's solution, with fix.
    return regex.sub('', s)

def test_trans(s):
    return s.translate(table, string.punctuation)

def test_repl(s):  # From S.Lott's solution
    for c in string.punctuation:
        s=s.replace(c,"""")
    return s

print ""sets      :"",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)
print ""regex     :"",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)
print ""translate :"",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)
print ""replace   :"",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)
</code></pre>

<p>This gives the following results:</p>

<pre><code>sets      : 19.8566138744
regex     : 6.86155414581
translate : 2.12455511093
replace   : 28.4436721802
</code></pre>
",,
296,3,Using @property versus getters and setters,"<p>Here is a pure Python-specific design question: </p>

<pre><code>class MyClass(object):
    ...
    def get_my_attr(self):
        ...

    def set_my_attr(self, value):
        ...
</code></pre>

<p>and </p>

<pre><code>class MyClass(object):
    ...        
    @property
    def my_attr(self):
        ...

    @my_attr.setter
    def my_attr(self, value):
        ...
</code></pre>

<p>Python lets us to do it either way. If you would design a Python program, which approach would you use and why?</p>
","Using @property versus getters and setters<p>Here is a pure Python-specific design question: </p>

<pre><code>class MyClass(object):
    ...
    def get_my_attr(self):
        ...

    def set_my_attr(self, value):
        ...
</code></pre>

<p>and </p>

<pre><code>class MyClass(object):
    ...        
    @property
    def my_attr(self):
        ...

    @my_attr.setter
    def my_attr(self, value):
        ...
</code></pre>

<p>Python lets us to do it either way. If you would design a Python program, which approach would you use and why?</p>
",<python><properties><getter-setter>,design pure settershere getters lets versus approach property specific python,"<p><em>Prefer properties</em>. It's what they're there for.</p>

<p>The reason is that all attributes are public in Python. Starting names with an underscore or two is just a warning that the given attribute is an implementation detail that may not stay the same in future versions of the code. It doesn't prevent you from actually getting or setting that attribute. Therefore, standard attribute access is the normal, Pythonic way of, well, accessing attributes.</p>

<p>The advantage of properties is that they are syntactically identical to attribute access, so you can change from one to another without any changes to client code. You could even have one version of a class that uses properties (say, for code-by-contract or debugging) and one that doesn't for production, without changing the code that uses it. At the same time, you don't have to write getters and setters for everything just in case you might need to better control access later.</p>
",,
297,6,"TypeError: a bytes-like object is required, not 'str' when writing to a file in Python3","<p>I've very recently migrated to Py 3.5.
This code was working properly in Python 2.7:</p>

<pre><code>with open(fname, 'rb') as f:
    lines = [x.strip() for x in f.readlines()]

for line in lines:
    tmp = line.strip().lower()
    if 'some-pattern' in tmp: continue
    # ... code
</code></pre>

<p>After upgrading to 3.5, I'm getting the:</p>

<pre><code>TypeError: a bytes-like object is required, not 'str'
</code></pre>

<p>error on the last line (the pattern search code).</p>

<p>I've tried using the <code>.decode()</code> function on either side of the statement, also tried:</p>

<pre><code>if tmp.find('some-pattern') != -1: continue
</code></pre>

<p>- to no avail.</p>

<p>I was able to resolve almost all 2:3 issues quickly, but this little statement is bugging me.</p>
","TypeError: a bytes-like object is required, not 'str' when writing to a file in Python3<p>I've very recently migrated to Py 3.5.
This code was working properly in Python 2.7:</p>

<pre><code>with open(fname, 'rb') as f:
    lines = [x.strip() for x in f.readlines()]

for line in lines:
    tmp = line.strip().lower()
    if 'some-pattern' in tmp: continue
    # ... code
</code></pre>

<p>After upgrading to 3.5, I'm getting the:</p>

<pre><code>TypeError: a bytes-like object is required, not 'str'
</code></pre>

<p>error on the last line (the pattern search code).</p>

<p>I've tried using the <code>.decode()</code> function on either side of the statement, also tried:</p>

<pre><code>if tmp.find('some-pattern') != -1: continue
</code></pre>

<p>- to no avail.</p>

<p>I was able to resolve almost all 2:3 issues quickly, but this little statement is bugging me.</p>
",<python><python-3.x><string><file><byte>,statement tried bugging migrated upgrading resolve decode issues pattern little,"<p>You opened the file in binary mode:</p>

<pre><code>with open(fname, 'rb') as f:
</code></pre>

<p>This means that all data read from the file is returned as <code>bytes</code> objects, not <code>str</code>. You cannot then use a string in a containment test:</p>

<pre><code>if 'some-pattern' in tmp: continue
</code></pre>

<p>You'd have to use a <code>bytes</code> object to test against <code>tmp</code> instead:</p>

<pre><code>if b'some-pattern' in tmp: continue
</code></pre>

<p>or open the file as a textfile instead by replacing the <code>'rb'</code> mode with <code>'r'</code>.</p>
",,
298,5,How to get the last day of the month?,"<p>Is there a way using Python's standard library to easily determine (i.e. one function call) the last day of a given month?</p>

<p>If the standard library doesn't support that, does the dateutil package support this?</p>
","How to get the last day of the month?<p>Is there a way using Python's standard library to easily determine (i.e. one function call) the last day of a given month?</p>

<p>If the standard library doesn't support that, does the dateutil package support this?</p>
",<python><date>,month day support standard library dateutil easily determine package given,"<p><a href=""https://docs.python.org/library/calendar.html#calendar.monthrange"" rel=""noreferrer""><code>calendar.monthrange</code></a> provides this information:</p>
<blockquote>
<p>calendar.<b>monthrange</b>(year, month)<br>
?ÿ?ÿ?ÿ?ÿReturns weekday of first day of the month and number of days in month, for the specified <em>year</em> and <em>month</em>.</p>
</blockquote>
<pre><code>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.monthrange(2002, 1)
(1, 31)
&gt;&gt;&gt; calendar.monthrange(2008, 2)  # leap years are handled correctly
(4, 29)
&gt;&gt;&gt; calendar.monthrange(2100, 2)  # years divisible by 100 but not 400 aren't leap years
(0, 28)
</code></pre>
<p>so:</p>
<pre><code>calendar.monthrange(year, month)[1]
</code></pre>
<p>seems like the simplest way to go.</p>
",,
299,5,How to test multiple variables for equality against a single value?,"<p>I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:</p>

<pre><code>x = 0
y = 1
z = 3
mylist = []

if x or y or z == 0 :
    mylist.append(""c"")
if x or y or z == 1 :
    mylist.append(""d"")
if x or y or z == 2 :
    mylist.append(""e"")
if x or y or z == 3 : 
    mylist.append(""f"")
</code></pre>

<p>which would return a list of:</p>

<pre><code>[""c"", ""d"", ""f""]
</code></pre>

<p>Is something like this possible?</p>
","How to test multiple variables for equality against a single value?<p>I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:</p>

<pre><code>x = 0
y = 1
z = 3
mylist = []

if x or y or z == 0 :
    mylist.append(""c"")
if x or y or z == 1 :
    mylist.append(""d"")
if x or y or z == 2 :
    mylist.append(""e"")
if x or y or z == 3 : 
    mylist.append(""f"")
</code></pre>

<p>which would return a list of:</p>

<pre><code>[""c"", ""d"", ""f""]
</code></pre>

<p>Is something like this possible?</p>
",<python><if-statement><comparison><match><boolean-logic>,variables multiple translate equality letters compare wondering test integer single,"<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>
<pre><code>if x == 1 or y == 1 or z == 1:
</code></pre>
<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>
<p>You can shorten that using a containment test against <a href=""https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences"" rel=""noreferrer"">a tuple</a>:</p>
<pre><code>if 1 in (x, y, z):
</code></pre>
<p>or better still:</p>
<pre><code>if 1 in {x, y, z}:
</code></pre>
<p>using <a href=""https://docs.python.org/3/tutorial/datastructures.html#sets"" rel=""noreferrer"">a <code>set</code></a> to take advantage of the constant-cost membership test (i.e. <code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>
<h3>Explanation</h3>
<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>
<p>This is due to <a href=""http://docs.python.org/3/reference/expressions.html#operator-precedence"" rel=""noreferrer"">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>
<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do.</p>
<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href=""http://docs.python.org/3/reference/expressions.html#boolean-operations"" rel=""noreferrer"">boolean expressions</a> for details on what Python considers false in a boolean context).</p>
<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>
<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>
",,
300,3,How can I force division to be floating point? Division keeps rounding down to 0?,"<p>I have two integer values <code>a</code> and <code>b</code>, but I need their ratio in floating point.  I know that <code>a &lt; b</code> and I want to calculate <code>a / b</code>, so if I use integer division I'll always get 0 with a remainder of <code>a</code>.</p>

<p>How can I force <code>c</code> to be a floating point number in Python in the following?</p>

<pre><code>c = a / b
</code></pre>
","How can I force division to be floating point? Division keeps rounding down to 0?<p>I have two integer values <code>a</code> and <code>b</code>, but I need their ratio in floating point.  I know that <code>a &lt; b</code> and I want to calculate <code>a / b</code>, so if I use integer division I'll always get 0 with a remainder of <code>a</code>.</p>

<p>How can I force <code>c</code> to be a floating point number in Python in the following?</p>

<pre><code>c = a / b
</code></pre>
",<python><floating-point><integer><division><python-2.x>,floating division point force integer remainder rounding keeps ratio calculate,"<p>In Python 2, division of two ints produces an int. In Python 3, it produces a float. We can get the new behaviour by importing from <code>__future__</code>.</p>

<pre><code>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; a = 4
&gt;&gt;&gt; b = 6
&gt;&gt;&gt; c = a / b
&gt;&gt;&gt; c
0.66666666666666663
</code></pre>
",,
301,3,Argparse optional positional arguments?,"<p>I have a script which is meant to be used like this:
<code>usage: installer.py dir [-h] [-v]</code></p>

<p><code>dir</code> is a positional argument which is defined like this:</p>

<pre><code>parser.add_argument('dir', default=os.getcwd())
</code></pre>

<p>I want the <code>dir</code> to be optional: when it's not specified it should just be <code>cwd</code>.</p>

<p>Unfortunately when I don't specify the <code>dir</code> argument, I get <code>Error: Too few arguments</code>.</p>
","Argparse optional positional arguments?<p>I have a script which is meant to be used like this:
<code>usage: installer.py dir [-h] [-v]</code></p>

<p><code>dir</code> is a positional argument which is defined like this:</p>

<pre><code>parser.add_argument('dir', default=os.getcwd())
</code></pre>

<p>I want the <code>dir</code> to be optional: when it's not specified it should just be <code>cwd</code>.</p>

<p>Unfortunately when I don't specify the <code>dir</code> argument, I get <code>Error: Too few arguments</code>.</p>
",<python><argparse>,dir optional positional arguments argument installer cwd specified meant argparse,"<p>Use <a href=""https://docs.python.org/3/library/argparse.html#nargs"" rel=""noreferrer""><code>nargs='?'</code></a> (or <code>nargs='*'</code> if you need more than one dir)</p>
<pre><code>parser.add_argument('dir', nargs='?', default=os.getcwd())
</code></pre>
<p>extended example:</p>
<pre><code>&gt;&gt;&gt; import os, argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('-v', action='store_true')
_StoreTrueAction(option_strings=['-v'], dest='v', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.add_argument('dir', nargs='?', default=os.getcwd())
_StoreAction(option_strings=[], dest='dir', nargs='?', const=None, default='/home/vinay', type=None, choices=None, help=None, metavar=None)
&gt;&gt;&gt; parser.parse_args('somedir -v'.split())
Namespace(dir='somedir', v=True)
&gt;&gt;&gt; parser.parse_args('-v'.split())
Namespace(dir='/home/vinay', v=True)
&gt;&gt;&gt; parser.parse_args(''.split())
Namespace(dir='/home/vinay', v=False)
&gt;&gt;&gt; parser.parse_args(['somedir'])
Namespace(dir='somedir', v=False)
&gt;&gt;&gt; parser.parse_args('somedir -h -v'.split())
usage: [-h] [-v] [dir]

positional arguments:
  dir

optional arguments:
  -h, --help  show this help message and exit
  -v
</code></pre>
",,
302,3,How do I set the figure title and axes labels font size in Matplotlib?,"<p>I am creating a figure in Matplotlib like this:</p>

<pre><code>from matplotlib import pyplot as plt

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title')
plt.xlabel('xlabel')
plt.ylabel('ylabel')
fig.savefig('test.jpg')
</code></pre>

<p>I want to specify font sizes for the figure title and the axis labels. I need all three to be different font sizes, so setting a global font size (<code>mpl.rcParams['font.size']=x</code>) is not what I want. How do I set font sizes for the figure title and the axis labels individually?</p>
","How do I set the figure title and axes labels font size in Matplotlib?<p>I am creating a figure in Matplotlib like this:</p>

<pre><code>from matplotlib import pyplot as plt

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title')
plt.xlabel('xlabel')
plt.ylabel('ylabel')
fig.savefig('test.jpg')
</code></pre>

<p>I want to specify font sizes for the figure title and the axis labels. I need all three to be different font sizes, so setting a global font size (<code>mpl.rcParams['font.size']=x</code>) is not what I want. How do I set font sizes for the figure title and the axis labels individually?</p>
",<python><matplotlib>,font figure title sizes labels size axis matplotlib set individually,"<p>Functions dealing with text like <code>label</code>, <code>title</code>, etc. accept parameters same as <a href=""http://matplotlib.org/users/text_props.html"" rel=""noreferrer""><code>matplotlib.text.Text</code></a>. For the font size you can use <code>size/fontsize</code>:</p>

<pre><code>from matplotlib import pyplot as plt    

fig = plt.figure()
plt.plot(data)
fig.suptitle('test title', fontsize=20)
plt.xlabel('xlabel', fontsize=18)
plt.ylabel('ylabel', fontsize=16)
fig.savefig('test.jpg')
</code></pre>

<p>For globally setting <code>title</code> and <code>label</code> sizes, <a href=""http://matplotlib.org/users/customizing.html"" rel=""noreferrer""><code>mpl.rcParams</code></a> contains <code>axes.titlesize</code> and <code>axes.labelsize</code>. (From the page):</p>

<pre><code>axes.titlesize      : large   # fontsize of the axes title
axes.labelsize      : medium  # fontsize of the x any y labels
</code></pre>

<p>(As far as I can see, there is no way to set <code>x</code> and <code>y</code> label sizes separately.)</p>

<p>And I see that <code>axes.titlesize</code> does not affect <code>suptitle</code>. I guess, you need to set that manually.</p>
",,
303,5,Adding a Method to an Existing Object Instance,"<p>I've read that it is possible to add a method to an existing object (i.e., not in the class definition) in Python. </p>

<p>I understand that it's not always good to do so. But how might one do this?</p>
","Adding a Method to an Existing Object Instance<p>I've read that it is possible to add a method to an existing object (i.e., not in the class definition) in Python. </p>

<p>I understand that it's not always good to do so. But how might one do this?</p>
",<python><oop><methods><monkeypatching>,existing method object instancei definition adding good add class read,"<p>In Python, there is a difference between functions and bound methods.</p>
<pre><code>&gt;&gt;&gt; def foo():
...     print &quot;foo&quot;
...
&gt;&gt;&gt; class A:
...     def bar( self ):
...         print &quot;bar&quot;
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; foo
&lt;function foo at 0x00A98D70&gt;
&gt;&gt;&gt; a.bar
&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt;
</code></pre>
<p>Bound methods have been &quot;bound&quot; (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>
<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>
<pre><code>&gt;&gt;&gt; def fooFighters( self ):
...     print &quot;fooFighters&quot;
...
&gt;&gt;&gt; A.fooFighters = fooFighters
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.fooFighters
&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;
&gt;&gt;&gt; a2.fooFighters()
fooFighters
</code></pre>
<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>
<pre><code>&gt;&gt;&gt; a.fooFighters()
fooFighters
</code></pre>
<p>The problem comes when you want to attach a method to a single instance:</p>
<pre><code>&gt;&gt;&gt; def barFighters( self ):
...     print &quot;barFighters&quot;
...
&gt;&gt;&gt; a.barFighters = barFighters
&gt;&gt;&gt; a.barFighters()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: barFighters() takes exactly 1 argument (0 given)
</code></pre>
<p>The function is not automatically bound when it's attached directly to an instance:</p>
<pre><code>&gt;&gt;&gt; a.barFighters
&lt;function barFighters at 0x00A98EF0&gt;
</code></pre>
<p>To bind it, we can use the <a href=""https://docs.python.org/3/library/types.html#types.MethodType"" rel=""noreferrer"">MethodType function in the types module</a>:</p>
<pre><code>&gt;&gt;&gt; import types
&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )
&gt;&gt;&gt; a.barFighters
&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt; a.barFighters()
barFighters
</code></pre>
<p>This time other instances of the class have not been affected:</p>
<pre><code>&gt;&gt;&gt; a2.barFighters()
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'barFighters'
</code></pre>
<p>More information can be found by reading about <a href=""https://docs.python.org/3/howto/descriptor.html"" rel=""noreferrer"">descriptors</a> and <a href=""https://web.archive.org/web/20090124004817/http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html"" rel=""noreferrer"">metaclass</a> <a href=""http://www.gnosis.cx/publish/programming/metaclass_2.html"" rel=""noreferrer"">programming</a>.</p>
",,
304,3,How to print a date in a regular format?,"<p>This is my code:</p>

<pre><code>import datetime
today = datetime.date.today()
print(today)
</code></pre>

<p>This prints: <code>2008-11-22</code> which is exactly what I want.</p>

<p>But, I have a list I'm appending this to and then suddenly everything goes ""wonky"". Here is the code:</p>

<pre><code>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print(mylist)
</code></pre>

<p>This prints the following: </p>

<pre><code>[datetime.date(2008, 11, 22)]
</code></pre>

<p>How can I get just a simple date like <code>2008-11-22</code>?</p>
","How to print a date in a regular format?<p>This is my code:</p>

<pre><code>import datetime
today = datetime.date.today()
print(today)
</code></pre>

<p>This prints: <code>2008-11-22</code> which is exactly what I want.</p>

<p>But, I have a list I'm appending this to and then suddenly everything goes ""wonky"". Here is the code:</p>

<pre><code>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print(mylist)
</code></pre>

<p>This prints the following: </p>

<pre><code>[datetime.date(2008, 11, 22)]
</code></pre>

<p>How can I get just a simple date like <code>2008-11-22</code>?</p>
",<python><datetime><date>,prints date wonky suddenly code goes appending regular format exactly,"<h2>The WHY: dates are objects</h2>
<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings or timestamps.</p>
<p>Any object in Python has TWO string representations:</p>
<ul>
<li><p>The regular representation that is used by <code>print</code> can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>.</p>
</li>
<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p>
</li>
</ul>
<p>What happened is that when you have printed the date using <code>print</code>, it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>
<h2>The How: what do you want to do with that?</h2>
<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>
<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>
<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>
<p>E.G, you want to print all the date in a list :</p>
<pre><code>for date in mylist :
    print str(date)
</code></pre>
<p>Note that <em><strong>in that specific case</strong></em>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>
<h2>Practical case, using your code</h2>
<pre><code>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print &quot;This is a new day : &quot;, mylist[0] # will work
&gt;&gt;&gt; This is a new day : 2008-11-22

print &quot;This is a new day : &quot; + mylist[0] # will crash
&gt;&gt;&gt; cannot concatenate 'str' and 'datetime.date' objects

print &quot;This is a new day : &quot; + str(mylist[0]) 
&gt;&gt;&gt; This is a new day : 2008-11-22
</code></pre>
<h2>Advanced date formatting</h2>
<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>
<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>
<p>E.G :</p>
<pre><code>print today.strftime('We are the %d, %b %Y')
&gt;&gt;&gt; 'We are the 22, Nov 2008'
</code></pre>
<p>All the letter after a <code>&quot;%&quot;</code> represent a format for something:</p>
<ul>
<li><code>%d</code> is the day number (2 digits, prefixed with leading zero's if necessary)</li>
<li><code>%m</code> is the month number (2 digits, prefixed with leading zero's if necessary)</li>
<li><code>%b</code> is the month abbreviation (3 letters)</li>
<li><code>%B</code> is the month name in full (letters)</li>
<li><code>%y</code> is the year number abbreviated (last 2 digits)</li>
<li><code>%Y</code> is the year number full (4 digits)</li>
</ul>
<p>etc.</p>
<p><a href=""http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior"" rel=""noreferrer"">Have a look at the official documentation</a>, or <a href=""http://strftime.org"" rel=""noreferrer"">McCutchen's quick reference</a> you can't know them all.</p>
<p>Since <a href=""http://www.python.org/dev/peps/pep-3101/"" rel=""noreferrer"">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in
strftime. So you can do the same as above like this:</p>
<pre><code>print &quot;We are the {:%d, %b %Y}&quot;.format(today)
&gt;&gt;&gt; 'We are the 22, Nov 2008'
</code></pre>
<p>The advantage of this form is that you can also convert other objects at the same time.<br />
With the introduction of <a href=""https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals"" rel=""noreferrer"">Formatted string literals</a> (since Python 3.6, 2016-12-23) this can be written as</p>
<pre><code>import datetime
f&quot;{datetime.datetime.now():%Y-%m-%d}&quot;
&gt;&gt;&gt; '2017-06-15'
</code></pre>
<h2>Localization</h2>
<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>
",,
305,4,Why is [] faster than list()?,"<p>I recently compared the processing speeds of <code>[]</code> and <code>list()</code> and was surprised to discover that <code>[]</code> runs <em>more than three times faster</em> than <code>list()</code>. I ran the same test with <code>{}</code> and <code>dict()</code> and the results were practically identical: <code>[]</code> and <code>{}</code> both took around 0.128sec / million cycles, while <code>list()</code> and <code>dict()</code> took roughly 0.428sec / million cycles each.</p>

<p>Why is this? Do <code>[]</code> and <code>{}</code> (and probably <code>()</code> and <code>''</code>, too) immediately pass back a copies of some empty stock literal while their explicitly-named counterparts (<code>list()</code>, <code>dict()</code>, <code>tuple()</code>, <code>str()</code>) fully go about creating an object, whether or not they actually have elements?</p>

<p>I have no idea how these two methods differ but I'd love to find out.
I couldn't find an answer in the docs or on SO, and searching for empty brackets turned out to be more problematic than I'd expected.</p>

<p>I got my timing results by calling <code>timeit.timeit(""[]"")</code> and <code>timeit.timeit(""list()"")</code>, and <code>timeit.timeit(""{}"")</code> and <code>timeit.timeit(""dict()"")</code>, to compare lists and dictionaries, respectively. I'm running Python 2.7.9.</p>

<p>I recently discovered ""<a href=""https://stackoverflow.com/questions/18123965/why-if-true-is-slower-than-if-1"">Why is if True slower than if 1?</a>"" that compares the performance of <code>if True</code> to <code>if 1</code> and seems to touch on a similar literal-versus-global scenario; perhaps it's worth considering as well.</p>
","Why is [] faster than list()?<p>I recently compared the processing speeds of <code>[]</code> and <code>list()</code> and was surprised to discover that <code>[]</code> runs <em>more than three times faster</em> than <code>list()</code>. I ran the same test with <code>{}</code> and <code>dict()</code> and the results were practically identical: <code>[]</code> and <code>{}</code> both took around 0.128sec / million cycles, while <code>list()</code> and <code>dict()</code> took roughly 0.428sec / million cycles each.</p>

<p>Why is this? Do <code>[]</code> and <code>{}</code> (and probably <code>()</code> and <code>''</code>, too) immediately pass back a copies of some empty stock literal while their explicitly-named counterparts (<code>list()</code>, <code>dict()</code>, <code>tuple()</code>, <code>str()</code>) fully go about creating an object, whether or not they actually have elements?</p>

<p>I have no idea how these two methods differ but I'd love to find out.
I couldn't find an answer in the docs or on SO, and searching for empty brackets turned out to be more problematic than I'd expected.</p>

<p>I got my timing results by calling <code>timeit.timeit(""[]"")</code> and <code>timeit.timeit(""list()"")</code>, and <code>timeit.timeit(""{}"")</code> and <code>timeit.timeit(""dict()"")</code>, to compare lists and dictionaries, respectively. I'm running Python 2.7.9.</p>

<p>I recently discovered ""<a href=""https://stackoverflow.com/questions/18123965/why-if-true-is-slower-than-if-1"">Why is if True slower than if 1?</a>"" that compares the performance of <code>if True</code> to <code>if 1</code> and seems to touch on a similar literal-versus-global scenario; perhaps it's worth considering as well.</p>
",<python><performance><list><instantiation><literals>,timeit dict list million sec took cycles literal recently faster,"<p>Because <code>[]</code> and <code>{}</code> are <em>literal syntax</em>. Python can create bytecode just to create the list or dictionary objects:</p>
<pre><code>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile('[]', '', 'eval'))
  1           0 BUILD_LIST               0
              3 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(compile('{}', '', 'eval'))
  1           0 BUILD_MAP                0
              3 RETURN_VALUE        
</code></pre>
<p><code>list()</code> and <code>dict()</code> are separate objects. Their names need to be resolved, the stack has to be involved to push the arguments, the frame has to be stored to retrieve later, and a call has to be made. That all takes more time.</p>
<p>For the empty case, that means you have at the very least a <a href=""https://docs.python.org/library/dis.html#opcode-LOAD_NAME"" rel=""noreferrer""><code>LOAD_NAME</code></a> (which has to search through the global namespace as well as the <a href=""https://docs.python.org/library/builtins.html"" rel=""noreferrer""><code>builtins</code> module</a>) followed by a <a href=""https://docs.python.org/library/dis.html#opcode-CALL_FUNCTION"" rel=""noreferrer""><code>CALL_FUNCTION</code></a>, which has to preserve the current frame:</p>
<pre><code>&gt;&gt;&gt; dis.dis(compile('list()', '', 'eval'))
  1           0 LOAD_NAME                0 (list)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(compile('dict()', '', 'eval'))
  1           0 LOAD_NAME                0 (dict)
              3 CALL_FUNCTION            0
              6 RETURN_VALUE        
</code></pre>
<p>You can time the name lookup separately with <a href=""https://docs.python.org/library/timeit.html"" rel=""noreferrer""><code>timeit</code></a>:</p>
<pre><code>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('list', number=10**7)
0.30749011039733887
&gt;&gt;&gt; timeit.timeit('dict', number=10**7)
0.4215109348297119
</code></pre>
<p>The time discrepancy there is probably a dictionary hash collision. Subtract those times from the times for calling those objects, and compare the result against the times for using literals:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('[]', number=10**7)
0.30478692054748535
&gt;&gt;&gt; timeit.timeit('{}', number=10**7)
0.31482696533203125
&gt;&gt;&gt; timeit.timeit('list()', number=10**7)
0.9991960525512695
&gt;&gt;&gt; timeit.timeit('dict()', number=10**7)
1.0200958251953125
</code></pre>
<p>So having to call the object takes an additional <code>1.00 - 0.31 - 0.30 == 0.39</code> seconds per 10 million calls.</p>
<p>You can avoid the global lookup cost by aliasing the global names as locals (using a <code>timeit</code> setup, everything you bind to a name is a local):</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('_list', '_list = list', number=10**7)
0.1866450309753418
&gt;&gt;&gt; timeit.timeit('_dict', '_dict = dict', number=10**7)
0.19016098976135254
&gt;&gt;&gt; timeit.timeit('_list()', '_list = list', number=10**7)
0.841480016708374
&gt;&gt;&gt; timeit.timeit('_dict()', '_dict = dict', number=10**7)
0.7233691215515137
</code></pre>
<p>but you never can overcome that <code>CALL_FUNCTION</code> cost.</p>
",,
306,3,What does -> mean in Python function definitions?,"<p>I've recently noticed something interesting when looking at <a href=""http://docs.python.org/3.3/reference/grammar.html"" rel=""noreferrer"">Python 3.3 grammar specification</a>:</p>
<pre><code>funcdef: 'def' NAME parameters ['-&gt;' test] ':' suite
</code></pre>
<p>The optional 'arrow' block was absent in Python 2 and I couldn't find any information regarding its meaning in Python 3. It turns out this is correct Python and it's accepted by the interpreter:</p>
<pre><code>def f(x) -&gt; 123:
    return x
</code></pre>
<p>I thought that this might be some kind of a precondition syntax, but:</p>
<ul>
<li>I cannot test <code>x</code> here, as it is still undefined,</li>
<li>No matter what I put after the arrow (e.g. <code>2 &lt; 1</code>), it doesn't affect the function behavior.</li>
</ul>
<p>Could anyone familiar with this syntax style explain it?</p>
","What does -> mean in Python function definitions?<p>I've recently noticed something interesting when looking at <a href=""http://docs.python.org/3.3/reference/grammar.html"" rel=""noreferrer"">Python 3.3 grammar specification</a>:</p>
<pre><code>funcdef: 'def' NAME parameters ['-&gt;' test] ':' suite
</code></pre>
<p>The optional 'arrow' block was absent in Python 2 and I couldn't find any information regarding its meaning in Python 3. It turns out this is correct Python and it's accepted by the interpreter:</p>
<pre><code>def f(x) -&gt; 123:
    return x
</code></pre>
<p>I thought that this might be some kind of a precondition syntax, but:</p>
<ul>
<li>I cannot test <code>x</code> here, as it is still undefined,</li>
<li>No matter what I put after the arrow (e.g. <code>2 &lt; 1</code>), it doesn't affect the function behavior.</li>
</ul>
<p>Could anyone familiar with this syntax style explain it?</p>
",<python><python-3.x><annotations><function-definition>,arrow syntax python accepted specification undefined grammar absent precondition affect,"<p>It's a <a href=""http://www.python.org/dev/peps/pep-3107/"" rel=""noreferrer"">function annotation</a>.</p>

<p>In more detail, Python 2.x has docstrings, which allow you to attach a metadata string to various types of object. This is amazingly handy, so Python 3 extends the feature by allowing you to attach metadata to functions describing their parameters and return values.</p>

<p>There's no preconceived use case, but the PEP suggests several. One very handy one is to allow you to annotate parameters with their expected types; it would then be easy to write a decorator that verifies the annotations or coerces the arguments to the right type. Another is to allow parameter-specific documentation instead of encoding it into the docstring.</p>
",,
307,3,Why shouldn't I use PyPy over CPython if PyPy is 6.3 times faster?,"<p>I've been hearing a lot about the <a href=""http://en.wikipedia.org/wiki/PyPy"" rel=""noreferrer"">PyPy</a> project. They claim it is 6.3 times faster than the <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a> interpreter on <a href=""http://speed.pypy.org"" rel=""noreferrer"">their site</a>.</p>

<p>Whenever we talk about dynamic languages like Python, speed is one of the top issues. To solve this, they say PyPy is 6.3 times faster.</p>

<p>The second issue is parallelism, the infamous <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"" rel=""noreferrer"">Global Interpreter Lock</a> (GIL). For this, PyPy says it <a href=""http://pypy.org/tmdonate.html"" rel=""noreferrer"">can give GIL-less Python</a>.</p>

<p>If PyPy can solve these great challenges, what are its weaknesses that are preventing wider adoption? That is to say, what's preventing someone like me, a typical Python developer, from switching to PyPy <em>right now</em>? </p>
","Why shouldn't I use PyPy over CPython if PyPy is 6.3 times faster?<p>I've been hearing a lot about the <a href=""http://en.wikipedia.org/wiki/PyPy"" rel=""noreferrer"">PyPy</a> project. They claim it is 6.3 times faster than the <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a> interpreter on <a href=""http://speed.pypy.org"" rel=""noreferrer"">their site</a>.</p>

<p>Whenever we talk about dynamic languages like Python, speed is one of the top issues. To solve this, they say PyPy is 6.3 times faster.</p>

<p>The second issue is parallelism, the infamous <a href=""http://en.wikipedia.org/wiki/Global_Interpreter_Lock"" rel=""noreferrer"">Global Interpreter Lock</a> (GIL). For this, PyPy says it <a href=""http://pypy.org/tmdonate.html"" rel=""noreferrer"">can give GIL-less Python</a>.</p>

<p>If PyPy can solve these great challenges, what are its weaknesses that are preventing wider adoption? That is to say, what's preventing someone like me, a typical Python developer, from switching to PyPy <em>right now</em>? </p>
",<python><performance><jit><pypy><cpython>,pypy faster times preventing gil cpython solve interpreter say adoption,"<blockquote>
<p><strong>NOTE:</strong> PyPy is more mature and better supported now than it was in 2013, when this question was asked. Avoid drawing conclusions from out-of-date information.</p>
</blockquote>
<hr />
<ol>
<li>PyPy, as others have been quick to mention, has tenuous support for C extensions. It has support, but typically at slower-than-Python speeds and it's iffy at best. Hence a lot of modules simply require CPython. <strike>PyPy doesn't support numpy</strike>. Some extensions are still not supported (<strike>Pandas</strike>, <strike>SciPy</strike>, etc.), take a look at <a href=""http://packages.pypy.org"" rel=""noreferrer"">the list of supported packages</a> before making the change. <strong>Note that many packages marked unsupported on the list are now supported.</strong></li>
<li>Python 3 support <strike>is experimental at the moment.</strike> <strong>has just reached stable! As of 20th June 2014, <a href=""http://morepypy.blogspot.co.uk/2014/06/pypy3-231-fulcrum.html"" rel=""noreferrer"">PyPy3 2.3.1 - Fulcrum is out</a>!</strong></li>
<li>PyPy sometimes isn't actually faster for &quot;scripts&quot;, which a lot of people use Python for. These are the short-running programs that do something simple and small. Because PyPy is a JIT compiler its main advantages come from long run times and simple types (such as numbers). PyPy's pre-JIT speeds can be bad compared to CPython.</li>
<li><strong>Inertia</strong>. Moving to PyPy often requires retooling, which for some people and organizations is simply too much work.</li>
</ol>
<p>Those are the main reasons that affect me, I'd say.</p>
",,
308,3,Split Strings into words with multiple word boundary delimiters,"<p>I think what I want to do is a fairly common task but I've found no reference on the web. I have text with punctuation, and I want a list of the words. </p>

<pre><code>""Hey, you - what are you doing here!?""
</code></pre>

<p>should be</p>

<pre><code>['hey', 'you', 'what', 'are', 'you', 'doing', 'here']
</code></pre>

<p>But Python's <code>str.split()</code> only works with one argument, so I have all words with the punctuation after I split with whitespace. Any ideas?</p>
","Split Strings into words with multiple word boundary delimiters<p>I think what I want to do is a fairly common task but I've found no reference on the web. I have text with punctuation, and I want a list of the words. </p>

<pre><code>""Hey, you - what are you doing here!?""
</code></pre>

<p>should be</p>

<pre><code>['hey', 'you', 'what', 'are', 'you', 'doing', 'here']
</code></pre>

<p>But Python's <code>str.split()</code> only works with one argument, so I have all words with the punctuation after I split with whitespace. Any ideas?</p>
",<python><string><split>,words split punctuation boundary delimitersi bebut fairly task reference word,"<p>A case where regular expressions are justified:</p>

<pre><code>import re
DATA = ""Hey, you - what are you doing here!?""
print re.findall(r""[\w']+"", DATA)
# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']
</code></pre>
",,
309,3,"How to print the full NumPy array, without truncation?","<p>When I print a numpy array, I get a truncated representation, but I want the full array. </p>

<p>Is there any way to do this?</p>

<p><strong>Examples:</strong></p>

<pre><code>&gt;&gt;&gt; numpy.arange(10000)
array([   0,    1,    2, ..., 9997, 9998, 9999])

&gt;&gt;&gt; numpy.arange(10000).reshape(250,40)
array([[   0,    1,    2, ...,   37,   38,   39],
       [  40,   41,   42, ...,   77,   78,   79],
       [  80,   81,   82, ...,  117,  118,  119],
       ..., 
       [9880, 9881, 9882, ..., 9917, 9918, 9919],
       [9920, 9921, 9922, ..., 9957, 9958, 9959],
       [9960, 9961, 9962, ..., 9997, 9998, 9999]])
</code></pre>
","How to print the full NumPy array, without truncation?<p>When I print a numpy array, I get a truncated representation, but I want the full array. </p>

<p>Is there any way to do this?</p>

<p><strong>Examples:</strong></p>

<pre><code>&gt;&gt;&gt; numpy.arange(10000)
array([   0,    1,    2, ..., 9997, 9998, 9999])

&gt;&gt;&gt; numpy.arange(10000).reshape(250,40)
array([[   0,    1,    2, ...,   37,   38,   39],
       [  40,   41,   42, ...,   77,   78,   79],
       [  80,   81,   82, ...,  117,  118,  119],
       ..., 
       [9880, 9881, 9882, ..., 9917, 9918, 9919],
       [9920, 9921, 9922, ..., 9957, 9958, 9959],
       [9960, 9961, 9962, ..., 9997, 9998, 9999]])
</code></pre>
",<python><arrays><numpy><options><output-formatting>,array numpy print truncated truncation representation examples want way fork,"<p>Use <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html"" rel=""noreferrer""><code>numpy.set_printoptions</code></a>:</p>

<pre><code>import sys
import numpy
numpy.set_printoptions(threshold=sys.maxsize)
</code></pre>
",,
310,0,What is the difference between dict.items() and dict.iteritems() in Python2?,"<p>Are there any applicable differences between <a href=""http://docs.python.org/library/stdtypes.html#dict.items"" rel=""noreferrer""><code>dict.items()</code></a> and <a href=""http://docs.python.org/library/stdtypes.html#dict.iteritems"" rel=""noreferrer""><code>dict.iteritems()</code></a>?</p>

<p>From the <a href=""https://docs.python.org/2/library/stdtypes.html#mapping-types-dict"" rel=""noreferrer"">Python docs</a>:</p>

<blockquote>
  <p><code>dict.items()</code>: Return a <strong>copy</strong> of the dictionaryƒ??s list of (key, value) pairs.</p>
  
  <p><code>dict.iteritems()</code>: Return an <strong>iterator</strong> over the dictionaryƒ??s (key, value) pairs.</p>
</blockquote>

<p>If I run the code below, each seems to return a reference to the same object. Are there any subtle differences that I am missing?</p>

<pre><code>#!/usr/bin/python

d={1:'one',2:'two',3:'three'}
print 'd.items():'
for k,v in d.items():
   if d[k] is v: print '\tthey are the same object' 
   else: print '\tthey are different'

print 'd.iteritems():'   
for k,v in d.iteritems():
   if d[k] is v: print '\tthey are the same object' 
   else: print '\tthey are different'   
</code></pre>

<p>Output:</p>

<pre><code>d.items():
    they are the same object
    they are the same object
    they are the same object
d.iteritems():
    they are the same object
    they are the same object
    they are the same object
</code></pre>
","What is the difference between dict.items() and dict.iteritems() in Python2?<p>Are there any applicable differences between <a href=""http://docs.python.org/library/stdtypes.html#dict.items"" rel=""noreferrer""><code>dict.items()</code></a> and <a href=""http://docs.python.org/library/stdtypes.html#dict.iteritems"" rel=""noreferrer""><code>dict.iteritems()</code></a>?</p>

<p>From the <a href=""https://docs.python.org/2/library/stdtypes.html#mapping-types-dict"" rel=""noreferrer"">Python docs</a>:</p>

<blockquote>
  <p><code>dict.items()</code>: Return a <strong>copy</strong> of the dictionaryƒ??s list of (key, value) pairs.</p>
  
  <p><code>dict.iteritems()</code>: Return an <strong>iterator</strong> over the dictionaryƒ??s (key, value) pairs.</p>
</blockquote>

<p>If I run the code below, each seems to return a reference to the same object. Are there any subtle differences that I am missing?</p>

<pre><code>#!/usr/bin/python

d={1:'one',2:'two',3:'three'}
print 'd.items():'
for k,v in d.items():
   if d[k] is v: print '\tthey are the same object' 
   else: print '\tthey are different'

print 'd.iteritems():'   
for k,v in d.iteritems():
   if d[k] is v: print '\tthey are the same object' 
   else: print '\tthey are different'   
</code></pre>

<p>Output:</p>

<pre><code>d.items():
    they are the same object
    they are the same object
    they are the same object
d.iteritems():
    they are the same object
    they are the same object
    they are the same object
</code></pre>
",<python><dictionary><python-2.x>,dict iteritems items return pairs differences key dictionary value applicable,"<p>It's part of an evolution.</p>
<p>Originally, Python <code>items()</code> built a real list of tuples and returned that. That could potentially take a lot of extra memory.</p>
<p>Then, generators were introduced to the language in general, and that method was reimplemented as an iterator-generator method named <code>iteritems()</code>. The original remains for backwards compatibility.</p>
<p>One of Python 3ƒ??s changes is that  <code>items()</code> now return views, and a <code>list</code> is never fully built. The <code>iteritems()</code> method is also gone, since <code>items()</code> in Python 3 works like <code>viewitems()</code> in Python 2.7.</p>
",,
311,3,Is arr.__len__() the preferred way to get the length of an array in Python?,"<p>In <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>, is the following the only way to get the number of elements?</p>

<pre><code>arr.__len__()
</code></pre>

<p>If so, why the strange syntax?</p>
","Is arr.__len__() the preferred way to get the length of an array in Python?<p>In <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>, is the following the only way to get the number of elements?</p>

<pre><code>arr.__len__()
</code></pre>

<p>If so, why the strange syntax?</p>
",<python><arrays><methods>,strange arr len preferred length array elements syntax way number,"<pre><code>my_list = [1,2,3,4,5]
len(my_list)
# 5
</code></pre>

<p>The same works for tuples:</p>

<pre><code>my_tuple = (1,2,3,4,5)
len(my_tuple)
# 5
</code></pre>

<p>And strings, which are really just arrays of characters:</p>

<pre><code>my_string = 'hello world'
len(my_string)
# 11
</code></pre>

<p>It was <a href=""http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm"" rel=""noreferrer"">intentionally done this way</a> so that lists, tuples and other container types or iterables didn't all need to explicitly implement a public <code>.length()</code> method, instead you can just check the <code>len()</code> of anything that implements the 'magic' <code>__len__()</code> method.</p>

<p>Sure, this may seem redundant, but length checking implementations can vary considerably, even within the same language. It's not uncommon to see one collection type use a <code>.length()</code> method while another type uses a <code>.length</code> property, while yet another uses <code>.count()</code>. Having a language-level keyword unifies the entry point for all these types. So even objects you may not consider to be lists of elements could still be length-checked.  This includes strings, queues, trees, etc.</p>

<p>The functional nature of <code>len()</code> also lends itself well to functional styles of programming.</p>

<pre><code>lengths = map(len, list_of_containers)
</code></pre>
",,
312,5,How to check if a string is a substring of items in a list of strings?,"<p>I have a list:</p>
<pre><code>my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
</code></pre>
<p>and want to search for items that contain the string <code>'abc'</code>. How can I do that?</p>
<pre><code>if 'abc' in my_list:
</code></pre>
<p>would check if <code>'abc'</code> exists in the list but it is a part of <code>'abc-123'</code> and <code>'abc-456'</code>, <code>'abc'</code> does not exist on its own. So how can I get all items that contain <code>'abc'</code>?</p>
","How to check if a string is a substring of items in a list of strings?<p>I have a list:</p>
<pre><code>my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
</code></pre>
<p>and want to search for items that contain the string <code>'abc'</code>. How can I do that?</p>
<pre><code>if 'abc' in my_list:
</code></pre>
<p>would check if <code>'abc'</code> exists in the list but it is a part of <code>'abc-123'</code> and <code>'abc-456'</code>, <code>'abc'</code> does not exist on its own. So how can I get all items that contain <code>'abc'</code>?</p>
",<python><string><list>,abc items contain list check string substring exist search exists,"<p>If you only want to check for the presence of <code>abc</code> in any string in the list, you could try</p>

<pre><code>some_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
if any(""abc"" in s for s in some_list):
    # whatever
</code></pre>

<p>If you really want to get all the items containing <code>abc</code>, use</p>

<pre><code>matching = [s for s in some_list if ""abc"" in s]
</code></pre>
",,
313,5,Why are Python's 'private' methods not actually private?,"<p>Python gives us the ability to create 'private' methods and variables within a class by prepending double underscores to the name, like this: <code>__myPrivateMethod()</code>. How, then, can one explain this</p>

<pre><code>>>> class MyClass:
...     def myPublicMethod(self):
...             print 'public method'
...     def __myPrivateMethod(self):
...             print 'this is private!!'
... 
>>> obj = MyClass()
>>> obj.myPublicMethod()
public method
>>> obj.__myPrivateMethod()
Traceback (most recent call last):
  File """", line 1, in 
AttributeError: MyClass instance has no attribute '__myPrivateMethod'
>>> dir(obj)
['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']
>>> obj._MyClass__myPrivateMethod()
this is private!!
</code></pre>

<p>What's the deal?!</p>

<p>I'll explain this a little for those who didn't quite get that.</p>

<pre><code>>>> class MyClass:
...     def myPublicMethod(self):
...             print 'public method'
...     def __myPrivateMethod(self):
...             print 'this is private!!'
... 
>>> obj = MyClass()
</code></pre>

<p>What I did there is create a class with a public method and a private method and instantiate it.</p>

<p>Next, I call its public method.</p>

<pre><code>>>> obj.myPublicMethod()
public method
</code></pre>

<p>Next, I try and call its private method.</p>

<pre><code>>>> obj.__myPrivateMethod()
Traceback (most recent call last):
  File """", line 1, in 
AttributeError: MyClass instance has no attribute '__myPrivateMethod'
</code></pre>

<p>Everything looks good here; we're unable to call it. It is, in fact, 'private'. Well, actually it isn't. Running <em>dir()</em> on the object reveals a new magical method that python creates magically for all of your 'private' methods.</p>

<pre><code>>>> dir(obj)
['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']
</code></pre>

<p>This new method's name is always an underscore, followed by the class name, followed by the method name.</p>

<pre><code>>>> obj._MyClass__myPrivateMethod()
this is private!!
</code></pre>

<p>So much for encapsulation, eh?</p>

<p>In any case, I'd always heard Python doesn't support encapsulation, so why even try? What gives?</p>
","Why are Python's 'private' methods not actually private?<p>Python gives us the ability to create 'private' methods and variables within a class by prepending double underscores to the name, like this: <code>__myPrivateMethod()</code>. How, then, can one explain this</p>

<pre><code>>>> class MyClass:
...     def myPublicMethod(self):
...             print 'public method'
...     def __myPrivateMethod(self):
...             print 'this is private!!'
... 
>>> obj = MyClass()
>>> obj.myPublicMethod()
public method
>>> obj.__myPrivateMethod()
Traceback (most recent call last):
  File """", line 1, in 
AttributeError: MyClass instance has no attribute '__myPrivateMethod'
>>> dir(obj)
['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']
>>> obj._MyClass__myPrivateMethod()
this is private!!
</code></pre>

<p>What's the deal?!</p>

<p>I'll explain this a little for those who didn't quite get that.</p>

<pre><code>>>> class MyClass:
...     def myPublicMethod(self):
...             print 'public method'
...     def __myPrivateMethod(self):
...             print 'this is private!!'
... 
>>> obj = MyClass()
</code></pre>

<p>What I did there is create a class with a public method and a private method and instantiate it.</p>

<p>Next, I call its public method.</p>

<pre><code>>>> obj.myPublicMethod()
public method
</code></pre>

<p>Next, I try and call its private method.</p>

<pre><code>>>> obj.__myPrivateMethod()
Traceback (most recent call last):
  File """", line 1, in 
AttributeError: MyClass instance has no attribute '__myPrivateMethod'
</code></pre>

<p>Everything looks good here; we're unable to call it. It is, in fact, 'private'. Well, actually it isn't. Running <em>dir()</em> on the object reveals a new magical method that python creates magically for all of your 'private' methods.</p>

<pre><code>>>> dir(obj)
['_MyClass__myPrivateMethod', '__doc__', '__module__', 'myPublicMethod']
</code></pre>

<p>This new method's name is always an underscore, followed by the class name, followed by the method name.</p>

<pre><code>>>> obj._MyClass__myPrivateMethod()
this is private!!
</code></pre>

<p>So much for encapsulation, eh?</p>

<p>In any case, I'd always heard Python doesn't support encapsulation, so why even try? What gives?</p>
",<python><python-2.7><encapsulation><information-hiding>,private method encapsulation class methods public followed explain actually gives,"<p>The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses. It's not designed to prevent deliberate access from outside.</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.__baz = 42
...     def foo(self):
...         print self.__baz
...     
&gt;&gt;&gt; class Bar(Foo):
...     def __init__(self):
...         super(Bar, self).__init__()
...         self.__baz = 21
...     def bar(self):
...         print self.__baz
...
&gt;&gt;&gt; x = Bar()
&gt;&gt;&gt; x.foo()
42
&gt;&gt;&gt; x.bar()
21
&gt;&gt;&gt; print x.__dict__
{'_Bar__baz': 21, '_Foo__baz': 42}
</code></pre>

<p>Of course, it breaks down if two different classes have the same name.</p>
",,
314,3,How to change the font size on a matplotlib plot,"<p>How does one change the font size for all elements (ticks, labels, title) on a matplotlib plot?</p>

<p>I know how to change the tick label sizes, this is done with:</p>

<pre><code>import matplotlib 
matplotlib.rc('xtick', labelsize=20) 
matplotlib.rc('ytick', labelsize=20) 
</code></pre>

<p>But how does one change the rest?</p>
","How to change the font size on a matplotlib plot<p>How does one change the font size for all elements (ticks, labels, title) on a matplotlib plot?</p>

<p>I know how to change the tick label sizes, this is done with:</p>

<pre><code>import matplotlib 
matplotlib.rc('xtick', labelsize=20) 
matplotlib.rc('ytick', labelsize=20) 
</code></pre>

<p>But how does one change the rest?</p>
",<python><matplotlib><font-size>,change font matplotlib size plothow label title sizes ticks tick,"<p>From the <a href=""http://matplotlib.sourceforge.net/api/matplotlib_configuration_api.html#matplotlib.rc"" rel=""noreferrer"">matplotlib documentation</a>, </p>

<pre><code>font = {'family' : 'normal',
        'weight' : 'bold',
        'size'   : 22}

matplotlib.rc('font', **font)
</code></pre>

<p>This sets the font of all items to the font specified by the kwargs object, <code>font</code>.</p>

<p>Alternatively, you could also use the <code>rcParams</code> <code>update</code> method as suggested in <a href=""https://stackoverflow.com/a/6441839/605121"">this answer</a>:</p>

<pre><code>matplotlib.rcParams.update({'font.size': 22})
</code></pre>

<p>or</p>

<pre><code>import matplotlib.pyplot as plt
plt.rcParams.update({'font.size': 22})
</code></pre>

<p>You can find a full list of available properties on the <a href=""http://matplotlib.org/users/customizing.html"" rel=""noreferrer"">Customizing matplotlib page</a>.</p>
",,
315,6,"Difference between modes a, a+, w, w+, and r+ in built-in open function?","<p>In the python built-in <a href=""http://docs.python.org/library/functions.html#open"" rel=""noreferrer"">open</a> function, what is the exact difference between the modes <code>w</code>, <code>a</code>, <code>w+</code>, <code>a+</code>, and <code>r+</code>?</p>

<p>In particular, the documentation implies that all of these will allow writing to the file, and says that it opens the files for ""appending"", ""writing"", and ""updating"" specifically, but does not define what these terms mean.</p>
","Difference between modes a, a+, w, w+, and r+ in built-in open function?<p>In the python built-in <a href=""http://docs.python.org/library/functions.html#open"" rel=""noreferrer"">open</a> function, what is the exact difference between the modes <code>w</code>, <code>a</code>, <code>w+</code>, <code>a+</code>, and <code>r+</code>?</p>

<p>In particular, the documentation implies that all of these will allow writing to the file, and says that it opens the files for ""appending"", ""writing"", and ""updating"" specifically, but does not define what these terms mean.</p>
",<python>,modes open built writing difference opens implies updating allow terms,"<p>The opening modes are exactly the same as those for the C standard library function <strong><code>fopen()</code></strong>.</p>

<p><a href=""http://www.manpagez.com/man/3/fopen/"" rel=""noreferrer"">The BSD <code>fopen</code> manpage</a> defines them as follows:</p>

<pre class=""lang-none prettyprint-override""><code> The argument mode points to a string beginning with one of the following
 sequences (Additional characters may follow these sequences.):

 ``r''   Open text file for reading.  The stream is positioned at the
         beginning of the file.

 ``r+''  Open for reading and writing.  The stream is positioned at the
         beginning of the file.

 ``w''   Truncate file to zero length or create text file for writing.
         The stream is positioned at the beginning of the file.

 ``w+''  Open for reading and writing.  The file is created if it does not
         exist, otherwise it is truncated.  The stream is positioned at
         the beginning of the file.

 ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.
</code></pre>
",,
316,4,How to generate all permutations of a list?,"<p>How do you generate all the permutations of a list in Python, independently of the type of elements in that list?</p>

<p>For example:</p>

<pre><code>permutations([])
[]

permutations([1])
[1]

permutations([1, 2])
[1, 2]
[2, 1]

permutations([1, 2, 3])
[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]
</code></pre>
","How to generate all permutations of a list?<p>How do you generate all the permutations of a list in Python, independently of the type of elements in that list?</p>

<p>For example:</p>

<pre><code>permutations([])
[]

permutations([1])
[1]

permutations([1, 2])
[1, 2]
[2, 1]

permutations([1, 2, 3])
[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]
</code></pre>
",<python><algorithm><permutation><combinatorics><python-2.5>,permutations generate list independently elements type example python ,"<p>There's a function in the <strong>standard-library</strong> for this: <a href=""https://docs.python.org/3/library/itertools.html#itertools.permutations"" rel=""noreferrer""><code>itertools.permutations</code></a>.</p>
<pre><code>import itertools
list(itertools.permutations([1, 2, 3]))
</code></pre>
<p>If for some reason you want to implement it yourself or are just curious to know how it works, here's one nice approach, taken from  <a href=""http://code.activestate.com/recipes/252178/"" rel=""noreferrer"">http://code.activestate.com/recipes/252178/</a>:</p>
<pre><code>def all_perms(elements):
    if len(elements) &lt;=1:
        yield elements
    else:
        for perm in all_perms(elements[1:]):
            for i in range(len(elements)):
                # nb elements[0:1] works in both string and list contexts
                yield perm[:i] + elements[0:1] + perm[i:]
</code></pre>
<p>A couple of alternative approaches are listed in the documentation of <code>itertools.permutations</code>. Here's one:</p>
<pre><code>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
</code></pre>
<p>And another, based on <code>itertools.product</code>:</p>
<pre><code>def permutations(iterable, r=None):
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    for indices in product(range(n), repeat=r):
        if len(set(indices)) == r:
            yield tuple(pool[i] for i in indices)
</code></pre>
",,
317,5,What is the Python equivalent of static variables inside a function?,"<p>What is the idiomatic Python equivalent of this C/C++ code?</p>

<pre class=""lang-cpp prettyprint-override""><code>void foo()
{
    static int counter = 0;
    counter++;
    printf(""counter is %d\n"", counter);
}
</code></pre>

<p>specifically, how does one implement the static member at the function level, as opposed to the class level? And does placing the function into a class change anything?</p>
","What is the Python equivalent of static variables inside a function?<p>What is the idiomatic Python equivalent of this C/C++ code?</p>

<pre class=""lang-cpp prettyprint-override""><code>void foo()
{
    static int counter = 0;
    counter++;
    printf(""counter is %d\n"", counter);
}
</code></pre>

<p>specifically, how does one implement the static member at the function level, as opposed to the class level? And does placing the function into a class change anything?</p>
",<python><static>,level static equivalent function class placing member idiomatic opposed implement,"<p>A bit reversed, but this should work:</p>

<pre><code>def foo():
    foo.counter += 1
    print ""Counter is %d"" % foo.counter
foo.counter = 0
</code></pre>

<p>If you want the counter initialization code at the top instead of the bottom, you can create a decorator:</p>

<pre><code>def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func
    return decorate
</code></pre>

<p>Then use the code like this:</p>

<pre><code>@static_vars(counter=0)
def foo():
    foo.counter += 1
    print ""Counter is %d"" % foo.counter
</code></pre>

<p>It'll still require you to use the <code>foo.</code> prefix, unfortunately.</p>

<p><sup>(Credit: <a href=""https://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function/279586#comment41067162_279586"">@ony</a>)</sup></p>
",,
318,4,Create an empty list in Python with certain size,"<p>I want to create an empty list (or whatever is the best way) that can hold 10 elements.</p>
<p>After that I want to assign values in that list, for example this is supposed to display 0 to 9:</p>
<pre class=""lang-py prettyprint-override""><code>s1 = list();
for i in range(0,9):
   s1[i] = i

print s1
</code></pre>
<p>But when I run this code, it generates an error or in another case it just displays <code>[]</code> (empty).</p>
<p>Can someone explain why?</p>
","Create an empty list in Python with certain size<p>I want to create an empty list (or whatever is the best way) that can hold 10 elements.</p>
<p>After that I want to assign values in that list, for example this is supposed to display 0 to 9:</p>
<pre class=""lang-py prettyprint-override""><code>s1 = list();
for i in range(0,9):
   s1[i] = i

print s1
</code></pre>
<p>But when I run this code, it generates an error or in another case it just displays <code>[]</code> (empty).</p>
<p>Can someone explain why?</p>
",<python><list>,list create size displays assign generates hold display supposed certain,"<p>You cannot assign to a list like <code>lst[i] = something</code>, unless the list already is initialized with at least <code>i+1</code> elements. You need to use append to add elements to the end of the list. <code>lst.append(something)</code>.</p>

<p>(You could use the assignment notation if you were using a dictionary).</p>

<p>Creating an empty list:</p>

<pre><code>&gt;&gt;&gt; l = [None] * 10
&gt;&gt;&gt; l
[None, None, None, None, None, None, None, None, None, None]
</code></pre>

<p>Assigning a value to an existing element of the above list:</p>

<pre><code>&gt;&gt;&gt; l[1] = 5
&gt;&gt;&gt; l
[None, 5, None, None, None, None, None, None, None, None]
</code></pre>

<p>Keep in mind that something like <code>l[15] = 5</code> would still fail, as our list has only 10 elements.</p>

<p>range(x) creates a list from [0, 1, 2, ... x-1]</p>

<pre><code># 2.X only. Use list(range(10)) in 3.X.
&gt;&gt;&gt; l = range(10)
&gt;&gt;&gt; l
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>

<p>Using a function to create a list:</p>

<pre><code>&gt;&gt;&gt; def display():
...     s1 = []
...     for i in range(9): # This is just to tell you how to create a list.
...         s1.append(i)
...     return s1
... 
&gt;&gt;&gt; print display()
[0, 1, 2, 3, 4, 5, 6, 7, 8]
</code></pre>

<p>List comprehension (Using the squares because for range you don't need to do all this, you can just return <code>range(0,9)</code> ):</p>

<pre><code>&gt;&gt;&gt; def display():
...     return [x**2 for x in range(9)]
... 
&gt;&gt;&gt; print display()
[0, 1, 4, 9, 16, 25, 36, 49, 64]
</code></pre>
",,
319,5,How can I capitalize the first letter of each word in a string?,"<pre><code>s = 'the brown fox'
</code></pre>
<p>...do something here...</p>
<p><code>s</code> should be:</p>
<pre><code>'The Brown Fox'
</code></pre>
<p>What's the easiest way to do this?</p>
","How can I capitalize the first letter of each word in a string?<pre><code>s = 'the brown fox'
</code></pre>
<p>...do something here...</p>
<p><code>s</code> should be:</p>
<pre><code>'The Brown Fox'
</code></pre>
<p>What's the easiest way to do this?</p>
",<python><capitalization><capitalize>,capitalize letter easiest word string way font forth formatwhich formatting,"<p>The <a href=""http://docs.python.org/library/stdtypes.html#str.title"" rel=""noreferrer""><code>.title()</code></a> method of a string (either ASCII or Unicode is fine) does this:</p>
<pre><code>&gt;&gt;&gt; &quot;hello world&quot;.title()
'Hello World'
&gt;&gt;&gt; u&quot;hello world&quot;.title()
u'Hello World'
</code></pre>
<p>However, look out for strings with embedded apostrophes, as noted in the docs.</p>
<blockquote>
<p>The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:</p>
<pre><code>&gt;&gt;&gt; &quot;they're bill's friends from the UK&quot;.title()
&quot;They'Re Bill'S Friends From The Uk&quot;
</code></pre>
</blockquote>
",,
320,6,Why is python setup.py saying invalid command 'bdist_wheel' on Travis CI?,"<p>My Python package has a <code>setup.py</code> which builds fine locally on Ubuntu Trusty and on a fresh Vagrant Ubuntu Trusty VM when I provision it like this:</p>

<pre><code>sudo apt-get install python python-dev --force-yes --assume-yes --fix-broken
curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python2.7
sudo -H pip install setuptools wheel virtualenv --upgrade
</code></pre>

<p>But when I do the same on a Travis CI Trusty Beta VM:</p>

<pre><code>- sudo apt-get install python python-dev --force-yes --assume-yes --fix-broken
- curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python2.7
- sudo -H pip install setuptools wheel virtualenv --upgrade
</code></pre>

<p>I get:</p>

<pre><code>python2.7 setup.py bdist_wheel
usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
   or: setup.py --help [cmd1 cmd2 ...]
   or: setup.py --help-commands
   or: setup.py cmd --help
error: invalid command 'bdist_wheel'
</code></pre>

<p>This <a href=""https://stackoverflow.com/questions/26664102/why-can-i-not-create-a-wheel-in-python"">Why can I not create a wheel in python?</a> is related but note I am installing wheel and upgrading setuptools.</p>
","Why is python setup.py saying invalid command 'bdist_wheel' on Travis CI?<p>My Python package has a <code>setup.py</code> which builds fine locally on Ubuntu Trusty and on a fresh Vagrant Ubuntu Trusty VM when I provision it like this:</p>

<pre><code>sudo apt-get install python python-dev --force-yes --assume-yes --fix-broken
curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python2.7
sudo -H pip install setuptools wheel virtualenv --upgrade
</code></pre>

<p>But when I do the same on a Travis CI Trusty Beta VM:</p>

<pre><code>- sudo apt-get install python python-dev --force-yes --assume-yes --fix-broken
- curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo python2.7
- sudo -H pip install setuptools wheel virtualenv --upgrade
</code></pre>

<p>I get:</p>

<pre><code>python2.7 setup.py bdist_wheel
usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]
   or: setup.py --help [cmd1 cmd2 ...]
   or: setup.py --help-commands
   or: setup.py cmd --help
error: invalid command 'bdist_wheel'
</code></pre>

<p>This <a href=""https://stackoverflow.com/questions/26664102/why-can-i-not-create-a-wheel-in-python"">Why can I not create a wheel in python?</a> is related but note I am installing wheel and upgrading setuptools.</p>
",<python><travis-ci><setup.py><pypi>,trusty vm ci travis wheel ubuntu setup py vagrant provision,"<p>Had to install the <code>wheel</code> package. Everything was up to date but still giving the error.</p>

<pre><code>pip install wheel
</code></pre>

<p>then</p>

<pre><code>python setup.py bdist_wheel 
</code></pre>

<p>Worked without issues.</p>
",,
321,4,How to convert string representation of list to a list?,"<p>I was wondering what the simplest way is to convert a string representation of a list like the following to a <code>list</code>:</p>
<pre><code>x = '[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]'
</code></pre>
<p>Even in cases where the user puts spaces in between the commas, and spaces inside of the quotes, I need to handle that as well and convert it to:</p>
<pre><code>x = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;] 
</code></pre>
<p>I know I can strip spaces with <code>strip()</code> and <code>split()</code> and check for non-letter characters. But the code was getting very kludgy. Is there a quick function that I'm not aware of?</p>
","How to convert string representation of list to a list?<p>I was wondering what the simplest way is to convert a string representation of a list like the following to a <code>list</code>:</p>
<pre><code>x = '[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]'
</code></pre>
<p>Even in cases where the user puts spaces in between the commas, and spaces inside of the quotes, I need to handle that as well and convert it to:</p>
<pre><code>x = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;] 
</code></pre>
<p>I know I can strip spaces with <code>strip()</code> and <code>split()</code> and check for non-letter characters. But the code was getting very kludgy. Is there a quick function that I'm not aware of?</p>
",<python><string>,spaces convert strip list representation puts quotes kludgy letter handle,"<pre><code>&gt;&gt;&gt; import ast
&gt;&gt;&gt; x = '[ &quot;A&quot;,&quot;B&quot;,&quot;C&quot; , &quot; D&quot;]'
&gt;&gt;&gt; x = ast.literal_eval(x)
&gt;&gt;&gt; x
['A', 'B', 'C', ' D']
&gt;&gt;&gt; x = [n.strip() for n in x]
&gt;&gt;&gt; x
['A', 'B', 'C', 'D']
</code></pre>
<p><a href=""https://docs.python.org/library/ast.html#ast.literal_eval"" rel=""noreferrer""><code>ast.literal_eval</code></a>:</p>
<blockquote>
<p>With <code>ast.literal_eval</code> you can safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, booleans, and <code>None</code>.</p>
</blockquote>
",,
322,3,Which Python memory profiler is recommended?,"<p>I want to know the memory usage of my Python application and specifically want to know what code blocks/portions or objects are consuming most memory.
Google search shows a commercial one is <a href=""http://www.softwareverify.com/python/memory/index.html"" rel=""noreferrer"">Python Memory Validator</a> (Windows only).</p>

<p>And open source ones are <a href=""http://pysizer.8325.org/"" rel=""noreferrer"">PySizer</a> and <a href=""http://guppy-pe.sourceforge.net/#Heapy"" rel=""noreferrer"">Heapy</a>.</p>

<p>I haven't tried anyone, so I wanted to know which one is the best considering:</p>

<ol>
<li><p>Gives most details.</p></li>
<li><p>I have to do least or no changes to my code.</p></li>
</ol>
","Which Python memory profiler is recommended?<p>I want to know the memory usage of my Python application and specifically want to know what code blocks/portions or objects are consuming most memory.
Google search shows a commercial one is <a href=""http://www.softwareverify.com/python/memory/index.html"" rel=""noreferrer"">Python Memory Validator</a> (Windows only).</p>

<p>And open source ones are <a href=""http://pysizer.8325.org/"" rel=""noreferrer"">PySizer</a> and <a href=""http://guppy-pe.sourceforge.net/#Heapy"" rel=""noreferrer"">Heapy</a>.</p>

<p>I haven't tried anyone, so I wanted to know which one is the best considering:</p>

<ol>
<li><p>Gives most details.</p></li>
<li><p>I have to do least or no changes to my code.</p></li>
</ol>
",<python><performance><memory-management><profiling>,memory know details consuming validator pysizer commercial portions heapy profiler,"<p><a href=""https://github.com/zhuyifei1999/guppy3/"" rel=""noreferrer"">guppy3</a> is quite simple to use.  At some point in your code, you have to write the following:</p>
<pre><code>from guppy import hpy
h = hpy()
print(h.heap())
</code></pre>
<p>This gives you some output like this:</p>
<pre><code>Partition of a set of 132527 objects. Total size = 8301532 bytes.
Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
0  35144  27  2140412  26   2140412  26 str
1  38397  29  1309020  16   3449432  42 tuple
2    530   0   739856   9   4189288  50 dict (no owner)
</code></pre>
<p>You can also find out from where objects are referenced and get statistics about that, but somehow the docs on that are a bit sparse.</p>
<p>There is a graphical browser as well, written in Tk.</p>
<p>For Python 2.x, use <a href=""http://guppy-pe.sourceforge.net/"" rel=""noreferrer"">Heapy</a>.</p>
",,
323,3,What's the difference between a Python module and a Python package?,"<p>What's the difference between a Python module and a Python package?</p>

<p>See also: <a href=""https://stackoverflow.com/questions/3680883/whats-the-difference-between-package-and-module"">What&#39;s the difference between &quot;package&quot; and &quot;module&quot;</a> (for other languages)</p>
","What's the difference between a Python module and a Python package?<p>What's the difference between a Python module and a Python package?</p>

<p>See also: <a href=""https://stackoverflow.com/questions/3680883/whats-the-difference-between-package-and-module"">What&#39;s the difference between &quot;package&quot; and &quot;module&quot;</a> (for other languages)</p>
",<python><module><package>,package module difference python languages zone forget formatwhich formatting formatted,"<p>A module is a single file (or files) that are imported under one import and used.
e.g.</p>
<pre><code>import my_module
</code></pre>
<p>A package is a collection of modules in directories that give a package hierarchy.</p>
<pre><code>from my_package.timing.danger.internets import function_of_love
</code></pre>
<p><a href=""http://docs.python.org/tutorial/modules.html"" rel=""noreferrer"">Documentation for modules</a></p>
<p><a href=""https://realpython.com/python-modules-packages/#python-packages"" rel=""noreferrer"">Introduction to packages</a></p>
",,
324,1,How do I update/upgrade pip itself from inside my virtual environment?,"<p>I'm able to update pip-managed packages, but how do I update pip itself? According to <code>pip --version</code>, I currently have pip 1.1 installed in my virtualenv and I want to update to the latest version. </p>

<p>What's the command for that? Do I need to use distribute or is there a native pip or virtualenv command? I've already tried <code>pip update</code> and <code>pip update pip</code> with no success.</p>
","How do I update/upgrade pip itself from inside my virtual environment?<p>I'm able to update pip-managed packages, but how do I update pip itself? According to <code>pip --version</code>, I currently have pip 1.1 installed in my virtualenv and I want to update to the latest version. </p>

<p>What's the command for that? Do I need to use distribute or is there a native pip or virtualenv command? I've already tried <code>pip update</code> and <code>pip update pip</code> with no success.</p>
",<python><upgrade><virtualenv><pip><package-managers>,pip update virtualenv version command latest success native managed virtual,"<p><code>pip</code> is just a <a href=""https://pypi.python.org/pypi/pip"">PyPI package</a> like any other; you could use it to upgrade itself the same way you would upgrade any package:</p>

<pre><code>pip install --upgrade pip
</code></pre>

<p>On Windows the <a href=""https://pip.pypa.io/en/stable/installing/#upgrading-pip"">recommended command</a> is:</p>

<pre><code>python -m pip install --upgrade pip
</code></pre>
",,
325,3,IndentationError: unindent does not match any outer indentation level,"<p>When I compile the Python code below, I get </p>

<blockquote>
  <p>IndentationError: unindent does not match any outer indentation level</p>
</blockquote>

<hr>

<pre><code>import sys

def Factorial(n): # Return factorial
    result = 1
    for i in range (1,n):
        result = result * i
    print ""factorial is "",result
    return result
</code></pre>

<p>Why?</p>
","IndentationError: unindent does not match any outer indentation level<p>When I compile the Python code below, I get </p>

<blockquote>
  <p>IndentationError: unindent does not match any outer indentation level</p>
</blockquote>

<hr>

<pre><code>import sys

def Factorial(n): # Return factorial
    result = 1
    for i in range (1,n):
        result = result * i
    print ""factorial is "",result
    return result
</code></pre>

<p>Why?</p>
",<python><indentation>,unindent indentationerror indentation outer match levelwhy levelwhen compile code python,"<p>Other posters are probably correct...there might be spaces mixed in with your tabs. Try doing a search &amp; replace to replace all tabs with a few spaces.</p>

<p>Try this:</p>

<pre><code>import sys

def Factorial(n): # return factorial
    result = 1
    for i in range (1,n):
        result = result * i
    print ""factorial is "",result
    return result

print Factorial(10)
</code></pre>
",,
326,3,Single quotes vs. double quotes in Python,"<p>According to the documentation, they're pretty much interchangeable.  Is there a stylistic reason to use one over the other?</p>
","Single quotes vs. double quotes in Python<p>According to the documentation, they're pretty much interchangeable.  Is there a stylistic reason to use one over the other?</p>
",<python><coding-style>,quotes stylistic pythonaccording interchangeable pretty double vs reason single documentation,"<p>I like to use double quotes around strings that are used for interpolation or that are natural language messages, and single quotes for small symbol-like strings, but will break the rules if the strings contain quotes, or if I forget. I use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed.</p>

<p>For example:</p>

<pre><code>LIGHT_MESSAGES = {
    'English': ""There are %(number_of_lights)s lights."",
    'Pirate':  ""Arr! Thar be %(number_of_lights)s lights.""
}

def lights_message(language, number_of_lights):
    """"""Return a language-appropriate string reporting the light count.""""""
    return LIGHT_MESSAGES[language] % locals()

def is_pirate(message):
    """"""Return True if the given message sounds piratical.""""""
    return re.search(r""(?i)(arr|avast|yohoho)!"", message) is not None
</code></pre>
",,
327,4,Convert all strings in a list to int,"<p>In Python, I want to convert all strings in a list to integers.</p>

<p>So if I have:</p>

<pre><code>results = ['1', '2', '3']
</code></pre>

<p>How do I make it:</p>

<pre><code>results = [1, 2, 3]
</code></pre>
","Convert all strings in a list to int<p>In Python, I want to convert all strings in a list to integers.</p>

<p>So if I have:</p>

<pre><code>results = ['1', '2', '3']
</code></pre>

<p>How do I make it:</p>

<pre><code>results = [1, 2, 3]
</code></pre>
",<python><list><int>,strings convert intin list integers make want python formats form,"<p>Use the <a href=""https://docs.python.org/2/library/functions.html#map"" rel=""noreferrer""><code>map</code></a> function (in Python 2.x):</p>

<pre><code>results = map(int, results)
</code></pre>

<p>In Python 3, you will need to convert the result from <a href=""https://docs.python.org/3/library/functions.html#map"" rel=""noreferrer""><code>map</code></a> to a list:</p>

<pre><code>results = list(map(int, results))
</code></pre>
",,
328,3,How to use multiprocessing pool.map with multiple arguments,"<p>In the Python <a href=""https://docs.python.org/3/library/multiprocessing.html"" rel=""noreferrer""><code>multiprocessing</code></a> library, is there a variant of <code>pool.map</code> which supports multiple arguments?</p>
<pre><code>import multiprocessing

text = &quot;test&quot;

def harvester(text, case):
    X = case[0]
    text + str(X)

if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=6)
    case = RAW_DATASET
    pool.map(harvester(text, case), case, 1)
    pool.close()
    pool.join()
</code></pre>
","How to use multiprocessing pool.map with multiple arguments<p>In the Python <a href=""https://docs.python.org/3/library/multiprocessing.html"" rel=""noreferrer""><code>multiprocessing</code></a> library, is there a variant of <code>pool.map</code> which supports multiple arguments?</p>
<pre><code>import multiprocessing

text = &quot;test&quot;

def harvester(text, case):
    X = case[0]
    text + str(X)

if __name__ == '__main__':
    pool = multiprocessing.Pool(processes=6)
    case = RAW_DATASET
    pool.map(harvester(text, case), case, 1)
    pool.close()
    pool.join()
</code></pre>
",<python><multiprocessing><python-multiprocessing>,pool multiprocessing map multiple argumentsin supports variant arguments library use,"<p>The answer to this is version- and situation-dependent. The most general answer for recent versions of Python (since 3.3) was first described below by <a href=""https://stackoverflow.com/a/5443941/577088"">J.F. Sebastian</a>.<sup>1</sup> It uses the <a href=""http://docs.python.org/dev/library/multiprocessing.html#multiprocessing.pool.Pool.starmap"" rel=""noreferrer""><code>Pool.starmap</code></a> method, which accepts a sequence of argument tuples. It then automatically unpacks the arguments from each tuple and passes them to the given function:</p>

<pre><code>import multiprocessing
from itertools import product

def merge_names(a, b):
    return '{} &amp; {}'.format(a, b)

if __name__ == '__main__':
    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']
    with multiprocessing.Pool(processes=3) as pool:
        results = pool.starmap(merge_names, product(names, repeat=2))
    print(results)

# Output: ['Brown &amp; Brown', 'Brown &amp; Wilson', 'Brown &amp; Bartlett', ...
</code></pre>

<p>For earlier versions of Python, you'll need to write a helper function to unpack the arguments explicitly. If you want to use <code>with</code>, you'll also need to write a wrapper to turn <code>Pool</code> into a context manager. (Thanks to <a href=""https://stackoverflow.com/questions/5442910/python-multiprocessing-pool-map-for-multiple-arguments/5442981?noredirect=1#comment80290057_5442981"">muon</a> for pointing this out.)</p>

<pre><code>import multiprocessing
from itertools import product
from contextlib import contextmanager

def merge_names(a, b):
    return '{} &amp; {}'.format(a, b)

def merge_names_unpack(args):
    return merge_names(*args)

@contextmanager
def poolcontext(*args, **kwargs):
    pool = multiprocessing.Pool(*args, **kwargs)
    yield pool
    pool.terminate()

if __name__ == '__main__':
    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']
    with poolcontext(processes=3) as pool:
        results = pool.map(merge_names_unpack, product(names, repeat=2))
    print(results)

# Output: ['Brown &amp; Brown', 'Brown &amp; Wilson', 'Brown &amp; Bartlett', ...
</code></pre>

<p>In simpler cases, with a fixed second argument, you can also use <code>partial</code>, but only in Python 2.7+.</p>

<pre><code>import multiprocessing
from functools import partial
from contextlib import contextmanager

@contextmanager
def poolcontext(*args, **kwargs):
    pool = multiprocessing.Pool(*args, **kwargs)
    yield pool
    pool.terminate()

def merge_names(a, b):
    return '{} &amp; {}'.format(a, b)

if __name__ == '__main__':
    names = ['Brown', 'Wilson', 'Bartlett', 'Rivera', 'Molloy', 'Opie']
    with poolcontext(processes=3) as pool:
        results = pool.map(partial(merge_names, b='Sons'), names)
    print(results)

# Output: ['Brown &amp; Sons', 'Wilson &amp; Sons', 'Bartlett &amp; Sons', ...
</code></pre>

<p><sup>1. Much of this was inspired by his answer, which should probably have been accepted instead. But since this one is stuck at the top, it seemed best to improve it for future readers.</sup></p>
",,
329,3,Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell,"<p>I have taken <a href=""http://projecteuler.net/index.php?section=problems&amp;id=12"" rel=""nofollow noreferrer"">Problem #12</a> from <a href=""http://projecteuler.net/"" rel=""nofollow noreferrer"">Project Euler</a> as a programming exercise and to compare my (surely not optimal) implementations in C, Python, Erlang and Haskell. In order to get some higher execution times, I search for the first triangle number with more than 1000 divisors instead of 500 as stated in the original problem.</p>
<p>The result is the following:</p>
<p><strong>C:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ gcc -lm -o euler12.bin euler12.c
lorenzo@enzo:~/erlang$ time ./euler12.bin
842161320

real    0m11.074s
user    0m11.070s
sys 0m0.000s
</code></pre>
<p><strong>Python:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ time ./euler12.py 
842161320

real    1m16.632s
user    1m16.370s
sys 0m0.250s
</code></pre>
<p><strong>Python with PyPy:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/Downloads/pypy-c-jit-43780-b590cf6de419-linux64/bin$ time ./pypy /home/lorenzo/erlang/euler12.py 
842161320

real    0m13.082s
user    0m13.050s
sys 0m0.020s
</code></pre>
<p><strong>Erlang:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ erlc euler12.erl 
lorenzo@enzo:~/erlang$ time erl -s euler12 solve
Erlang R13B03 (erts-5.7.4) [source] [64-bit] [smp:4:4] [rq:4] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
1&gt; 842161320

real    0m48.259s
user    0m48.070s
sys 0m0.020s
</code></pre>
<p><strong>Haskell:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ ghc euler12.hs -o euler12.hsx
[1 of 1] Compiling Main             ( euler12.hs, euler12.o )
Linking euler12.hsx ...
lorenzo@enzo:~/erlang$ time ./euler12.hsx 
842161320

real    2m37.326s
user    2m37.240s
sys 0m0.080s
</code></pre>
<p><strong>Summary:</strong></p>
<ul>
<li>C: 100%</li>
<li>Python: 692% (118% with PyPy)</li>
<li>Erlang: 436% (135% thanks to RichardC)</li>
<li>Haskell: 1421%</li>
</ul>
<p>I suppose that C has a big advantage as it uses long for the calculations and not arbitrary length integers as the other three. Also it doesn't need to load a runtime first (Do the others?).</p>
<p><strong>Question 1:</strong>
Do Erlang, Python and Haskell lose speed due to using arbitrary length integers or don't they as long as the values are less than <code>MAXINT</code>?</p>
<p><strong>Question 2:</strong>
Why is Haskell so slow? Is there a compiler flag that turns off the brakes or is it my implementation? (The latter is quite probable as Haskell is a book with seven seals to me.)</p>
<p><strong>Question 3:</strong>
Can you offer me some hints how to optimize these implementations without changing the way I determine the factors? Optimization in any way: nicer, faster, more &quot;native&quot; to the language.</p>
<h3><strong>EDIT:</strong></h3>
<p><strong>Question 4:</strong>
Do my functional implementations permit LCO (last call optimization, a.k.a tail recursion elimination) and hence avoid adding unnecessary frames onto the call stack?</p>
<p>I really tried to implement the same algorithm as similar as possible in the four languages, although I have to admit that my Haskell and Erlang knowledge is very limited.</p>
<hr />
<p>Source codes used:</p>
<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int factorCount (long n)
{
    double square = sqrt (n);
    int isquare = (int) square;
    int count = isquare == square ? -1 : 0;
    long candidate;
    for (candidate = 1; candidate &lt;= isquare; candidate ++)
        if (0 == n % candidate) count += 2;
    return count;
}

int main ()
{
    long triangle = 1;
    int index = 1;
    while (factorCount (triangle) &lt; 1001)
    {
        index ++;
        triangle += index;
    }
    printf (&quot;%ld\n&quot;, triangle);
}
</code></pre>
<hr />
<pre class=""lang-py prettyprint-override""><code>#! /usr/bin/env python3.2

import math

def factorCount (n):
    square = math.sqrt (n)
    isquare = int (square)
    count = -1 if isquare == square else 0
    for candidate in range (1, isquare + 1):
        if not n % candidate: count += 2
    return count

triangle = 1
index = 1
while factorCount (triangle) &lt; 1001:
    index += 1
    triangle += index

print (triangle)
</code></pre>
<hr />
<pre class=""lang-erlang prettyprint-override""><code>-module (euler12).
-compile (export_all).

factorCount (Number) -&gt; factorCount (Number, math:sqrt (Number), 1, 0).

factorCount (_, Sqrt, Candidate, Count) when Candidate &gt; Sqrt -&gt; Count;

factorCount (_, Sqrt, Candidate, Count) when Candidate == Sqrt -&gt; Count + 1;

factorCount (Number, Sqrt, Candidate, Count) -&gt;
    case Number rem Candidate of
        0 -&gt; factorCount (Number, Sqrt, Candidate + 1, Count + 2);
        _ -&gt; factorCount (Number, Sqrt, Candidate + 1, Count)
    end.

nextTriangle (Index, Triangle) -&gt;
    Count = factorCount (Triangle),
    if
        Count &gt; 1000 -&gt; Triangle;
        true -&gt; nextTriangle (Index + 1, Triangle + Index + 1)  
    end.

solve () -&gt;
    io:format (&quot;~p~n&quot;, [nextTriangle (1, 1) ] ),
    halt (0).
</code></pre>
<hr />
<pre class=""lang-hs prettyprint-override""><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)
    where square = sqrt $ fromIntegral number
          isquare = floor square

factorCount' number sqrt candidate count
    | fromIntegral candidate &gt; sqrt = count
    | number `mod` candidate == 0 = factorCount' number sqrt (candidate + 1) (count + 2)
    | otherwise = factorCount' number sqrt (candidate + 1) count

nextTriangle index triangle
    | factorCount triangle &gt; 1000 = triangle
    | otherwise = nextTriangle (index + 1) (triangle + index + 1)

main = print $ nextTriangle 1 1
</code></pre>
","Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell<p>I have taken <a href=""http://projecteuler.net/index.php?section=problems&amp;id=12"" rel=""nofollow noreferrer"">Problem #12</a> from <a href=""http://projecteuler.net/"" rel=""nofollow noreferrer"">Project Euler</a> as a programming exercise and to compare my (surely not optimal) implementations in C, Python, Erlang and Haskell. In order to get some higher execution times, I search for the first triangle number with more than 1000 divisors instead of 500 as stated in the original problem.</p>
<p>The result is the following:</p>
<p><strong>C:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ gcc -lm -o euler12.bin euler12.c
lorenzo@enzo:~/erlang$ time ./euler12.bin
842161320

real    0m11.074s
user    0m11.070s
sys 0m0.000s
</code></pre>
<p><strong>Python:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ time ./euler12.py 
842161320

real    1m16.632s
user    1m16.370s
sys 0m0.250s
</code></pre>
<p><strong>Python with PyPy:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/Downloads/pypy-c-jit-43780-b590cf6de419-linux64/bin$ time ./pypy /home/lorenzo/erlang/euler12.py 
842161320

real    0m13.082s
user    0m13.050s
sys 0m0.020s
</code></pre>
<p><strong>Erlang:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ erlc euler12.erl 
lorenzo@enzo:~/erlang$ time erl -s euler12 solve
Erlang R13B03 (erts-5.7.4) [source] [64-bit] [smp:4:4] [rq:4] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.7.4  (abort with ^G)
1&gt; 842161320

real    0m48.259s
user    0m48.070s
sys 0m0.020s
</code></pre>
<p><strong>Haskell:</strong></p>
<pre class=""lang-none prettyprint-override""><code>lorenzo@enzo:~/erlang$ ghc euler12.hs -o euler12.hsx
[1 of 1] Compiling Main             ( euler12.hs, euler12.o )
Linking euler12.hsx ...
lorenzo@enzo:~/erlang$ time ./euler12.hsx 
842161320

real    2m37.326s
user    2m37.240s
sys 0m0.080s
</code></pre>
<p><strong>Summary:</strong></p>
<ul>
<li>C: 100%</li>
<li>Python: 692% (118% with PyPy)</li>
<li>Erlang: 436% (135% thanks to RichardC)</li>
<li>Haskell: 1421%</li>
</ul>
<p>I suppose that C has a big advantage as it uses long for the calculations and not arbitrary length integers as the other three. Also it doesn't need to load a runtime first (Do the others?).</p>
<p><strong>Question 1:</strong>
Do Erlang, Python and Haskell lose speed due to using arbitrary length integers or don't they as long as the values are less than <code>MAXINT</code>?</p>
<p><strong>Question 2:</strong>
Why is Haskell so slow? Is there a compiler flag that turns off the brakes or is it my implementation? (The latter is quite probable as Haskell is a book with seven seals to me.)</p>
<p><strong>Question 3:</strong>
Can you offer me some hints how to optimize these implementations without changing the way I determine the factors? Optimization in any way: nicer, faster, more &quot;native&quot; to the language.</p>
<h3><strong>EDIT:</strong></h3>
<p><strong>Question 4:</strong>
Do my functional implementations permit LCO (last call optimization, a.k.a tail recursion elimination) and hence avoid adding unnecessary frames onto the call stack?</p>
<p>I really tried to implement the same algorithm as similar as possible in the four languages, although I have to admit that my Haskell and Erlang knowledge is very limited.</p>
<hr />
<p>Source codes used:</p>
<pre class=""lang-c prettyprint-override""><code>#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int factorCount (long n)
{
    double square = sqrt (n);
    int isquare = (int) square;
    int count = isquare == square ? -1 : 0;
    long candidate;
    for (candidate = 1; candidate &lt;= isquare; candidate ++)
        if (0 == n % candidate) count += 2;
    return count;
}

int main ()
{
    long triangle = 1;
    int index = 1;
    while (factorCount (triangle) &lt; 1001)
    {
        index ++;
        triangle += index;
    }
    printf (&quot;%ld\n&quot;, triangle);
}
</code></pre>
<hr />
<pre class=""lang-py prettyprint-override""><code>#! /usr/bin/env python3.2

import math

def factorCount (n):
    square = math.sqrt (n)
    isquare = int (square)
    count = -1 if isquare == square else 0
    for candidate in range (1, isquare + 1):
        if not n % candidate: count += 2
    return count

triangle = 1
index = 1
while factorCount (triangle) &lt; 1001:
    index += 1
    triangle += index

print (triangle)
</code></pre>
<hr />
<pre class=""lang-erlang prettyprint-override""><code>-module (euler12).
-compile (export_all).

factorCount (Number) -&gt; factorCount (Number, math:sqrt (Number), 1, 0).

factorCount (_, Sqrt, Candidate, Count) when Candidate &gt; Sqrt -&gt; Count;

factorCount (_, Sqrt, Candidate, Count) when Candidate == Sqrt -&gt; Count + 1;

factorCount (Number, Sqrt, Candidate, Count) -&gt;
    case Number rem Candidate of
        0 -&gt; factorCount (Number, Sqrt, Candidate + 1, Count + 2);
        _ -&gt; factorCount (Number, Sqrt, Candidate + 1, Count)
    end.

nextTriangle (Index, Triangle) -&gt;
    Count = factorCount (Triangle),
    if
        Count &gt; 1000 -&gt; Triangle;
        true -&gt; nextTriangle (Index + 1, Triangle + Index + 1)  
    end.

solve () -&gt;
    io:format (&quot;~p~n&quot;, [nextTriangle (1, 1) ] ),
    halt (0).
</code></pre>
<hr />
<pre class=""lang-hs prettyprint-override""><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)
    where square = sqrt $ fromIntegral number
          isquare = floor square

factorCount' number sqrt candidate count
    | fromIntegral candidate &gt; sqrt = count
    | number `mod` candidate == 0 = factorCount' number sqrt (candidate + 1) (count + 2)
    | otherwise = factorCount' number sqrt (candidate + 1) count

nextTriangle index triangle
    | factorCount triangle &gt; 1000 = triangle
    | otherwise = nextTriangle (index + 1) (triangle + index + 1)

main = print $ nextTriangle 1 1
</code></pre>
",<python><c><performance><haskell><erlang>,haskell erlang implementations question vs optimization euler pypy speed arbitrary,"<p>Using <code>GHC 7.0.3</code>, <code>gcc 4.4.6</code>, <code>Linux 2.6.29</code> on an x86_64 Core2 Duo (2.5GHz) machine, compiling using <code>ghc -O2 -fllvm -fforce-recomp</code> for Haskell and <code>gcc -O3 -lm</code> for C.</p>

<ul>
<li>Your C routine runs in 8.4 seconds (faster than your run probably because of <code>-O3</code>)</li>
<li>The Haskell solution runs in 36 seconds (due to the <code>-O2</code> flag)</li>
<li>Your <code>factorCount'</code> code isn't explicitly typed and defaulting to <code>Integer</code> (thanks to Daniel for correcting my misdiagnosis here!).  Giving an explicit type signature (which is standard practice anyway) using <code>Int</code> and the time changes to <strong>11.1 seconds</strong></li>
<li>in <code>factorCount'</code> you have needlessly called <code>fromIntegral</code>. A fix results in no change though (the compiler is smart, lucky for you).</li>
<li>You used <code>mod</code> where <code>rem</code> is faster and sufficient. This changes the time to <strong>8.5 seconds</strong>.</li>
<li><code>factorCount'</code> is constantly applying two extra arguments that never change (<code>number</code>, <code>sqrt</code>).  A worker/wrapper transformation gives us:</li>
</ul>

<pre class=""lang-hs prettyprint-override""><code> $ time ./so
 842161320  

 real    0m7.954s  
 user    0m7.944s  
 sys     0m0.004s  
</code></pre>

<p>That's right, <strong>7.95 seconds</strong>.  Consistently <strong>half a second faster than the C solution</strong>.  Without the <code>-fllvm</code> flag I'm still getting <code>8.182 seconds</code>, so the NCG backend is doing well in this case too.</p>

<p>Conclusion: Haskell is awesome.</p>

<p><strong>Resulting Code</strong></p>

<pre class=""lang-hs prettyprint-override""><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)
    where square = sqrt $ fromIntegral number
          isquare = floor square

factorCount' :: Int -&gt; Int -&gt; Int -&gt; Int -&gt; Int
factorCount' number sqrt candidate0 count0 = go candidate0 count0
  where
  go candidate count
    | candidate &gt; sqrt = count
    | number `rem` candidate == 0 = go (candidate + 1) (count + 2)
    | otherwise = go (candidate + 1) count

nextTriangle index triangle
    | factorCount triangle &gt; 1000 = triangle
    | otherwise = nextTriangle (index + 1) (triangle + index + 1)

main = print $ nextTriangle 1 1
</code></pre>

<p>EDIT: So now that we've explored that, lets address the questions</p>

<blockquote>
  <p>Question 1: Do erlang, python and haskell lose speed due to using
  arbitrary length integers or don't they as long as the values are less
  than MAXINT?</p>
</blockquote>

<p>In Haskell, using <code>Integer</code> is slower than <code>Int</code> but how much slower depends on the computations performed.  Luckily (for 64 bit machines) <code>Int</code> is sufficient.  For portability sake you should probably rewrite my code to use <code>Int64</code> or <code>Word64</code> (C isn't the only language with a <code>long</code>).</p>

<blockquote>
  <p>Question 2: Why is haskell so slow? Is there a compiler flag that
  turns off the brakes or is it my implementation? (The latter is quite
  probable as haskell is a book with seven seals to me.)</p>
  
  <p>Question 3: Can you offer me some hints how to optimize these
  implementations without changing the way I determine the factors?
  Optimization in any way: nicer, faster, more ""native"" to the language.</p>
</blockquote>

<p>That was what I answered above.   The answer was </p>

<ul>
<li>0) Use optimization via <code>-O2</code> </li>
<li>1) Use fast  (notably: unbox-able) types when possible </li>
<li>2) <code>rem</code> not <code>mod</code> (a frequently forgotten optimization) and </li>
<li>3) worker/wrapper transformation (perhaps the most common optimization).</li>
</ul>

<blockquote>
  <p>Question 4: Do my functional implementations permit LCO and hence
  avoid adding unnecessary frames onto the call stack?</p>
</blockquote>

<p>Yes, that wasn't the issue.  Good work and glad you considered this.</p>
",,
330,5,How do I call a parent class's method from a child class in Python?,"<p>When creating a simple object hierarchy in Python, I'd like to be able to invoke methods of the parent class from a derived class.  In Perl and Java, there is a keyword for this (<a href=""https://docs.oracle.com/javase/tutorial/java/IandI/super.html"" rel=""noreferrer""><code>super</code></a>).  In Perl, I might do this:</p>

<pre><code>package Foo;

sub frotz {
    return ""Bamf"";
}

package Bar;
@ISA = qw(Foo);

sub frotz {
   my $str = SUPER::frotz();
   return uc($str);
}
</code></pre>

<p>In Python, it appears that I have to name the parent class explicitly from the child.
In the example above, I'd have to do something like <code>Foo::frotz()</code>.  </p>

<p>This doesn't seem right since this behavior makes it hard to make deep hierarchies.  If children need to know what class defined an inherited method, then all sorts of information pain is created.  </p>

<p>Is this an actual limitation in python, a gap in my understanding or both?</p>
","How do I call a parent class's method from a child class in Python?<p>When creating a simple object hierarchy in Python, I'd like to be able to invoke methods of the parent class from a derived class.  In Perl and Java, there is a keyword for this (<a href=""https://docs.oracle.com/javase/tutorial/java/IandI/super.html"" rel=""noreferrer""><code>super</code></a>).  In Perl, I might do this:</p>

<pre><code>package Foo;

sub frotz {
    return ""Bamf"";
}

package Bar;
@ISA = qw(Foo);

sub frotz {
   my $str = SUPER::frotz();
   return uc($str);
}
</code></pre>

<p>In Python, it appears that I have to name the parent class explicitly from the child.
In the example above, I'd have to do something like <code>Foo::frotz()</code>.  </p>

<p>This doesn't seem right since this behavior makes it hard to make deep hierarchies.  If children need to know what class defined an inherited method, then all sorts of information pain is created.  </p>

<p>Is this an actual limitation in python, a gap in my understanding or both?</p>
",<python><class><oop><object><inheritance>,class parent perl child method hierarchies sorts pain limitation frotz,"<p>Use the <a href=""http://docs.python.org/library/functions.html#super"" rel=""noreferrer""><code>super()</code></a> function:</p>
<pre class=""lang-py prettyprint-override""><code>class Foo(Bar):
    def baz(self, **kwargs):
        return super().baz(**kwargs)
</code></pre>
<p>For Python &lt; 3, you must explicitly opt in to using <a href=""http://docs.python.org/glossary.html#term-new-style-class"" rel=""noreferrer"">new-style classes</a> and use:</p>
<pre class=""lang-py prettyprint-override""><code>class Foo(Bar):
    def baz(self, arg):
        return super(Foo, self).baz(arg)
</code></pre>
",,
331,6,How do I protect Python code from being read by users?,"<p>I am developing a piece of software in Python that will be distributed to my employer's customers. My employer wants to limit the usage of the software with a time-restricted license file.</p>
<p>If we distribute the <code>.py</code> files or even <code>.pyc</code> files it will be easy to (decompile and) remove the code that checks the license file.</p>
<p>Another aspect is that my employer does not want the code to be read by our customers, fearing that the code may be stolen or at least the &quot;novel ideas&quot;.</p>
<p>Is there a good way to handle this problem?</p>
","How do I protect Python code from being read by users?<p>I am developing a piece of software in Python that will be distributed to my employer's customers. My employer wants to limit the usage of the software with a time-restricted license file.</p>
<p>If we distribute the <code>.py</code> files or even <code>.pyc</code> files it will be easy to (decompile and) remove the code that checks the license file.</p>
<p>Another aspect is that my employer does not want the code to be read by our customers, fearing that the code may be stolen or at least the &quot;novel ideas&quot;.</p>
<p>Is there a good way to handle this problem?</p>
",<python><licensing><obfuscation><copy-protection>,employer customers license software code read files fearing developing decompile,"<p>Python, being a byte-code-compiled interpreted language, is very difficult to lock down.  Even if you use a exe-packager like <a href=""http://py2exe.org"" rel=""noreferrer"">py2exe</a>, the layout of the executable is well-known, and the Python byte-codes are well understood.</p>

<p>Usually in cases like this, you have to make a tradeoff.  How important is it really to protect the code?  Are there real secrets in there (such as a key for symmetric encryption of bank transfers), or are you just being paranoid?  Choose the language that lets you develop the best product quickest, and be realistic about how valuable your novel ideas are.</p>

<p>If you decide you really need to enforce the license check securely, write it as a small C extension so that the license check code can be extra-hard (but not impossible!) to reverse engineer, and leave the bulk of your code in Python.</p>
",,
332,6,python exception message capturing,"<pre><code>import ftplib
import urllib2
import os
import logging
logger = logging.getLogger('ftpuploader')
hdlr = logging.FileHandler('ftplog.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)
FTPADDR = ""some ftp address""

def upload_to_ftp(con, filepath):
    try:
        f = open(filepath,'rb')                # file to send
        con.storbinary('STOR '+ filepath, f)         # Send the file
        f.close()                                # Close file and FTP
        logger.info('File successfully uploaded to '+ FTPADDR)
    except, e:
        logger.error('Failed to upload to ftp: '+ str(e))
</code></pre>

<p>This doesn't seem to work, I get syntax error, what is the proper way of doing this for logging all kind of exceptions to a file</p>
","python exception message capturing<pre><code>import ftplib
import urllib2
import os
import logging
logger = logging.getLogger('ftpuploader')
hdlr = logging.FileHandler('ftplog.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)
FTPADDR = ""some ftp address""

def upload_to_ftp(con, filepath):
    try:
        f = open(filepath,'rb')                # file to send
        con.storbinary('STOR '+ filepath, f)         # Send the file
        f.close()                                # Close file and FTP
        logger.info('File successfully uploaded to '+ FTPADDR)
    except, e:
        logger.error('Failed to upload to ftp: '+ str(e))
</code></pre>

<p>This doesn't seem to work, I get syntax error, what is the proper way of doing this for logging all kind of exceptions to a file</p>
",<python><exception><logging><except>,capturing logging exceptions proper message kind exception syntax work error,"<p>You have to define which type of exception you want to catch. So write <code>except Exception, e:</code> instead of <code>except, e:</code> for a general exception (that will be logged anyway).</p>

<p>Other possibility is to write your whole try/except code this way:</p>

<pre><code>try:
    with open(filepath,'rb') as f:
        con.storbinary('STOR '+ filepath, f)
    logger.info('File successfully uploaded to '+ FTPADDR)
except Exception, e: # work on python 2.x
    logger.error('Failed to upload to ftp: '+ str(e))
</code></pre>

<p>in Python 3.x and modern versions of Python 2.x use <code>except Exception as e</code> instead of <code>except Exception, e</code>:</p>

<pre><code>try:
    with open(filepath,'rb') as f:
        con.storbinary('STOR '+ filepath, f)
    logger.info('File successfully uploaded to '+ FTPADDR)
except Exception as e: # work on python 3.x
    logger.error('Failed to upload to ftp: '+ str(e))
</code></pre>
",,
333,5,What does the Ellipsis object do?,"<p>While idly surfing the namespace I noticed an odd looking object called <code>Ellipsis</code>, it does not seem to be or do anything special, but it's a globally available builtin. </p>

<p>After a search I found that it is used in some obscure variant of the slicing syntax by Numpy and Scipy... but almost nothing else. </p>

<p>Was this object added to the language specifically to support Numpy + Scipy? Does Ellipsis have any generic meaning or use at all?</p>

<pre><code>D:\workspace\numpy&gt;python
Python 2.4.4 (#71, Oct 18 2006, 08:34:43) [MSC v.1310 32 bit (Intel)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; Ellipsis
Ellipsis
</code></pre>
","What does the Ellipsis object do?<p>While idly surfing the namespace I noticed an odd looking object called <code>Ellipsis</code>, it does not seem to be or do anything special, but it's a globally available builtin. </p>

<p>After a search I found that it is used in some obscure variant of the slicing syntax by Numpy and Scipy... but almost nothing else. </p>

<p>Was this object added to the language specifically to support Numpy + Scipy? Does Ellipsis have any generic meaning or use at all?</p>

<pre><code>D:\workspace\numpy&gt;python
Python 2.4.4 (#71, Oct 18 2006, 08:34:43) [MSC v.1310 32 bit (Intel)] on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; Ellipsis
Ellipsis
</code></pre>
",<python><ellipsis>,ellipsis scipy object numpy globally generic namespace obscure surfing idly,"<p>This came up in another <a href=""https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation"">question</a> recently.  I'll elaborate on my <a href=""https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation/753260#753260"">answer</a> from there:</p>

<p><a href=""http://docs.python.org/dev/library/constants.html#Ellipsis"" rel=""noreferrer"">Ellipsis</a> is an object that can appear in slice notation.  For example:</p>

<pre><code>myList[1:2, ..., 0]
</code></pre>

<p>Its interpretation is purely up to whatever implements the <code>__getitem__</code> function and sees <code>Ellipsis</code> objects there, but its main (and intended) use is in the <a href=""http://www.numpy.org/"" rel=""noreferrer"">numpy</a> third-party library, which adds a multidimensional array type.  Since there are more than one dimensions, slicing becomes more complex than just a start and stop index; it is useful to be able to slice in multiple dimensions as well. E.g., given a 4x4 array, the top left area would be defined by the slice <code>[:2,:2]</code>:</p>

<pre><code>&gt;&gt;&gt; a
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])

&gt;&gt;&gt; a[:2,:2]  # top left
array([[1, 2],
       [5, 6]])
</code></pre>

<p>Extending this further, Ellipsis is used here to indicate a placeholder for the rest of the array dimensions not specified.  Think of it as indicating the full slice <code>[:]</code> for all the dimensions in the gap it is placed, so for a 3d array, <code>a[...,0]</code> is the same as <code>a[:,:,0]</code> and for 4d, <code>a[:,:,:,0]</code>, similarly, <code>a[0,...,0]</code> is <code>a[0,:,:,0]</code> (with however many colons in the middle make up the full number of dimensions in the array).</p>

<p>Interestingly, in python3, the Ellipsis literal (<code>...</code>) is usable outside the slice syntax, so you can actually write: </p>

<pre><code>&gt;&gt;&gt; ...
Ellipsis
</code></pre>

<p>Other than the various numeric types, no, I don't think it's used.  As far as I'm aware, it was added purely for numpy use and has no core support other than providing the object and corresponding syntax.  The object being there didn't require this, but the literal ""..."" support for slices did.</p>
",,
334,1,How do I remove packages installed with Python's easy_install?,"<p>Python's <code>easy_install</code> makes installing new packages extremely convenient. However, as far as I can tell, it doesn't implement the other common features of a dependency manager - listing and removing installed packages.</p>

<p>What is the best way of finding out what's installed, and what is the preferred way of removing installed packages? Are there any files that need to be updated if I remove packages manually (e.g. by <code>rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg</code> or similar)?</p>
","How do I remove packages installed with Python's easy_install?<p>Python's <code>easy_install</code> makes installing new packages extremely convenient. However, as far as I can tell, it doesn't implement the other common features of a dependency manager - listing and removing installed packages.</p>

<p>What is the best way of finding out what's installed, and what is the preferred way of removing installed packages? Are there any files that need to be updated if I remove packages manually (e.g. by <code>rm /usr/local/lib/python2.6/dist-packages/my_installed_pkg.egg</code> or similar)?</p>
",<python><packages><setuptools><easy-install>,packages installed easyinstall removing remove myinstalled convenient dist usr updated,"<p><a href=""http://pypi.python.org/pypi/pip/"" rel=""noreferrer"">pip</a>, an alternative to setuptools/easy_install, provides an ""uninstall"" command. </p>

<p>Install pip according to the <a href=""http://pip.readthedocs.org/en/stable/installing/"" rel=""noreferrer"">installation instructions</a>:</p>

<pre><code>$ wget https://bootstrap.pypa.io/get-pip.py
$ python get-pip.py
</code></pre>

<p>Then you can use <code>pip uninstall</code> to remove packages installed with <code>easy_install</code></p>
",,
335,3,What does the star and doublestar operator mean in a function call?,"<p>What does the <code>*</code> operator mean in Python, such as in code like <code>zip(*x)</code> or <code>f(**k)</code>?</p>

<ol>
<li>How is it handled internally in the interpreter?</li>
<li>Does it affect performance at all? Is it fast or slow?</li>
<li>When is it useful and when is it not?</li>
<li>Should it be used in a function declaration or in a call?</li>
</ol>
","What does the star and doublestar operator mean in a function call?<p>What does the <code>*</code> operator mean in Python, such as in code like <code>zip(*x)</code> or <code>f(**k)</code>?</p>

<ol>
<li>How is it handled internally in the interpreter?</li>
<li>Does it affect performance at all? Is it fast or slow?</li>
<li>When is it useful and when is it not?</li>
<li>Should it be used in a function declaration or in a call?</li>
</ol>
",<python><syntax><parameter-passing><iterable-unpacking><argument-unpacking>,operator mean doublestar handled affect internally star function slow declaration,"<p>The single star <code>*</code> unpacks the sequence/collection into positional arguments, so you can do this:</p>

<pre><code>def sum(a, b):
    return a + b

values = (1, 2)

s = sum(*values)
</code></pre>

<p>This will unpack the tuple so that it actually executes as:</p>

<pre><code>s = sum(1, 2)
</code></pre>

<p>The double star <code>**</code> does the same, only using a dictionary and thus named arguments:</p>

<pre><code>values = { 'a': 1, 'b': 2 }
s = sum(**values)
</code></pre>

<p>You can also combine:</p>

<pre><code>def sum(a, b, c, d):
    return a + b + c + d

values1 = (1, 2)
values2 = { 'c': 10, 'd': 15 }
s = sum(*values1, **values2)
</code></pre>

<p>will execute as:                                     </p>

<pre><code>s = sum(1, 2, c=10, d=15)
</code></pre>

<p>Also see section <a href=""http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists"" rel=""noreferrer"">4.7.4 - Unpacking Argument Lists</a> of the Python documentation.</p>

<hr>

<p>Additionally you can define functions to take <code>*x</code> and <code>**y</code> arguments, this allows a function to accept any number of positional and/or named arguments that aren't specifically named in the declaration.</p>

<p>Example:</p>

<pre><code>def sum(*values):
    s = 0
    for v in values:
        s = s + v
    return s

s = sum(1, 2, 3, 4, 5)
</code></pre>

<p>or with <code>**</code>:</p>

<pre><code>def get_a(**values):
    return values['a']

s = get_a(a=1, b=2)      # returns 1
</code></pre>

<p>this can allow you to specify a large number of optional parameters without having to declare them.</p>

<p>And again, you can combine:</p>

<pre><code>def sum(*values, **options):
    s = 0
    for i in values:
        s = s + i
    if ""neg"" in options:
        if options[""neg""]:
            s = -s
    return s

s = sum(1, 2, 3, 4, 5)            # returns 15
s = sum(1, 2, 3, 4, 5, neg=True)  # returns -15
s = sum(1, 2, 3, 4, 5, neg=False) # returns 15
</code></pre>
",,
336,3,How to serve static files in Flask,"<p>So this is embarrassing. I've got an application that I threw together in <code>Flask</code> and for now it is just serving up a single static HTML page with some links to CSS and JS. And I can't find where in the documentation <code>Flask</code> describes returning static files. Yes, I could use <code>render_template</code> but I know the data is not templatized. I'd have thought <code>send_file</code> or <code>url_for</code> was the right thing, but I could not get those to work. In the meantime, I am opening the files, reading content, and rigging up a <code>Response</code> with appropriate mimetype:</p>
<pre><code>import os.path

from flask import Flask, Response


app = Flask(__name__)
app.config.from_object(__name__)


def root_dir():  # pragma: no cover
    return os.path.abspath(os.path.dirname(__file__))


def get_file(filename):  # pragma: no cover
    try:
        src = os.path.join(root_dir(), filename)
        # Figure out how flask returns static files
        # Tried:
        # - render_template
        # - send_file
        # This should not be so non-obvious
        return open(src).read()
    except IOError as exc:
        return str(exc)


@app.route('/', methods=['GET'])
def metrics():  # pragma: no cover
    content = get_file('jenkins_analytics.html')
    return Response(content, mimetype=&quot;text/html&quot;)


@app.route('/', defaults={'path': ''})
@app.route('/&lt;path:path&gt;')
def get_resource(path):  # pragma: no cover
    mimetypes = {
        &quot;.css&quot;: &quot;text/css&quot;,
        &quot;.html&quot;: &quot;text/html&quot;,
        &quot;.js&quot;: &quot;application/javascript&quot;,
    }
    complete_path = os.path.join(root_dir(), path)
    ext = os.path.splitext(path)[1]
    mimetype = mimetypes.get(ext, &quot;text/html&quot;)
    content = get_file(complete_path)
    return Response(content, mimetype=mimetype)


if __name__ == '__main__':  # pragma: no cover
    app.run(port=80)
</code></pre>
<p>Someone want to give a code sample or url for this? I know this is going to be dead simple.</p>
","How to serve static files in Flask<p>So this is embarrassing. I've got an application that I threw together in <code>Flask</code> and for now it is just serving up a single static HTML page with some links to CSS and JS. And I can't find where in the documentation <code>Flask</code> describes returning static files. Yes, I could use <code>render_template</code> but I know the data is not templatized. I'd have thought <code>send_file</code> or <code>url_for</code> was the right thing, but I could not get those to work. In the meantime, I am opening the files, reading content, and rigging up a <code>Response</code> with appropriate mimetype:</p>
<pre><code>import os.path

from flask import Flask, Response


app = Flask(__name__)
app.config.from_object(__name__)


def root_dir():  # pragma: no cover
    return os.path.abspath(os.path.dirname(__file__))


def get_file(filename):  # pragma: no cover
    try:
        src = os.path.join(root_dir(), filename)
        # Figure out how flask returns static files
        # Tried:
        # - render_template
        # - send_file
        # This should not be so non-obvious
        return open(src).read()
    except IOError as exc:
        return str(exc)


@app.route('/', methods=['GET'])
def metrics():  # pragma: no cover
    content = get_file('jenkins_analytics.html')
    return Response(content, mimetype=&quot;text/html&quot;)


@app.route('/', defaults={'path': ''})
@app.route('/&lt;path:path&gt;')
def get_resource(path):  # pragma: no cover
    mimetypes = {
        &quot;.css&quot;: &quot;text/css&quot;,
        &quot;.html&quot;: &quot;text/html&quot;,
        &quot;.js&quot;: &quot;application/javascript&quot;,
    }
    complete_path = os.path.join(root_dir(), path)
    ext = os.path.splitext(path)[1]
    mimetype = mimetypes.get(ext, &quot;text/html&quot;)
    content = get_file(complete_path)
    return Response(content, mimetype=mimetype)


if __name__ == '__main__':  # pragma: no cover
    app.run(port=80)
</code></pre>
<p>Someone want to give a code sample or url for this? I know this is going to be dead simple.</p>
",<python><flask><static-files>,static files flask js serve rigging render template embarrassing url,"<p>The preferred method is to use NGINX or another web server to serve static files; they'll be able to do it more efficiently than Flask.</p>
<p>However, you can use <a href=""http://flask.pocoo.org/docs/latest/api/#flask.send_from_directory"" rel=""noreferrer""><code>send_from_directory</code></a> to send files from a directory, which can be pretty convenient in some situations:</p>
<pre><code>from flask import Flask, request, send_from_directory

# set the project root directory as the static folder, you can set others.
app = Flask(__name__, static_url_path='')

@app.route('/js/&lt;path:path&gt;')
def send_js(path):
    return send_from_directory('js', path)

if __name__ == &quot;__main__&quot;:
    app.run()
</code></pre>
<p>Alternatively, you could use <code>app.send_file</code> or <code>app.send_static_file</code>, but this is <strong>highly discouraged</strong> as it can lead to security risks with user-supplied paths; <code>send_from_directory</code> was designed to control those risks.</p>
",,
337,3,"What is the purpose of the single underscore ""_"" variable in Python?","<p>What is the meaning of <code>_</code> after <code>for</code> in this code?</p>
<pre><code>if tbh.bag:
    n = 0
    for _ in tbh.bag.atom_set():
        n += 1
</code></pre>
","What is the purpose of the single underscore ""_"" variable in Python?<p>What is the meaning of <code>_</code> after <code>for</code> in this code?</p>
<pre><code>if tbh.bag:
    n = 0
    for _ in tbh.bag.atom_set():
        n += 1
</code></pre>
",<python><variables><naming-conventions><metasyntactic-variable>,underscore meaning purpose single variable code python foo formatting formatted,"<p><code>_</code> has 3 main conventional uses in Python:</p>
<ol>
<li><p>To hold the result of the last executed expression in an interactive
interpreter session (see <a href=""https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers"" rel=""noreferrer"">docs</a>). This precedent was set by the standard CPython
interpreter, and other interpreters have followed suit</p>
</li>
<li><p>For translation lookup in i18n (see the
<a href=""https://docs.python.org/3/library/gettext.html#localizing-your-module"" rel=""noreferrer"">gettext</a>
documentation for example), as in code like</p>
<pre><code>raise forms.ValidationError(_(&quot;Please enter a correct username&quot;))
</code></pre>
</li>
<li><p>As a general purpose &quot;throwaway&quot; variable name:</p>
<ol>
<li><p>To indicate that part
of a function result is being deliberately ignored (Conceptually, it is being discarded.), as in code like:</p>
<pre><code>label, has_label, _ = text.partition(':')
</code></pre>
</li>
<li><p>As part of a function definition (using either <code>def</code> or <code>lambda</code>), where
the signature is fixed (e.g. by a callback or parent class API), but
this particular function implementation doesn't need all of the
parameters, as in code like:</p>
<pre><code>def callback(_):
    return True
</code></pre>
<p>[For a long time this answer didn't list this use case, but it came up often enough, as noted <a href=""https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python/5893946?noredirect=1#comment100906549_5893946"">here</a>, to be worth listing explicitly.]</p>
</li>
</ol>
<p>This use case can conflict with the translation lookup use case, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>
<p>Linters often recognize this use case. For example <code>year, month, day = date()</code> will raise a lint warning if <code>day</code> is not used later in the code. The fix, if <code>day</code> is truly not needed, is to write <code>year, month, _ = date()</code>. Same with lambda functions, <code>lambda arg: 1.0</code> creates a function requiring one argument but not using it, which will be caught by lint. The fix is to write <code>lambda _: 1.0</code>. An unused variable is often hiding a bug/typo (e.g. set <code>day</code> but use <code>dya</code> in the next line).</p>
<p>The pattern matching feature added in Python 3.10 elevated this usage from &quot;convention&quot; to &quot;language syntax&quot; where <code>match</code> statements are concerned: in match cases, <code>_</code> is a <a href=""https://docs.python.org/3/reference/compound_stmts.html#wildcard-patterns"" rel=""noreferrer"">wildcard pattern</a>, and the runtime doesn't even bind a value to the symbol in that case.</p>
<p>For other use cases, remember that <code>_</code> is still a valid variable name, and hence will still keep objects alive. In cases where this is undesirable (e.g. to release memory or external resources) an explicit <code>del name</code> call will both satisfy linters that the name is being used, <em>and</em> promptly clear the reference to the object.</p>
</li>
</ol>
",,
338,3,How to read/process command line arguments?,"<p>I am originally a C programmer. I have seen numerous tricks and ""hacks"" to read many different arguments. </p>

<p>What are some of the ways Python programmers can do this?</p>

<h3>Related</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/20063/whats-the-best-way-to-grab-parse-command-line-arguments-passed-to-a-python-scrip"">Whatƒ??s the best way to grab/parse command line arguments passed to a Python script?</a></li>
<li><a href=""https://stackoverflow.com/questions/362426/implementing-a-command-action-parameter-style-command-line-interfaces"">Implementing a ƒ??[command] [action] [parameter]ƒ? style command-line interfaces?</a></li>
<li><a href=""https://stackoverflow.com/questions/567879/how-can-i-process-command-line-arguments-in-python"">How can I process command line arguments in Python?</a></li>
<li><a href=""https://stackoverflow.com/questions/642648/how-do-i-format-positional-argument-help-using-pythons-optparse"">How do I format positional argument help using Pythonƒ??s optparse?</a></li>
</ul>
","How to read/process command line arguments?<p>I am originally a C programmer. I have seen numerous tricks and ""hacks"" to read many different arguments. </p>

<p>What are some of the ways Python programmers can do this?</p>

<h3>Related</h3>

<ul>
<li><a href=""https://stackoverflow.com/questions/20063/whats-the-best-way-to-grab-parse-command-line-arguments-passed-to-a-python-scrip"">Whatƒ??s the best way to grab/parse command line arguments passed to a Python script?</a></li>
<li><a href=""https://stackoverflow.com/questions/362426/implementing-a-command-action-parameter-style-command-line-interfaces"">Implementing a ƒ??[command] [action] [parameter]ƒ? style command-line interfaces?</a></li>
<li><a href=""https://stackoverflow.com/questions/567879/how-can-i-process-command-line-arguments-in-python"">How can I process command line arguments in Python?</a></li>
<li><a href=""https://stackoverflow.com/questions/642648/how-do-i-format-positional-argument-help-using-pythons-optparse"">How do I format positional argument help using Pythonƒ??s optparse?</a></li>
</ul>
",<python><command-line><command-line-arguments>,command arguments line process read related programmers optparse interfaces numerous,"<p>The canonical solution in the standard library is <code>argparse</code> (<a href=""https://docs.python.org/3/library/argparse.html"" rel=""noreferrer"">docs</a>):</p>

<p>Here is an example:</p>

<pre><code>from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument(""-f"", ""--file"", dest=""filename"",
                    help=""write report to FILE"", metavar=""FILE"")
parser.add_argument(""-q"", ""--quiet"",
                    action=""store_false"", dest=""verbose"", default=True,
                    help=""don't print status messages to stdout"")

args = parser.parse_args()
</code></pre>

<p><code>argparse</code> supports (among other things):</p>

<ul>
<li>Multiple options in any order.</li>
<li>Short and long options.</li>
<li>Default values.</li>
<li>Generation of a usage help message.</li>
</ul>
",,
339,2,"Creating an empty Pandas DataFrame, then filling it?","<p>I'm starting from the pandas DataFrame docs here: <a href=""http://pandas.pydata.org/pandas-docs/stable/dsintro.html"" rel=""noreferrer"">http://pandas.pydata.org/pandas-docs/stable/dsintro.html</a></p>

<p>I'd like to iteratively fill the DataFrame with values in a time series kind of calculation.
So basically, I'd like to initialize the DataFrame with columns A, B and timestamp rows, all 0 or all NaN.</p>

<p>I'd then add initial values and go over this data calculating the new row from the row before, say <code>row[A][t] = row[A][t-1]+1</code> or so.</p>

<p>I'm currently using the code as below, but I feel it's kind of ugly and there must be a  way to do this with a DataFrame directly, or just a better way in general.
Note: I'm using Python 2.7.</p>

<pre><code>import datetime as dt
import pandas as pd
import scipy as s

if __name__ == '__main__':
    base = dt.datetime.today().date()
    dates = [ base - dt.timedelta(days=x) for x in range(0,10) ]
    dates.sort()

    valdict = {}
    symbols = ['A','B', 'C']
    for symb in symbols:
        valdict[symb] = pd.Series( s.zeros( len(dates)), dates )

    for thedate in dates:
        if thedate &gt; dates[0]:
            for symb in valdict:
                valdict[symb][thedate] = 1+valdict[symb][thedate - dt.timedelta(days=1)]

    print valdict
</code></pre>
","Creating an empty Pandas DataFrame, then filling it?<p>I'm starting from the pandas DataFrame docs here: <a href=""http://pandas.pydata.org/pandas-docs/stable/dsintro.html"" rel=""noreferrer"">http://pandas.pydata.org/pandas-docs/stable/dsintro.html</a></p>

<p>I'd like to iteratively fill the DataFrame with values in a time series kind of calculation.
So basically, I'd like to initialize the DataFrame with columns A, B and timestamp rows, all 0 or all NaN.</p>

<p>I'd then add initial values and go over this data calculating the new row from the row before, say <code>row[A][t] = row[A][t-1]+1</code> or so.</p>

<p>I'm currently using the code as below, but I feel it's kind of ugly and there must be a  way to do this with a DataFrame directly, or just a better way in general.
Note: I'm using Python 2.7.</p>

<pre><code>import datetime as dt
import pandas as pd
import scipy as s

if __name__ == '__main__':
    base = dt.datetime.today().date()
    dates = [ base - dt.timedelta(days=x) for x in range(0,10) ]
    dates.sort()

    valdict = {}
    symbols = ['A','B', 'C']
    for symb in symbols:
        valdict[symb] = pd.Series( s.zeros( len(dates)), dates )

    for thedate in dates:
        if thedate &gt; dates[0]:
            for symb in valdict:
                valdict[symb][thedate] = 1+valdict[symb][thedate - dt.timedelta(days=1)]

    print valdict
</code></pre>
",<python><dataframe><pandas>,row dataframe pandas kind docs values pydata filling htmli dsintro,"<p>Here's a couple of suggestions:</p>

<p>Use <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.date_range.html"" rel=""noreferrer""><code>date_range</code></a> for the index:</p>

<pre><code>import datetime
import pandas as pd
import numpy as np

todays_date = datetime.datetime.now().date()
index = pd.date_range(todays_date-datetime.timedelta(10), periods=10, freq='D')

columns = ['A','B', 'C']
</code></pre>

<p><em>Note: we could create an empty DataFrame (with <code>NaN</code>s) simply by writing:</em></p>

<pre><code>df_ = pd.DataFrame(index=index, columns=columns)
df_ = df_.fillna(0) # with 0s rather than NaNs
</code></pre>

<p>To do these type of calculations for the data, use a numpy array:</p>

<pre><code>data = np.array([np.arange(10)]*3).T
</code></pre>

<p>Hence we can create the DataFrame:</p>

<pre><code>In [10]: df = pd.DataFrame(data, index=index, columns=columns)

In [11]: df
Out[11]: 
            A  B  C
2012-11-29  0  0  0
2012-11-30  1  1  1
2012-12-01  2  2  2
2012-12-02  3  3  3
2012-12-03  4  4  4
2012-12-04  5  5  5
2012-12-05  6  6  6
2012-12-06  7  7  7
2012-12-07  8  8  8
2012-12-08  9  9  9
</code></pre>
",,
340,3,What is monkey patching?,"<p>I am trying to understand, what is monkey patching or a monkey patch? </p>

<p>Is that something like methods/operators overloading or delegating? </p>

<p>Does it have anything common with these things?</p>
","What is monkey patching?<p>I am trying to understand, what is monkey patching or a monkey patch? </p>

<p>Is that something like methods/operators overloading or delegating? </p>

<p>Does it have anything common with these things?</p>
",<python><terminology><monkeypatching>,monkey patching delegating patch overloading operators common things methods understand,"<p>No, it's not like any of those things. It's simply the dynamic replacement of attributes at runtime.</p>

<p>For instance, consider a class that has a method <code>get_data</code>. This method does an external lookup (on a database or web API, for example), and various other methods in the class call it. However, in a unit test, you don't want to depend on the external data source - so you dynamically replace the <code>get_data</code> method with a stub that returns some fixed data.</p>

<p>Because Python classes are mutable, and methods are just attributes of the class, you can do this as much as you like - and, in fact, you can even replace classes and functions in a module in exactly the same way.</p>

<p>But, as a <a href=""https://stackoverflow.com/users/2810305/lutz-prechelt"">commenter</a> pointed out, use caution when monkeypatching: </p>

<ol>
<li><p>If anything else besides your test logic calls <code>get_data</code> as well, it will also call your monkey-patched replacement rather than the original -- which can be good or bad. Just beware. </p></li>
<li><p>If some variable or attribute exists that also points to the <code>get_data</code> function by the time you replace it, this alias will not change its meaning and will continue to point to the original <code>get_data</code>. (Why? Python just rebinds the name <code>get_data</code> in your class to some other function object; other name bindings are not impacted at all.) </p></li>
</ol>
",,
341,2,Pandas Merging 101,"<ul>
<li>How can I perform a (<code>INNER</code>| (<code>LEFT</code>|<code>RIGHT</code>|<code>FULL</code>) <code>OUTER</code>) <code>JOIN</code> with pandas?</li>
<li>How do I add NaNs for missing rows after a merge?</li>
<li>How do I get rid of NaNs after merging?</li>
<li>Can I merge on the index?</li>
<li>How do I merge multiple DataFrames?</li>
<li>Cross join with pandas</li>
<li><code>merge</code>? <code>join</code>? <code>concat</code>? <code>update</code>? Who? What? Why?!</li>
</ul>
<p>... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.</p>
<p>This Q&amp;A is meant to be the next installment in a series of helpful user guides on common pandas idioms (see <a href=""https://stackoverflow.com/questions/47152691/how-to-pivot-a-dataframe"">this post on pivoting</a>, and <a href=""https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio"">this post on concatenation</a>, which I will be touching on, later).</p>
<p>Please note that this post is <em>not</em> meant to be a replacement for <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html"" rel=""noreferrer"">the documentation</a>, so please read that as well! Some of the examples are taken from there.</p>
<hr />
<h3>Table of Contents</h3>
<p><sub>For ease of access.</sub></p>
<ul>
<li><p><a href=""https://stackoverflow.com/a/53645883/4909087"">Merging basics - basic types of joins</a> (read this first)</p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167356/4909087"">Index-based joins</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167327/4909087"">Generalizing to multiple DataFrames</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/53699013/4909087"">Cross join</a></p>
</li>
</ul>
","Pandas Merging 101<ul>
<li>How can I perform a (<code>INNER</code>| (<code>LEFT</code>|<code>RIGHT</code>|<code>FULL</code>) <code>OUTER</code>) <code>JOIN</code> with pandas?</li>
<li>How do I add NaNs for missing rows after a merge?</li>
<li>How do I get rid of NaNs after merging?</li>
<li>Can I merge on the index?</li>
<li>How do I merge multiple DataFrames?</li>
<li>Cross join with pandas</li>
<li><code>merge</code>? <code>join</code>? <code>concat</code>? <code>update</code>? Who? What? Why?!</li>
</ul>
<p>... and more. I've seen these recurring questions asking about various facets of the pandas merge functionality. Most of the information regarding merge and its various use cases today is fragmented across dozens of badly worded, unsearchable posts. The aim here is to collate some of the more important points for posterity.</p>
<p>This Q&amp;A is meant to be the next installment in a series of helpful user guides on common pandas idioms (see <a href=""https://stackoverflow.com/questions/47152691/how-to-pivot-a-dataframe"">this post on pivoting</a>, and <a href=""https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio"">this post on concatenation</a>, which I will be touching on, later).</p>
<p>Please note that this post is <em>not</em> meant to be a replacement for <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html"" rel=""noreferrer"">the documentation</a>, so please read that as well! Some of the examples are taken from there.</p>
<hr />
<h3>Table of Contents</h3>
<p><sub>For ease of access.</sub></p>
<ul>
<li><p><a href=""https://stackoverflow.com/a/53645883/4909087"">Merging basics - basic types of joins</a> (read this first)</p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167356/4909087"">Index-based joins</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167327/4909087"">Generalizing to multiple DataFrames</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/53699013/4909087"">Cross join</a></p>
</li>
</ul>
",<python><pandas><join><merge><concatenation>,merge join merging post pandas nans meant various index multiple,"<p>This post aims to give readers a primer on SQL-flavored merging with Pandas, how to use it, and when not to use it.</p>
<p>In particular, here's what this post will go through:</p>
<ul>
<li><p>The basics - types of joins (LEFT, RIGHT, OUTER, INNER)</p>
<ul>
<li>merging with different column names</li>
<li>merging with multiple columns</li>
<li>avoiding duplicate merge key column in output</li>
</ul>
</li>
</ul>
<p>What this post (and other posts by me on this thread) will not go through:</p>
<ul>
<li>Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.</li>
<li>Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!</li>
</ul>
<blockquote>
<p><strong>Note</strong>
Most examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified.</p>
<p>Furthermore, all the DataFrames here can be copied and replicated so
you can play with them. Also, see <a href=""https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python"">this
post</a>
on how to read DataFrames from your clipboard.</p>
<p>Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from <a href=""https://stackoverflow.com/a/55858991/4909087"">here</a>.</p>
</blockquote>
<hr />
<hr />
<h1>Enough talk - just show me how to use <code>merge</code>!</h1>
<h3>Setup &amp; Basics</h3>
<pre><code>np.random.seed(0)
left = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)})
right = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})

left

  key     value
0   A  1.764052
1   B  0.400157
2   C  0.978738
3   D  2.240893

right

  key     value
0   B  1.867558
1   D -0.977278
2   E  0.950088
3   F -0.151357
</code></pre>
<p>For the sake of simplicity, the key column has the same name (for now).</p>
<p>An <strong>INNER JOIN</strong> is represented by</p>
<img src=""https://i.stack.imgur.com/YvuOa.png"" width=""500""/>
<blockquote>
<p><strong>Note</strong>
This, along with the forthcoming figures all follow this convention:</p>
<ul>
<li><strong>blue</strong> indicates rows that are present in the merge result</li>
<li><strong>red</strong> indicates rows that are excluded from the result (i.e., removed)</li>
<li><strong>green</strong> indicates missing values that are replaced with <code>NaN</code>s in the result</li>
</ul>
</blockquote>
<p>To perform an INNER JOIN, call <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html"" rel=""noreferrer""><code>merge</code></a> on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments.</p>
<pre><code>left.merge(right, on='key')
# Or, if you want to be explicit
# left.merge(right, on='key', how='inner')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
</code></pre>
<p>This returns only rows from <code>left</code> and <code>right</code> which share a common key (in this example, &quot;B&quot; and &quot;D).</p>
<p>A <strong>LEFT OUTER JOIN</strong>, or LEFT JOIN  is represented by</p>
<img src=""https://i.stack.imgur.com/BECid.png"" width=""500"" />
<p>This can be performed by specifying <code>how='left'</code>.</p>
<pre><code>left.merge(right, on='key', how='left')

  key   value_x   value_y
0   A  1.764052       NaN
1   B  0.400157  1.867558
2   C  0.978738       NaN
3   D  2.240893 -0.977278
</code></pre>
<p>Carefully note the placement of NaNs here. If you specify <code>how='left'</code>, then only keys from <code>left</code> are used, and missing data from <code>right</code> is replaced by NaN.</p>
<p>And similarly, for a <strong>RIGHT OUTER JOIN</strong>, or RIGHT JOIN which is...</p>
<img src=""https://i.stack.imgur.com/8w1US.png"" width=""500"" />
<p>...specify <code>how='right'</code>:</p>
<pre><code>left.merge(right, on='key', how='right')

  key   value_x   value_y
0   B  0.400157  1.867558
1   D  2.240893 -0.977278
2   E       NaN  0.950088
3   F       NaN -0.151357
</code></pre>
<p>Here, keys from <code>right</code> are used, and missing data from <code>left</code> is replaced by NaN.</p>
<p>Finally, for the <strong>FULL OUTER JOIN</strong>, given by</p>
<img src=""https://i.stack.imgur.com/euLoe.png"" width=""500"" />
<p>specify <code>how='outer'</code>.</p>
<pre><code>left.merge(right, on='key', how='outer')

  key   value_x   value_y
0   A  1.764052       NaN
1   B  0.400157  1.867558
2   C  0.978738       NaN
3   D  2.240893 -0.977278
4   E       NaN  0.950088
5   F       NaN -0.151357
</code></pre>
<p>This uses the keys from both frames, and NaNs are inserted for missing rows in both.</p>
<p>The documentation summarizes these various merges nicely:</p>
<p><a href=""https://i.stack.imgur.com/5qDIy.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5qDIy.png"" alt=""Enter image description here"" /></a></p>
<hr />
<h3><strong>Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs</strong></h3>
<p>If you need <strong>LEFT-Excluding JOINs</strong> and <strong>RIGHT-Excluding JOINs</strong> in two steps.</p>
<p>For LEFT-Excluding JOIN, represented as</p>
<img src=""https://i.stack.imgur.com/bXWIV.png"" width=""500""/>
<p>Start by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from <code>left</code> only,</p>
<pre><code>(left.merge(right, on='key', how='left', indicator=True)
     .query('_merge == &quot;left_only&quot;')
     .drop('_merge', 1))

  key   value_x  value_y
0   A  1.764052      NaN
2   C  0.978738      NaN
</code></pre>
<p>Where,</p>
<pre><code>left.merge(right, on='key', how='left', <b>indicator=True</b>)

  key   value_x   value_y     _merge
0   A  1.764052       NaN  left_only
1   B  0.400157  1.867558       both
2   C  0.978738       NaN  left_only
3   D  2.240893 -0.977278       both</code></pre>
<p>And similarly, for a RIGHT-Excluding JOIN,</p>
<img src=""https://i.stack.imgur.com/Z0br2.png"" width=""500""/>
<pre><code>(left.merge(right, on='key', how='right', <b>indicator=True</b>)
     .query('_merge == ""right_only""')
     .drop('_merge', 1))

  key  value_x   value_y
2   E      NaN  0.950088
3   F      NaN -0.151357</code></pre>
<p>Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an <strong>ANTI-JOIN</strong>),</p>
<img src=""https://i.stack.imgur.com/PWMYd.png"" width=""500""/>
<p>You can do this in similar fashionƒ??</p>
<pre><code>(left.merge(right, on='key', how='outer', indicator=True)
     .query('_merge != &quot;both&quot;')
     .drop('_merge', 1))

  key   value_x   value_y
0   A  1.764052       NaN
2   C  0.978738       NaN
4   E       NaN  0.950088
5   F       NaN -0.151357
</code></pre>
<hr />
<h3><strong>Different names for key columns</strong></h3>
<p>If the key columns are named differentlyƒ??for example, <code>left</code> has <code>keyLeft</code>, and <code>right</code> has <code>keyRight</code> instead of <code>key</code>ƒ??then you will have to specify <code>left_on</code> and <code>right_on</code> as arguments instead of <code>on</code>:</p>
<pre><code>left2 = left.rename({'key':'keyLeft'}, axis=1)
right2 = right.rename({'key':'keyRight'}, axis=1)

left2

  keyLeft     value
0       A  1.764052
1       B  0.400157
2       C  0.978738
3       D  2.240893

right2

  keyRight     value
0        B  1.867558
1        D -0.977278
2        E  0.950088
3        F -0.151357
</code></pre>

<pre><code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')

  keyLeft   value_x keyRight   value_y
0       B  0.400157        B  1.867558
1       D  2.240893        D -0.977278
</code></pre>
<hr />
<h3><strong>Avoiding duplicate key column in output</strong></h3>
<p>When merging on <code>keyLeft</code> from <code>left</code> and <code>keyRight</code> from <code>right</code>, if you only want either of the <code>keyLeft</code> or <code>keyRight</code> (but not both) in the output, you can start by setting the index as a preliminary step.</p>
<pre><code>left3 = left2.set_index('keyLeft')
left3.merge(right2, left_index=True, right_on='keyRight')

    value_x keyRight   value_y
0  0.400157        B  1.867558
1  2.240893        D -0.977278
</code></pre>
<p>Contrast this with the output of the command just before (that is, the output of <code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')</code>), you'll notice <code>keyLeft</code> is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation.</p>
<hr />
<h3><strong>Merging only a single column from one of the <code>DataFrames</code></strong></h3>
<p>For example, consider</p>
<pre><code>right3 = right.assign(newcol=np.arange(len(right)))
right3
  key     value  newcol
0   B  1.867558       0
1   D -0.977278       1
2   E  0.950088       2
3   F -0.151357       3
</code></pre>
<p>If you are required to merge only &quot;new_val&quot; (without any of the other columns), you can usually just subset columns before merging:</p>
<pre><code>left.merge(right3[['key', 'newcol']], on='key')

  key     value  newcol
0   B  0.400157       0
1   D  2.240893       1
</code></pre>
<p>If you're doing a LEFT OUTER JOIN, a more performant solution would involve <code>map</code>:</p>
<pre><code># left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))
left.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))

  key     value  newcol
0   A  1.764052     NaN
1   B  0.400157     0.0
2   C  0.978738     NaN
3   D  2.240893     1.0
</code></pre>
<p>As mentioned, this is similar to, but faster than</p>
<pre><code>left.merge(right3[['key', 'newcol']], on='key', how='left')

  key     value  newcol
0   A  1.764052     NaN
1   B  0.400157     0.0
2   C  0.978738     NaN
3   D  2.240893     1.0
</code></pre>
<hr />
<h3><strong>Merging on multiple columns</strong></h3>
<p>To join on more than one column, specify a list for <code>on</code> (or <code>left_on</code> and <code>right_on</code>, as appropriate).</p>
<pre><code>left.merge(right, on=['key1', 'key2'] ...)
</code></pre>
<p>Or, in the event the names are different,</p>
<pre><code>left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])
</code></pre>
<hr />
<h3><strong>Other useful <code>merge*</code> operations and functions</strong></h3>
<ul>
<li><p>Merging a DataFrame with Series on index: See <a href=""https://stackoverflow.com/a/40762674/4909087"">this answer</a>.</p>
</li>
<li><p>Besides <code>merge</code>, <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html"" rel=""noreferrer""><code>DataFrame.update</code></a> and <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html"" rel=""noreferrer""><code>DataFrame.combine_first</code></a> are also used in certain cases to update one DataFrame with another.</p>
</li>
<li><p><a href=""http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html"" rel=""noreferrer""><code>pd.merge_ordered</code></a> is a useful function for ordered JOINs.</p>
</li>
<li><p><a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html"" rel=""noreferrer""><code>pd.merge_asof</code></a> (read: merge_asOf) is useful for <em>approximate</em> joins.</p>
</li>
</ul>
<p><strong>This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the <a href=""https://pandas.pydata.org/pandas-docs/stable/merging.html"" rel=""noreferrer"">documentation on <code>merge</code>, <code>join</code>, and <code>concat</code></a> as well as the links to the function specifications.</strong></p>
<hr />
<hr />
<h1>Continue Reading</h1>
<p>Jump to other topics in Pandas Merging 101 to continue learning:</p>
<ul>
<li><p><a href=""https://stackoverflow.com/a/53645883/4909087"">Merging basics - basic types of joins</a> <sup>*</sup></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167356/4909087"">Index-based joins</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/65167327/4909087"">Generalizing to multiple DataFrames</a></p>
</li>
<li><p><a href=""https://stackoverflow.com/a/53699013/4909087"">Cross join</a></p>
</li>
</ul>
<p><sub>*You are here.</sub></p>
",,
342,4,How can I get the concatenation of two lists in Python without modifying either one?,"<p>In Python, the only way I can find to concatenate two lists is <code>list.extend</code>, which modifies the first list. Is there any concatenation function that returns its result without modifying its arguments?</p>
","How can I get the concatenation of two lists in Python without modifying either one?<p>In Python, the only way I can find to concatenate two lists is <code>list.extend</code>, which modifies the first list. Is there any concatenation function that returns its result without modifying its arguments?</p>
",<python><concatenation><sequence><list-manipulation>,concatenation modifying lists modifies extend concatenate list arguments returns result,"<p>Yes: <code>list1 + list2</code>. This gives a new list that is the concatenation of <code>list1</code> and <code>list2</code>.</p>
",,
343,3,"What is a ""slug"" in Django?","<p>When I read Django code I often see in models what is called a ""slug"". I am not quite sure what this is, but I do know it has something to do with URLs. How and when is this slug-thing supposed to be used? </p>

<p>(I have read its definition in <a href=""http://docs.djangoproject.com/en/dev/glossary/"" rel=""noreferrer"">this glossary</a>.)</p>
","What is a ""slug"" in Django?<p>When I read Django code I often see in models what is called a ""slug"". I am not quite sure what this is, but I do know it has something to do with URLs. How and when is this slug-thing supposed to be used? </p>

<p>(I have read its definition in <a href=""http://docs.djangoproject.com/en/dev/glossary/"" rel=""noreferrer"">this glossary</a>.)</p>
",<python><django><url><django-models><slug>,slug django read glossary urls models definition supposed quite thing,"<p>A ""slug"" is a way of generating a valid URL, generally using data already obtained. For instance, a slug uses the title of an article to generate a URL. I advise to generate the slug by means of a function, given the title (or another piece of data), rather than setting it manually.</p>

<p>An example:</p>

<pre class=""lang-html prettyprint-override""><code>&lt;title&gt; The 46 Year Old Virgin &lt;/title&gt;
&lt;content&gt; A silly comedy movie &lt;/content&gt;
&lt;slug&gt; the-46-year-old-virgin &lt;/slug&gt;
</code></pre>

<p>Now let's pretend that we have a Django model such as:</p>

<pre class=""lang-python prettyprint-override""><code>class Article(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField(max_length=1000)
    slug = models.SlugField(max_length=40)
</code></pre>

<p>How would you reference this object with a URL and with a meaningful name? You could for instance use Article.id so the URL would look like this:</p>

<pre><code>www.example.com/article/23
</code></pre>

<p>Or, you might want to reference the title like this:</p>

<pre><code>www.example.com/article/The 46 Year Old Virgin
</code></pre>

<p>Since spaces aren't valid in URLs, they must be replaced by <code>%20</code>, which results in:</p>

<pre><code>www.example.com/article/The%2046%20Year%20Old%20Virgin
</code></pre>

<p>Both attempts are not resulting in very meaningful, easy-to-read URL. This is better:</p>

<pre><code>www.example.com/article/the-46-year-old-virgin
</code></pre>

<p>In this example, <code>the-46-year-old-virgin</code> is a slug: it is created from the title by down-casing all letters, and replacing spaces by hyphens <code>-</code>. </p>

<p>Also see the URL of this very web page for another example.</p>
",,
344,3,Which exception should I raise on bad/illegal argument combinations in Python?,"<p>I was wondering about the best practices for indicating invalid argument combinations in Python. I've come across a few situations where you have a function like so:</p>

<pre><code>def import_to_orm(name, save=False, recurse=False):
    """"""
    :param name: Name of some external entity to import.
    :param save: Save the ORM object before returning.
    :param recurse: Attempt to import associated objects as well. Because you
        need the original object to have a key to relate to, save must be
        `True` for recurse to be `True`.
    :raise BadValueError: If `recurse and not save`.
    :return: The ORM object.
    """"""
    pass
</code></pre>

<p>The only annoyance with this is that every package has its own, usually slightly differing <code>BadValueError</code>. I know that in Java there exists <code>java.lang.IllegalArgumentException</code> -- is it well understood that everybody will be creating their own <code>BadValueError</code>s in Python or is there another, preferred method?</p>
","Which exception should I raise on bad/illegal argument combinations in Python?<p>I was wondering about the best practices for indicating invalid argument combinations in Python. I've come across a few situations where you have a function like so:</p>

<pre><code>def import_to_orm(name, save=False, recurse=False):
    """"""
    :param name: Name of some external entity to import.
    :param save: Save the ORM object before returning.
    :param recurse: Attempt to import associated objects as well. Because you
        need the original object to have a key to relate to, save must be
        `True` for recurse to be `True`.
    :raise BadValueError: If `recurse and not save`.
    :return: The ORM object.
    """"""
    pass
</code></pre>

<p>The only annoyance with this is that every package has its own, usually slightly differing <code>BadValueError</code>. I know that in Java there exists <code>java.lang.IllegalArgumentException</code> -- is it well understood that everybody will be creating their own <code>BadValueError</code>s in Python or is there another, preferred method?</p>
",<python><exception><arguments>,combinations java argument everybody differing annoyance illegal indicating exception badvalueerror,"<p>I would just raise <a href=""https://docs.python.org/3/library/exceptions.html#ValueError"" rel=""noreferrer"">ValueError</a>, unless you need a more specific exception..</p>

<pre><code>def import_to_orm(name, save=False, recurse=False):
    if recurse and not save:
        raise ValueError(""save must be True if recurse is True"")
</code></pre>

<p>There's really no point in doing <code>class BadValueError(ValueError):pass</code> - your custom class is identical in use to <a href=""https://docs.python.org/3/library/exceptions.html#ValueError"" rel=""noreferrer"">ValueError</a>, so why not use that?</p>
",,
345,3,How do I get my Python program to sleep for 50 milliseconds?,"<p>How do I get my Python program to sleep for 50 milliseconds?</p>
","How do I get my Python program to sleep for 50 milliseconds?<p>How do I get my Python program to sleep for 50 milliseconds?</p>
",<python><timer><sleep>,sleep milliseconds program python zone forever formatted formats format form,"<p>Use <a href=""https://docs.python.org/library/time.html#time.sleep"" rel=""noreferrer""><code>time.sleep()</code></a></p>
<pre><code>from time import sleep
sleep(0.05)
</code></pre>
",,
346,0,How to make a python script wait for a pressed key?,"<p>I want my python script to wait until the user presses any key.<br />
How do I do that?</p>
","How to make a python script wait for a pressed key?<p>I want my python script to wait until the user presses any key.<br />
How do I do that?</p>
",<python><wait><keyboard-input>,wait key script presses pressed user make python want formats,"<p>In <strong>Python 3</strong> use <code>input()</code>:</p>

<pre><code>input(""Press Enter to continue..."")
</code></pre>

<p>In <strong>Python 2</strong> use <code>raw_input()</code>:    </p>

<pre><code>raw_input(""Press Enter to continue..."")
</code></pre>

<p>This only waits for the user to press enter though. </p>

<p>One might want to use <strong>msvcrt</strong> ((Windows/DOS only) The <em>msvcrt</em> module gives you access to a number of functions in the Microsoft Visual C/C++ Runtime Library (MSVCRT)):</p>

<pre><code>import msvcrt as m
def wait():
    m.getch()
</code></pre>

<p>This should wait for a key press.</p>

<p>Additional info:</p>

<p>in Python 3 <code>raw_input()</code> does not exist</p>

<p>In Python 2 <code>input(prompt)</code> is equivalent to <code>eval(raw_input(prompt))</code></p>
",,
347,3,How does collections.defaultdict work?,"<p>I've read the examples in python docs, but still can't figure out what this method means. Can somebody help? Here are two examples from the python docs</p>

<pre><code>&gt;&gt;&gt; from collections import defaultdict

&gt;&gt;&gt; s = 'mississippi'
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for k in s:
...     d[k] += 1
...
&gt;&gt;&gt; d.items()
[('i', 4), ('p', 2), ('s', 4), ('m', 1)]
</code></pre>

<p>and</p>

<pre><code>&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
...     d[k].append(v)
...
&gt;&gt;&gt; d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</code></pre>

<p>the parameters <code>int</code> and <code>list</code> are for what? </p>
","How does collections.defaultdict work?<p>I've read the examples in python docs, but still can't figure out what this method means. Can somebody help? Here are two examples from the python docs</p>

<pre><code>&gt;&gt;&gt; from collections import defaultdict

&gt;&gt;&gt; s = 'mississippi'
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; for k in s:
...     d[k] += 1
...
&gt;&gt;&gt; d.items()
[('i', 4), ('p', 2), ('s', 4), ('m', 1)]
</code></pre>

<p>and</p>

<pre><code>&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
...     d[k].append(v)
...
&gt;&gt;&gt; d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</code></pre>

<p>the parameters <code>int</code> and <code>list</code> are for what? </p>
",<python><dictionary><default-value><defaultdict>,examples defaultdict collections somebody parameters help means docs figure,"<p>Usually, a Python dictionary throws a <code>KeyError</code> if you try to get an item with a key that is not currently in the dictionary.  The <code>defaultdict</code> in contrast will simply create any items that you try to access (provided of course they do not exist yet).  To create such a ""default"" item, it calls the function object that you pass to the constructor (more precisely, it's an arbitrary ""callable"" object, which includes function and type objects).  For the first example, default items are created using <code>int()</code>, which will return the integer object <code>0</code>.  For the second example, default items are created using <code>list()</code>, which returns a new empty list object.</p>
",,
348,3,How to find out the number of CPUs using python,"<p>I want to know the number of CPUs on the local machine using Python. The result should be <code>user/real</code> as output by <code>time(1)</code> when called with an optimally scaling userspace-only program.</p>
","How to find out the number of CPUs using python<p>I want to know the number of CPUs on the local machine using Python. The result should be <code>user/real</code> as output by <code>time(1)</code> when called with an optimally scaling userspace-only program.</p>
",<python><system-information>,cpus number optimally userspace scaling machine using real local called,"<p>If you're interested into the number of processors <em>available</em> to your current process, you have to check <a href=""http://man7.org/linux/man-pages/man7/cpuset.7.html"" rel=""noreferrer"">cpuset</a> first. Otherwise (or if cpuset is not in use), <a href=""http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count"" rel=""noreferrer""><code>multiprocessing.cpu_count()</code></a> is the way to go in Python 2.6 and newer. The following method falls back to a couple of alternative methods in older versions of Python:</p>

<pre><code>import os
import re
import subprocess


def available_cpu_count():
    """""" Number of available virtual or physical CPUs on this system, i.e.
    user/real as output by time(1) when called with an optimally scaling
    userspace-only program""""""

    # cpuset
    # cpuset may restrict the number of *available* processors
    try:
        m = re.search(r'(?m)^Cpus_allowed:\s*(.*)$',
                      open('/proc/self/status').read())
        if m:
            res = bin(int(m.group(1).replace(',', ''), 16)).count('1')
            if res &gt; 0:
                return res
    except IOError:
        pass

    # Python 2.6+
    try:
        import multiprocessing
        return multiprocessing.cpu_count()
    except (ImportError, NotImplementedError):
        pass

    # https://github.com/giampaolo/psutil
    try:
        import psutil
        return psutil.cpu_count()   # psutil.NUM_CPUS on old versions
    except (ImportError, AttributeError):
        pass

    # POSIX
    try:
        res = int(os.sysconf('SC_NPROCESSORS_ONLN'))

        if res &gt; 0:
            return res
    except (AttributeError, ValueError):
        pass

    # Windows
    try:
        res = int(os.environ['NUMBER_OF_PROCESSORS'])

        if res &gt; 0:
            return res
    except (KeyError, ValueError):
        pass

    # jython
    try:
        from java.lang import Runtime
        runtime = Runtime.getRuntime()
        res = runtime.availableProcessors()
        if res &gt; 0:
            return res
    except ImportError:
        pass

    # BSD
    try:
        sysctl = subprocess.Popen(['sysctl', '-n', 'hw.ncpu'],
                                  stdout=subprocess.PIPE)
        scStdout = sysctl.communicate()[0]
        res = int(scStdout)

        if res &gt; 0:
            return res
    except (OSError, ValueError):
        pass

    # Linux
    try:
        res = open('/proc/cpuinfo').read().count('processor\t:')

        if res &gt; 0:
            return res
    except IOError:
        pass

    # Solaris
    try:
        pseudoDevices = os.listdir('/devices/pseudo/')
        res = 0
        for pd in pseudoDevices:
            if re.match(r'^cpuid@[0-9]+$', pd):
                res += 1

        if res &gt; 0:
            return res
    except OSError:
        pass

    # Other UNIXes (heuristic)
    try:
        try:
            dmesg = open('/var/run/dmesg.boot').read()
        except IOError:
            dmesgProcess = subprocess.Popen(['dmesg'], stdout=subprocess.PIPE)
            dmesg = dmesgProcess.communicate()[0]

        res = 0
        while '\ncpu' + str(res) + ':' in dmesg:
            res += 1

        if res &gt; 0:
            return res
    except OSError:
        pass

    raise Exception('Can not determine number of CPUs on this system')
</code></pre>
",,
349,5,How do I append one string to another in Python?,"<p>I want an efficient way to append one string to another in Python, other than the following.</p>

<pre><code>var1 = ""foo""
var2 = ""bar""
var3 = var1 + var2
</code></pre>

<p>Is there any good built-in method to use?</p>
","How do I append one string to another in Python?<p>I want an efficient way to append one string to another in Python, other than the following.</p>

<pre><code>var1 = ""foo""
var2 = ""bar""
var3 = var1 + var2
</code></pre>

<p>Is there any good built-in method to use?</p>
",<python><string><append>,append string efficient built good method following python use want,"<p>If you only have one reference to a string and you concatenate another string to the end, CPython now special cases this and tries to extend the string in place.</p>

<p>The end result is that the operation is amortized O(n).</p>

<p>e.g.</p>

<pre><code>s = """"
for i in range(n):
    s+=str(i)
</code></pre>

<p>used to be O(n^2), but now it is O(n).</p>

<p>From the source (bytesobject.c):</p>

<pre class=""lang-c prettyprint-override""><code>void
PyBytes_ConcatAndDel(register PyObject **pv, register PyObject *w)
{
    PyBytes_Concat(pv, w);
    Py_XDECREF(w);
}


/* The following function breaks the notion that strings are immutable:
   it changes the size of a string.  We get away with this only if there
   is only one module referencing the object.  You can also think of it
   as creating a new string object and destroying the old one, only
   more efficiently.  In any case, don't use this if the string may
   already be known to some other part of the code...
   Note that if there's not enough memory to resize the string, the original
   string object at *pv is deallocated, *pv is set to NULL, an ""out of
   memory"" exception is set, and -1 is returned.  Else (on success) 0 is
   returned, and the value in *pv may or may not be the same as on input.
   As always, an extra byte is allocated for a trailing \0 byte (newsize
   does *not* include that), and a trailing \0 byte is stored.
*/

int
_PyBytes_Resize(PyObject **pv, Py_ssize_t newsize)
{
    register PyObject *v;
    register PyBytesObject *sv;
    v = *pv;
    if (!PyBytes_Check(v) || Py_REFCNT(v) != 1 || newsize &lt; 0) {
        *pv = 0;
        Py_DECREF(v);
        PyErr_BadInternalCall();
        return -1;
    }
    /* XXX UNREF/NEWREF interface should be more symmetrical */
    _Py_DEC_REFTOTAL;
    _Py_ForgetReference(v);
    *pv = (PyObject *)
        PyObject_REALLOC((char *)v, PyBytesObject_SIZE + newsize);
    if (*pv == NULL) {
        PyObject_Del(v);
        PyErr_NoMemory();
        return -1;
    }
    _Py_NewReference(*pv);
    sv = (PyBytesObject *) *pv;
    Py_SIZE(sv) = newsize;
    sv-&gt;ob_sval[newsize] = '\0';
    sv-&gt;ob_shash = -1;          /* invalidate cached hash value */
    return 0;
}
</code></pre>

<p>It's easy enough to verify empirically.</p>

<pre>
$ python -m timeit -s""s=''"" ""for i in xrange(10):s+='a'""
1000000 loops, best of 3: 1.85 usec per loop
$ python -m timeit -s""s=''"" ""for i in xrange(100):s+='a'""
10000 loops, best of 3: 16.8 usec per loop
$ python -m timeit -s""s=''"" ""for i in xrange(1000):s+='a'""
10000 loops, best of 3: 158 usec per loop
$ python -m timeit -s""s=''"" ""for i in xrange(10000):s+='a'""
1000 loops, best of 3: 1.71 msec per loop
$ python -m timeit -s""s=''"" ""for i in xrange(100000):s+='a'""
10 loops, best of 3: 14.6 msec per loop
$ python -m timeit -s""s=''"" ""for i in xrange(1000000):s+='a'""
10 loops, best of 3: 173 msec per loop
</pre>

<p><strong>It's important</strong> however to note that this optimisation isn't part of the Python spec. It's only in the cPython implementation as far as I know. The same empirical testing on pypy or jython for example might show the older O(n**2) performance .</p>

<pre>
$ pypy -m timeit -s""s=''"" ""for i in xrange(10):s+='a'""
10000 loops, best of 3: 90.8 usec per loop
$ pypy -m timeit -s""s=''"" ""for i in xrange(100):s+='a'""
1000 loops, best of 3: 896 usec per loop
$ pypy -m timeit -s""s=''"" ""for i in xrange(1000):s+='a'""
100 loops, best of 3: 9.03 msec per loop
$ pypy -m timeit -s""s=''"" ""for i in xrange(10000):s+='a'""
10 loops, best of 3: 89.5 msec per loop
</pre>

<p>So far so good, but then,</p>

<pre>
$ pypy -m timeit -s""s=''"" ""for i in xrange(100000):s+='a'""
10 loops, best of 3: 12.8 sec per loop
</pre>

<p>ouch even worse than quadratic. So pypy is doing something that works well with short strings, but performs poorly for larger strings.</p>
",,
350,6,How to create a zip archive of a directory?,"<p>How can I create a zip archive of a directory structure in Python?</p>
","How to create a zip archive of a directory?<p>How can I create a zip archive of a directory structure in Python?</p>
",<python><zip><archive><python-zipfile>,archive zip create directory structure python zone format formatting,"<p>As others have pointed out, you should use <a href=""http://docs.python.org/library/zipfile.html"" rel=""noreferrer"">zipfile</a>. The documentation tells you what functions are available, but doesn't really explain how you can use them to zip an entire directory. I think it's easiest to explain with some example code:</p>
<pre><code>import os
import zipfile
    
def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file), 
                       os.path.relpath(os.path.join(root, file), 
                                       os.path.join(path, '..')))
      
zipf = zipfile.ZipFile('Python.zip', 'w', zipfile.ZIP_DEFLATED)
zipdir('tmp/', zipf)
zipf.close()
</code></pre>
",,
351,5,What is the difference between __init__ and __call__?,"<p>I want to know the difference between <code>__init__</code> and <code>__call__</code> methods.  </p>

<p>For example:</p>

<pre><code>class test:

  def __init__(self):
    self.a = 10

  def __call__(self): 
    b = 20
</code></pre>
","What is the difference between __init__ and __call__?<p>I want to know the difference between <code>__init__</code> and <code>__call__</code> methods.  </p>

<p>For example:</p>

<pre><code>class test:

  def __init__(self):
    self.a = 10

  def __call__(self): 
    b = 20
</code></pre>
",<python><class><oop><object><callable-object>,init difference methods know example want forgotten forth formatwhich formatting,"<p>The first is used to initialise newly created object, and receives arguments used to do that:</p>
<pre><code>class Foo:
    def __init__(self, a, b, c):
        # ...

x = Foo(1, 2, 3) # __init__
</code></pre>
<p>The second implements function call operator.</p>
<pre><code>class Foo:
    def __call__(self, a, b, c):
        # ...

x = Foo()
x(1, 2, 3) # __call__
</code></pre>
",,
352,3,Python try-else,"<p>What is the intended use of the optional <code>else</code> clause of the <code>try</code> statement?</p>
","Python try-else<p>What is the intended use of the optional <code>else</code> clause of the <code>try</code> statement?</p>
",<python><exception-handling>,try clause else optional intended statement use python zone formatted,"<p>The statements in the <code>else</code> block are executed if execution falls off the bottom of the <code>try</code> - if there was no exception. Honestly, I've never found a need.</p>

<p>However, <a href=""http://docs.python.org/tutorial/errors.html#handling-exceptions"" rel=""noreferrer"">Handling Exceptions</a> notes:</p>

<blockquote>
  <p>The use of the else clause is better
  than adding additional code to the try
  clause because it avoids accidentally
  catching an exception that wasnƒ??t
  raised by the code being protected by
  the try ... except statement.</p>
</blockquote>

<p>So, if you have a method that could, for example, throw an <code>IOError</code>, and you want to catch exceptions it raises, but there's something else you want to do if the first operation succeeds, and you <em>don't</em> want to catch an IOError from that operation, you might write something like this:</p>

<pre class=""lang-py prettyprint-override""><code>try:
    operation_that_can_throw_ioerror()
except IOError:
    handle_the_exception_somehow()
else:
    # we don't want to catch the IOError if it's raised
    another_operation_that_can_throw_ioerror()
finally:
    something_we_always_need_to_do()
</code></pre>

<p>If you just put <code>another_operation_that_can_throw_ioerror()</code> after <code>operation_that_can_throw_ioerror</code>, the <code>except</code> would catch the second call's errors. And if you put it after the whole <code>try</code> block, it'll always be run, and not until after the <code>finally</code>. The <code>else</code> lets you make sure</p>

<ol>
<li>the second operation's only run if there's no exception,</li>
<li>it's run before the <code>finally</code> block, and</li>
<li>any <code>IOError</code>s it raises aren't caught here</li>
</ol>
",,
353,3,Dump a NumPy array into a csv file,"<p>Is there a way to dump a NumPy array into a CSV file? I have a 2D NumPy array and need to dump it in human-readable format.</p>
","Dump a NumPy array into a csv file<p>Is there a way to dump a NumPy array into a CSV file? I have a 2D NumPy array and need to dump it in human-readable format.</p>
",<python><arrays><csv><numpy>,dump numpy array csv readable human format file need,"<p><a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html"" rel=""noreferrer""><code>numpy.savetxt</code></a> saves an array to a text file.</p>

<pre><code>import numpy
a = numpy.asarray([ [1,2,3], [4,5,6], [7,8,9] ])
numpy.savetxt(""foo.csv"", a, delimiter="","")
</code></pre>
",,
354,3,How can the Euclidean distance be calculated with NumPy?,"<p>I have two points in 3D:</p>
<pre><code>(xa, ya, za)
(xb, yb, zb)
</code></pre>
<p>And I want to calculate the distance:</p>
<pre><code>dist = sqrt((xa-xb)^2 + (ya-yb)^2 + (za-zb)^2)
</code></pre>
<p>What's the best way to do this with NumPy, or with Python in general? I have:</p>
<pre><code>import numpy
a = numpy.array((xa ,ya, za))
b = numpy.array((xb, yb, zb))
</code></pre>
","How can the Euclidean distance be calculated with NumPy?<p>I have two points in 3D:</p>
<pre><code>(xa, ya, za)
(xb, yb, zb)
</code></pre>
<p>And I want to calculate the distance:</p>
<pre><code>dist = sqrt((xa-xb)^2 + (ya-yb)^2 + (za-zb)^2)
</code></pre>
<p>What's the best way to do this with NumPy, or with Python in general? I have:</p>
<pre><code>import numpy
a = numpy.array((xa ,ya, za))
b = numpy.array((xb, yb, zb))
</code></pre>
",<python><numpy><euclidean-distance>,distance numpy calculated euclidean points general calculate best want way,"<p>Use <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html"" rel=""noreferrer""><code>numpy.linalg.norm</code></a>:</p>
<pre><code>dist = numpy.linalg.norm(a-b)
</code></pre>
<p>You can find the theory behind this in <a href=""https://rads.stackoverflow.com/amzn/click/com/0321321367"" rel=""noreferrer"" rel=""nofollow noreferrer"">Introduction to Data Mining</a></p>
<p>This works because the <strong>Euclidean distance</strong> is the <strong>l2 norm</strong>, and the default value of the <strong>ord</strong> parameter in <code>numpy.linalg.norm</code> is 2.</p>
<p><a href=""https://i.stack.imgur.com/iWe4J.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/iWe4J.png"" alt=""enter image description here"" /></a></p>
",,
355,5,Python int to binary string?,"<p>Are there any canned Python methods to convert an Integer (or Long) into a binary string in Python?</p>

<p>There are a myriad of dec2bin() functions out on Google... But I was hoping I could use a built-in function / library.</p>
","Python int to binary string?<p>Are there any canned Python methods to convert an Integer (or Long) into a binary string in Python?</p>

<p>There are a myriad of dec2bin() functions out on Google... But I was hoping I could use a built-in function / library.</p>
",<python><binary><string.format>,binary decbin myriad canned string hoping google functions built integer,"<p>Python's string format method can take a format spec. </p>

<pre><code>&gt;&gt;&gt; ""{0:b}"".format(37)
'100101'
</code></pre>

<p><a href=""https://docs.python.org/2/library/string.html#formatspec"" rel=""noreferrer"">Format spec docs for Python 2</a> </p>

<p><a href=""https://docs.python.org/3/library/string.html#formatspec"" rel=""noreferrer"">Format spec docs for Python 3</a></p>
",,
356,3,Get current time in milliseconds in Python?,"<p>How can I get the current time in milliseconds in Python? </p>
","Get current time in milliseconds in Python?<p>How can I get the current time in milliseconds in Python? </p>
",<python><datetime><time>,milliseconds current time python zone forgotten formatwhich formatting formatted formats,"<p>Using <a href=""https://docs.python.org/3/library/time.html#time.time"" rel=""noreferrer""><code>time.time()</code></a>:</p>
<pre><code>import time

def current_milli_time():
    return round(time.time() * 1000)
</code></pre>
<p>Then:</p>
<pre><code>&gt;&gt;&gt; current_milli_time()
1378761833768
</code></pre>
",,
357,6,Call a function from another file?,"<p>Set_up: I have a .py file for each function I need to use in a program.</p>

<p>In this program, I need to call the function from the external files.</p>

<p>I've tried:</p>

<pre><code>from file.py import function(a,b)
</code></pre>

<p>But I get the error:</p>

<blockquote>
  <p>ImportError: No module named 'file.py'; file is not a package</p>
</blockquote>

<p>How do I fix this problem?</p>
","Call a function from another file?<p>Set_up: I have a .py file for each function I need to use in a program.</p>

<p>In this program, I need to call the function from the external files.</p>

<p>I've tried:</p>

<pre><code>from file.py import function(a,b)
</code></pre>

<p>But I get the error:</p>

<blockquote>
  <p>ImportError: No module named 'file.py'; file is not a package</p>
</blockquote>

<p>How do I fix this problem?</p>
",<python><file><function><import>,file function program py package importerror need external setup named,"<p>There isn't any need to add <code>file.py</code> while importing. Just write <code>from file import function</code>, and then call the function using <code>function(a, b)</code>. The reason why this may not work, is because <code>file</code> is one of Python's core modules, so I suggest you change the name of your file.</p>

<p>Note that if you're trying to import functions from <code>a.py</code> to a file called <code>b.py</code>, you will need to make sure that <code>a.py</code> and <code>b.py</code> are in the same directory.</p>
",,
358,3,Is there a portable way to get the current username in Python?,"<p>Is there a portable way to get the current user's username in Python (i.e., one that works under both Linux and Windows, at least).  It would work like <code>os.getuid</code>:</p>

<pre><code>&gt;&gt;&gt; os.getuid()
42
&gt;&gt;&gt; os.getusername()
'slartibartfast'
</code></pre>

<p>I googled around and was surprised not to find a definitive answer (although perhaps I was just googling poorly).  The <a href=""http://www.python.org/doc/2.5.2/lib/module-pwd.html"" rel=""noreferrer"">pwd</a> module provides a relatively easy way to achieve this under, say, Linux, but it is not present on Windows.  Some of the search results suggested that getting the username under Windows can be complicated in certain circumstances (e.g., running as a Windows service), although I haven't verified that.</p>
","Is there a portable way to get the current username in Python?<p>Is there a portable way to get the current user's username in Python (i.e., one that works under both Linux and Windows, at least).  It would work like <code>os.getuid</code>:</p>

<pre><code>&gt;&gt;&gt; os.getuid()
42
&gt;&gt;&gt; os.getusername()
'slartibartfast'
</code></pre>

<p>I googled around and was surprised not to find a definitive answer (although perhaps I was just googling poorly).  The <a href=""http://www.python.org/doc/2.5.2/lib/module-pwd.html"" rel=""noreferrer"">pwd</a> module provides a relatively easy way to achieve this under, say, Linux, but it is not present on Windows.  Some of the search results suggested that getting the username under Windows can be complicated in certain circumstances (e.g., running as a Windows service), although I haven't verified that.</p>
",<python><portability>,username windows portable linux current complicated pwd relatively getuid verified,"<p>Look at <a href=""http://docs.python.org/library/getpass.html"" rel=""noreferrer"">getpass</a> module</p>

<pre><code>import getpass
getpass.getuser()
'kostya'
</code></pre>

<p>Availability: Unix, Windows</p>

<hr>

<p>p.s. Per comment below ""<em>this function looks at the values of various environment variables to determine the user name. Therefore, this function should not be relied on for access control purposes (or possibly any other purpose, since it allows any user to impersonate any other).</em>""</p>
",,
359,4,What's the idiomatic syntax for prepending to a short python list?,"<p><code>list.append()</code> is the obvious choice for adding to the end of a list.  Here's a <a href=""http://mail.python.org/pipermail/tutor/2005-March/036803.html"">reasonable explanation</a> for the missing <code>list.prepend()</code>.  Assuming my list is short and performance concerns are negligible, is </p>

<pre><code>list.insert(0, x)
</code></pre>

<p>or </p>

<pre><code>list[0:0] = [x]
</code></pre>

<p>idiomatic?</p>
","What's the idiomatic syntax for prepending to a short python list?<p><code>list.append()</code> is the obvious choice for adding to the end of a list.  Here's a <a href=""http://mail.python.org/pipermail/tutor/2005-March/036803.html"">reasonable explanation</a> for the missing <code>list.prepend()</code>.  Assuming my list is short and performance concerns are negligible, is </p>

<pre><code>list.insert(0, x)
</code></pre>

<p>or </p>

<pre><code>list[0:0] = [x]
</code></pre>

<p>idiomatic?</p>
",<python><list><prepend>,list idiomatic short negligible prepend concerns choice prepending assuming reasonable,"<p>The <code>s.insert(0, x)</code> form is the most common.</p>
<p>Whenever you see it though, it may be time to consider using a <a href=""http://docs.python.org/library/collections.html#collections.deque"" rel=""noreferrer"">collections.deque</a> instead of a list.  Prepending to a deque runs in constant time. Prepending to a list runs in linear time.</p>
",,
360,5,How to print instances of a class using print()?,"<p>I am learning the ropes in Python. When I try to print an object of class <strong><code>Foobar</code></strong> using the <strong><code>print()</code></strong> function, I get an output like this:</p>

<pre><code>&lt;__main__.Foobar instance at 0x7ff2a18c&gt;
</code></pre>

<p>Is there a way I can set the <em>printing behaviour</em> (or the <em>string representation</em>) of a <em>class</em> and its <em>objects</em>? For instance, when I call <code>print()</code> on a class object, I would like to print its data members in a certain format. How to achieve this in Python?</p>

<p>If you are familiar with C++ classes, the above can be achieved for the standard <strong><code>ostream</code></strong> by adding a <strong><code>friend ostream&amp; operator &lt;&lt; (ostream&amp;, const Foobar&amp;)</code></strong> method for the class.</p>
","How to print instances of a class using print()?<p>I am learning the ropes in Python. When I try to print an object of class <strong><code>Foobar</code></strong> using the <strong><code>print()</code></strong> function, I get an output like this:</p>

<pre><code>&lt;__main__.Foobar instance at 0x7ff2a18c&gt;
</code></pre>

<p>Is there a way I can set the <em>printing behaviour</em> (or the <em>string representation</em>) of a <em>class</em> and its <em>objects</em>? For instance, when I call <code>print()</code> on a class object, I would like to print its data members in a certain format. How to achieve this in Python?</p>

<p>If you are familiar with C++ classes, the above can be achieved for the standard <strong><code>ostream</code></strong> by adding a <strong><code>friend ostream&amp; operator &lt;&lt; (ostream&amp;, const Foobar&amp;)</code></strong> method for the class.</p>
",<python><class><printing><object>,print class ostream foobar object friend members achieved ropes const,"<pre><code>&gt;&gt;&gt; class Test:
...     def __repr__(self):
...         return &quot;Test()&quot;
...     def __str__(self):
...         return &quot;member of Test&quot;
... 
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; t
Test()
&gt;&gt;&gt; print(t)
member of Test
</code></pre>
<p>The <a href=""https://docs.python.org/reference/datamodel.html#object.__str__"" rel=""noreferrer""><code>__str__</code></a> method is what gets called happens when you print it, and the <a href=""https://docs.python.org/reference/datamodel.html#object.__repr__"" rel=""noreferrer""><code>__repr__</code></a> method is what happens when you use the <a href=""https://docs.python.org/library/functions.html#repr"" rel=""noreferrer""><code>repr()</code></a> function (or when you look at it with the interactive prompt).</p>
<p>If no <code>__str__</code> method is given, Python will print the result of <code>__repr__</code> instead. If you define <code>__str__</code> but not <code>__repr__</code>, Python will use what you see above as the <code>__repr__</code>, but still use <code>__str__</code> for printing.</p>
",,
361,3,How can I represent an infinite number in Python?,"<p>How can I represent an infinite number in python? No matter which number you enter in the program, no number should be greater than this representation of infinity.</p>
","How can I represent an infinite number in Python?<p>How can I represent an infinite number in python? No matter which number you enter in the program, no number should be greater than this representation of infinity.</p>
",<python><infinite><infinity>,number infinite represent infinity enter greater representation matter program python,"<p>In Python, you can do:</p>

<pre><code>test = float(""inf"")
</code></pre>

<p>In Python 3.5, you can do:</p>

<pre><code>import math
test = math.inf
</code></pre>

<p>And then:</p>

<pre><code>test &gt; 1
test &gt; 10000
test &gt; x
</code></pre>

<p>Will always be true. Unless of course, as pointed out, x is also infinity or ""nan"" (""not a number"").</p>

<p>Additionally (Python 2.x ONLY), in a comparison to <code>Ellipsis</code>, <code>float(inf)</code> is lesser, e.g:</p>

<pre><code>float('inf') &lt; Ellipsis
</code></pre>

<p>would return true.</p>
",,
362,5,How do I do a case-insensitive string comparison?,"<p>How can I do case insensitive string comparison in Python?</p>

<p>I would like to encapsulate comparison of a regular strings to a repository string using in a very simple and Pythonic way. I also would like to have ability to look up values in a dict hashed by strings using regular python strings.</p>
","How do I do a case-insensitive string comparison?<p>How can I do case insensitive string comparison in Python?</p>

<p>I would like to encapsulate comparison of a regular strings to a repository string using in a very simple and Pythonic way. I also would like to have ability to look up values in a dict hashed by strings using regular python strings.</p>
",<python><comparison><case-insensitive>,comparison insensitive strings regular string case hashed encapsulate ability repository,"<p>Assuming ASCII strings:</p>
<pre><code>string1 = 'Hello'
string2 = 'hello'

if string1.lower() == string2.lower():
    print(&quot;The strings are the same (case insensitive)&quot;)
else:
    print(&quot;The strings are NOT the same (case insensitive)&quot;)
</code></pre>
<p>As of Python 3.3, <a href=""https://docs.python.org/3/library/stdtypes.html#str.casefold"" rel=""noreferrer"">casefold()</a> is a better alternative:</p>
<pre><code>string1 = 'Hello'
string2 = 'hello'

if string1.casefold() == string2.casefold():
    print(&quot;The strings are the same (case insensitive)&quot;)
else:
    print(&quot;The strings are NOT the same (case insensitive)&quot;)
</code></pre>
<p>If you want a more comprehensive solution that handles more complex unicode comparisons, see other answers.</p>
",,
363,5,What is the quickest way to HTTP GET in Python?,"<p>What is the quickest way to HTTP GET in Python if I know the content will be a string? I am searching the documentation for a quick one-liner like:</p>

<pre><code>contents = url.get(""http://example.com/foo/bar"")
</code></pre>

<p>But all I can find using Google are <code>httplib</code> and <code>urllib</code> - and I am unable to find a shortcut in those libraries.</p>

<p>Does standard Python 2.5 have a shortcut in some form as above, or should I write a function <code>url_get</code>?</p>

<ol>
<li>I would prefer not to capture the output of shelling out to <code>wget</code> or <code>curl</code>.</li>
</ol>
","What is the quickest way to HTTP GET in Python?<p>What is the quickest way to HTTP GET in Python if I know the content will be a string? I am searching the documentation for a quick one-liner like:</p>

<pre><code>contents = url.get(""http://example.com/foo/bar"")
</code></pre>

<p>But all I can find using Google are <code>httplib</code> and <code>urllib</code> - and I am unable to find a shortcut in those libraries.</p>

<p>Does standard Python 2.5 have a shortcut in some form as above, or should I write a function <code>url_get</code>?</p>

<ol>
<li>I would prefer not to capture the output of shelling out to <code>wget</code> or <code>curl</code>.</li>
</ol>
",<python><http><networking>,shortcut quickest http shelling urlget curl urllib capture wget,"<p>Python 3:</p>

<pre><code>import urllib.request
contents = urllib.request.urlopen(""http://example.com/foo/bar"").read()
</code></pre>

<p>Python 2:</p>

<pre><code>import urllib2
contents = urllib2.urlopen(""http://example.com/foo/bar"").read()
</code></pre>

<p>Documentation for <a href=""https://docs.python.org/library/urllib.request.html"" rel=""noreferrer""><code>urllib.request</code></a> and <a href=""https://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects"" rel=""noreferrer""><code>read</code></a>.</p>
",,
364,5,What does 'super' do in Python? - difference between super().__init__() and explicit superclass __init__(),"<p>What's the difference between:</p>

<pre><code>class Child(SomeBaseClass):
    def __init__(self):
        super(Child, self).__init__()
</code></pre>

<p>and:</p>

<pre><code>class Child(SomeBaseClass):
    def __init__(self):
        SomeBaseClass.__init__(self)
</code></pre>

<p>I've seen <code>super</code> being used quite a lot in classes with only single inheritance. I can see why you'd use it in multiple inheritance but am unclear as to what the advantages are of using it in this kind of situation.</p>
","What does 'super' do in Python? - difference between super().__init__() and explicit superclass __init__()<p>What's the difference between:</p>

<pre><code>class Child(SomeBaseClass):
    def __init__(self):
        super(Child, self).__init__()
</code></pre>

<p>and:</p>

<pre><code>class Child(SomeBaseClass):
    def __init__(self):
        SomeBaseClass.__init__(self)
</code></pre>

<p>I've seen <code>super</code> being used quite a lot in classes with only single inheritance. I can see why you'd use it in multiple inheritance but am unclear as to what the advantages are of using it in this kind of situation.</p>
",<python><oop><inheritance><multiple-inheritance><super>,super inheritance init difference superclass situation unclear explicit advantages lot,"<p>The benefits of <code>super()</code> in single-inheritance are minimal -- mostly, you don't have to hard-code the name of the base class into every method that uses its parent methods.</p>

<p>However, it's almost impossible to use multiple-inheritance without <code>super()</code>. This includes common idioms like mixins, interfaces, abstract classes, etc. This extends to code that later extends yours. If somebody later wanted to write a class that extended <code>Child</code> and a mixin, their code would not work properly.</p>
",,
365,3,Asking the user for input until they give a valid response,"<p>I am writing a program that accepts an input from the user.</p>

<pre><code>#note: Python 2.7 users should use `raw_input`, the equivalent of 3.X's `input`
age = int(input(""Please enter your age: ""))
if age &gt;= 18: 
    print(""You are able to vote in the United States!"")
else:
    print(""You are not able to vote in the United States."")
</code></pre>

<p>The program works as expected as long as the the user enters meaningful data. </p>

<pre class=""lang-none prettyprint-override""><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: 23
You are able to vote in the United States!
</code></pre>

<p>But it fails if the user enters invalid data:</p>

<pre class=""lang-none prettyprint-override""><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: dickety six
Traceback (most recent call last):
  File ""canyouvote.py"", line 1, in &lt;module&gt;
    age = int(input(""Please enter your age: ""))
ValueError: invalid literal for int() with base 10: 'dickety six'
</code></pre>

<p>Instead of crashing, I would like the program to ask for the input again. Like this:</p>

<pre class=""lang-none prettyprint-override""><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: dickety six
Sorry, I didn't understand that.
Please enter your age: 26
You are able to vote in the United States!
</code></pre>

<p>How can I make the program ask for valid inputs instead of crashing when non-sensical data is entered?</p>

<p>How can I reject values like <code>-1</code>, which is a valid <code>int</code>, but nonsensical in this context?</p>
","Asking the user for input until they give a valid response<p>I am writing a program that accepts an input from the user.</p>

<pre><code>#note: Python 2.7 users should use `raw_input`, the equivalent of 3.X's `input`
age = int(input(""Please enter your age: ""))
if age &gt;= 18: 
    print(""You are able to vote in the United States!"")
else:
    print(""You are not able to vote in the United States."")
</code></pre>

<p>The program works as expected as long as the the user enters meaningful data. </p>

<pre class=""lang-none prettyprint-override""><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: 23
You are able to vote in the United States!
</code></pre>

<p>But it fails if the user enters invalid data:</p>

<pre class=""lang-none prettyprint-override""><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: dickety six
Traceback (most recent call last):
  File ""canyouvote.py"", line 1, in &lt;module&gt;
    age = int(input(""Please enter your age: ""))
ValueError: invalid literal for int() with base 10: 'dickety six'
</code></pre>

<p>Instead of crashing, I would like the program to ask for the input again. Like this:</p>

<pre class=""lang-none prettyprint-override""><code>C:\Python\Projects&gt; canyouvote.py
Please enter your age: dickety six
Sorry, I didn't understand that.
Please enter your age: 26
You are able to vote in the United States!
</code></pre>

<p>How can I make the program ask for valid inputs instead of crashing when non-sensical data is entered?</p>

<p>How can I reject values like <code>-1</code>, which is a valid <code>int</code>, but nonsensical in this context?</p>
",<python>,valid user program input crashing enters ask data instead like,"<p>The simplest way to accomplish this is to put the <code>input</code> method in a while loop. Use <a href=""https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops"" rel=""noreferrer""><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>

<h2>When Your Input Might Raise an Exception</h2>

<p>Use <a href=""https://docs.python.org/3/tutorial/errors.html#handling-exceptions"" rel=""noreferrer""><code>try</code> and <code>except</code></a> to detect when the user enters data that can't be parsed.</p>

<pre><code>while True:
    try:
        # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input
        age = int(input(""Please enter your age: ""))
    except ValueError:
        print(""Sorry, I didn't understand that."")
        #better try again... Return to the start of the loop
        continue
    else:
        #age was successfully parsed!
        #we're ready to exit the loop.
        break
if age &gt;= 18: 
    print(""You are able to vote in the United States!"")
else:
    print(""You are not able to vote in the United States."")
</code></pre>

<h2>Implementing Your Own Validation Rules</h2>

<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>

<pre><code>while True:
    data = input(""Please enter a loud message (must be all caps): "")
    if not data.isupper():
        print(""Sorry, your response was not loud enough."")
        continue
    else:
        #we're happy with the value given.
        #we're ready to exit the loop.
        break

while True:
    data = input(""Pick an answer from A to D:"")
    if data.lower() not in ('a', 'b', 'c', 'd'):
        print(""Not an appropriate choice."")
    else:
        break
</code></pre>

<h2>Combining Exception Handling and Custom Validation</h2>

<p>Both of the above techniques can be combined into one loop.</p>

<pre><code>while True:
    try:
        age = int(input(""Please enter your age: ""))
    except ValueError:
        print(""Sorry, I didn't understand that."")
        continue

    if age &lt; 0:
        print(""Sorry, your response must not be negative."")
        continue
    else:
        #age was successfully parsed, and we're happy with its value.
        #we're ready to exit the loop.
        break
if age &gt;= 18: 
    print(""You are able to vote in the United States!"")
else:
    print(""You are not able to vote in the United States."")
</code></pre>

<h2>Encapsulating it All in a Function</h2>

<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>

<pre><code>def get_non_negative_int(prompt):
    while True:
        try:
            value = int(input(prompt))
        except ValueError:
            print(""Sorry, I didn't understand that."")
            continue

        if value &lt; 0:
            print(""Sorry, your response must not be negative."")
            continue
        else:
            break
    return value

age = get_non_negative_int(""Please enter your age: "")
kids = get_non_negative_int(""Please enter the number of children you have: "")
salary = get_non_negative_int(""Please enter your yearly earnings, in dollars: "")
</code></pre>

<h3>Putting It All Together</h3>

<p>You can extend this idea to make a very generic input function:</p>

<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):
    if min_ is not None and max_ is not None and max_ &lt; min_:
        raise ValueError(""min_ must be less than or equal to max_."")
    while True:
        ui = input(prompt)
        if type_ is not None:
            try:
                ui = type_(ui)
            except ValueError:
                print(""Input type must be {0}."".format(type_.__name__))
                continue
        if max_ is not None and ui &gt; max_:
            print(""Input must be less than or equal to {0}."".format(max_))
        elif min_ is not None and ui &lt; min_:
            print(""Input must be greater than or equal to {0}."".format(min_))
        elif range_ is not None and ui not in range_:
            if isinstance(range_, range):
                template = ""Input must be between {0.start} and {0.stop}.""
                print(template.format(range_))
            else:
                template = ""Input must be {0}.""
                if len(range_) == 1:
                    print(template.format(*range_))
                else:
                    expected = "" or "".join((
                        "", "".join(str(x) for x in range_[:-1]),
                        str(range_[-1])
                    ))
                    print(template.format(expected))
        else:
            return ui
</code></pre>

<p>With usage such as:</p>

<pre><code>age = sanitised_input(""Enter your age: "", int, 1, 101)
answer = sanitised_input(""Enter your answer: "", str.lower, range_=('a', 'b', 'c', 'd'))
</code></pre>

<h2>Common Pitfalls, and Why you Should Avoid Them</h2>

<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>

<p>This method works but is generally considered poor style:</p>

<pre><code>data = input(""Please enter a loud message (must be all caps): "")
while not data.isupper():
    print(""Sorry, your response was not loud enough."")
    data = input(""Please enter a loud message (must be all caps): "")
</code></pre>

<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href=""http://en.wikipedia.org/wiki/Don%27t_repeat_yourself"" rel=""noreferrer"">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>

<h3>Recursion Will Blow Your Stack</h3>

<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>

<pre><code>def get_non_negative_int(prompt):
    try:
        value = int(input(prompt))
    except ValueError:
        print(""Sorry, I didn't understand that."")
        return get_non_negative_int(prompt)

    if value &lt; 0:
        print(""Sorry, your response must not be negative."")
        return get_non_negative_int(prompt)
    else:
        return value
</code></pre>

<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think ""no fool would make 1000 mistakes in a row"", but you're underestimating the ingenuity of fools!</p>
",,
366,2,How to convert index of a pandas dataframe into a column,"<p>This seems rather obvious, but I can't seem to figure out how to convert an index of data frame to a column?</p>

<p>For example:</p>

<pre><code>df=
        gi       ptt_loc
 0  384444683      593  
 1  384444684      594 
 2  384444686      596  
</code></pre>

<p>To,</p>

<pre><code>df=
    index1    gi       ptt_loc
 0  0     384444683      593  
 1  1     384444684      594 
 2  2     384444686      596  
</code></pre>
","How to convert index of a pandas dataframe into a column<p>This seems rather obvious, but I can't seem to figure out how to convert an index of data frame to a column?</p>

<p>For example:</p>

<pre><code>df=
        gi       ptt_loc
 0  384444683      593  
 1  384444684      594 
 2  384444686      596  
</code></pre>

<p>To,</p>

<pre><code>df=
    index1    gi       ptt_loc
 0  0     384444683      593  
 1  1     384444684      594 
 2  2     384444686      596  
</code></pre>
",<python><pandas><dataframe><indexing><series>,index convert frame obvious figure column data dataframe pandas,"<p>either:</p>

<pre><code>df['index1'] = df.index
</code></pre>

<p>or, <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html"" rel=""noreferrer""><code>.reset_index</code></a>:</p>

<pre><code>df.reset_index(level=0, inplace=True)
</code></pre>

<hr>

<p>so, if you have a multi-index frame with 3 levels of index, like:</p>

<pre><code>&gt;&gt;&gt; df
                       val
tick       tag obs        
2016-02-26 C   2    0.0139
2016-02-27 A   2    0.5577
2016-02-28 C   6    0.0303
</code></pre>

<p>and you want to convert the 1st (<code>tick</code>) and 3rd (<code>obs</code>) levels in the index into columns, you would do:</p>

<pre><code>&gt;&gt;&gt; df.reset_index(level=['tick', 'obs'])
          tick  obs     val
tag                        
C   2016-02-26    2  0.0139
A   2016-02-27    2  0.5577
C   2016-02-28    6  0.0303
</code></pre>
",,
367,6,Unzipping files in Python,"<p>I read through the <a href=""https://docs.python.org/3/library/zipfile.html"" rel=""noreferrer""><code>zipfile</code> documentation</a>, but couldn't understand how to <em>unzip</em> a file, only how to zip a file. How do I unzip all the contents of a zip file into the same directory?</p>
","Unzipping files in Python<p>I read through the <a href=""https://docs.python.org/3/library/zipfile.html"" rel=""noreferrer""><code>zipfile</code> documentation</a>, but couldn't understand how to <em>unzip</em> a file, only how to zip a file. How do I unzip all the contents of a zip file into the same directory?</p>
",<python><zip><unzip><zipfile>,unzip zip file zipfile unzipping contents python read understand documentation,"<pre><code>import zipfile
with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:
    zip_ref.extractall(directory_to_extract_to)
</code></pre>

<p>That's pretty much it!</p>
",,
368,5,Does Python have ƒ??privateƒ? variables in classes?,"<p>I'm coming from the Java world and reading Bruce Eckels' <em>Python 3 Patterns, Recipes and Idioms</em>. </p>

<p>While reading about classes, it goes on to say that in Python there is no need to declare instance variables. You just use them in the constructor, and boom, they are there. </p>

<p>So for example:</p>

<pre><code>class Simple:
    def __init__(self, s):
        print(""inside the simple constructor"")
        self.s = s

    def show(self):
        print(self.s)

    def showMsg(self, msg):
        print(msg + ':', self.show())
</code></pre>

<p>If thatƒ??s true, then any object of class <code>Simple</code> can just change the value of variable <code>s</code> outside of the class. </p>

<p>For example: </p>

<pre><code>if __name__ == ""__main__"":
    x = Simple(""constructor argument"")
    x.s = ""test15"" # this changes the value
    x.show()
    x.showMsg(""A message"")
</code></pre>

<p>In Java, we have been taught about public/private/protected variables.  Those keywords make sense because at times you want variables in a class to which no one outside the class has access to. </p>

<p>Why is that not required in Python?</p>
","Does Python have ƒ??privateƒ? variables in classes?<p>I'm coming from the Java world and reading Bruce Eckels' <em>Python 3 Patterns, Recipes and Idioms</em>. </p>

<p>While reading about classes, it goes on to say that in Python there is no need to declare instance variables. You just use them in the constructor, and boom, they are there. </p>

<p>So for example:</p>

<pre><code>class Simple:
    def __init__(self, s):
        print(""inside the simple constructor"")
        self.s = s

    def show(self):
        print(self.s)

    def showMsg(self, msg):
        print(msg + ':', self.show())
</code></pre>

<p>If thatƒ??s true, then any object of class <code>Simple</code> can just change the value of variable <code>s</code> outside of the class. </p>

<p>For example: </p>

<pre><code>if __name__ == ""__main__"":
    x = Simple(""constructor argument"")
    x.s = ""test15"" # this changes the value
    x.show()
    x.showMsg(""A message"")
</code></pre>

<p>In Java, we have been taught about public/private/protected variables.  Those keywords make sense because at times you want variables in a class to which no one outside the class has access to. </p>

<p>Why is that not required in Python?</p>
",<python><class><private>,variables class private outside java classes reading eckels recipes bruce,"<p>It's cultural.  In Python, you don't write to other classes' instance or class variables.  In Java, nothing prevents you from doing the same if you <em>really</em> want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.</p>

<p>If you want to emulate private variables for some reason, you can always use the <code>__</code> prefix from <a href=""https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables"" rel=""noreferrer"">PEP 8</a>. Python mangles the names of variables like <code>__foo</code> so that they're not easily visible to code outside the class that contains them (although you <em>can</em> get around it if you're determined enough, just like you <em>can</em> get around Java's protections if you work at it).</p>

<p>By the same convention, the <code>_</code> prefix means <strong>stay away even if you're not technically prevented from doing so</strong>. You don't play around with another class's variables that look like <code>__foo</code> or <code>_bar</code>.</p>
",,
369,2,Set value for particular cell in pandas DataFrame using index,"<p>I have created a Pandas DataFrame</p>
<pre><code>df = DataFrame(index=['A','B','C'], columns=['x','y'])
</code></pre>
<p>and have got this</p>
<pre>
    x    y
A  NaN  NaN
B  NaN  NaN
C  NaN  NaN
</pre>
<p>Now, I would like to assign a value to particular cell, for example to row <code>C</code> and column <code>x</code>.
I would expect to get this result:</p>
<pre>
    x    y
A  NaN  NaN
B  NaN  NaN
C  10  NaN
</pre>
<p>with this code:</p>
<pre><code>df.xs('C')['x'] = 10
</code></pre>
<p>However, the contents of <code>df</code> has not changed. The dataframe contains yet again only <code>NaN</code>s.</p>
<p>Any suggestions?</p>
","Set value for particular cell in pandas DataFrame using index<p>I have created a Pandas DataFrame</p>
<pre><code>df = DataFrame(index=['A','B','C'], columns=['x','y'])
</code></pre>
<p>and have got this</p>
<pre>
    x    y
A  NaN  NaN
B  NaN  NaN
C  NaN  NaN
</pre>
<p>Now, I would like to assign a value to particular cell, for example to row <code>C</code> and column <code>x</code>.
I would expect to get this result:</p>
<pre>
    x    y
A  NaN  NaN
B  NaN  NaN
C  10  NaN
</pre>
<p>with this code:</p>
<pre><code>df.xs('C')['x'] = 10
</code></pre>
<p>However, the contents of <code>df</code> has not changed. The dataframe contains yet again only <code>NaN</code>s.</p>
<p>Any suggestions?</p>
",<python><pandas><dataframe><cell><nan>,cell particular dataframe pandas value dataframe nan index assign,"<p><a href=""https://stackoverflow.com/a/24517695/190597"">RukTech's answer</a>, <code>df.set_value('C', 'x', 10)</code>, is far and away faster than the options I've suggested below. However, it has been <a href=""https://github.com/pandas-dev/pandas/issues/15269"" rel=""noreferrer""><strong>slated for deprecation</strong></a>.</p>

<p>Going forward, the <a href=""https://github.com/pandas-dev/pandas/issues/15269#issuecomment-276382712"" rel=""noreferrer"">recommended method is <code>.iat/.at</code></a>.</p>

<hr>

<p><strong>Why <code>df.xs('C')['x']=10</code> does not work:</strong></p>

<p><code>df.xs('C')</code> by default, returns a new dataframe <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.xs.html#pandas.DataFrame.xsY"" rel=""noreferrer"">with a copy</a> of the data, so </p>

<pre><code>df.xs('C')['x']=10
</code></pre>

<p>modifies this new dataframe only.</p>

<p><code>df['x']</code> returns a view of the <code>df</code> dataframe, so </p>

<pre><code>df['x']['C'] = 10
</code></pre>

<p>modifies <code>df</code> itself.</p>

<p><strong>Warning</strong>: It is sometimes difficult to predict if an operation returns a copy or a view. For this reason the <a href=""http://pandas.pydata.org/pandas-docs/stable/indexing.html#returning-a-view-versus-a-copy"" rel=""noreferrer"">docs recommend avoiding assignments with ""chained indexing""</a>.  </p>

<hr>

<p>So the recommended alternative is</p>

<pre><code>df.at['C', 'x'] = 10
</code></pre>

<p>which <em>does</em> modify <code>df</code>.</p>

<hr>

<pre><code>In [18]: %timeit df.set_value('C', 'x', 10)
100000 loops, best of 3: 2.9 ?æs per loop

In [20]: %timeit df['x']['C'] = 10
100000 loops, best of 3: 6.31 ?æs per loop

In [81]: %timeit df.at['C', 'x'] = 10
100000 loops, best of 3: 9.2 ?æs per loop
</code></pre>
",,
370,3,"Saving utf-8 texts with json.dumps as UTF8, not as \u escape sequence","<p>Sample code:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json_string = json.dumps(&quot;?????? ????????&quot;)
&gt;&gt;&gt; print(json_string)
&quot;\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4&quot;
</code></pre>
<p>The problem: it's not human readable. My (smart) users want to verify or even edit text files with JSON dumps (and Iƒ??d rather not use XML).</p>
<p>Is there a way to serialize objects into UTF-8 JSON strings (instead of  <code>\uXXXX</code>)?</p>
","Saving utf-8 texts with json.dumps as UTF8, not as \u escape sequence<p>Sample code:</p>
<pre><code>&gt;&gt;&gt; import json
&gt;&gt;&gt; json_string = json.dumps(&quot;?????? ????????&quot;)
&gt;&gt;&gt; print(json_string)
&quot;\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4&quot;
</code></pre>
<p>The problem: it's not human readable. My (smart) users want to verify or even edit text files with JSON dumps (and Iƒ??d rather not use XML).</p>
<p>Is there a way to serialize objects into UTF-8 JSON strings (instead of  <code>\uXXXX</code>)?</p>
",<python><json><unicode><utf-8><escaping>,utf json dumps serialize escape verify texts smart sequencesample,"<p>Use the <code>ensure_ascii=False</code> switch to <code>json.dumps()</code>, then encode the value to UTF-8 manually:</p>

<pre><code>&gt;&gt;&gt; json_string = json.dumps(""?????? ????????"", ensure_ascii=False).encode('utf8')
&gt;&gt;&gt; json_string
b'""\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94""'
&gt;&gt;&gt; print(json_string.decode())
""?????? ????????""
</code></pre>

<p>If you are writing to a file, just use <code>json.dump()</code> and leave it to the file object to encode:</p>

<pre><code>with open('filename', 'w', encoding='utf8') as json_file:
    json.dump(""?????? ????????"", json_file, ensure_ascii=False)
</code></pre>

<p><strong>Caveats for Python 2</strong></p>

<p>For Python 2, there are some more caveats to take into account. If you are writing this to a file, you can use <a href=""https://docs.python.org/2/library/io.html#io.open"" rel=""noreferrer""><code>io.open()</code></a> instead of <code>open()</code> to produce a file object that encodes Unicode values for you as you write, then use <code>json.dump()</code> instead to write to that file:</p>

<pre><code>with io.open('filename', 'w', encoding='utf8') as json_file:
    json.dump(u""?????? ????????"", json_file, ensure_ascii=False)
</code></pre>

<p>Do note that there is a <a href=""http://bugs.python.org/issue13769"" rel=""noreferrer"">bug in the <code>json</code> module</a> where the <code>ensure_ascii=False</code> flag can produce a <em>mix</em> of <code>unicode</code> and <code>str</code> objects. The workaround for Python 2 then is:</p>

<pre><code>with io.open('filename', 'w', encoding='utf8') as json_file:
    data = json.dumps(u""?????? ????????"", ensure_ascii=False)
    # unicode(data) auto-decodes data to unicode if str
    json_file.write(unicode(data))
</code></pre>

<p>In Python 2, when using byte strings (type <code>str</code>), encoded to UTF-8, make sure to also set the <code>encoding</code> keyword:</p>

<pre><code>&gt;&gt;&gt; d={ 1: ""?????? ????????"", 2: u""?????? ????????"" }
&gt;&gt;&gt; d
{1: '\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94', 2: u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'}

&gt;&gt;&gt; s=json.dumps(d, ensure_ascii=False, encoding='utf8')
&gt;&gt;&gt; s
u'{""1"": ""\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4"", ""2"": ""\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4""}'
&gt;&gt;&gt; json.loads(s)['1']
u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'
&gt;&gt;&gt; json.loads(s)['2']
u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'
&gt;&gt;&gt; print json.loads(s)['1']
?????? ????????
&gt;&gt;&gt; print json.loads(s)['2']
?????? ????????
</code></pre>
",,
371,2,Shuffle DataFrame rows,"<p>I have the following DataFrame:</p>

<pre><code>    Col1  Col2  Col3  Type
0      1     2     3     1
1      4     5     6     1
...
20     7     8     9     2
21    10    11    12     2
...
45    13    14    15     3
46    16    17    18     3
...
</code></pre>

<p>The DataFrame is read from a csv file. All rows which have <code>Type</code> 1 are on top, followed by the rows with <code>Type</code> 2, followed by the rows with <code>Type</code> 3, etc.</p>

<p>I would like to shuffle the order of the DataFrame's rows, so that all <code>Type</code>'s are mixed. A possible result could be:</p>

<pre><code>    Col1  Col2  Col3  Type
0      7     8     9     2
1     13    14    15     3
...
20     1     2     3     1
21    10    11    12     2
...
45     4     5     6     1
46    16    17    18     3
...
</code></pre>

<p>How can I achieve this?</p>
","Shuffle DataFrame rows<p>I have the following DataFrame:</p>

<pre><code>    Col1  Col2  Col3  Type
0      1     2     3     1
1      4     5     6     1
...
20     7     8     9     2
21    10    11    12     2
...
45    13    14    15     3
46    16    17    18     3
...
</code></pre>

<p>The DataFrame is read from a csv file. All rows which have <code>Type</code> 1 are on top, followed by the rows with <code>Type</code> 2, followed by the rows with <code>Type</code> 3, etc.</p>

<p>I would like to shuffle the order of the DataFrame's rows, so that all <code>Type</code>'s are mixed. A possible result could be:</p>

<pre><code>    Col1  Col2  Col3  Type
0      7     8     9     2
1     13    14    15     3
...
20     1     2     3     1
21    10    11    12     2
...
45     4     5     6     1
46    16    17    18     3
...
</code></pre>

<p>How can I achieve this?</p>
",<python><pandas><dataframe><permutation><shuffle>,type rows dataframe shuffle followed rows mixed csv achieve order,"<p>The idiomatic way to do this with Pandas is to use the <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html"" rel=""noreferrer""><code>.sample</code></a> method of your dataframe to sample all rows without replacement:</p>

<pre class=""lang-py prettyprint-override""><code>df.sample(frac=1)
</code></pre>

<p>The <code>frac</code> keyword argument specifies the fraction of rows to return in the random sample, so <code>frac=1</code> means return all rows (in random order).</p>

<hr>

<p><strong>Note:</strong>
If you wish to shuffle your dataframe in-place and reset the index, you could do e.g.</p>

<pre class=""lang-py prettyprint-override""><code>df = df.sample(frac=1).reset_index(drop=True)
</code></pre>

<p>Here, specifying <code>drop=True</code> prevents <code>.reset_index</code> from creating a column containing the old index entries.</p>

<p><strong>Follow-up note:</strong> Although it may not look like the above operation is <em>in-place</em>, python/pandas is smart enough not to do another malloc for the shuffled object. That is, even though the <em>reference</em> object has changed (by which I mean <code>id(df_old)</code> is not the same as <code>id(df_new)</code>), the underlying C object is still the same. To show that this is indeed the case, you could run a simple memory profiler:</p>

<pre><code>$ python3 -m memory_profiler .\test.py
Filename: .\test.py

Line #    Mem usage    Increment   Line Contents
================================================
     5     68.5 MiB     68.5 MiB   @profile
     6                             def shuffle():
     7    847.8 MiB    779.3 MiB       df = pd.DataFrame(np.random.randn(100, 1000000))
     8    847.9 MiB      0.1 MiB       df = df.sample(frac=1).reset_index(drop=True)

</code></pre>
",,
372,5,How to make a timezone aware datetime object in Python?,"<p><strong>What I need to do</strong></p>
<p>I have a timezone-unaware datetime object, to which I need to add a time zone in order to be able to compare it with other timezone-aware datetime objects. I do not want to convert my entire application to timezone unaware for this one legacy case.</p>
<p><strong>What I've Tried</strong></p>
<p>First, to demonstrate the problem:</p>
<pre><code>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; unaware = datetime.datetime(2011,8,15,8,15,12,0)
&gt;&gt;&gt; unaware
datetime.datetime(2011, 8, 15, 8, 15, 12)
&gt;&gt;&gt; aware = datetime.datetime(2011,8,15,8,15,12,0,pytz.UTC)
&gt;&gt;&gt; aware
datetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; aware == unaware
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: can't compare offset-naive and offset-aware datetimes
</code></pre>
<p>First, I tried astimezone:</p>
<pre><code>&gt;&gt;&gt; unaware.astimezone(pytz.UTC)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: astimezone() cannot be applied to a naive datetime
&gt;&gt;&gt;
</code></pre>
<p>It's not terribly surprising this failed, since it's actually trying to do a conversion.  Replace seemed like a better choice (as per <a href=""https://stackoverflow.com/questions/4530069/python-how-to-get-a-value-of-datetime-today-that-is-timezone-aware"">How do I get a value of datetime.today() in Python that is &quot;timezone aware&quot;?</a>):</p>
<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=pytz.UTC)
datetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; unaware == aware
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: can't compare offset-naive and offset-aware datetimes
&gt;&gt;&gt; 
</code></pre>
<p>But as you can see, replace seems to set the tzinfo, but not make the object aware.  I'm getting ready to fall back to doctoring the input string to have a timezone before parsing it (I'm using dateutil for parsing, if that matters), but that seems incredibly kludgy.</p>
<p>Also, I've tried this in both Python 2.6 and Python 2.7, with the same results.</p>
<p><strong>Context</strong></p>
<p>I am writing a parser for some data files. There is an old format I need to support where the date string does not have a timezone indicator. I've already fixed the data source, but I still need to support the legacy data format. A one time conversion of the legacy data is not an option for various business BS reasons. While in general, I do not like the idea of hard-coding a default timezone, in this case it seems like the best option. I know with reasonable confidence that all the legacy data in question is in UTC, so I'm prepared to accept the risk of defaulting to that in this case.</p>
","How to make a timezone aware datetime object in Python?<p><strong>What I need to do</strong></p>
<p>I have a timezone-unaware datetime object, to which I need to add a time zone in order to be able to compare it with other timezone-aware datetime objects. I do not want to convert my entire application to timezone unaware for this one legacy case.</p>
<p><strong>What I've Tried</strong></p>
<p>First, to demonstrate the problem:</p>
<pre><code>Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import pytz
&gt;&gt;&gt; unaware = datetime.datetime(2011,8,15,8,15,12,0)
&gt;&gt;&gt; unaware
datetime.datetime(2011, 8, 15, 8, 15, 12)
&gt;&gt;&gt; aware = datetime.datetime(2011,8,15,8,15,12,0,pytz.UTC)
&gt;&gt;&gt; aware
datetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; aware == unaware
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: can't compare offset-naive and offset-aware datetimes
</code></pre>
<p>First, I tried astimezone:</p>
<pre><code>&gt;&gt;&gt; unaware.astimezone(pytz.UTC)
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
ValueError: astimezone() cannot be applied to a naive datetime
&gt;&gt;&gt;
</code></pre>
<p>It's not terribly surprising this failed, since it's actually trying to do a conversion.  Replace seemed like a better choice (as per <a href=""https://stackoverflow.com/questions/4530069/python-how-to-get-a-value-of-datetime-today-that-is-timezone-aware"">How do I get a value of datetime.today() in Python that is &quot;timezone aware&quot;?</a>):</p>
<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=pytz.UTC)
datetime.datetime(2011, 8, 15, 8, 15, 12, tzinfo=&lt;UTC&gt;)
&gt;&gt;&gt; unaware == aware
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;
TypeError: can't compare offset-naive and offset-aware datetimes
&gt;&gt;&gt; 
</code></pre>
<p>But as you can see, replace seems to set the tzinfo, but not make the object aware.  I'm getting ready to fall back to doctoring the input string to have a timezone before parsing it (I'm using dateutil for parsing, if that matters), but that seems incredibly kludgy.</p>
<p>Also, I've tried this in both Python 2.6 and Python 2.7, with the same results.</p>
<p><strong>Context</strong></p>
<p>I am writing a parser for some data files. There is an old format I need to support where the date string does not have a timezone indicator. I've already fixed the data source, but I still need to support the legacy data format. A one time conversion of the legacy data is not an option for various business BS reasons. While in general, I do not like the idea of hard-coding a default timezone, in this case it seems like the best option. I know with reasonable confidence that all the legacy data in question is in UTC, so I'm prepared to accept the risk of defaulting to that in this case.</p>
",<python><datetime><timezone><python-datetime><pytz>,timezone legacy aware datetime data unaware case need conversion parsing,"<p>In general, to make a naive datetime timezone-aware, use the <a href=""http://pytz.sourceforge.net/#localized-times-and-date-arithmetic"" rel=""noreferrer"">localize method</a>:</p>

<pre><code>import datetime
import pytz

unaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)
aware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)

now_aware = pytz.utc.localize(unaware)
assert aware == now_aware
</code></pre>

<p>For the UTC timezone, it is not really necessary to use <code>localize</code> since there is no daylight savings time calculation to handle:</p>

<pre><code>now_aware = unaware.replace(tzinfo=pytz.UTC)
</code></pre>

<p>works. (<code>.replace</code> returns a new datetime; it does not modify <code>unaware</code>.)</p>
",,
373,2,How to filter Pandas dataframe using 'in' and 'not in' like in SQL,"<p>How can I achieve the equivalents of SQL's <code>IN</code> and <code>NOT IN</code>?</p>
<p>I have a list with the required values.
Here's the scenario:</p>
<pre><code>df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})
countries_to_keep = ['UK', 'China']

# pseudo-code:
df[df['country'] not in countries_to_keep]
</code></pre>
<p>My current way of doing this is as follows:</p>
<pre><code>df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})
df2 = pd.DataFrame({'country': ['UK', 'China'], 'matched': True})

# IN
df.merge(df2, how='inner', on='country')

# NOT IN
not_in = df.merge(df2, how='left', on='country')
not_in = not_in[pd.isnull(not_in['matched'])]
</code></pre>
<p>But this seems like a horrible kludge. Can anyone improve on it?</p>
","How to filter Pandas dataframe using 'in' and 'not in' like in SQL<p>How can I achieve the equivalents of SQL's <code>IN</code> and <code>NOT IN</code>?</p>
<p>I have a list with the required values.
Here's the scenario:</p>
<pre><code>df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})
countries_to_keep = ['UK', 'China']

# pseudo-code:
df[df['country'] not in countries_to_keep]
</code></pre>
<p>My current way of doing this is as follows:</p>
<pre><code>df = pd.DataFrame({'country': ['US', 'UK', 'Germany', 'China']})
df2 = pd.DataFrame({'country': ['UK', 'China'], 'matched': True})

# IN
df.merge(df2, how='inner', on='country')

# NOT IN
not_in = df.merge(df2, how='left', on='country')
not_in = not_in[pd.isnull(not_in['matched'])]
</code></pre>
<p>But this seems like a horrible kludge. Can anyone improve on it?</p>
",<python><pandas><dataframe><sql-function>,equivalents kludge improve sql horrible scenario sql follows required filter,"<p>You can use <a href=""https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html"" rel=""noreferrer""><code>pd.Series.isin</code></a>.</p>
<p>For &quot;IN&quot; use: <code>something.isin(somewhere)</code></p>
<p>Or for &quot;NOT IN&quot;: <code>~something.isin(somewhere)</code></p>
<p>As a worked example:</p>
<pre><code>import pandas as pd

&gt;&gt;&gt; df
  country
0        US
1        UK
2   Germany
3     China
&gt;&gt;&gt; countries_to_keep
['UK', 'China']
&gt;&gt;&gt; df.country.isin(countries_to_keep)
0    False
1     True
2    False
3     True
Name: country, dtype: bool
&gt;&gt;&gt; df[df.country.isin(countries_to_keep)]
  country
1        UK
3     China
&gt;&gt;&gt; df[~df.country.isin(countries_to_keep)]
  country
0        US
2   Germany
</code></pre>
",,
374,3,How do I get indices of N maximum values in a NumPy array?,"<p>NumPy proposes a way to get the index of the maximum value of an array via <code>np.argmax</code>.</p>

<p>I would like a similar thing, but returning the indexes of the <code>N</code> maximum values.</p>

<p>For instance, if I have an array, <code>[1, 3, 2, 4, 5]</code>, <code>function(array, n=3)</code> would return the indices <code>[4, 3, 1]</code> which correspond to the elements <code>[5, 4, 3]</code>.</p>
","How do I get indices of N maximum values in a NumPy array?<p>NumPy proposes a way to get the index of the maximum value of an array via <code>np.argmax</code>.</p>

<p>I would like a similar thing, but returning the indexes of the <code>N</code> maximum values.</p>

<p>For instance, if I have an array, <code>[1, 3, 2, 4, 5]</code>, <code>function(array, n=3)</code> would return the indices <code>[4, 3, 1]</code> which correspond to the elements <code>[5, 4, 3]</code>.</p>
",<python><numpy><max><numpy-ndarray>,array maximum indices numpy values argmax proposes correspond indexes np,"<p>The simplest I've been able to come up with is:</p>

<pre><code>In [1]: import numpy as np

In [2]: arr = np.array([1, 3, 2, 4, 5])

In [3]: arr.argsort()[-3:][::-1]
Out[3]: array([4, 3, 1])
</code></pre>

<p>This involves a complete sort of the array. I wonder if <code>numpy</code> provides a built-in way to do a partial sort; so far I haven't been able to find one.</p>

<p>If this solution turns out to be too slow (especially for small <code>n</code>), it may be worth looking at coding something up in <a href=""http://cython.org/"">Cython</a>.</p>
",,
375,4,Append integer to beginning of list in Python,"<p>I have an integer and a list. I would like to make a new list of them beginning with the variable and ending with the list.
Writing <code>a + list</code> I get errors. The compiler handles <code>a</code> as integer, thus I cannot use append, or extend either. 
How would you do this?</p>
","Append integer to beginning of list in Python<p>I have an integer and a list. I would like to make a new list of them beginning with the variable and ending with the list.
Writing <code>a + list</code> I get errors. The compiler handles <code>a</code> as integer, thus I cannot use append, or extend either. 
How would you do this?</p>
",<python><list><variables><append>,integer list beginning append ending errors handles compiler extend python,"<pre><code>&gt;&gt;&gt;var=7
&gt;&gt;&gt;array = [1,2,3,4,5,6]
&gt;&gt;&gt;array.insert(0,var)
&gt;&gt;&gt;array
[7, 1, 2, 3, 4, 5, 6]
</code></pre>

<p>How it works:</p>

<p><code>array.insert(index, value)</code></p>

<p>Insert an item at a given position. The first argument is the index of the element before which to insert, so <code>array.insert(0, x)</code> inserts at the front of the list, and <code>array.insert(len(array), x)</code> is equivalent to <code>array.append(x)</code>.Negative values are treated as being relative to the end of the array.</p>
",,
376,3,Python progression path - From apprentice to guru,"<p>I've been learning, working, and playing with Python for a year and a half now. As a biologist slowly making the turn to bio-informatics, this language has been at the very core of all the major contributions I have made in the lab. I more or less fell in love with the way Python permits me to express beautiful solutions and also with the semantics of the language that allows such a natural flow from thoughts to workable code.</p>

<p>What I would like to know is your answer to a kind of question I have seldom seen in this or other forums. This question seems central to me for anyone on the path to Python improvement but who wonders what his next steps should be.</p>

<p>Let me sum up what I do NOT want to ask first ;)</p>

<ul>
<li>I don't want to know how to QUICKLY learn Python</li>
<li>Nor do I want to find out the best way to get acquainted with the language</li>
<li>Finally, I don't want to know a 'one trick that does it all' approach.</li>
</ul>

<p>What I do want to know your opinion about, is:</p>

<p><strong>What are the steps YOU would recommend to a Python journeyman, from apprenticeship to guru status (feel free to stop wherever your expertise dictates it), in order that one IMPROVES CONSTANTLY, becoming a better and better Python coder, one step at a time. Some of the people on SO almost seem worthy of worship for their Python prowess, please enlighten us :)</strong></p>

<p>The kind of answers I would enjoy (but feel free to surprise the readership :P ), is formatted more or less like this:</p>

<ul>
<li>Read this (eg: python tutorial), pay attention to that kind of details</li>
<li>Code for so manytime/problems/lines of code</li>
<li>Then, read this (eg: this or that book), but this time, pay attention to this</li>
<li>Tackle a few real-life problems</li>
<li>Then, proceed to reading Y.</li>
<li>Be sure to grasp these concepts</li>
<li>Code for X time</li>
<li>Come back to such and such basics or move further to...</li>
<li>(you get the point :)</li>
</ul>

<p>I really care about knowing your opinion on what exactly one should pay attention to, at various stages, in order to progress CONSTANTLY (with due efforts, of course). If you come from a specific field of expertise, discuss the path you see as appropriate in this field.</p>

<p>EDIT: Thanks to your great input, I'm back on the Python improvement track! I really appreciate!</p>
","Python progression path - From apprentice to guru<p>I've been learning, working, and playing with Python for a year and a half now. As a biologist slowly making the turn to bio-informatics, this language has been at the very core of all the major contributions I have made in the lab. I more or less fell in love with the way Python permits me to express beautiful solutions and also with the semantics of the language that allows such a natural flow from thoughts to workable code.</p>

<p>What I would like to know is your answer to a kind of question I have seldom seen in this or other forums. This question seems central to me for anyone on the path to Python improvement but who wonders what his next steps should be.</p>

<p>Let me sum up what I do NOT want to ask first ;)</p>

<ul>
<li>I don't want to know how to QUICKLY learn Python</li>
<li>Nor do I want to find out the best way to get acquainted with the language</li>
<li>Finally, I don't want to know a 'one trick that does it all' approach.</li>
</ul>

<p>What I do want to know your opinion about, is:</p>

<p><strong>What are the steps YOU would recommend to a Python journeyman, from apprenticeship to guru status (feel free to stop wherever your expertise dictates it), in order that one IMPROVES CONSTANTLY, becoming a better and better Python coder, one step at a time. Some of the people on SO almost seem worthy of worship for their Python prowess, please enlighten us :)</strong></p>

<p>The kind of answers I would enjoy (but feel free to surprise the readership :P ), is formatted more or less like this:</p>

<ul>
<li>Read this (eg: python tutorial), pay attention to that kind of details</li>
<li>Code for so manytime/problems/lines of code</li>
<li>Then, read this (eg: this or that book), but this time, pay attention to this</li>
<li>Tackle a few real-life problems</li>
<li>Then, proceed to reading Y.</li>
<li>Be sure to grasp these concepts</li>
<li>Code for X time</li>
<li>Come back to such and such basics or move further to...</li>
<li>(you get the point :)</li>
</ul>

<p>I really care about knowing your opinion on what exactly one should pay attention to, at various stages, in order to progress CONSTANTLY (with due efforts, of course). If you come from a specific field of expertise, discuss the path you see as appropriate in this field.</p>

<p>EDIT: Thanks to your great input, I'm back on the Python improvement track! I really appreciate!</p>
",<python>,pay attention kind path constantly opinion expertise python want free,"<p>I thought the process of Python mastery went something like:</p>

<ol>
<li>Discover <a href=""http://en.wikipedia.org/wiki/List_comprehension#Python"" rel=""noreferrer"">list comprehensions</a></li>
<li>Discover <a href=""http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Generators"" rel=""noreferrer"">generators</a></li>
<li>Incorporate <a href=""http://docs.python.org/library/functions.html"" rel=""noreferrer"">map, reduce, filter, iter, range, xrange</a> often into your code</li>
<li>Discover <a href=""http://wiki.python.org/moin/PythonDecorators"" rel=""noreferrer"">Decorators</a></li>
<li>Write recursive functions, a lot</li>
<li>Discover <a href=""http://docs.python.org/library/itertools.html"" rel=""noreferrer"">itertools</a> and <a href=""http://docs.python.org/library/functools.html"" rel=""noreferrer"">functools</a></li>
<li>Read <a href=""https://rads.stackoverflow.com/amzn/click/com/0596514980"" rel=""noreferrer"" rel=""nofollow noreferrer"">Real World Haskell</a> (<a href=""http://book.realworldhaskell.org/read/"" rel=""noreferrer"">read free online</a>)</li>
<li>Rewrite all your old Python code with tons of higher order functions, recursion, and whatnot.</li>
<li>Annoy your cubicle mates every time they present you with a Python class.  Claim it could be ""better"" implemented as a dictionary plus some functions.  Embrace functional programming.</li>
<li>Rediscover the <a href=""http://en.wikipedia.org/wiki/Strategy_pattern#Python"" rel=""noreferrer"">Strategy</a> pattern and then <a href=""https://rads.stackoverflow.com/amzn/click/com/0596007124"" rel=""noreferrer"" rel=""nofollow noreferrer"">all those things</a> from imperative code you tried so hard to forget after Haskell.</li>
<li>Find a balance.</li>
</ol>
",,
377,5,Split string with multiple delimiters in Python,"<p>I found some answers online, but I have no experience with regular expressions, which I believe is what is needed here.</p>

<p>I have a string that needs to be split by either a ';' or ', '
That is, it has to be either a semicolon or a comma followed by a space. Individual commas without trailing spaces should be left untouched</p>

<p>Example string:</p>

<pre><code>""b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3], mesitylene [000108-67-8]; polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]""
</code></pre>

<p>should be split into a list containing the following:</p>

<pre><code>('b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3]' , 'mesitylene [000108-67-8]', 'polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]') 
</code></pre>
","Split string with multiple delimiters in Python<p>I found some answers online, but I have no experience with regular expressions, which I believe is what is needed here.</p>

<p>I have a string that needs to be split by either a ';' or ', '
That is, it has to be either a semicolon or a comma followed by a space. Individual commas without trailing spaces should be left untouched</p>

<p>Example string:</p>

<pre><code>""b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3], mesitylene [000108-67-8]; polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]""
</code></pre>

<p>should be split into a list containing the following:</p>

<pre><code>('b-staged divinylsiloxane-bis-benzocyclobutene [124221-30-3]' , 'mesitylene [000108-67-8]', 'polymerized 1,2-dihydro-2,2,4- trimethyl quinoline [026780-96-1]') 
</code></pre>
",<python><string><split><delimiter>,split string untouched example individual delimiters semicolon online trailing containing space,"<p>Luckily, Python has this built-in :)</p>

<pre><code>import re
re.split('; |, ',str)
</code></pre>

<p><strong>Update:</strong><br>Following your comment:</p>

<pre><code>&gt;&gt;&gt; a='Beautiful, is; better*than\nugly'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split('; |, |\*|\n',a)
['Beautiful', 'is', 'better', 'than', 'ugly']
</code></pre>
",,
378,6,Find and Replace Inside a Text File from a Bash Command,"<p>What's the simplest way to do a find and replace for a given input string, say <code>abc</code>, and replace with another string, say <code>XYZ</code> in file <code>/tmp/file.txt</code>?</p>

<p>I am writting an app and using IronPython to execute commands through SSH &mdash; but I don't know Unix that well and don't know what to look for.</p>

<p>I have heard that Bash, apart from being a command line interface, can be a very powerful scripting language. So, if this is true, I assume you can perform actions like these.</p>

<p>Can I do it with bash, and what's the simplest (one line) script to achieve my goal?</p>
","Find and Replace Inside a Text File from a Bash Command<p>What's the simplest way to do a find and replace for a given input string, say <code>abc</code>, and replace with another string, say <code>XYZ</code> in file <code>/tmp/file.txt</code>?</p>

<p>I am writting an app and using IronPython to execute commands through SSH &mdash; but I don't know Unix that well and don't know what to look for.</p>

<p>I have heard that Bash, apart from being a command line interface, can be a very powerful scripting language. So, if this is true, I assume you can perform actions like these.</p>

<p>Can I do it with bash, and what's the simplest (one line) script to achieve my goal?</p>
",<bash><ssh><replace><scripting><ironpython>,bash replace simplest file say line ssh writting commandwhat tmp ,"<p>The easiest way is to use sed (or perl):</p>
<pre><code>sed -i -e 's/abc/XYZ/g' /tmp/file.txt
</code></pre>
<p>Which will invoke sed to do an in-place edit due to the <code>-i</code> option.  This can be called from bash.</p>
<p>If you really really want to use just bash, then the following can work:</p>
<pre><code>while read a; do
    echo ${a//abc/XYZ}
done &lt; /tmp/file.txt &gt; /tmp/file.txt.t
mv /tmp/file.txt{.t,}
</code></pre>
<p>This loops over each line, doing a substitution, and writing to a temporary file (don't want to clobber the input).  The move at the end just moves temporary to the original name.</p>
<h3>For Mac users:</h3>
<p><code>sed -i '' 's/abc/XYZ/g' /tmp/file.txt</code> (See the comment below why)</p>
",,
379,1,Can I force pip to reinstall the current version?,"<p>I've come across situations where a current version of a package seems not to be working and requires reinstallation. But <code>pip install -U</code> won't touch a package that is already up-to-date. I see how to force a reinstallation by first uninstalling (with <code>pip uninstall</code>) and then installing, but is there a way to simply force an ""update"" to a nominally current version in a single step?</p>
","Can I force pip to reinstall the current version?<p>I've come across situations where a current version of a package seems not to be working and requires reinstallation. But <code>pip install -U</code> won't touch a package that is already up-to-date. I see how to force a reinstallation by first uninstalling (with <code>pip uninstall</code>) and then installing, but is there a way to simply force an ""update"" to a nominally current version in a single step?</p>
",<python><pip><packages>,force reinstallation version pip current package nominally uninstalling reinstall touch,"<pre><code>pip install --upgrade --force-reinstall &lt;package&gt;
</code></pre>

<p>When upgrading, reinstall all packages even if they are already up-to-date.</p>

<pre><code>pip install -I &lt;package&gt;
pip install --ignore-installed &lt;package&gt;
</code></pre>

<p>Ignore the installed packages (reinstalling instead).</p>
",,
380,5,Remove specific characters from a string in Python,"<p>I'm trying to remove specific characters from a string using Python. This is the code I'm using right now. Unfortunately it appears to do nothing to the string.</p>

<pre><code>for char in line:
    if char in "" ?.!/;:"":
        line.replace(char,'')
</code></pre>

<p>How do I do this properly?</p>
","Remove specific characters from a string in Python<p>I'm trying to remove specific characters from a string using Python. This is the code I'm using right now. Unfortunately it appears to do nothing to the string.</p>

<pre><code>for char in line:
    if char in "" ?.!/;:"":
        line.replace(char,'')
</code></pre>

<p>How do I do this properly?</p>
",<python><string><replace><immutability>,characters string specific remove using unfortunately properly appears python right,"<p>Strings in Python are <em>immutable</em> (can't be changed).  Because of this, the effect of <code>line.replace(...)</code> is just to create a new string, rather than changing the old one.  You need to <em>rebind</em> (assign) it to <code>line</code> in order to have that variable take the new value, with those characters removed.</p>
<p>Also, the way you are doing it is going to be kind of slow, relatively.  It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on.</p>
<p>Starting in Python 2.6 and newer Python 2.x versions *, you can instead use <a href=""https://docs.python.org/2/library/stdtypes.html#str.translate"" rel=""noreferrer""><code>str.translate</code></a>, (<em>see <strong>Python 3 answer</strong> below</em>):</p>
<pre><code>line = line.translate(None, '!@#$')
</code></pre>
<p>or regular expression replacement with <a href=""https://docs.python.org/2/library/re.html#re.sub"" rel=""noreferrer""><code>re.sub</code></a></p>
<pre><code>import re
line = re.sub('[!@#$]', '', line)
</code></pre>
<p>The characters enclosed in brackets constitute a <em>character class</em>.  Any characters in <code>line</code> which are in that class are replaced with the second parameter to <code>sub</code>: an empty string.</p>
<h3>Python 3 answer</h3>
<p>In Python 3, strings are Unicode. You'll have to translate a little differently. kevpie mentions this in a <a href=""https://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python#comment-4205256"">comment</a> on one of the answers, and it's noted in the <a href=""https://docs.python.org/2/library/stdtypes.html#str.translate"" rel=""noreferrer"">documentation for <code>str.translate</code></a>.</p>
<p>When calling the <code>translate</code> method of a Unicode string, you cannot pass the second parameter that we used above. You also can't pass <code>None</code> as the first parameter. Instead, you pass a translation table (usually a dictionary) as the only parameter. This table maps the <em>ordinal values</em> of characters (i.e. the result of calling <a href=""https://docs.python.org/2/library/functions.html#ord"" rel=""noreferrer""><code>ord</code></a> on them) to the ordinal values of the characters which should replace them, orƒ??usefully to usƒ??<code>None</code> to indicate that they should be deleted.</p>
<p>So to do the above dance with a Unicode string you would call something like</p>
<pre><code>translation_table = dict.fromkeys(map(ord, '!@#$'), None)
unicode_line = unicode_line.translate(translation_table)
</code></pre>
<p>Here <a href=""https://docs.python.org/2/library/stdtypes.html#dict.fromkeys"" rel=""noreferrer""><code>dict.fromkeys</code></a> and <a href=""https://docs.python.org/2/library/functions.html#map"" rel=""noreferrer""><code>map</code></a> are used to succinctly generate a dictionary containing</p>
<pre><code>{ord('!'): None, ord('@'): None, ...}
</code></pre>
<p>Even simpler, as <a href=""https://stackoverflow.com/questions/23175809/typeerror-translate-takes-one-argument-2-given-python"">another answer puts it</a>, create the translation table in place:</p>
<pre><code>unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})
</code></pre>
<p>Or, as brought up by <a href=""https://stackoverflow.com/a/47030484/2932052"">Joseph Lee</a>, create the same translation table with <a href=""https://docs.python.org/3/library/stdtypes.html#str.maketrans"" rel=""noreferrer""><code>str.maketrans</code></a>:</p>
<pre><code>unicode_line = unicode_line.translate(str.maketrans('', '', '!@#$'))
</code></pre>
<hr />
<p>*   for compatibility with earlier Pythons, you can create a &quot;null&quot; translation table to pass in place of <code>None</code>:</p>
<pre><code>import string
line = line.translate(string.maketrans('', ''), '!@#$')
</code></pre>
<p>Here <a href=""https://docs.python.org/2/library/string.html#string.maketrans"" rel=""noreferrer""><code>string.maketrans</code></a> is used to create a <em>translation table</em>, which is just a string containing the characters with ordinal values 0 to 255.</p>
",,
381,5,How to urlencode a querystring in Python?,"<p>I am trying to urlencode this string before I submit. </p>

<pre><code>queryString = 'eventName=' + evt.fields[""eventName""] + '&amp;' + 'eventDescription=' + evt.fields[""eventDescription""]; 
</code></pre>
","How to urlencode a querystring in Python?<p>I am trying to urlencode this string before I submit. </p>

<pre><code>queryString = 'eventName=' + evt.fields[""eventName""] + '&amp;' + 'eventDescription=' + evt.fields[""eventDescription""]; 
</code></pre>
",<python><urllib><urlencode>,url encode querystring submit trying string python forget formatted formats format,"<p>You need to pass your parameters into <a href=""http://docs.python.org/2/library/urllib.html#urllib.urlencode"" rel=""noreferrer""><code>urlencode()</code></a> as either a mapping (dict), or a sequence of 2-tuples, like:</p>

<pre><code>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; f = { 'eventName' : 'myEvent', 'eventDescription' : 'cool event'}
&gt;&gt;&gt; urllib.urlencode(f)
'eventName=myEvent&amp;eventDescription=cool+event'
</code></pre>

<p><strong>Python 3 or above</strong></p>

<p>Use:</p>

<pre><code>&gt;&gt;&gt; urllib.parse.urlencode(f)
eventName=myEvent&amp;eventDescription=cool+event
</code></pre>

<p>Note that this does <em>not</em> do url encoding in the commonly used sense (look at the output). For that use <code>urllib.parse.quote_plus</code>.</p>
",,
382,0,Add a new item to a dictionary in Python,"<p>I want to add an item to an existing dictionary in Python. For example, this is my dictionary:</p>

<pre><code>default_data = {
            'item1': 1,
            'item2': 2,
}
</code></pre>

<p>I want to add a new item such that:</p>

<pre><code>default_data = default_data + {'item3':3}
</code></pre>

<p>How can I achieve this?</p>
","Add a new item to a dictionary in Python<p>I want to add an item to an existing dictionary in Python. For example, this is my dictionary:</p>

<pre><code>default_data = {
            'item1': 1,
            'item2': 2,
}
</code></pre>

<p>I want to add a new item such that:</p>

<pre><code>default_data = default_data + {'item3':3}
</code></pre>

<p>How can I achieve this?</p>
",<python><dictionary><items>,item add dictionary new existing want achieve example python,"<pre><code>default_data['item3'] = 3
</code></pre>

<p>Easy as py.</p>

<p>Another possible solution:</p>

<pre><code>default_data.update({'item3': 3})
</code></pre>

<p>which is nice if you want to insert multiple items at once.</p>
",,
383,3,How to calculate number of days between two given dates,"<p>If I have two dates (ex. <code>'8/18/2008'</code> and <code>'9/26/2008'</code>), what is the best way to get the number of days between these two dates?</p>
","How to calculate number of days between two given dates<p>If I have two dates (ex. <code>'8/18/2008'</code> and <code>'9/26/2008'</code>), what is the best way to get the number of days between these two dates?</p>
",<python><date><datetime>,days dates number datesif ex calculate given best way formatted,"<p>If you have two date objects, you can just subtract them, which computes a <a href=""https://docs.python.org/3/library/datetime.html#datetime.timedelta"" rel=""noreferrer""><code>timedelta</code></a> object.</p>

<pre><code>from datetime import date

d0 = date(2008, 8, 18)
d1 = date(2008, 9, 26)
delta = d1 - d0
print(delta.days)
</code></pre>

<p>The relevant section of the docs:
<a href=""https://docs.python.org/library/datetime.html"" rel=""noreferrer"">https://docs.python.org/library/datetime.html</a>.</p>

<p>See <a href=""https://stackoverflow.com/a/8258465"">this answer</a> for another example.</p>
",,
384,0,Filter dict to contain only certain keys?,"<p>I've got a <code>dict</code> that has a whole bunch of entries. I'm only interested in a select few of them. Is there an easy way to prune all the other ones out?</p>
","Filter dict to contain only certain keys?<p>I've got a <code>dict</code> that has a whole bunch of entries. I'm only interested in a select few of them. Is there an easy way to prune all the other ones out?</p>
",<python><dictionary>,dict entries prune bunch interested contain ones select filter certain,"<p>Constructing a new dict: </p>

<pre><code>dict_you_want = { your_key: old_dict[your_key] for your_key in your_keys }
</code></pre>

<p>Uses dictionary comprehension. </p>

<p>If you use a version which lacks them (ie Python 2.6 and earlier), make it <code>dict((your_key, old_dict[your_key]) for ...)</code>. It's the same, though uglier.</p>

<p>Note that this, unlike jnnnnn's version, has stable performance (depends only on number of your_keys) for <code>old_dict</code>s of any size. Both in terms of speed and memory. Since this is a generator expression, it processes one item at a time, and it doesn't looks through all items of old_dict.</p>

<p>Removing everything in-place:</p>

<pre><code>unwanted = set(keys) - set(your_dict)
for unwanted_key in unwanted: del your_dict[unwanted_key]
</code></pre>
",,
385,4,Create list of single item repeated N times,"<p>I want to create a series of lists, all of varying lengths. Each list will contain the same element <code>e</code>, repeated <code>n</code> times (where <code>n</code> = length of the list).</p>

<p>How do I create the lists, without using a list comprehension <code>[e for number in xrange(n)]</code> for each list?</p>
","Create list of single item repeated N times<p>I want to create a series of lists, all of varying lengths. Each list will contain the same element <code>e</code>, repeated <code>n</code> times (where <code>n</code> = length of the list).</p>

<p>How do I create the lists, without using a list comprehension <code>[e for number in xrange(n)]</code> for each list?</p>
",<python><list-comprehension><multiplication><replicate>,list repeated create lists times varying lengths xrange contain comprehension,"<p>You can also write:</p>
<pre class=""lang-py prettyprint-override""><code>[e] * n
</code></pre>
<p>You should note that if e is for example an empty list you get a list with n references to the same list, not n independent empty lists.</p>
<p><strong>Performance testing</strong></p>
<p>At first glance it <em>seems</em> that repeat is the fastest way to create a list with n identical elements:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)
0.37095273281943264
&gt;&gt;&gt; timeit.timeit('[0] * 10', 'import itertools', number = 1000000)
0.5577236771712819
</code></pre>
<p>But wait - it's not a fair test...</p>
<pre><code>&gt;&gt;&gt; itertools.repeat(0, 10)
repeat(0, 10)  # Not a list!!!
</code></pre>
<p>The function <code>itertools.repeat</code> doesn't actually create the list, it just creates an object that can be used to create a list if you wish! Let's try that again, but converting to a list:</p>
<pre><code>&gt;&gt;&gt; timeit.timeit('list(itertools.repeat(0, 10))', 'import itertools', number = 1000000)
1.7508119747063233
</code></pre>
<p>So if you want a list, use <code>[e] * n</code>. If you want to generate the elements lazily, use <code>repeat</code>.</p>
",,
386,6,How to delete the contents of a folder?,"<p>How can I delete the contents of a local folder in Python?</p>

<p>The current project is for Windows, but I would like to see *nix also.</p>
","How to delete the contents of a folder?<p>How can I delete the contents of a local folder in Python?</p>

<p>The current project is for Windows, but I would like to see *nix also.</p>
",<python><file>,contents folder delete nix local project windows current like python,"<pre><code>import os, shutil
folder = '/path/to/folder'
for filename in os.listdir(folder):
    file_path = os.path.join(folder, filename)
    try:
        if os.path.isfile(file_path) or os.path.islink(file_path):
            os.unlink(file_path)
        elif os.path.isdir(file_path):
            shutil.rmtree(file_path)
    except Exception as e:
        print('Failed to delete %s. Reason: %s' % (file_path, e))
</code></pre>
",,
387,2,"Get statistics for each group (such as count, mean, etc) using pandas GroupBy?","<p>I have a data frame <code>df</code> and I use several columns from it to <code>groupby</code>:</p>

<pre><code>df['col1','col2','col3','col4'].groupby(['col1','col2']).mean()
</code></pre>

<p>In the above way I almost get the table (data frame) that I need. What is missing is an additional column that contains number of rows in each group. In other words, I have mean but I also would like to know how many number were used to get these means. For example in the first group there are 8 values and in the second one 10 and so on.</p>

<p>In short: How do I get <strong>group-wise</strong> statistics for a dataframe?</p>
","Get statistics for each group (such as count, mean, etc) using pandas GroupBy?<p>I have a data frame <code>df</code> and I use several columns from it to <code>groupby</code>:</p>

<pre><code>df['col1','col2','col3','col4'].groupby(['col1','col2']).mean()
</code></pre>

<p>In the above way I almost get the table (data frame) that I need. What is missing is an additional column that contains number of rows in each group. In other words, I have mean but I also would like to know how many number were used to get these means. For example in the first group there are 8 values and in the second one 10 and so on.</p>

<p>In short: How do I get <strong>group-wise</strong> statistics for a dataframe?</p>
",<python><pandas><dataframe><group-by><pandas-groupby>,group statistics groupby frame mean number data additional wise table,"<p>On <code>groupby</code> object, the <code>agg</code> function can take a list to <a href=""https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html#applying-multiple-functions-at-once"" rel=""noreferrer"">apply several aggregation methods</a> at once. This should give you the result you need:</p>

<pre><code>df[['col1', 'col2', 'col3', 'col4']].groupby(['col1', 'col2']).agg(['mean', 'count'])
</code></pre>
",,
388,3,Does Python's time.time() return the local or UTC timestamp?,"<p>Does <code>time.time()</code> in the Python time module return the system's time or the time in UTC?</p>
","Does Python's time.time() return the local or UTC timestamp?<p>Does <code>time.time()</code> in the Python time module return the system's time or the time in UTC?</p>
",<python><time><timezone>,time utc return timestamp local module python foreignkey formats format,"<p>The <a href=""https://docs.python.org/2/library/time.html#time.time"" rel=""noreferrer""><code>time.time()</code></a> function returns the number of seconds since the epoch, as seconds.  Note that the ""epoch"" is defined as the start of January 1st, 1970 in UTC.  So the epoch is defined in terms of UTC and establishes a global moment in time.  No matter where you are ""seconds past epoch"" (time.time()) returns the same value at the same moment.</p>

<p>Here is some sample output I ran on my computer, converting it to a string as well.</p>

<pre><code>Python 2.7.3 (default, Apr 24 2012, 00:00:54) 
[GCC 4.7.0 20120414 (prerelease)] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
&gt;&gt;&gt; import time
&gt;&gt;&gt; ts = time.time()
&gt;&gt;&gt; print ts
1355563265.81
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; print st
2012-12-15 01:21:05
&gt;&gt;&gt;
</code></pre>

<p>The <code>ts</code> variable is the time returned in seconds.  I then converted it to a string using the <code>datetime</code> library making it a string that is human readable. </p>
",,
389,3,How to check Django version,"<p>I have to use <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a> and <a href=""http://en.wikipedia.org/wiki/Django_%28web_framework%29"" rel=""noreferrer"">Django</a> for our application. So I have two versions of Python, 2.6 and 2.7. Now I have installed Django. I could run the sample application for testing Django succesfuly. But how do I make sure whether Django uses the 2.6 or 2.7 version and what version of modules Django uses?</p>
","How to check Django version<p>I have to use <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a> and <a href=""http://en.wikipedia.org/wiki/Django_%28web_framework%29"" rel=""noreferrer"">Django</a> for our application. So I have two versions of Python, 2.6 and 2.7. Now I have installed Django. I could run the sample application for testing Django succesfuly. But how do I make sure whether Django uses the 2.6 or 2.7 version and what version of modules Django uses?</p>
",<python><django>,django uses application version succesfuly versioni testing sample versions modules,"<p>Django 1.5 supports Python 2.6.5 and later.</p>

<p>If you're under Linux and want to check the Python version you're using, run <code>python -V</code> from the command line.</p>

<p>If you want to check the Django version, open a Python console and type</p>

<pre><code>&gt;&gt;&gt; import django
&gt;&gt;&gt; django.VERSION
(2, 0, 0, 'final', 0)
</code></pre>
",,
390,1,"Python and pip, list all versions of a package that's available?","<p>Given the name of a Python package that can be installed with <a href=""https://pip.pypa.io/en/stable/"" rel=""noreferrer"">pip</a>, is there any way to find out a list of all the possible versions of it that pip could install? Right now it's trial and error.</p>

<p>I'm trying to install a version for a third party library, but the newest version is too new, there were backwards incompatible changes made. So I'd like to somehow have a list of all the versions that pip knows about, so that I can test them.</p>
","Python and pip, list all versions of a package that's available?<p>Given the name of a Python package that can be installed with <a href=""https://pip.pypa.io/en/stable/"" rel=""noreferrer"">pip</a>, is there any way to find out a list of all the possible versions of it that pip could install? Right now it's trial and error.</p>

<p>I'm trying to install a version for a third party library, but the newest version is too new, there were backwards incompatible changes made. So I'd like to somehow have a list of all the versions that pip knows about, so that I can test them.</p>
",<python><pip>,pip versions package version install list newest knows trial party,"<p><strong>(update: As of March 2020, many people have reported that yolk, installed via <code>pip install yolk3k</code>, only returns latest version.  <a href=""https://stackoverflow.com/a/26664162"">Chris's answer</a> seems to have the most upvotes and worked for me)</strong></p>

<p>The script at pastebin does work. However it's not very convenient if you're working with multiple environments/hosts because you will have to copy/create it every time.</p>

<p>A better all-around solution would be to use <a href=""https://pypi.python.org/pypi/yolk3k"" rel=""noreferrer"">yolk3k</a>, which is available to install with pip. E.g. to see what versions of Django are available:</p>

<pre><code>$ pip install yolk3k
$ yolk -V django
Django 1.3
Django 1.2.5
Django 1.2.4
Django 1.2.3
Django 1.2.2
Django 1.2.1
Django 1.2
Django 1.1.4
Django 1.1.3
Django 1.1.2
Django 1.0.4
</code></pre>

<p><code>yolk3k</code> is a fork of the original <a href=""https://github.com/cakebread/yolk"" rel=""noreferrer""><code>yolk</code></a> which ceased development in <a href=""https://pypi.org/project/yolk/#history"" rel=""noreferrer"">2012</a>. Though <code>yolk</code> is no longer maintained (as indicated in comments below), <code>yolk3k</code> appears to be and supports Python 3.</p>

<p><strong>Note:</strong> I am not involved in the development of yolk3k. <strong>If something doesn't seem to work as it should, leaving a comment here should not make much difference.</strong> Use the <a href=""https://github.com/myint/yolk/issues"" rel=""noreferrer"">yolk3k issue tracker</a> instead and consider submitting a fix, if possible.</p>
",,
391,1,Dealing with multiple Python versions and PIP?,"<p>Is there any way to make <code>pip</code> play well with multiple versions of Python? For example, I want to use <code>pip</code> to explicitly install things to either my site 2.5 installation or my site 2.6 installation.</p>

<p>For example, with <code>easy_install</code>, I use <code>easy_install-2.{5,6}</code>.</p>

<p>And, yes ƒ?? I know about virtualenv, and no ƒ?? it's not a solution to this particular problem.</p>
","Dealing with multiple Python versions and PIP?<p>Is there any way to make <code>pip</code> play well with multiple versions of Python? For example, I want to use <code>pip</code> to explicitly install things to either my site 2.5 installation or my site 2.6 installation.</p>

<p>For example, with <code>easy_install</code>, I use <code>easy_install-2.{5,6}</code>.</p>

<p>And, yes ƒ?? I know about virtualenv, and no ƒ?? it's not a solution to this particular problem.</p>
",<python><pip>,pip easyinstall installation versions site multiple play example yes dealing,"<p>The <a href=""https://packaging.python.org/guides/installing-using-pip-and-virtualenv/"" rel=""noreferrer"">current recommendation</a> is to use <code>python -m pip</code>, where <code>python</code> is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:</p>

<pre><code># The system default python:
$ python -m pip install fish

# A virtualenv's python:
$ .env/bin/python -m pip install fish

# A specific version of python:
$ python-3.6 -m pip install fish
</code></pre>

<p>Previous answer, left for posterity:</p>

<p>Since version 0.8, Pip supports <code>pip-{version}</code>. You can use it the same as <code>easy_install-{version}</code>:</p>

<pre><code>$ pip-2.5 install myfoopackage
$ pip-2.6 install otherpackage
$ pip-2.7 install mybarpackage
</code></pre>

<hr>

<p><strong>EDIT</strong>: pip changed its schema to use <code>pipVERSION</code> instead of <code>pip-VERSION</code> in version 1.5. You should use the following if you have <code>pip &gt;= 1.5</code>:</p>

<pre><code>$ pip2.6 install otherpackage
$ pip2.7 install mybarpackage
</code></pre>

<p>Check <a href=""https://github.com/pypa/pip/pull/1053"" rel=""noreferrer"">https://github.com/pypa/pip/pull/1053</a> for more details</p>

<hr>

<p>References:</p>

<ul>
<li><a href=""https://github.com/pypa/pip/issues/200"" rel=""noreferrer"">https://github.com/pypa/pip/issues/200</a></li>
<li><a href=""http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4"" rel=""noreferrer"">http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4</a></li>
</ul>
",,
392,3,How do you round UP a number?,"<p>How does one round a number UP in Python?</p>
<p>I tried <code>round(number)</code> but it rounds the number down. Example:</p>
<pre><code>round(2.3) = 2.0 
</code></pre>
<p>and not 3, as I would like.</p>
<p>The I tried <code>int(number + .5)</code> but it round the number down again! Example:</p>
<pre><code>int(2.3 + .5) = 2
</code></pre>
","How do you round UP a number?<p>How does one round a number UP in Python?</p>
<p>I tried <code>round(number)</code> but it rounds the number down. Example:</p>
<pre><code>round(2.3) = 2.0 
</code></pre>
<p>and not 3, as I would like.</p>
<p>The I tried <code>int(number + .5)</code> but it round the number down again! Example:</p>
<pre><code>int(2.3 + .5) = 2
</code></pre>
",<python><floating-point><integer><rounding>,round number tried rounds example int like python zone forget,"<p>The <a href=""https://docs.python.org/2/library/math.html#math.ceil"" rel=""noreferrer"">ceil</a> (ceiling) function:</p>
<pre><code>import math
print(int(math.ceil(4.2)))
</code></pre>
",,
393,3,"Changing the ""tick frequency"" on x or y axis in matplotlib","<p>I am trying to fix how python plots my data.</p>

<p>Say </p>

<pre><code>x = [0,5,9,10,15]
</code></pre>

<p>and </p>

<pre><code>y = [0,1,2,3,4]
</code></pre>

<p>Then I would do:</p>

<pre><code>matplotlib.pyplot.plot(x,y)
matplotlib.pyplot.show()
</code></pre>

<p>and the x axis' ticks are plotted in intervals of 5. Is there a way to make it show intervals of 1?</p>
","Changing the ""tick frequency"" on x or y axis in matplotlib<p>I am trying to fix how python plots my data.</p>

<p>Say </p>

<pre><code>x = [0,5,9,10,15]
</code></pre>

<p>and </p>

<pre><code>y = [0,1,2,3,4]
</code></pre>

<p>Then I would do:</p>

<pre><code>matplotlib.pyplot.plot(x,y)
matplotlib.pyplot.show()
</code></pre>

<p>and the x axis' ticks are plotted in intervals of 5. Is there a way to make it show intervals of 1?</p>
",<python><matplotlib><plot><axes><xticks>,intervals axis plotted matplotlibi tick ticks frequency plots changing fix,"<p>You could explicitly set where you want to tick marks with <code>plt.xticks</code>:</p>

<pre><code>plt.xticks(np.arange(min(x), max(x)+1, 1.0))
</code></pre>

<hr>

<p>For example,</p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt

x = [0,5,9,10,15]
y = [0,1,2,3,4]
plt.plot(x,y)
plt.xticks(np.arange(min(x), max(x)+1, 1.0))
plt.show()
</code></pre>

<hr>

<p>(<code>np.arange</code> was used rather than Python's <code>range</code> function just in case <code>min(x)</code> and <code>max(x)</code> are floats instead of ints.) </p>

<hr>

<p>The <code>plt.plot</code> (or <code>ax.plot</code>) function will automatically set default <code>x</code> and <code>y</code> limits. If you wish to keep those limits, and just change the stepsize of the tick marks, then you could use <code>ax.get_xlim()</code> to discover what limits Matplotlib has already set. </p>

<pre><code>start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, stepsize))
</code></pre>

<p>The default tick formatter should do a decent job rounding the tick values to a sensible number of significant digits. However, if you wish to have more control over the format, you can define your own formatter. For example,</p>

<pre><code>ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
</code></pre>

<p>Here's a runnable example:</p>

<pre><code>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

x = [0,5,9,10,15]
y = [0,1,2,3,4]
fig, ax = plt.subplots()
ax.plot(x,y)
start, end = ax.get_xlim()
ax.xaxis.set_ticks(np.arange(start, end, 0.712123))
ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))
plt.show()
</code></pre>
",,
394,5,What is the best way to remove accents (normalize) in a Python unicode string?,"<p>I have a Unicode string in Python, and I would like to remove all the accents (diacritics).</p>
<p>I found on the web an elegant way to do this (in Java):</p>
<ol>
<li>convert the Unicode string to its <em><strong>long normalized form</strong></em> (with a separate character for letters and diacritics)</li>
<li>remove all the characters whose Unicode type is &quot;diacritic&quot;.</li>
</ol>
<p>Do I need to install a library such as pyICU or is this possible with just the Python standard library?  And what about python 3?</p>
<p>Important note: I would like to avoid code with an explicit mapping from accented characters to their non-accented counterpart.</p>
","What is the best way to remove accents (normalize) in a Python unicode string?<p>I have a Unicode string in Python, and I would like to remove all the accents (diacritics).</p>
<p>I found on the web an elegant way to do this (in Java):</p>
<ol>
<li>convert the Unicode string to its <em><strong>long normalized form</strong></em> (with a separate character for letters and diacritics)</li>
<li>remove all the characters whose Unicode type is &quot;diacritic&quot;.</li>
</ol>
<p>Do I need to install a library such as pyICU or is this possible with just the Python standard library?  And what about python 3?</p>
<p>Important note: I would like to avoid code with an explicit mapping from accented characters to their non-accented counterpart.</p>
",<python><python-3.x><unicode><python-2.x><diacritics>,unicode diacritics accented accents remove characters string library normalize diacritic,"<p>How about this:</p>

<pre><code>import unicodedata
def strip_accents(s):
   return ''.join(c for c in unicodedata.normalize('NFD', s)
                  if unicodedata.category(c) != 'Mn')
</code></pre>

<p>This works on greek letters, too:</p>

<pre><code>&gt;&gt;&gt; strip_accents(u""A \u00c0 \u0394 \u038E"")
u'A A \u0394 \u03a5'
&gt;&gt;&gt; 
</code></pre>

<p>The <a href=""http://www.unicode.org/reports/tr44/#GC_Values_Table"" rel=""noreferrer"">character category</a> ""Mn"" stands for <code>Nonspacing_Mark</code>, which is similar to unicodedata.combining in MiniQuark's answer (I didn't think of unicodedata.combining, but it is probably the better solution, because it's more explicit).</p>

<p>And keep in mind, these manipulations may significantly alter the meaning of the text. Accents, Umlauts etc. are not ""decoration"".</p>
",,
395,3,Is it possible to break a long line to multiple lines in Python?,"<p>Just like C, you can break a long line into multiple short lines. But in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>, if I do this, there will be an indent error... Is it possible?</p>
","Is it possible to break a long line to multiple lines in Python?<p>Just like C, you can break a long line into multiple short lines. But in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a>, if I do this, there will be an indent error... Is it possible?</p>
",<python><line-breaks>,break lines long multiple possible line indent short error python,"<p>From <a href=""http://www.python.org/dev/peps/pep-0008/"" rel=""noreferrer"">PEP 8 - Style Guide for Python Code</a>:</p>
<blockquote>
<p>The preferred way of wrapping long lines is by using Python's implied line
continuation inside parentheses, brackets and braces.  If necessary, you
can add an extra pair of parentheses around an expression, but sometimes
using a backslash looks better.  Make sure to indent the continued line
appropriately.</p>
</blockquote>
<p>Example of implicit line continuation:</p>
<pre><code>a = some_function(
    '1' + '2' + '3' - '4')
</code></pre>
<p>On the topic of line breaks around a binary operator, it goes on to say:</p>
<blockquote>
<p>For decades the recommended style was to break after binary operators.
But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line.</p>
</blockquote>
<blockquote>
<p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style (line breaks <em>before</em> the operator) is suggested.</p>
</blockquote>
<p>Example of explicit line continuation:</p>
<pre><code>a = '1'   \
    + '2' \
    + '3' \
    - '4'
</code></pre>
",,
396,3,Finding local IP addresses using Python's stdlib,"<p>How can I find local IP addresses (i.e. 192.168.x.x or 10.0.x.x) in Python platform independently and using only the standard library?</p>
","Finding local IP addresses using Python's stdlib<p>How can I find local IP addresses (i.e. 192.168.x.x or 10.0.x.x) in Python platform independently and using only the standard library?</p>
",<python><networking><ip-address>,addresses ip local stdlibhow independently platform using finding standard library,"<pre><code>import socket
socket.gethostbyname(socket.gethostname())
</code></pre>

<p>This won't work always (returns <code>127.0.0.1</code> on machines having the hostname in <code>/etc/hosts</code> as <code>127.0.0.1</code>), a paliative would be what gimel shows, use <code>socket.getfqdn()</code> instead. Of course your machine needs a resolvable hostname.</p>
",,
397,6,Automatically create requirements.txt,"<p>Sometimes I download the python source code from <code>github</code> and don't know how to install all the dependencies. If there is no <code>requirements.txt</code> file I have to create it by hands.<br />
The question is:<br />
Given the python source code directory is it possible to create <code>requirements.txt</code> automatically from the import section?</p>
","Automatically create requirements.txt<p>Sometimes I download the python source code from <code>github</code> and don't know how to install all the dependencies. If there is no <code>requirements.txt</code> file I have to create it by hands.<br />
The question is:<br />
Given the python source code directory is it possible to create <code>requirements.txt</code> automatically from the import section?</p>
",<python><dependencies><python-import><requirements.txt>,requirements create automatically txt source hands section dependencies download,"<p>Use <a href=""https://packaging.python.org/tutorials/managing-dependencies/#managing-dependencies"" rel=""noreferrer"">Pipenv</a> or other tools is recommended for improving your development flow.</p>
<pre><code>pip3 freeze &gt; requirements.txt  # Python3
pip freeze &gt; requirements.txt  # Python2
</code></pre>
<p>If you do not use a virtual environment, <a href=""https://github.com/Damnever/pigar"" rel=""noreferrer"">pigar</a> will be a good choice for you.</p>
",,
398,3,How to save/restore a model after training?,"<p>After you train a model in Tensorflow: </p>

<ol>
<li>How do you save the trained model?</li>
<li>How do you later restore this saved model?</li>
</ol>
","How to save/restore a model after training?<p>After you train a model in Tensorflow: </p>

<ol>
<li>How do you save the trained model?</li>
<li>How do you later restore this saved model?</li>
</ol>
",<python><tensorflow>,model restore save tensorflow trained training saved train later forgotten,"<h1>Tensorflow 2 Docs</h1>
<h3>Saving Checkpoints</h3>
<p>Adapted from <a href=""https://www.tensorflow.org/guide/checkpoint"" rel=""noreferrer"">the docs</a></p>
<pre><code># -------------------------
# -----  Toy Context  -----
# -------------------------
import tensorflow as tf


class Net(tf.keras.Model):
    &quot;&quot;&quot;A simple linear model.&quot;&quot;&quot;

    def __init__(self):
        super(Net, self).__init__()
        self.l1 = tf.keras.layers.Dense(5)

    def call(self, x):
        return self.l1(x)


def toy_dataset():
    inputs = tf.range(10.0)[:, None]
    labels = inputs * 5.0 + tf.range(5.0)[None, :]
    return (
        tf.data.Dataset.from_tensor_slices(dict(x=inputs, y=labels)).repeat().batch(2)
    )


def train_step(net, example, optimizer):
    &quot;&quot;&quot;Trains `net` on `example` using `optimizer`.&quot;&quot;&quot;
    with tf.GradientTape() as tape:
        output = net(example[&quot;x&quot;])
        loss = tf.reduce_mean(tf.abs(output - example[&quot;y&quot;]))
    variables = net.trainable_variables
    gradients = tape.gradient(loss, variables)
    optimizer.apply_gradients(zip(gradients, variables))
    return loss


# ----------------------------
# -----  Create Objects  -----
# ----------------------------

net = Net()
opt = tf.keras.optimizers.Adam(0.1)
dataset = toy_dataset()
iterator = iter(dataset)
ckpt = tf.train.Checkpoint(
    step=tf.Variable(1), optimizer=opt, net=net, iterator=iterator
)
manager = tf.train.CheckpointManager(ckpt, &quot;./tf_ckpts&quot;, max_to_keep=3)

# ----------------------------
# -----  Train and Save  -----
# ----------------------------

ckpt.restore(manager.latest_checkpoint)
if manager.latest_checkpoint:
    print(&quot;Restored from {}&quot;.format(manager.latest_checkpoint))
else:
    print(&quot;Initializing from scratch.&quot;)

for _ in range(50):
    example = next(iterator)
    loss = train_step(net, example, opt)
    ckpt.step.assign_add(1)
    if int(ckpt.step) % 10 == 0:
        save_path = manager.save()
        print(&quot;Saved checkpoint for step {}: {}&quot;.format(int(ckpt.step), save_path))
        print(&quot;loss {:1.2f}&quot;.format(loss.numpy()))


# ---------------------
# -----  Restore  -----
# ---------------------

# In another script, re-initialize objects
opt = tf.keras.optimizers.Adam(0.1)
net = Net()
dataset = toy_dataset()
iterator = iter(dataset)
ckpt = tf.train.Checkpoint(
    step=tf.Variable(1), optimizer=opt, net=net, iterator=iterator
)
manager = tf.train.CheckpointManager(ckpt, &quot;./tf_ckpts&quot;, max_to_keep=3)

# Re-use the manager code above ^

ckpt.restore(manager.latest_checkpoint)
if manager.latest_checkpoint:
    print(&quot;Restored from {}&quot;.format(manager.latest_checkpoint))
else:
    print(&quot;Initializing from scratch.&quot;)

for _ in range(50):
    example = next(iterator)
    # Continue training or evaluate etc.

</code></pre>
<h3>More links</h3>
<ul>
<li><p>exhaustive and useful tutorial on <strong><code>saved_model</code></strong> -&gt; <a href=""https://www.tensorflow.org/guide/saved_model"" rel=""noreferrer"">https://www.tensorflow.org/guide/saved_model</a></p>
</li>
<li><p><strong><code>keras</code></strong> detailed guide to save models -&gt; <a href=""https://www.tensorflow.org/guide/keras/save_and_serialize"" rel=""noreferrer"">https://www.tensorflow.org/guide/keras/save_and_serialize</a></p>
</li>
</ul>
<blockquote>
<p>Checkpoints capture the exact value of all parameters (tf.Variable objects) used by a model. <strong>Checkpoints do not contain any description of the computation defined by the model</strong> and thus are typically only useful when source code that will use the saved parameter values is available.</p>
<p>The SavedModel format on the other hand <strong>includes a serialized description of the computation defined by the model</strong> in addition to the parameter values (checkpoint). Models in this format are <em>independent</em> of the source code that created the model. They are thus suitable for deployment via TensorFlow Serving, TensorFlow Lite, TensorFlow.js, or programs in other programming languages (the C, C++, Java, Go, Rust, C# etc. TensorFlow APIs).</p>
</blockquote>
<p>(Highlights are my own)</p>
<hr />
<h1>Tensorflow &lt; 2</h1>
<hr />
<p>From the docs:</p>
<h3>Save</h3>
<pre><code># Create some variables.
v1 = tf.get_variable(&quot;v1&quot;, shape=[3], initializer = tf.zeros_initializer)
v2 = tf.get_variable(&quot;v2&quot;, shape=[5], initializer = tf.zeros_initializer)

inc_v1 = v1.assign(v1+1)
dec_v2 = v2.assign(v2-1)

# Add an op to initialize the variables.
init_op = tf.global_variables_initializer()

# Add ops to save and restore all the variables.
saver = tf.train.Saver()

# Later, launch the model, initialize the variables, do some work, and save the
# variables to disk.
with tf.Session() as sess:
  sess.run(init_op)
  # Do some work with the model.
  inc_v1.op.run()
  dec_v2.op.run()
  # Save the variables to disk.
  save_path = saver.save(sess, &quot;/tmp/model.ckpt&quot;)
  print(&quot;Model saved in path: %s&quot; % save_path)
</code></pre>
<h3>Restore</h3>
<pre><code>tf.reset_default_graph()

# Create some variables.
v1 = tf.get_variable(&quot;v1&quot;, shape=[3])
v2 = tf.get_variable(&quot;v2&quot;, shape=[5])

# Add ops to save and restore all the variables.
saver = tf.train.Saver()

# Later, launch the model, use the saver to restore variables from disk, and
# do some work with the model.
with tf.Session() as sess:
  # Restore variables from disk.
  saver.restore(sess, &quot;/tmp/model.ckpt&quot;)
  print(&quot;Model restored.&quot;)
  # Check the values of the variables
  print(&quot;v1 : %s&quot; % v1.eval())
  print(&quot;v2 : %s&quot; % v2.eval())
</code></pre>
<h2><code>simple_save</code></h2>
<p>Many good answer, for completeness I'll add my 2 cents: <strong><a href=""https://www.tensorflow.org/programmers_guide/saved_model"" rel=""noreferrer"">simple_save</a></strong>. Also a standalone code example using the <code>tf.data.Dataset</code> API.</p>
<p>Python 3 ; Tensorflow <strong>1.14</strong></p>
<pre><code>import tensorflow as tf
from tensorflow.saved_model import tag_constants

with tf.Graph().as_default():
    with tf.Session() as sess:
        ...

        # Saving
        inputs = {
            &quot;batch_size_placeholder&quot;: batch_size_placeholder,
            &quot;features_placeholder&quot;: features_placeholder,
            &quot;labels_placeholder&quot;: labels_placeholder,
        }
        outputs = {&quot;prediction&quot;: model_output}
        tf.saved_model.simple_save(
            sess, 'path/to/your/location/', inputs, outputs
        )
</code></pre>
<p>Restoring:</p>
<pre><code>graph = tf.Graph()
with restored_graph.as_default():
    with tf.Session() as sess:
        tf.saved_model.loader.load(
            sess,
            [tag_constants.SERVING],
            'path/to/your/location/',
        )
        batch_size_placeholder = graph.get_tensor_by_name('batch_size_placeholder:0')
        features_placeholder = graph.get_tensor_by_name('features_placeholder:0')
        labels_placeholder = graph.get_tensor_by_name('labels_placeholder:0')
        prediction = restored_graph.get_tensor_by_name('dense/BiasAdd:0')

        sess.run(prediction, feed_dict={
            batch_size_placeholder: some_value,
            features_placeholder: some_other_value,
            labels_placeholder: another_value
        })
</code></pre>
<h1>Standalone example</h1>
<p><strong><a href=""http://vict0rsch.github.io/2018/05/17/restore-tf-model-dataset/"" rel=""noreferrer"">Original blog post</a></strong></p>
<p>The following code generates random data for the sake of the demonstration.</p>
<ol>
<li>We start by creating the placeholders. They will hold the data at runtime. From them, we create the <code>Dataset</code> and then its <code>Iterator</code>. We get the iterator's generated tensor, called <code>input_tensor</code> which will serve as input to our model.</li>
<li>The model itself is built from <code>input_tensor</code>: a GRU-based bidirectional RNN followed by a dense classifier. Because why not.</li>
<li>The loss is a <code>softmax_cross_entropy_with_logits</code>, optimized with <code>Adam</code>. After 2 epochs (of 2 batches each), we save the &quot;trained&quot; model with <code>tf.saved_model.simple_save</code>. If you run the code as is, then the model will be saved in a folder called <code>simple/</code> in your current working directory.</li>
<li>In a new graph, we then restore the saved model with <code>tf.saved_model.loader.load</code>. We grab the placeholders and logits with <code>graph.get_tensor_by_name</code> and the <code>Iterator</code> initializing operation with <code>graph.get_operation_by_name</code>.</li>
<li>Lastly we run an inference for both batches in the dataset, and check that the saved and restored model both yield the same values. They do!</li>
</ol>
<p>Code:</p>
<pre><code>import os
import shutil
import numpy as np
import tensorflow as tf
from tensorflow.python.saved_model import tag_constants


def model(graph, input_tensor):
    &quot;&quot;&quot;Create the model which consists of
    a bidirectional rnn (GRU(10)) followed by a dense classifier

    Args:
        graph (tf.Graph): Tensors' graph
        input_tensor (tf.Tensor): Tensor fed as input to the model

    Returns:
        tf.Tensor: the model's output layer Tensor
    &quot;&quot;&quot;
    cell = tf.nn.rnn_cell.GRUCell(10)
    with graph.as_default():
        ((fw_outputs, bw_outputs), (fw_state, bw_state)) = tf.nn.bidirectional_dynamic_rnn(
            cell_fw=cell,
            cell_bw=cell,
            inputs=input_tensor,
            sequence_length=[10] * 32,
            dtype=tf.float32,
            swap_memory=True,
            scope=None)
        outputs = tf.concat((fw_outputs, bw_outputs), 2)
        mean = tf.reduce_mean(outputs, axis=1)
        dense = tf.layers.dense(mean, 5, activation=None)

        return dense


def get_opt_op(graph, logits, labels_tensor):
    &quot;&quot;&quot;Create optimization operation from model's logits and labels

    Args:
        graph (tf.Graph): Tensors' graph
        logits (tf.Tensor): The model's output without activation
        labels_tensor (tf.Tensor): Target labels

    Returns:
        tf.Operation: the operation performing a stem of Adam optimizer
    &quot;&quot;&quot;
    with graph.as_default():
        with tf.variable_scope('loss'):
            loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(
                    logits=logits, labels=labels_tensor, name='xent'),
                    name=&quot;mean-xent&quot;
                    )
        with tf.variable_scope('optimizer'):
            opt_op = tf.train.AdamOptimizer(1e-2).minimize(loss)
        return opt_op


if __name__ == '__main__':
    # Set random seed for reproducibility
    # and create synthetic data
    np.random.seed(0)
    features = np.random.randn(64, 10, 30)
    labels = np.eye(5)[np.random.randint(0, 5, (64,))]

    graph1 = tf.Graph()
    with graph1.as_default():
        # Random seed for reproducibility
        tf.set_random_seed(0)
        # Placeholders
        batch_size_ph = tf.placeholder(tf.int64, name='batch_size_ph')
        features_data_ph = tf.placeholder(tf.float32, [None, None, 30], 'features_data_ph')
        labels_data_ph = tf.placeholder(tf.int32, [None, 5], 'labels_data_ph')
        # Dataset
        dataset = tf.data.Dataset.from_tensor_slices((features_data_ph, labels_data_ph))
        dataset = dataset.batch(batch_size_ph)
        iterator = tf.data.Iterator.from_structure(dataset.output_types, dataset.output_shapes)
        dataset_init_op = iterator.make_initializer(dataset, name='dataset_init')
        input_tensor, labels_tensor = iterator.get_next()

        # Model
        logits = model(graph1, input_tensor)
        # Optimization
        opt_op = get_opt_op(graph1, logits, labels_tensor)

        with tf.Session(graph=graph1) as sess:
            # Initialize variables
            tf.global_variables_initializer().run(session=sess)
            for epoch in range(3):
                batch = 0
                # Initialize dataset (could feed epochs in Dataset.repeat(epochs))
                sess.run(
                    dataset_init_op,
                    feed_dict={
                        features_data_ph: features,
                        labels_data_ph: labels,
                        batch_size_ph: 32
                    })
                values = []
                while True:
                    try:
                        if epoch &lt; 2:
                            # Training
                            _, value = sess.run([opt_op, logits])
                            print('Epoch {}, batch {} | Sample value: {}'.format(epoch, batch, value[0]))
                            batch += 1
                        else:
                            # Final inference
                            values.append(sess.run(logits))
                            print('Epoch {}, batch {} | Final inference | Sample value: {}'.format(epoch, batch, values[-1][0]))
                            batch += 1
                    except tf.errors.OutOfRangeError:
                        break
            # Save model state
            print('\nSaving...')
            cwd = os.getcwd()
            path = os.path.join(cwd, 'simple')
            shutil.rmtree(path, ignore_errors=True)
            inputs_dict = {
                &quot;batch_size_ph&quot;: batch_size_ph,
                &quot;features_data_ph&quot;: features_data_ph,
                &quot;labels_data_ph&quot;: labels_data_ph
            }
            outputs_dict = {
                &quot;logits&quot;: logits
            }
            tf.saved_model.simple_save(
                sess, path, inputs_dict, outputs_dict
            )
            print('Ok')
    # Restoring
    graph2 = tf.Graph()
    with graph2.as_default():
        with tf.Session(graph=graph2) as sess:
            # Restore saved values
            print('\nRestoring...')
            tf.saved_model.loader.load(
                sess,
                [tag_constants.SERVING],
                path
            )
            print('Ok')
            # Get restored placeholders
            labels_data_ph = graph2.get_tensor_by_name('labels_data_ph:0')
            features_data_ph = graph2.get_tensor_by_name('features_data_ph:0')
            batch_size_ph = graph2.get_tensor_by_name('batch_size_ph:0')
            # Get restored model output
            restored_logits = graph2.get_tensor_by_name('dense/BiasAdd:0')
            # Get dataset initializing operation
            dataset_init_op = graph2.get_operation_by_name('dataset_init')

            # Initialize restored dataset
            sess.run(
                dataset_init_op,
                feed_dict={
                    features_data_ph: features,
                    labels_data_ph: labels,
                    batch_size_ph: 32
                }

            )
            # Compute inference for both batches in dataset
            restored_values = []
            for i in range(2):
                restored_values.append(sess.run(restored_logits))
                print('Restored values: ', restored_values[i][0])

    # Check if original inference and restored inference are equal
    valid = all((v == rv).all() for v, rv in zip(values, restored_values))
    print('\nInferences match: ', valid)
</code></pre>
<p>This will print:</p>
<pre><code>$ python3 save_and_restore.py

Epoch 0, batch 0 | Sample value: [-0.13851789 -0.3087595   0.12804556  0.20013677 -0.08229901]
Epoch 0, batch 1 | Sample value: [-0.00555491 -0.04339041 -0.05111827 -0.2480045  -0.00107776]
Epoch 1, batch 0 | Sample value: [-0.19321944 -0.2104792  -0.00602257  0.07465433  0.11674127]
Epoch 1, batch 1 | Sample value: [-0.05275984  0.05981954 -0.15913513 -0.3244143   0.10673307]
Epoch 2, batch 0 | Final inference | Sample value: [-0.26331693 -0.13013336 -0.12553    -0.04276478  0.2933622 ]
Epoch 2, batch 1 | Final inference | Sample value: [-0.07730117  0.11119192 -0.20817074 -0.35660955  0.16990358]

Saving...
INFO:tensorflow:Assets added to graph.
INFO:tensorflow:No assets to write.
INFO:tensorflow:SavedModel written to: b'/some/path/simple/saved_model.pb'
Ok

Restoring...
INFO:tensorflow:Restoring parameters from b'/some/path/simple/variables/variables'
Ok
Restored values:  [-0.26331693 -0.13013336 -0.12553    -0.04276478  0.2933622 ]
Restored values:  [-0.07730117  0.11119192 -0.20817074 -0.35660955  0.16990358]

Inferences match:  True
</code></pre>
",,
399,5,Why is __init__() always called after __new__()?,"<p>I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the <a href=""https://en.wikipedia.org/wiki/Flyweight_pattern"" rel=""noreferrer"">flyweight design pattern</a>.</p>

<p>However, I'm a bit confused as to why <code>__init__</code> is always called after <code>__new__</code>. I wasn't expecting this. Can anyone tell me why this is happening and how I can implement this functionality otherwise? (Apart from putting the implementation into the <code>__new__</code> which feels quite hacky.)</p>

<p>Here's an example:</p>

<pre><code>class A(object):
    _dict = dict()

    def __new__(cls):
        if 'key' in A._dict:
            print ""EXISTS""
            return A._dict['key']
        else:
            print ""NEW""
            return super(A, cls).__new__(cls)

    def __init__(self):
        print ""INIT""
        A._dict['key'] = self
        print """"

a1 = A()
a2 = A()
a3 = A()
</code></pre>

<p>Outputs:</p>

<pre><code>NEW
INIT

EXISTS
INIT

EXISTS
INIT
</code></pre>

<p>Why?</p>
","Why is __init__() always called after __new__()?<p>I'm just trying to streamline one of my classes and have introduced some functionality in the same style as the <a href=""https://en.wikipedia.org/wiki/Flyweight_pattern"" rel=""noreferrer"">flyweight design pattern</a>.</p>

<p>However, I'm a bit confused as to why <code>__init__</code> is always called after <code>__new__</code>. I wasn't expecting this. Can anyone tell me why this is happening and how I can implement this functionality otherwise? (Apart from putting the implementation into the <code>__new__</code> which feels quite hacky.)</p>

<p>Here's an example:</p>

<pre><code>class A(object):
    _dict = dict()

    def __new__(cls):
        if 'key' in A._dict:
            print ""EXISTS""
            return A._dict['key']
        else:
            print ""NEW""
            return super(A, cls).__new__(cls)

    def __init__(self):
        print ""INIT""
        A._dict['key'] = self
        print """"

a1 = A()
a2 = A()
a3 = A()
</code></pre>

<p>Outputs:</p>

<pre><code>NEW
INIT

EXISTS
INIT

EXISTS
INIT
</code></pre>

<p>Why?</p>
",<python><design-patterns><class-design>,new functionality called init outputs streamline flyweight hacky expecting introduced,"<blockquote>
<p>Use <strong><code>__new__</code></strong> when you need to control
the creation of a new instance.</p>
</blockquote>
<blockquote>
<p>Use
<strong><code>__init__</code></strong> when you need to control initialization of a new instance.</p>
<p><strong><code>__new__</code></strong> is the first step of instance creation.  It's called first, and is
responsible for returning a new
instance of your class.</p>
</blockquote>
<blockquote>
<p>In contrast,
<strong><code>__init__</code></strong> doesn't return anything; it's only responsible for initializing the
instance after it's been created.</p>
<p>In general, you shouldn't need to
override <strong><code>__new__</code></strong> unless you're
subclassing an immutable type like
str, int, unicode or tuple.</p>
</blockquote>
<p>From April 2008 post: <a href=""http://mail.python.org/pipermail/tutor/2008-April/061426.html"" rel=""noreferrer"">When to use <code>__new__</code> vs. <code>__init__</code>?</a> on mail.python.org.</p>
<p>You should consider that what you are trying to do is usually done with a <a href=""http://en.wikipedia.org/wiki/Factory_object"" rel=""noreferrer"">Factory</a> and that's the best way to do it. Using <strong><code>__new__</code></strong> is not a good clean solution so please consider the usage of a factory. Here's a good example: <a href=""http://code.activestate.com/recipes/86900/"" rel=""noreferrer"">ActiveState F ?? ?? ?? ????  ?? ?? ?? ?? ????? Recipe</a>.</p>
",,
400,2,"Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()","<p>Having issue filtering my result dataframe with an <code>or</code> condition. I want my result <code>df</code> to extract all column <code>var</code> values that are above 0.25 and below -0.25.</p>
<p>This logic below gives me an ambiguous truth value however it work when I split this filtering in two separate operations. What is happening here? not sure where to use the suggested <code>a.empty(), a.bool(), a.item(),a.any() or a.all()</code>.</p>
<pre><code>result = result[(result['var'] &gt; 0.25) or (result['var'] &lt; -0.25)]
</code></pre>
","Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()<p>Having issue filtering my result dataframe with an <code>or</code> condition. I want my result <code>df</code> to extract all column <code>var</code> values that are above 0.25 and below -0.25.</p>
<p>This logic below gives me an ambiguous truth value however it work when I split this filtering in two separate operations. What is happening here? not sure where to use the suggested <code>a.empty(), a.bool(), a.item(),a.any() or a.all()</code>.</p>
<pre><code>result = result[(result['var'] &gt; 0.25) or (result['var'] &lt; -0.25)]
</code></pre>
",<python><pandas><dataframe><boolean><filtering>,ambiguous truth bool filtering item result value operations condition var,"<p>The <code>or</code> and <code>and</code> python statements require <code>truth</code>-values. For <code>pandas</code> these are considered ambiguous so you should use ""bitwise"" <code>|</code> (or) or <code>&amp;</code> (and) operations:</p>

<pre><code>result = result[(result['var']&gt;0.25) | (result['var']&lt;-0.25)]
</code></pre>

<p>These are overloaded for these kind of datastructures to yield the element-wise <code>or</code> (or <code>and</code>).</p>

<hr>

<p>Just to add some more explanation to this statement:</p>

<p>The exception is thrown when you want to get the <code>bool</code> of a <code>pandas.Series</code>:</p>

<pre><code>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; x = pd.Series([1])
&gt;&gt;&gt; bool(x)
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</code></pre>

<p>What you hit was a place where the operator <strong>implicitly</strong> converted the operands to <code>bool</code> (you used <code>or</code> but it also happens for <code>and</code>, <code>if</code> and <code>while</code>):</p>

<pre><code>&gt;&gt;&gt; x or x
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; x and x
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; if x:
...     print('fun')
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; while x:
...     print('fun')
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</code></pre>

<p>Besides these 4 statements there are several python functions that hide some <code>bool</code> calls (like <code>any</code>, <code>all</code>, <code>filter</code>, ...) these are normally not problematic with <code>pandas.Series</code> but for completeness I wanted to mention these.</p>

<hr>

<p>In your case the exception isn't really helpful, because it doesn't mention the <strong>right alternatives</strong>. For <code>and</code> and <code>or</code> you can use (if you want element-wise comparisons):</p>

<ul>
<li><p><a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html""><code>numpy.logical_or</code></a>:</p>

<pre><code>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.logical_or(x, y)
</code></pre>

<p>or simply the <code>|</code> operator:</p>

<pre><code>&gt;&gt;&gt; x | y
</code></pre></li>
<li><p><a href=""https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html""><code>numpy.logical_and</code></a>:</p>

<pre><code>&gt;&gt;&gt; np.logical_and(x, y)
</code></pre>

<p>or simply the <code>&amp;</code> operator:</p>

<pre><code>&gt;&gt;&gt; x &amp; y
</code></pre></li>
</ul>

<p>If you're using the operators then make sure you set your parenthesis correctly because of <a href=""https://docs.python.org/reference/expressions.html#operator-precedence"">the operator precedence</a>.</p>

<p>There are <a href=""https://docs.scipy.org/doc/numpy/reference/routines.logic.html"">several logical numpy functions</a> which <em>should</em> work on <code>pandas.Series</code>.</p>

<hr>

<p>The alternatives mentioned in the Exception are more suited if you encountered it when doing <code>if</code> or <code>while</code>. I'll shortly explain each of these:</p>

<ul>
<li><p>If you want to check if your Series is <strong>empty</strong>:</p>

<pre><code>&gt;&gt;&gt; x = pd.Series([])
&gt;&gt;&gt; x.empty
True
&gt;&gt;&gt; x = pd.Series([1])
&gt;&gt;&gt; x.empty
False
</code></pre>

<p>Python normally interprets the <code>len</code>gth of containers (like <code>list</code>, <code>tuple</code>, ...) as truth-value if it has no explicit boolean interpretation. So if you want the python-like check, you could do: <code>if x.size</code> or <code>if not x.empty</code> instead of <code>if x</code>.</p></li>
<li><p>If your <code>Series</code> contains <strong>one and only one</strong> boolean value:</p>

<pre><code>&gt;&gt;&gt; x = pd.Series([100])
&gt;&gt;&gt; (x &gt; 50).bool()
True
&gt;&gt;&gt; (x &lt; 50).bool()
False
</code></pre></li>
<li><p>If you want to check the <strong>first and only item</strong> of your Series (like <code>.bool()</code> but works even for not boolean contents):</p>

<pre><code>&gt;&gt;&gt; x = pd.Series([100])
&gt;&gt;&gt; x.item()
100
</code></pre></li>
<li><p>If you want to check if <strong>all</strong> or <strong>any</strong> item is not-zero, not-empty or not-False:</p>

<pre><code>&gt;&gt;&gt; x = pd.Series([0, 1, 2])
&gt;&gt;&gt; x.all()   # because one element is zero
False
&gt;&gt;&gt; x.any()   # because one (or more) elements are non-zero
True
</code></pre></li>
</ul>
",,
401,3,How to break out of multiple loops?,"<p>Given the following code (that doesn't work):</p>

<pre><code>while True:
    #snip: print out current state
    while True:
        ok = get_input(""Is this ok? (y/n)"")
        if ok.lower() == ""y"": break 2 #this doesn't work :(
        if ok.lower() == ""n"": break
    #do more processing with menus and stuff
</code></pre>

<p>Is there a way to make this work? Or do I have do one check to break out of the input loop, then another, more limited, check in the outside loop to break out all together if the user is satisfied?</p>
","How to break out of multiple loops?<p>Given the following code (that doesn't work):</p>

<pre><code>while True:
    #snip: print out current state
    while True:
        ok = get_input(""Is this ok? (y/n)"")
        if ok.lower() == ""y"": break 2 #this doesn't work :(
        if ok.lower() == ""n"": break
    #do more processing with menus and stuff
</code></pre>

<p>Is there a way to make this work? Or do I have do one check to break out of the input loop, then another, more limited, check in the outside loop to break out all together if the user is satisfied?</p>
",<python><nested-loops><break><control-flow>,break loop check work satisfied loops outside limited input user,"<p>My first instinct would be to refactor the nested loop into a function and use <code>return</code> to break out. </p>
",,
402,3,Are dictionaries ordered in Python 3.6+?,"<p>Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the <a href=""https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation"" rel=""noreferrer"">documentation</a>. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.</p>
<p>How does the new dictionary implementation perform better than the older one while preserving element order?</p>
<p>Here is the text from the documentation:</p>
<blockquote>
<p><code>dict()</code> now uses a ƒ??compactƒ? representation <a href=""https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html"" rel=""noreferrer"">pioneered by PyPy</a>. The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5. <a href=""https://www.python.org/dev/peps/pep-0468"" rel=""noreferrer"">PEP 468</a> (Preserving the order of **kwargs in a function.) is implemented by this. The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5). (Contributed by INADA Naoki in <a href=""https://bugs.python.org/issue27350"" rel=""noreferrer"">issue 27350</a>. Idea <a href=""https://mail.python.org/pipermail/python-dev/2012-December/123028.html"" rel=""noreferrer"">originally suggested by Raymond Hettinger</a>.)</p>
</blockquote>
<p>Update December 2017: <code>dict</code>s retaining insertion order is <a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">guaranteed</a> for Python 3.7</p>
","Are dictionaries ordered in Python 3.6+?<p>Dictionaries are ordered in Python 3.6 (under the CPython implementation at least) unlike in previous incarnations. This seems like a substantial change, but it's only a short paragraph in the <a href=""https://docs.python.org/3.6/whatsnew/3.6.html#new-dict-implementation"" rel=""noreferrer"">documentation</a>. It is described as a CPython implementation detail rather than a language feature, but also implies this may become standard in the future.</p>
<p>How does the new dictionary implementation perform better than the older one while preserving element order?</p>
<p>Here is the text from the documentation:</p>
<blockquote>
<p><code>dict()</code> now uses a ƒ??compactƒ? representation <a href=""https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more.html"" rel=""noreferrer"">pioneered by PyPy</a>. The memory usage of the new dict() is between 20% and 25% smaller compared to Python 3.5. <a href=""https://www.python.org/dev/peps/pep-0468"" rel=""noreferrer"">PEP 468</a> (Preserving the order of **kwargs in a function.) is implemented by this. The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5). (Contributed by INADA Naoki in <a href=""https://bugs.python.org/issue27350"" rel=""noreferrer"">issue 27350</a>. Idea <a href=""https://mail.python.org/pipermail/python-dev/2012-December/123028.html"" rel=""noreferrer"">originally suggested by Raymond Hettinger</a>.)</p>
</blockquote>
<p>Update December 2017: <code>dict</code>s retaining insertion order is <a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">guaranteed</a> for Python 3.7</p>
",<python><python-3.x><dictionary><python-internals><python-3.6>,implementation order preserving language future new dict older ordered cpython,"<blockquote>
<p><strong>Are dictionaries ordered in Python 3.6+?</strong></p>
</blockquote>
<p>They are <strong>insertion ordered</strong><sup><strong>[1]</strong></sup>. As of Python 3.6, for the CPython implementation of Python, dictionaries <em>remember the order of items inserted</em>. <em>This is considered an implementation detail in Python 3.6</em>; you need to use <code>OrderedDict</code> if you want insertion ordering that's <em>guaranteed</em> across other implementations of Python (and other ordered behavior<sup><strong>[1]</strong></sup>).</p>
<p><strong>As of Python 3.7</strong>, this is no longer an implementation detail and instead becomes a language feature. <a href=""https://mail.python.org/pipermail/python-dev/2017-December/151283.html"" rel=""noreferrer"">From a python-dev message by GvR</a>:</p>
<blockquote>
<p>Make it so. &quot;Dict keeps insertion order&quot; is the ruling. Thanks!</p>
</blockquote>
<p>This simply means that <em>you can depend on it</em>. Other implementations of Python must also offer an insertion ordered dictionary if they wish to be a conforming implementation of Python 3.7.</p>
<hr />
<blockquote>
<p><strong>How does the Python <code>3.6</code> dictionary implementation perform better<sup>[2]</sup> than the older one while preserving element order?</strong></p>
</blockquote>
<p>Essentially, by <em>keeping two arrays</em>.</p>
<ul>
<li><p>The first array, <a href=""https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551"" rel=""noreferrer""><code>dk_entries</code></a>, holds the entries (<a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4"" rel=""noreferrer"">of type <code> PyDictKeyEntry</code></a>) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).</p>
</li>
<li><p>The second, <a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70"" rel=""noreferrer""><code>dk_indices</code></a>, holds the indices for the <code>dk_entries</code> array (that is, values that indicate the position of the corresponding entry in <code>dk_entries</code>). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in <code>dk_indices</code> and the corresponding entry is fetched by indexing <code>dk_entries</code>. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type <a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64"" rel=""noreferrer""><code>int8_t</code></a>(<code>1</code> byte) to <a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66"" rel=""noreferrer""><code>int32_t</code></a>/<a href=""https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68"" rel=""noreferrer""><code>int64_t</code></a> (<code>4</code>/<code>8</code> bytes) on <code>32</code>/<code>64</code> bit builds)</p>
</li>
</ul>
<p>In the previous implementation, a sparse array of type <code>PyDictKeyEntry</code> and size <code>dk_size</code> had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than <code>2/3 * dk_size</code> full <a href=""https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375"" rel=""noreferrer"">for performance reasons</a>. (and the empty space <em>still</em> had <code>PyDictKeyEntry</code> size!).</p>
<p>This is not the case now since only the <em>required</em> entries are stored (those that have been inserted) and a sparse array of type <code>intX_t</code> (<code>X</code> depending on dict size) <code>2/3 * dk_size</code>s full is kept. The empty space changed from type <code>PyDictKeyEntry</code> to <code>intX_t</code>.</p>
<p>So, obviously, creating a sparse array of type <code>PyDictKeyEntry</code> is much more memory demanding than a sparse array for storing <code>int</code>s.</p>
<p>You can see the full conversation <a href=""https://mail.python.org/pipermail/python-dev/2016-September/146327.html"" rel=""noreferrer"">on Python-Dev</a> regarding this feature if interested, it is a good read.</p>
<hr />
<p><a href=""https://mail.python.org/pipermail/python-dev/2012-December/123028.html"" rel=""noreferrer"">In the original proposal made by Raymond Hettinger</a>, a visualization of the data structures used can be seen which captures the gist of the idea.</p>
<blockquote>
<p>For example, the dictionary:</p>
<pre><code>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}
</code></pre>
<p>is currently stored as [keyhash, key, value]:</p>
<pre><code>entries = [['--', '--', '--'],
           [-8522787127447073495, 'barry', 'green'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           ['--', '--', '--'],
           [-9092791511155847987, 'timmy', 'red'],
           ['--', '--', '--'],
           [-6480567542315338377, 'guido', 'blue']]
</code></pre>
<p>Instead, the data should be organized as follows:</p>
<pre><code>indices =  [None, 1, None, None, None, 0, None, 2]
entries =  [[-9092791511155847987, 'timmy', 'red'],
            [-8522787127447073495, 'barry', 'green'],
            [-6480567542315338377, 'guido', 'blue']]
</code></pre>
</blockquote>
<p>As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it's really required, in the indices.</p>
<hr />
<sub>
[1]: I say ""insertion ordered"" and not ""ordered"" since, with the existence of OrderedDict, ""ordered"" suggests further behavior that the `dict` object *doesn't provide*. OrderedDicts are reversible, provide order sensitive methods and, mainly, provide an order-sensive equality tests (`==`, `!=`). `dict`s currently don't offer any of those behaviors/methods.
</sub>
<hr />
<sub>
[2]: The new dictionary implementations performs better **memory wise** by being designed more compactly; that's the main benefit here. Speed wise, the difference isn't so drastic, there's places where the new dict might introduce slight regressions (<a href=""https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375"" rel=""noreferrer"">key-lookups, for example</a>) while in others (iteration and resizing come to mind) a performance boost should be present. 
</sub>
<sub>
Overall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.  
</sub>
",,
403,4,Convert list to tuple in Python,"<p>I'm trying to convert a list to a tuple.</p>
<p>Most solutions on Google offer the following code:</p>
<pre><code>l = [4,5,6]
tuple(l)
</code></pre>
<p>However, the code results in an error message when I run it:</p>
<blockquote>
<p>TypeError: 'tuple' object is not callable</p>
</blockquote>
<p>How can I fix this problem?</p>
","Convert list to tuple in Python<p>I'm trying to convert a list to a tuple.</p>
<p>Most solutions on Google offer the following code:</p>
<pre><code>l = [4,5,6]
tuple(l)
</code></pre>
<p>However, the code results in an error message when I run it:</p>
<blockquote>
<p>TypeError: 'tuple' object is not callable</p>
</blockquote>
<p>How can I fix this problem?</p>
",<python><python-2.7><tuples>,tuple convert callable how offer code typeerror list solutions fix message,"<p>It should work fine. Don't use <code>tuple</code>, <code>list</code> or other special names as a variable name. It's probably what's causing your problem.</p>
<pre><code>&gt;&gt;&gt; l = [4,5,6]
&gt;&gt;&gt; tuple(l)
(4, 5, 6)

&gt;&gt;&gt; tuple = 'whoops'   # Don't do this
&gt;&gt;&gt; tuple(l)
TypeError: 'tuple' object is not callable
</code></pre>
",,
404,3,How do I remove/delete a virtualenv?,"<p>I created an environment with the following command: <code>virtualenv venv --distribute</code></p>

<p>I cannot remove it with the following command: <code>rmvirtualenv venv</code> -
<strong>This is part of <a href=""http://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#rmvirtualenv"" rel=""noreferrer"">virtualenvwrapper</a> as mentioned in <a href=""https://stackoverflow.com/a/18624789/452708"">answer below for virtualenvwrapper</a></strong></p>

<p>I do an <code>ls</code>on my current directory and I still see venv</p>

<p>The only way I can remove it seems to be: <code>sudo rm -rf venv</code></p>

<p>Note that the environment is not active. I'm running Ubuntu 11.10. Any ideas? I've tried rebooting my system to no avail.</p>
","How do I remove/delete a virtualenv?<p>I created an environment with the following command: <code>virtualenv venv --distribute</code></p>

<p>I cannot remove it with the following command: <code>rmvirtualenv venv</code> -
<strong>This is part of <a href=""http://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html#rmvirtualenv"" rel=""noreferrer"">virtualenvwrapper</a> as mentioned in <a href=""https://stackoverflow.com/a/18624789/452708"">answer below for virtualenvwrapper</a></strong></p>

<p>I do an <code>ls</code>on my current directory and I still see venv</p>

<p>The only way I can remove it seems to be: <code>sudo rm -rf venv</code></p>

<p>Note that the environment is not active. I'm running Ubuntu 11.10. Any ideas? I've tried rebooting my system to no avail.</p>
",<python-3.x><virtualenvwrapper><python-venv><virtual-environment><virtualenv-commands>,remove venv environment virtualenv command venvthe lson rf rebooting venvnote,"<blockquote>
<p>&quot;<em>The only way I can remove it seems to be: <code>sudo rm -rf venv</code></em>&quot;</p>
</blockquote>
<p>That's it! There is no command for deleting your virtual environment. Simply deactivate it and rid your application of its artifacts by recursively removing it.</p>
<p>Note that this is the same regardless of what kind of virtual environment you are using. <code>virtualenv</code>, <code>venv</code>, Anaconda environment, <code>pyenv</code>, <code>pipenv</code> are all based the same principle here.</p>
",,
405,5,How can I fill out a Python string with spaces?,"<p>I want to fill out a string with spaces. I know that the following works for zero's:</p>

<pre><code>&gt;&gt;&gt; print  ""'%06d'""%4
'000004'
</code></pre>

<p>But what should I do when I want this?:</p>

<pre><code>'hi    '
</code></pre>

<p>of course I can measure string length and do <code>str+"" ""*leftover</code>, but I'd like the shortest way.</p>
","How can I fill out a Python string with spaces?<p>I want to fill out a string with spaces. I know that the following works for zero's:</p>

<pre><code>&gt;&gt;&gt; print  ""'%06d'""%4
'000004'
</code></pre>

<p>But what should I do when I want this?:</p>

<pre><code>'hi    '
</code></pre>

<p>of course I can measure string length and do <code>str+"" ""*leftover</code>, but I'd like the shortest way.</p>
",<python><string><string-formatting><pad>,spaces string shortest leftover measure zero course length want str,"<p>You can do this with <a href=""http://docs.python.org/library/stdtypes.html#str.ljust"" rel=""noreferrer""><strong><code>str.ljust(width[, fillchar])</code></strong></a>:</p>

<blockquote>
  <p>Return the string left justified in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is a space). The original string is returned if <em>width</em> is less than <code>len(s)</code>.</p>
</blockquote>

<pre><code>&gt;&gt;&gt; 'hi'.ljust(10)
'hi        '
</code></pre>
",,
406,5,"Is there a difference between ""=="" and ""is""?","<p>My <a href=""https://english.stackexchange.com/questions/19967/what-does-google-fu-mean"">Google-fu</a> has failed me.</p>

<p>In Python, are the following two tests for equality equivalent?</p>

<pre><code>n = 5
# Test one.
if n == 5:
    print 'Yay!'

# Test two.
if n is 5:
    print 'Yay!'
</code></pre>

<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>

<p>Okay, so this kind of answers my question:</p>

<pre><code>L = []
L.append(1)
if L == [1]:
    print 'Yay!'
# Holds true, but...

if L is [1]:
    print 'Yay!'
# Doesn't.
</code></pre>

<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>
","Is there a difference between ""=="" and ""is""?<p>My <a href=""https://english.stackexchange.com/questions/19967/what-does-google-fu-mean"">Google-fu</a> has failed me.</p>

<p>In Python, are the following two tests for equality equivalent?</p>

<pre><code>n = 5
# Test one.
if n == 5:
    print 'Yay!'

# Test two.
if n is 5:
    print 'Yay!'
</code></pre>

<p>Does this hold true for objects where you would be comparing instances (a <code>list</code> say)?</p>

<p>Okay, so this kind of answers my question:</p>

<pre><code>L = []
L.append(1)
if L == [1]:
    print 'Yay!'
# Holds true, but...

if L is [1]:
    print 'Yay!'
# Doesn't.
</code></pre>

<p>So <code>==</code> tests value where <code>is</code> tests to see if they are the same object?</p>
",<python><reference><equality><semantics>,tests fu okay equality instances failed hold comparing TRUE answers,"<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>

<pre><code>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True

# Make a new copy of list `a` via the slice operator, 
# and assign it to variable `b`
&gt;&gt;&gt; b = a[:] 
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</code></pre>

<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>

<pre><code>&gt;&gt;&gt; 1000 is 10**3
False
&gt;&gt;&gt; 1000 == 10**3
True
</code></pre>

<p>The same holds true for string literals:</p>

<pre><code>&gt;&gt;&gt; ""a"" is ""a""
True
&gt;&gt;&gt; ""aa"" is ""a"" * 2
True
&gt;&gt;&gt; x = ""a""
&gt;&gt;&gt; ""aa"" is x * 2
False
&gt;&gt;&gt; ""aa"" is intern(x*2)
True
</code></pre>

<p>Please see <a href=""https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none"">this question</a> as well.</p>
",,
407,5,How to build a basic iterator?,"<p>How would one create an iterative function (or iterator object) in python?</p>
","How to build a basic iterator?<p>How would one create an iterative function (or iterator object) in python?</p>
",<python><object><iterator>,iterator iterative build basic create object function python formatted formats,"<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code>  and  <code>__next__()</code>.  </p>

<ul>
<li><p>The <code>__iter__</code> returns the iterator object and is implicitly called
at the start of loops.</p></li>
<li><p>The <code>__next__()</code> method returns the next value and is implicitly called at each loop increment.  This method raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p></li>
</ul>

<p>Here's a simple example of a counter:</p>

<pre><code>class Counter:
    def __init__(self, low, high):
        self.current = low - 1
        self.high = high

    def __iter__(self):
        return self

    def __next__(self): # Python 2: def next(self)
        self.current += 1
        if self.current &lt; self.high:
            return self.current
        raise StopIteration


for c in Counter(3, 9):
    print(c)
</code></pre>

<p>This will print:</p>

<pre><code>3
4
5
6
7
8
</code></pre>

<p>This is easier to write using a generator, as covered in a previous answer:</p>

<pre><code>def counter(low, high):
    current = low
    while current &lt; high:
        yield current
        current += 1

for c in counter(3, 9):
    print(c)
</code></pre>

<p>The printed output will be the same.  Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>

<p>David Mertz's article, <a href=""https://www.ibm.com/developerworks/library/l-pycon/"" rel=""noreferrer"">Iterators and Simple Generators</a>, is a pretty good introduction. </p>
",,
408,6,How to set the current working directory?,"<p>How to set the current working directory in Python?</p>
","How to set the current working directory?<p>How to set the current working directory in Python?</p>
",<python><working-directory>,working set current directory python zone forever formatted formats format,"<p>Try <a href=""http://docs.python.org/library/os.html#os.chdir"" rel=""noreferrer""><code>os.chdir</code></a></p>

<blockquote>
<pre><code>os.chdir(path)
</code></pre>
  
  <p>?ÿ?ÿ?ÿ?ÿ?ÿ?ÿ?ÿ?ÿChange the current working directory to path. Availability: Unix, Windows.</p>
</blockquote>
",,
409,3,"What is the python keyword ""with"" used for?","<p>What is the python keyword ""with"" used for?</p>

<p>Example from: <a href=""http://docs.python.org/tutorial/inputoutput.html"" rel=""noreferrer"">http://docs.python.org/tutorial/inputoutput.html</a></p>

<pre><code>&gt;&gt;&gt; with open('/tmp/workfile', 'r') as f:
...     read_data = f.read()
&gt;&gt;&gt; f.closed
True
</code></pre>
","What is the python keyword ""with"" used for?<p>What is the python keyword ""with"" used for?</p>

<p>Example from: <a href=""http://docs.python.org/tutorial/inputoutput.html"" rel=""noreferrer"">http://docs.python.org/tutorial/inputoutput.html</a></p>

<pre><code>&gt;&gt;&gt; with open('/tmp/workfile', 'r') as f:
...     read_data = f.read()
&gt;&gt;&gt; f.closed
True
</code></pre>
",<python>,keyword used inputoutput tutorial org html http docs python example,"<p>In python the <code>with</code> keyword is used when working with unmanaged resources (like file streams). It is similar to the <code>using</code> statement in VB.NET and C#. It allows you to ensure that a resource is &quot;cleaned up&quot; when the code that uses it finishes running, even if exceptions are thrown. It provides 'syntactic sugar' for <code>try/finally</code> blocks.</p>
<p>From <a href=""http://docs.python.org/whatsnew/2.6.html#pep-343-the-with-statement"" rel=""noreferrer"">Python Docs</a>:</p>
<blockquote>
<p>The <code>with</code> statement clarifies code that previously would use <code>try...finally</code> blocks to ensure that clean-up code is executed. In this section, Iƒ??ll discuss the statement as it will commonly be used. In the next section, Iƒ??ll examine the implementation details and show how to write objects for use with this statement.</p>
<p>The <code>with</code> statement is a control-flow structure whose basic structure is:</p>
<pre><code>with expression [as variable]:
    with-block
</code></pre>
<p>The expression is evaluated, and it should result in an object that supports the context management protocol (that is, has <code>__enter__()</code> and <code>__exit__()</code> methods).</p>
</blockquote>
<p><em>Update</em> fixed VB callout per Scott Wisniewski's comment. I was indeed confusing <code>with</code> with <code>using</code>.</p>
",,
410,3,How do I use raw_input in Python 3,"<pre><code>import sys
print(sys.platform)
print(2**100)
raw_input()
</code></pre>

<p>I am using Python 3.1 and can't get the <code>raw_input</code> to ""freeze"" the dos pop-up. The book I'm reading is for Python 2.5 and I'm using Python 3.1</p>

<p>What should I do to fix this?</p>
","How do I use raw_input in Python 3<pre><code>import sys
print(sys.platform)
print(2**100)
raw_input()
</code></pre>

<p>I am using Python 3.1 and can't get the <code>raw_input</code> to ""freeze"" the dos pop-up. The book I'm reading is for Python 2.5 and I'm using Python 3.1</p>

<p>What should I do to fix this?</p>
",<python><python-3.x>,rawinput dos freeze book pop python using fix reading use,"<p>Starting with Python 3, <code>raw_input()</code> was renamed to <code>input()</code>.</p>

<p>From <a href=""https://docs.python.org/3/whatsnew/3.0.html#builtins"" rel=""noreferrer"">Whatƒ??s New In Python 3.0, Builtins section</a> second item.</p>
",,
411,0,Return None if Dictionary key is not available,"<p>I need a way to get a dictionary value if its key exists, or simply return <code>None</code>, if it does not.</p>

<p>However, Python raises a <code>KeyError</code> exception if you search for a key that does not exist. I know that I can check for the key, but I am looking for something more explicit. Is there a way to just return <code>None</code> if the key does not exist?</p>
","Return None if Dictionary key is not available<p>I need a way to get a dictionary value if its key exists, or simply return <code>None</code>, if it does not.</p>

<p>However, Python raises a <code>KeyError</code> exception if you search for a key that does not exist. I know that I can check for the key, but I am looking for something more explicit. Is there a way to just return <code>None</code> if the key does not exist?</p>
",<python><dictionary><key><nonetype>,key return exist dictionary available raises keyerror explicit simply search,"<p>You can use <a href=""http://docs.python.org/library/stdtypes.html#dict.get"" rel=""noreferrer""><code>dict.get()</code></a></p>

<pre><code>value = d.get(key)
</code></pre>

<p>which will return <code>None</code> if <code>key is not in d</code>. You can also provide a different default value that will be returned instead of <code>None</code>:</p>

<pre><code>value = d.get(key, ""empty"")
</code></pre>
",,
412,3,Getting today's date in YYYY-MM-DD in Python?,"<p>I'm using:</p>

<pre><code>str(datetime.datetime.today()).split()[0]
</code></pre>

<p>to return today's date in the <code>YYYY-MM-DD</code> format.</p>

<p>Is there a less crude way to achieve this?</p>
","Getting today's date in YYYY-MM-DD in Python?<p>I'm using:</p>

<pre><code>str(datetime.datetime.today()).split()[0]
</code></pre>

<p>to return today's date in the <code>YYYY-MM-DD</code> format.</p>

<p>Is there a less crude way to achieve this?</p>
",<python><datetime><python-datetime>,yyyy dd mm today date crude achieve format getting return,"<p>You can use <a href=""http://strftime.org/"" rel=""noreferrer"">strftime</a>:</p>
<pre><code>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.today().strftime('%Y-%m-%d')
'2021-01-26'
</code></pre>
<p>Additionally, for anyone also looking for a zero-padded Hour, Minute, and Second at the end: (Comment by <a href=""https://stackoverflow.com/users/4561887/gabriel-staples"">Gabriel Staples</a>)</p>
<pre><code>&gt;&gt;&gt; datetime.today().strftime('%Y-%m-%d-%H:%M:%S')
'2021-01-26-16:50:03'
</code></pre>
",,
413,4,How can I pass a list as a command-line argument with argparse?,"<p>I am trying to pass a list as an argument to a command line program. Is there an <a href=""https://docs.python.org/3/library/argparse.html"" rel=""noreferrer""><code>argparse</code></a> option to pass a list as option?</p>

<pre><code>parser.add_argument('-l', '--list',
                      type=list, action='store',
                      dest='list',
                      help='&lt;Required&gt; Set flag',
                      required=True)
</code></pre>

<p>Script is called like below</p>

<pre><code>python test.py -l ""265340 268738 270774 270817""
</code></pre>
","How can I pass a list as a command-line argument with argparse?<p>I am trying to pass a list as an argument to a command line program. Is there an <a href=""https://docs.python.org/3/library/argparse.html"" rel=""noreferrer""><code>argparse</code></a> option to pass a list as option?</p>

<pre><code>parser.add_argument('-l', '--list',
                      type=list, action='store',
                      dest='list',
                      help='&lt;Required&gt; Set flag',
                      required=True)
</code></pre>

<p>Script is called like below</p>

<pre><code>python test.py -l ""265340 268738 270774 270817""
</code></pre>
",<python><argparse>,pass argparse option argument command list line called program script,"<h1>SHORT ANSWER</h1>
<p>Use the <code>nargs</code> option or the <code>'append'</code> setting of the <code>action</code> option (depending on how you want the user interface to behave).</p>
<p><strong>nargs</strong></p>
<pre><code>parser.add_argument('-l','--list', nargs='+', help='&lt;Required&gt; Set flag', required=True)
# Use like:
# python arg.py -l 1234 2345 3456 4567
</code></pre>
<p><code>nargs='+'</code> takes 1 or more arguments, <code>nargs='*'</code> takes zero or more.</p>
<p><strong>append</strong></p>
<pre><code>parser.add_argument('-l','--list', action='append', help='&lt;Required&gt; Set flag', required=True)
# Use like:
# python arg.py -l 1234 -l 2345 -l 3456 -l 4567
</code></pre>
<p>With <code>append</code> you provide the option multiple times to build up the list.</p>
<p><strong>Don't use <code>type=list</code>!!!</strong> - There is probably no situation where you would want to use <code>type=list</code> with <code>argparse</code>. Ever.</p>
<hr />
<h1>LONG ANSWER</h1>
<p>Let's take a look in more detail at some of the different ways one might try to do this, and the end result.</p>
<pre><code>import argparse

parser = argparse.ArgumentParser()

# By default it will fail with multiple arguments.
parser.add_argument('--default')

# Telling the type to be a list will also fail for multiple arguments,
# but give incorrect results for a single argument.
parser.add_argument('--list-type', type=list)

# This will allow you to provide multiple arguments, but you will get
# a list of lists which is not desired.
parser.add_argument('--list-type-nargs', type=list, nargs='+')

# This is the correct way to handle accepting multiple arguments.
# '+' == 1 or more.
# '*' == 0 or more.
# '?' == 0 or 1.
# An int is an explicit number of arguments to accept.
parser.add_argument('--nargs', nargs='+')

# To make the input integers
parser.add_argument('--nargs-int-type', nargs='+', type=int)

# An alternate way to accept multiple inputs, but you must
# provide the flag once per input. Of course, you can use
# type=int here if you want.
parser.add_argument('--append-action', action='append')

# To show the results of the given option to screen.
for _, value in parser.parse_args()._get_kwargs():
    if value is not None:
        print(value)
</code></pre>
<p>Here is the output you can expect:</p>
<pre><code>$ python arg.py --default 1234 2345 3456 4567
...
arg.py: error: unrecognized arguments: 2345 3456 4567

$ python arg.py --list-type 1234 2345 3456 4567
...
arg.py: error: unrecognized arguments: 2345 3456 4567

$ # Quotes won't help here... 
$ python arg.py --list-type &quot;1234 2345 3456 4567&quot;
['1', '2', '3', '4', ' ', '2', '3', '4', '5', ' ', '3', '4', '5', '6', ' ', '4', '5', '6', '7']

$ python arg.py --list-type-nargs 1234 2345 3456 4567
[['1', '2', '3', '4'], ['2', '3', '4', '5'], ['3', '4', '5', '6'], ['4', '5', '6', '7']]

$ python arg.py --nargs 1234 2345 3456 4567
['1234', '2345', '3456', '4567']

$ python arg.py --nargs-int-type 1234 2345 3456 4567
[1234, 2345, 3456, 4567]

$ # Negative numbers are handled perfectly fine out of the box.
$ python arg.py --nargs-int-type -1234 2345 -3456 4567
[-1234, 2345, -3456, 4567]

$ python arg.py --append-action 1234 --append-action 2345 --append-action 3456 --append-action 4567
['1234', '2345', '3456', '4567']
</code></pre>
<p><em>Takeaways</em>:</p>
<ul>
<li>Use <code>nargs</code> or <code>action='append'</code>
<ul>
<li><code>nargs</code> can be more straightforward from a user perspective, but it can be unintuitive if there are positional arguments because <code>argparse</code> can't tell what should be a positional argument and what belongs to the <code>nargs</code>; if you have positional arguments then <code>action='append'</code> may end up being a better choice.</li>
<li>The above is only true if <code>nargs</code> is given <code>'*'</code>, <code>'+'</code>, or <code>'?'</code>. If you provide an integer number (such as <code>4</code>) then there will be no problem mixing options with <code>nargs</code> and positional arguments because <code>argparse</code> will know exactly how many values to expect for the option.</li>
</ul>
</li>
<li>Don't use quotes on the command line<sup>1</sup></li>
<li>Don't use <code>type=list</code>, as it will return a list of lists
<ul>
<li>This happens because under the hood <code>argparse</code> uses the value of <code>type</code> to coerce <em>each individual given argument</em> you your chosen <code>type</code>, not the aggregate of all arguments.</li>
<li>You can use <code>type=int</code> (or whatever) to get a list of ints (or whatever)</li>
</ul>
</li>
</ul>
<hr />
<p><sup>1</sup>: I don't mean in general.. I mean using quotes to <em>pass a list to <code>argparse</code></em> is not what you want.</p>
",,
414,3,How to disable Python warnings?,"<p>I am working with code that throws a lot of (for me at the moment) useless warnings using the <a href=""https://docs.python.org/3/library/warnings.html"" rel=""noreferrer""><code>warnings</code></a> library. Reading (/scanning) the documentation I only found a way <a href=""https://docs.python.org/3/library/warnings.html#temporarily-suppressing-warnings"" rel=""noreferrer"">to disable warnings for single functions</a>. But I don't want to change so much of the code.</p>
<p>Is there a flag like <code>python -no-warning foo.py</code>?</p>
<p>What would you recommend?</p>
","How to disable Python warnings?<p>I am working with code that throws a lot of (for me at the moment) useless warnings using the <a href=""https://docs.python.org/3/library/warnings.html"" rel=""noreferrer""><code>warnings</code></a> library. Reading (/scanning) the documentation I only found a way <a href=""https://docs.python.org/3/library/warnings.html#temporarily-suppressing-warnings"" rel=""noreferrer"">to disable warnings for single functions</a>. But I don't want to change so much of the code.</p>
<p>Is there a flag like <code>python -no-warning foo.py</code>?</p>
<p>What would you recommend?</p>
",<python><suppress-warnings>,warnings disable useless scanning recommend moment throws code flag warning,"<p>There's the <a href=""https://docs.python.org/3/using/cmdline.html#cmdoption-w"" rel=""noreferrer""><code>-W</code> option</a>.</p>
<pre><code>python -W ignore foo.py
</code></pre>
",,
415,3,What is a Python egg?,"<p>I'm new to Python and I'm just trying to understand how its packages work.  Presumably <code>eggs</code> are some sort of packaging mechanism, but what would be a quick overview of what role they play and may be some information on why they're useful and how to create them?</p>
","What is a Python egg?<p>I'm new to Python and I'm just trying to understand how its packages work.  Presumably <code>eggs</code> are some sort of packaging mechanism, but what would be a quick overview of what role they play and may be some information on why they're useful and how to create them?</p>
",<python><package><egg>,overview packaging role presumably mechanism play eggs egg useful quick,"<blockquote>
  <p><em>Note: <a href=""https://packaging.python.org/discussions/wheel-vs-egg/"" rel=""noreferrer"">Egg packaging has been superseded by Wheel packaging.</em></a></p>
</blockquote>

<p>Same concept as a <code>.jar</code> file in Java, it is a <code>.zip</code> file with some metadata files renamed <code>.egg</code>, for distributing code as bundles.</p>

<p><a href=""http://svn.python.org/projects/sandbox/trunk/setuptools/doc/formats.txt"" rel=""noreferrer"">Specifically: The Internal Structure of Python Eggs</a></p>

<blockquote>
  <p>A ""Python egg"" is a logical structure embodying the release of a
  specific version of a Python project, comprising its code, resources,
  and metadata. There are multiple formats that can be used to
  physically encode a Python egg, and others can be developed. However,
  a key principle of Python eggs is that they should be discoverable and
  importable. That is, it should be possible for a Python application to
  easily and efficiently find out what eggs are present on a system, and
  to ensure that the desired eggs' contents are importable.</p>
  
  <p>The <code>.egg</code> format is well-suited to distribution and the easy
  uninstallation or upgrades of code, since the project is essentially
  self-contained within a single directory or file, unmingled with any
  other projects' code or resources.  It also makes it possible to have
  multiple versions of a project simultaneously installed, such that
  individual programs can select the versions they wish to use.</p>
</blockquote>
",,
416,4,How would you make a comma-separated string from a list of strings?,"<p>What would be your preferred way to concatenate strings from a sequence such that between every two consecutive pairs a comma is added. That is, how do you map, for instance, <code>['a', 'b', 'c']</code> to <code>'a,b,c'</code>? (The cases <code>['s']</code> and <code>[]</code> should be mapped to <code>'s'</code> and <code>''</code>, respectively.)</p>

<p>I usually end up using something like <code>''.join(map(lambda x: x+',',l))[:-1]</code>, but also feeling somewhat unsatisfied.</p>
","How would you make a comma-separated string from a list of strings?<p>What would be your preferred way to concatenate strings from a sequence such that between every two consecutive pairs a comma is added. That is, how do you map, for instance, <code>['a', 'b', 'c']</code> to <code>'a,b,c'</code>? (The cases <code>['s']</code> and <code>[]</code> should be mapped to <code>'s'</code> and <code>''</code>, respectively.)</p>

<p>I usually end up using something like <code>''.join(map(lambda x: x+',',l))[:-1]</code>, but also feeling somewhat unsatisfied.</p>
",<python><string><list>,comma map strings separated unsatisfied consecutive mapped sequence respectively feeling,"<pre><code>my_list = ['a', 'b', 'c', 'd']
my_string = ','.join(my_list)
</code></pre>

<pre><code>'a,b,c,d'
</code></pre>

<p>This won't work if the list contains integers</p>

<hr>

<p>And if the list contains non-string types (such as integers, floats, bools, None) then do:</p>

<pre><code>my_string = ','.join(map(str, my_list)) 
</code></pre>
",,
417,3,"Differences between distribute, distutils, setuptools and distutils2?","<h2>The Situation</h2>

<p>Iƒ??m trying to port an open-source library to Python 3.  (<a href=""http://sympy.org/"">SymPy</a>, if anyone is wondering.) </p>

<p>So, I need to run <code>2to3</code> automatically when building for Python 3. To do that, I need to use <code>distribute</code>. Therefore, I need to port the current system, which (according to the doctest) is <code>distutils</code>. </p>

<p><br></p>

<h2>The Problem</h2>

<p>Unfortunately, Iƒ??m not sure whatƒ??s the difference between these modulesƒ??<code>distutils</code>, <code>distribute</code>, <code>setuptools</code>. The documentation is sketchy as best, as they all seem to be a fork of one another, intended to be compatible in most circumstances (but actually, not all)ƒ??and so on, and so forth. </p>

<p><br></p>

<h2>The Question</h2>

<p><strong>Could someone explain the differences?</strong> What am I supposed to use?  What is the most modern solution? (As an aside, Iƒ??d also appreciate some guide on porting to <code>Distribute</code>, but thatƒ??s a tad beyond the scope of the questionƒ??)</p>
","Differences between distribute, distutils, setuptools and distutils2?<h2>The Situation</h2>

<p>Iƒ??m trying to port an open-source library to Python 3.  (<a href=""http://sympy.org/"">SymPy</a>, if anyone is wondering.) </p>

<p>So, I need to run <code>2to3</code> automatically when building for Python 3. To do that, I need to use <code>distribute</code>. Therefore, I need to port the current system, which (according to the doctest) is <code>distutils</code>. </p>

<p><br></p>

<h2>The Problem</h2>

<p>Unfortunately, Iƒ??m not sure whatƒ??s the difference between these modulesƒ??<code>distutils</code>, <code>distribute</code>, <code>setuptools</code>. The documentation is sketchy as best, as they all seem to be a fork of one another, intended to be compatible in most circumstances (but actually, not all)ƒ??and so on, and so forth. </p>

<p><br></p>

<h2>The Question</h2>

<p><strong>Could someone explain the differences?</strong> What am I supposed to use?  What is the most modern solution? (As an aside, Iƒ??d also appreciate some guide on porting to <code>Distribute</code>, but thatƒ??s a tad beyond the scope of the questionƒ??)</p>
",<python><packaging><setuptools><distutils><distribute>,distutils distribute port setuptools differences need problem unfortunately situation question aside,"<p>As of March 2020, most of the other answers to this question are several years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.</p>

<p>The <a href=""https://packaging.python.org/"" rel=""noreferrer"">Python Packaging User Guide</a> is worth a read. Every page has a ""last updated"" date displayed, so you can check the recency of the manual, and it's quite comprehensive. The fact that it's hosted on a subdomain of python.org of the Python Software Foundation just adds credence to it. The <a href=""https://packaging.python.org/key_projects/"" rel=""noreferrer"">Project Summaries</a> page is especially relevant here.</p>

<h2>Summary of tools:</h2>

<p>Here's a summary of the Python packaging landscape:</p>

<h3>Supported tools:</h3>

<ul>
<li><p><strong><code>distutils</code></strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3). It is useful for simple Python distributions, but lacks features. It introduces the <code>distutils</code> Python package that can be imported in your <code>setup.py</code> script.</p>

<ul>
<li><sub><a href=""https://docs.python.org/3/library/distutils.html"" rel=""noreferrer"">Official docs</a> | <a href=""https://packaging.python.org/key_projects/#distutils"" rel=""noreferrer""><code>distutils</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p><strong><code>setuptools</code></strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called <code>easy_install</code>. It also introduced the <code>setuptools</code> Python package that can be imported in your <code>setup.py</code> script, and the <code>pkg_resources</code> Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the <code>distutils</code> Python package. It should work well with <code>pip</code>. <a href=""https://github.com/pypa/setuptools/releases"" rel=""noreferrer"">It sees regular releases.</a></p>

<ul>
<li><sub><a href=""https://setuptools.readthedocs.io/en/latest/"" rel=""noreferrer"">Official docs</a> | <a href=""https://pypi.python.org/pypi/setuptools"" rel=""noreferrer"">Pypi page</a> | <a href=""https://github.com/pypa/setuptools"" rel=""noreferrer"">GitHub repo</a> | <a href=""https://packaging.python.org/key_projects/#setuptools"" rel=""noreferrer""><code>setuptools</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p><strong><code>scikit-build</code></strong> is an improved build system generator that internally uses CMake to build compiled Python extensions. Because scikit-build isn't based on distutils, it doesn't really have any of its limitations. When ninja-build is present, scikit-build can compile large projects over three times faster than the alternatives. It should work well with <code>pip</code>.</p>

<ul>
<li><sub><a href=""http://scikit-build.readthedocs.io/en/latest/"" rel=""noreferrer"">Official docs</a> | <a href=""https://pypi.org/project/scikit-build/"" rel=""noreferrer"">Pypi page</a> | <a href=""https://github.com/scikit-build/scikit-build"" rel=""noreferrer"">GitHub repo</a> | <a href=""https://packaging.python.org/key_projects/#scikit-build"" rel=""noreferrer""><code>scikit-build</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p><strong><code>distlib</code></strong> is a library that provides functionality that is used by higher level tools like <code>pip</code>.</p>

<ul>
<li><sub><a href=""http://pythonhosted.org/distlib/"" rel=""noreferrer"">Official Docs</a> | <a href=""https://pypi.org/project/distlib"" rel=""noreferrer"">Pypi page</a> | <a href=""https://bitbucket.org/pypa/distlib"" rel=""noreferrer"">Bitbucket repo</a> | <a href=""https://packaging.python.org/key_projects/#distlib"" rel=""noreferrer""><code>distlib</code> section of Python Package User Guide</a></sub></li>
</ul></li>
<li><p><strong><code>packaging</code></strong> is also a library that provides functionality used by higher level tools like <code>pip</code> and <code>setuptools</code></p>

<ul>
<li><sub><a href=""https://packaging.pypa.io/"" rel=""noreferrer"">Official Docs</a> | <a href=""https://pypi.org/project/packaging"" rel=""noreferrer"">Pypi page</a> | <a href=""https://github.com/pypa/packaging"" rel=""noreferrer"">GitHub repo</a> | <a href=""https://packaging.python.org/key_projects/#packaging"" rel=""noreferrer""><code>packaging</code> section of Python Package User Guide</a></sub></li>
</ul></li>
</ul>

<h3>Deprecated/abandoned tools:</h3>

<ul>
<li><p><strong><code>distribute</code></strong> was a fork of <code>setuptools</code>. It shared the same namespace, so if you had Distribute installed, <code>import setuptools</code> would actually import the package distributed with Distribute. <strong><em>Distribute was merged back into Setuptools 0.7</em></strong>, so you don't need to use Distribute any more. In fact, the version on Pypi is just a compatibility layer that installs Setuptools.</p></li>
<li><p><strong><code>distutils2</code></strong> was an attempt to take the best of <code>distutils</code>, <code>setuptools</code> and <code>distribute</code> and become the standard tool included in Python's standard library. The idea was that <code>distutils2</code> would be distributed for old Python versions, and that <code>distutils2</code> would be renamed to <code>packaging</code> for Python 3.3, which would include it in its standard library. These plans did not go as intended, however, and currently, <strong><em><code>distutils2</code> is an abandoned project</em></strong>. The latest release was in March 2012, and its Pypi home page has finally been updated to reflect its death.</p></li>
</ul>

<h2>Others:</h2>

<p>There are other tools, if you are interested, read <a href=""https://packaging.python.org/key_projects/"" rel=""noreferrer"">Project Summaries</a> in the Python Packaging User Guide. I won't list them all, to not repeat that page, and to keep the answer matching the question, which was only about <code>distribute</code>, <code>distutils</code>, <code>setuptools</code> and <code>distutils2</code>.</p>

<h2>Recommendation:</h2>

<p>If all of this is new to you, and you don't know where to start, <strong>I would recommend learning <code>setuptools</code></strong>, along with <code>pip</code> and <code>virtualenv</code>, which all work very well together.</p>

<p>If you're looking into <code>virtualenv</code>, you might be interested in this question: <a href=""https://stackoverflow.com/q/41573587/247696"">What is the difference between <code>venv</code>, <code>pyvenv</code>, <code>pyenv</code>, <code>virtualenv</code>, <code>virtualenvwrapper</code>, etc?</a>. (Yes, I know, I groan with you.)</p>
",,
418,3,How do I capture SIGINT in Python?,"<p>I'm working on a python script that starts several processes and database connections. Every now and then I want to kill the script with a <kbd>Ctrl</kbd>+<kbd>C</kbd> signal, and I'd like to do some cleanup.</p>

<p>In Perl I'd do this:</p>

<pre class=""lang-perl prettyprint-override""><code>$SIG{'INT'} = 'exit_gracefully';

sub exit_gracefully {
    print ""Caught ^C \n"";
    exit (0);
}
</code></pre>

<p>How do I do the analogue of this in Python?</p>
","How do I capture SIGINT in Python?<p>I'm working on a python script that starts several processes and database connections. Every now and then I want to kill the script with a <kbd>Ctrl</kbd>+<kbd>C</kbd> signal, and I'd like to do some cleanup.</p>

<p>In Perl I'd do this:</p>

<pre class=""lang-perl prettyprint-override""><code>$SIG{'INT'} = 'exit_gracefully';

sub exit_gracefully {
    print ""Caught ^C \n"";
    exit (0);
}
</code></pre>

<p>How do I do the analogue of this in Python?</p>
",<python><controls><signals>,script ctrl cleanup signal sigint processes analogue starts connections kill,"<p>Register your handler with <code>signal.signal</code> like this:</p>
<pre><code>#!/usr/bin/env python
import signal
import sys

def signal_handler(sig, frame):
    print('You pressed Ctrl+C!')
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
print('Press Ctrl+C')
signal.pause()
</code></pre>
<p>Code adapted from <a href=""http://www.linuxjournal.com/article/3946"" rel=""noreferrer"">here</a>.</p>
<p>More documentation on <code>signal</code> can be found <a href=""http://docs.python.org/library/signal.html"" rel=""noreferrer"">here</a>.
?ÿ</p>
",,
419,5,"How can I check if a string represents an int, without using try/except?","<p>Is there any way to tell whether a <strong>string</strong> represents an integer (e.g., <code>'3'</code>, <code>'-17'</code> but not <code>'3.14'</code> or <code>'asfasfas'</code>) Without using a try/except mechanism?</p>
<pre class=""lang-py prettyprint-override""><code>is_int('3.14') == False
is_int('-7')   == True
</code></pre>
","How can I check if a string represents an int, without using try/except?<p>Is there any way to tell whether a <strong>string</strong> represents an integer (e.g., <code>'3'</code>, <code>'-17'</code> but not <code>'3.14'</code> or <code>'asfasfas'</code>) Without using a try/except mechanism?</p>
<pre class=""lang-py prettyprint-override""><code>is_int('3.14') == False
is_int('-7')   == True
</code></pre>
",<python><string><integer>,represents try asfasfas mechanism string using tell int integer check,"<p>If you're really just annoyed at using <code>try/except</code>s all over the place, please just write a helper function:</p>

<pre><code>def RepresentsInt(s):
    try: 
        int(s)
        return True
    except ValueError:
        return False

&gt;&gt;&gt; print RepresentsInt(""+123"")
True
&gt;&gt;&gt; print RepresentsInt(""10.0"")
False
</code></pre>

<p>It's going to be WAY more code to exactly cover all the strings that Python considers integers.  I say just be pythonic on this one.</p>
",,
420,1,How to install pip with Python 3?,"<p>I want to install <a href=""http://pypi.python.org/pypi/pip"" rel=""noreferrer"">pip</a>. It should support Python 3, but it requires setuptools, which is available only for Python 2.</p>

<p>How can I install pip with Python 3?</p>
","How to install pip with Python 3?<p>I want to install <a href=""http://pypi.python.org/pypi/pip"" rel=""noreferrer"">pip</a>. It should support Python 3, but it requires setuptools, which is available only for Python 2.</p>

<p>How can I install pip with Python 3?</p>
",<python><python-3.x><pip><package><setuptools>,pip install requires python setuptools support available want formats format,"<p>edit: Manual installation and use of <code>setuptools</code> is not the standard process anymore.</p>
<h2>If you're running Python 2.7.9+ or Python 3.4+</h2>
<p>Congrats, you <em>should</em> already have <code>pip</code> installed. If you do not, read onward.</p>
<h2>If you're running a Unix-like System</h2>
<p>You can usually install the package for <code>pip</code> through your package manager if your version of Python is older than 2.7.9 or 3.4, or if your system did not include it for whatever reason.</p>
<p>Instructions for some of the more common distros follow.</p>
<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 2.x</h3>
<p>Run the following command from a terminal:</p>
<pre><code>sudo apt-get install python-pip 
</code></pre>
<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 3.x</h3>
<p>Run the following command from a terminal:</p>
<pre><code>sudo apt-get install python3-pip
</code></pre>
<strong>Note:</strong>
<p>On a fresh Debian/Ubuntu install, the package may not be found until you do:</p>
<pre><code>sudo apt-get update
</code></pre>
<h3>Installing <code>pip</code> on CentOS 7 for Python 2.x</h3>
<p>On CentOS 7, you have to install setup tools first, and then use that to install <code>pip</code>, as there is no direct package for it.</p>
<pre><code>sudo yum install python-setuptools
sudo easy_install pip
</code></pre>
<h3>Installing <code>pip</code> on CentOS 7 for Python 3.x</h3>
<p>Assuming you installed Python 3.4 <a href=""https://fedoraproject.org/wiki/EPEL"" rel=""noreferrer"">from EPEL</a>, you can install Python 3's setup tools and use it to install <code>pip</code>.</p>
<pre><code># First command requires you to have enabled EPEL for CentOS7
sudo yum install python34-setuptools
sudo easy_install pip
</code></pre>
<h3>If your Unix/Linux distro doesn't have it in package repos</h3>
<p>Install using the manual way detailed below.</p>
<h2>The manual way</h2>
<p>If you want to do it the manual way, the now-recommended method is to install using the <code>get-pip.py</code> script from <a href=""https://pip.pypa.io/en/stable/installing.html"" rel=""noreferrer""><code>pip</code>'s installation instructions</a>.</p>
<blockquote>
<p>Install pip</p>
<p>To install pip, securely download <a href=""https://bootstrap.pypa.io/get-pip.py"" rel=""noreferrer""><code>get-pip.py</code></a></p>
<p>Then run the following (which may require administrator access):</p>
<pre><code>python get-pip.py 
</code></pre>
<p>If <code>setuptools</code> is not already installed, <code>get-pip.py</code> will install setuptools for you.</p>
</blockquote>
",,
421,3,Why does python use 'else' after for and while loops?,"<p>I understand how this construct works:</p>
<pre class=""lang-py prettyprint-override""><code>for i in range(10):
    print(i)

    if i == 9:
        print(&quot;Too big - I'm giving up!&quot;)
        break
else:
    print(&quot;Completed successfully&quot;)
</code></pre>
<p>But I don't understand why <code>else</code> is used as the keyword here, since it suggests the code in question only runs if the <code>for</code> block does not complete, which is the opposite of what it does! No matter how I think about it, my brain can't progress seamlessly from the <code>for</code> statement to the <code>else</code> block. To me, <code>continue</code> or <code>continuewith</code> would make more sense (and I'm trying to train myself to read it as such).</p>
<p>I'm wondering how Python coders read this construct in their head (or aloud, if you like). Perhaps I'm missing something that would make such code blocks more easily decipherable?</p>
","Why does python use 'else' after for and while loops?<p>I understand how this construct works:</p>
<pre class=""lang-py prettyprint-override""><code>for i in range(10):
    print(i)

    if i == 9:
        print(&quot;Too big - I'm giving up!&quot;)
        break
else:
    print(&quot;Completed successfully&quot;)
</code></pre>
<p>But I don't understand why <code>else</code> is used as the keyword here, since it suggests the code in question only runs if the <code>for</code> block does not complete, which is the opposite of what it does! No matter how I think about it, my brain can't progress seamlessly from the <code>for</code> statement to the <code>else</code> block. To me, <code>continue</code> or <code>continuewith</code> would make more sense (and I'm trying to train myself to read it as such).</p>
<p>I'm wondering how Python coders read this construct in their head (or aloud, if you like). Perhaps I'm missing something that would make such code blocks more easily decipherable?</p>
",<python><if-statement><for-loop><for-else>,construct block read understand make seamlessly suggests aloud coders decipherable,"<p>It's a strange construct even to seasoned Python coders. When used in conjunction with for-loops it basically means ""find some item in the iterable, else if none was found do ..."". As in:</p>

<pre><code>found_obj = None
for obj in objects:
    if obj.key == search_key:
        found_obj = obj
        break
else:
    print('No object found.')
</code></pre>

<p>But anytime you see this construct, a better alternative is to either encapsulate the search in a function:</p>

<pre><code>def find_obj(search_key):
    for obj in objects:
        if obj.key == search_key:
            return obj
</code></pre>

<p>Or use a list comprehension:</p>

<pre><code>matching_objs = [o for o in objects if o.key == search_key]
if matching_objs:
    print('Found {}'.format(matching_objs[0]))
else:
    print('No object found.')
</code></pre>

<p>It is not semantically equivalent to the other two versions, but works good enough in non-performance critical code where it doesn't matter whether you iterate the whole list or not. Others may disagree, but I personally would avoid ever using the for-else or while-else blocks in production code. </p>

<p>See also <a href=""http://mail.python.org/pipermail/python-ideas/2009-October/006155.html"" rel=""noreferrer"">[Python-ideas] Summary of for...else threads</a></p>
",,
422,3,"How to debug in Django, the good way?","<p>So, I started learning to code in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a> and later <a href=""http://en.wikipedia.org/wiki/Django_%28web_framework%29"" rel=""noreferrer"">Django</a>. The first times it was hard looking at tracebacks and actually figure out what I did wrong and where the syntax error was. Some time has passed now and some way along the way, I guess I got a routine in debugging my Django code. As this was done early in my coding experience, I sat down and wondered if how I was doing this was ineffective and could be done faster. I usually manage to find and correct the bugs in my code, but I wonder if I should be doing it faster?</p>

<p>I usually just use the debug info Django gives when enabled. When things do end up as I thought it would, I break the code flow a lot with a syntax error, and look at the variables at that point in the flow to figure out, where the code does something other than what I wanted.</p>

<p>But can this be improved? Are there some good tools or better ways to debug your Django code?</p>
","How to debug in Django, the good way?<p>So, I started learning to code in <a href=""http://en.wikipedia.org/wiki/Python_%28programming_language%29"" rel=""noreferrer"">Python</a> and later <a href=""http://en.wikipedia.org/wiki/Django_%28web_framework%29"" rel=""noreferrer"">Django</a>. The first times it was hard looking at tracebacks and actually figure out what I did wrong and where the syntax error was. Some time has passed now and some way along the way, I guess I got a routine in debugging my Django code. As this was done early in my coding experience, I sat down and wondered if how I was doing this was ineffective and could be done faster. I usually manage to find and correct the bugs in my code, but I wonder if I should be doing it faster?</p>

<p>I usually just use the debug info Django gives when enabled. When things do end up as I thought it would, I break the code flow a lot with a syntax error, and look at the variables at that point in the flow to figure out, where the code does something other than what I wanted.</p>

<p>But can this be improved? Are there some good tools or better ways to debug your Django code?</p>
",<python><django><debugging>,django debug code flow usually faster figure good syntax error,"<p>There are a bunch of ways to do it, but the most straightforward is to simply 
use the <a href=""https://docs.python.org/2/library/pdb.html"" rel=""noreferrer"">Python debugger</a>. Just add following line in to a Django view function:</p>

<pre><code>import pdb; pdb.set_trace()
</code></pre>

<p>or </p>

<pre><code>breakpoint()  #from Python3.7
</code></pre>

<p>If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code.</p>

<p>However there are other options (I am not recommending them):</p>

<pre><code>* return HttpResponse({variable to inspect})

* print {variable to inspect}

* raise Exception({variable to inspect})
</code></pre>

<p>But the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you'd also want to have a look at <a href=""http://pypi.python.org/pypi/ipdb/"" rel=""noreferrer""><strong>IPDB</strong></a> that uses <a href=""http://ipython.org/"" rel=""noreferrer""><strong>ipython</strong></a> for debugging.</p>

<p>Some more useful extension to pdb are</p>

<p><a href=""https://pypi.python.org/pypi/pdbpp/"" rel=""noreferrer""><strong>pdb++</strong></a>, suggested by <a href=""https://stackoverflow.com/users/5792269/antash"">Antash</a>.</p>

<p><a href=""https://pypi.python.org/pypi/pudb"" rel=""noreferrer""><strong>pudb</strong></a>, suggested by <a href=""https://stackoverflow.com/users/5081188/patdujour"">PatDuJour</a>.</p>

<p><a href=""https://mike.tig.as/blog/2010/09/14/pdb/"" rel=""noreferrer""><strong>Using the Python debugger in Django</strong></a>, suggested by <a href=""https://stackoverflow.com/users/884640/seafangs"">Seafangs</a>.</p>
",,
423,3,What is the difference between re.search and re.match?,"<p>What is the difference between the <code>search()</code> and <code>match()</code> functions in the <a href=""http://docs.python.org/2/library/re.html"" rel=""noreferrer"">Python <code>re</code> module</a>?</p>

<p>I've read the <a href=""http://www.python.org/doc/2.5.2/lib/matching-searching.html"" rel=""noreferrer"">documentation</a> (<a href=""http://docs.python.org/2/library/re.html?highlight=matching%20searching#search-vs-match"" rel=""noreferrer"">current documentation</a>), but I never seem to remember it.  I keep having to look it up and re-learn it.  I'm hoping that someone will answer it clearly with examples so that (perhaps) it will stick in my head.  Or at least I'll have a better place to return with my question and it will take less time to re-learn it.</p>
","What is the difference between re.search and re.match?<p>What is the difference between the <code>search()</code> and <code>match()</code> functions in the <a href=""http://docs.python.org/2/library/re.html"" rel=""noreferrer"">Python <code>re</code> module</a>?</p>

<p>I've read the <a href=""http://www.python.org/doc/2.5.2/lib/matching-searching.html"" rel=""noreferrer"">documentation</a> (<a href=""http://docs.python.org/2/library/re.html?highlight=matching%20searching#search-vs-match"" rel=""noreferrer"">current documentation</a>), but I never seem to remember it.  I keep having to look it up and re-learn it.  I'm hoping that someone will answer it clearly with examples so that (perhaps) it will stick in my head.  Or at least I'll have a better place to return with my question and it will take less time to re-learn it.</p>
",<python><regex><search><match>,learn match search documentation difference stick remember clearly head hoping,"<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>

<p>As the <a href=""http://docs.python.org/2/library/re.html#re.match"" rel=""noreferrer"">re.match documentation</a> says:</p>

<blockquote>
  <p>If zero or more characters at the
  <strong>beginning of string</strong> match the regular expression pattern, return a
  corresponding <code>MatchObject</code> instance.
  Return <code>None</code> if the string does not
  match the pattern; note that this is
  different from a zero-length match.</p>
  
  <p>Note: If you want to locate a match
  anywhere in string, use <code>search()</code>
  instead.</p>
</blockquote>

<p><code>re.search</code> searches the entire string, as <a href=""http://docs.python.org/2/library/re.html#re.search"" rel=""noreferrer"">the documentation says</a>:</p>

<blockquote>
  <p><strong>Scan through string</strong> looking for a
  location where the regular expression
  pattern produces a match, and return a
  corresponding <code>MatchObject</code> instance.
  Return <code>None</code> if no position in the
  string matches the pattern; note that
  this is different from finding a
  zero-length match at some point in the
  string.</p>
</blockquote>

<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>

<p>The documentation has a <a href=""http://docs.python.org/2/library/re.html#search-vs-match"" rel=""noreferrer"">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>

<blockquote>
  <p>Python offers two different primitive
  operations based on regular
  expressions: <code>match</code> checks for a match
  <strong>only at the beginning</strong> of the string,
  while <code>search</code> checks for a match
  <strong>anywhere</strong> in the string (this is what
  Perl does by default).</p>
  
  <p>Note that <code>match</code> may differ from <code>search</code>
  even when using a regular expression
  beginning with <code>'^'</code>: <code>'^'</code> matches only
  at the start of the string, or in
  <code>MULTILINE</code> mode also immediately
  following a newline. The ƒ??<code>match</code>ƒ?
  operation succeeds <em>only if the pattern
  matches at the <strong>start</strong> of the string</em>
  regardless of mode, or at the starting
  position given by the optional <code>pos</code>
  argument regardless of whether a
  newline precedes it.</p>
</blockquote>

<p>Now, enough talk. Time to see some example code:</p>

<pre><code># example code:
string_with_newlines = """"""something
someotherthing""""""

import re

print re.match('some', string_with_newlines) # matches
print re.match('someother', 
               string_with_newlines) # won't match
print re.match('^someother', string_with_newlines, 
               re.MULTILINE) # also won't match
print re.search('someother', 
                string_with_newlines) # finds something
print re.search('^someother', string_with_newlines, 
                re.MULTILINE) # also finds something

m = re.compile('thing$', re.MULTILINE)

print m.match(string_with_newlines) # no match
print m.match(string_with_newlines, pos=4) # matches
print m.search(string_with_newlines, 
               re.MULTILINE) # also matches
</code></pre>
",,
424,3,Return JSON response from Flask view,"<p>I have a function that analyzes a CSV file with Pandas and produces a dict with summary information. I want to return the results as a response from a Flask view. How do I return a JSON response?</p>

<pre><code>@app.route(""/summary"")
def summary():
    d = make_summary()
    # send it back as json
</code></pre>
","Return JSON response from Flask view<p>I have a function that analyzes a CSV file with Pandas and produces a dict with summary information. I want to return the results as a response from a Flask view. How do I return a JSON response?</p>

<pre><code>@app.route(""/summary"")
def summary():
    d = make_summary()
    # send it back as json
</code></pre>
",<python><json><flask>,response return flask json analyzes  summary produces view csv,"<p>As of Flask 1.1.0 a view can directly return a Python dict and Flask will call <a href=""https://flask.palletsprojects.com/api/#flask.json.jsonify"" rel=""noreferrer""><code>jsonify</code></a> automatically.</p>
<pre class=""lang-py prettyprint-override""><code>@app.route(&quot;/summary&quot;)
def summary():
    d = make_summary()
    return d
</code></pre>
<p>If your Flask version is less than 1.1.0 or to return a different JSON-serializable object, import and use <a href=""https://flask.palletsprojects.com/api/#flask.json.jsonify"" rel=""noreferrer""><code>jsonify</code></a>.</p>
<pre class=""lang-py prettyprint-override""><code>from flask import jsonify

@app.route(&quot;/summary&quot;)
def summary():
    d = make_summary()
    return jsonify(d)
</code></pre>
",,
425,3,Getting the index of the returned max or min item using max()/min() on a list,"<p>I'm using Python's <code>max</code> and <code>min</code> functions on lists for a minimax algorithm, and I need the index of the value returned by <code>max()</code> or <code>min()</code>. In other words, I need to know which move produced the max (at a first player's turn) or min (second player) value.</p>
<pre><code>for i in range(9):
    new_board = current_board.new_board_with_move([i / 3, i % 3], player)

    if new_board:
        temp = min_max(new_board, depth + 1, not is_min_level)  
        values.append(temp)

if is_min_level:
    return min(values)
else:
    return max(values)
</code></pre>
<p>I need to be able to return the actual index of the min or max value, not just the value.</p>
","Getting the index of the returned max or min item using max()/min() on a list<p>I'm using Python's <code>max</code> and <code>min</code> functions on lists for a minimax algorithm, and I need the index of the value returned by <code>max()</code> or <code>min()</code>. In other words, I need to know which move produced the max (at a first player's turn) or min (second player) value.</p>
<pre><code>for i in range(9):
    new_board = current_board.new_board_with_move([i / 3, i % 3], player)

    if new_board:
        temp = min_max(new_board, depth + 1, not is_min_level)  
        values.append(temp)

if is_min_level:
    return min(values)
else:
    return max(values)
</code></pre>
<p>I need to be able to return the actual index of the min or max value, not just the value.</p>
",<python><list><max><min>,max min value index player returned need minimax produced turn,"<pre class=""lang-py prettyprint-override""><code>if is_min_level:
    return values.index(min(values))
else:
    return values.index(max(values))
</code></pre>
",,
426,6,How to import a module given its name as string?,"<p>I'm writing a Python application that takes as a command as an argument, for example:</p>

<pre><code>$ python myapp.py command1
</code></pre>

<p>I want the application to be extensible, that is, to be able to add new modules that implement new commands without having to change the main application source. The tree looks something like:</p>

<pre><code>myapp/
    __init__.py
    commands/
        __init__.py
        command1.py
        command2.py
    foo.py
    bar.py
</code></pre>

<p>So I want the application to find the available command modules at runtime and execute the appropriate one.</p>

<p>Python defines an <strong>__import__</strong> function, which takes a string for a module name:</p>

<blockquote>
  <p>__import__(name, globals=None, locals=None, fromlist=(), level=0)</p>
  
  <p>The function imports the module name, potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name. </p>
  
  <p>Source: <a href=""https://docs.python.org/3/library/functions.html#__import__"" rel=""noreferrer"">https://docs.python.org/3/library/functions.html#<strong>import</strong></a></p>
</blockquote>

<p>So currently I have something like:</p>

<pre><code>command = sys.argv[1]
try:
    command_module = __import__(""myapp.commands.%s"" % command, fromlist=[""myapp.commands""])
except ImportError:
    # Display error message

command_module.run()
</code></pre>

<p>This works just fine, I'm just wondering if there is possibly a more idiomatic way to accomplish what we are doing with this code.</p>

<p>Note that I specifically don't want to get in to using eggs or extension points. This is not an open-source project and I don't expect there to be ""plugins"". The point is to simplify the main application code and remove the need to modify it each time a new command module is added.</p>
","How to import a module given its name as string?<p>I'm writing a Python application that takes as a command as an argument, for example:</p>

<pre><code>$ python myapp.py command1
</code></pre>

<p>I want the application to be extensible, that is, to be able to add new modules that implement new commands without having to change the main application source. The tree looks something like:</p>

<pre><code>myapp/
    __init__.py
    commands/
        __init__.py
        command1.py
        command2.py
    foo.py
    bar.py
</code></pre>

<p>So I want the application to find the available command modules at runtime and execute the appropriate one.</p>

<p>Python defines an <strong>__import__</strong> function, which takes a string for a module name:</p>

<blockquote>
  <p>__import__(name, globals=None, locals=None, fromlist=(), level=0)</p>
  
  <p>The function imports the module name, potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name. </p>
  
  <p>Source: <a href=""https://docs.python.org/3/library/functions.html#__import__"" rel=""noreferrer"">https://docs.python.org/3/library/functions.html#<strong>import</strong></a></p>
</blockquote>

<p>So currently I have something like:</p>

<pre><code>command = sys.argv[1]
try:
    command_module = __import__(""myapp.commands.%s"" % command, fromlist=[""myapp.commands""])
except ImportError:
    # Display error message

command_module.run()
</code></pre>

<p>This works just fine, I'm just wondering if there is possibly a more idiomatic way to accomplish what we are doing with this code.</p>

<p>Note that I specifically don't want to get in to using eggs or extension points. This is not an open-source project and I don't expect there to be ""plugins"". The point is to simplify the main application code and remove the need to modify it each time a new command module is added.</p>
",<python><python-import>,application module locals globals fromlist import source command given new,"<p>With Python older than 2.7/3.1, that's pretty much how you do it.</p>
<p>For newer versions, see <code>importlib.import_module</code> for <a href=""https://docs.python.org/2/library/importlib.html#importlib.import_module"" rel=""noreferrer"">Python 2</a> and <a href=""https://docs.python.org/3/library/importlib.html#importlib.import_module"" rel=""noreferrer"">Python 3</a>.</p>
<p>You can use <code>exec</code> if you want to as well.</p>
<p>Or using <code>__import__</code> you can import a list of modules by doing this:</p>
<pre><code>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] 
&gt;&gt;&gt; moduleNames
['sys', 'os', 're', 'unittest']
&gt;&gt;&gt; modules = map(__import__, moduleNames)
</code></pre>
<p>Ripped straight from <a href=""http://web.archive.org/web/20120315061111/http://www.diveintopython.net/functional_programming/dynamic_import.html"" rel=""noreferrer"">Dive Into Python</a>.</p>
",,
427,5,Fixed digits after decimal with f-strings,"<p>Is there an easy way with Python f-strings to fix the number of digits after the decimal point? (Specifically f-strings, not other string formatting options like .format or %)</p>

<p>For example, let's say I want to display 2 digits after the decimal place. </p>

<p>How do I do that? Let's say that</p>

<pre><code>a = 10.1234
</code></pre>
","Fixed digits after decimal with f-strings<p>Is there an easy way with Python f-strings to fix the number of digits after the decimal point? (Specifically f-strings, not other string formatting options like .format or %)</p>

<p>For example, let's say I want to display 2 digits after the decimal place. </p>

<p>How do I do that? Let's say that</p>

<pre><code>a = 10.1234
</code></pre>
",<python><python-3.x><f-string>,digits decimal let strings say strings formatting fixed options display,"<p>Include the type specifier in your format expression:</p>

<pre><code>&gt;&gt;&gt; a = 10.1234
&gt;&gt;&gt; f'{a:.2f}'
'10.12'
</code></pre>
",,
428,5,Convert nested Python dict to object?,"<p>I'm searching for an elegant way to get data using attribute access on a dict with some nested dicts and lists (i.e. javascript-style object syntax).</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': [""hi"", {'foo': ""bar""}]}
</code></pre>

<p>Should be accessible in this way:</p>

<pre><code>&gt;&gt;&gt; x = dict2obj(d)
&gt;&gt;&gt; x.a
1
&gt;&gt;&gt; x.b.c
2
&gt;&gt;&gt; x.d[1].foo
bar
</code></pre>

<p>I think, this is not possible without recursion, but what would be a nice way to get an object style for dicts?</p>
","Convert nested Python dict to object?<p>I'm searching for an elegant way to get data using attribute access on a dict with some nested dicts and lists (i.e. javascript-style object syntax).</p>

<p>For example:</p>

<pre><code>&gt;&gt;&gt; d = {'a': 1, 'b': {'c': 2}, 'd': [""hi"", {'foo': ""bar""}]}
</code></pre>

<p>Should be accessible in this way:</p>

<pre><code>&gt;&gt;&gt; x = dict2obj(d)
&gt;&gt;&gt; x.a
1
&gt;&gt;&gt; x.b.c
2
&gt;&gt;&gt; x.d[1].foo
bar
</code></pre>

<p>I think, this is not possible without recursion, but what would be a nice way to get an object style for dicts?</p>
",<python><object><dictionary>,nested dicts object style dict accessible way javascript recursion searching,"<p><strong>Update:</strong> In Python 2.6 and onwards, consider whether the <a href=""https://docs.python.org/2/library/collections.html#collections.namedtuple"" rel=""noreferrer""><code>namedtuple</code></a> data structure suits your needs:</p>

<pre><code>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; MyStruct = namedtuple('MyStruct', 'a b d')
&gt;&gt;&gt; s = MyStruct(a=1, b={'c': 2}, d=['hi'])
&gt;&gt;&gt; s
MyStruct(a=1, b={'c': 2}, d=['hi'])
&gt;&gt;&gt; s.a
1
&gt;&gt;&gt; s.b
{'c': 2}
&gt;&gt;&gt; s.c
Traceback (most recent call last):
  File ""&lt;stdin&gt;"", line 1, in &lt;module&gt;
AttributeError: 'MyStruct' object has no attribute 'c'
&gt;&gt;&gt; s.d
['hi']
</code></pre>

<p>The alternative (original answer contents) is:</p>

<pre><code>class Struct:
    def __init__(self, **entries):
        self.__dict__.update(entries)
</code></pre>

<p>Then, you can use:</p>

<pre><code>&gt;&gt;&gt; args = {'a': 1, 'b': 2}
&gt;&gt;&gt; s = Struct(**args)
&gt;&gt;&gt; s
&lt;__main__.Struct instance at 0x01D6A738&gt;
&gt;&gt;&gt; s.a
1
&gt;&gt;&gt; s.b
2
</code></pre>
",,
429,3,Determine function name from within that function (without using traceback),"<p>In Python, without using the <code>traceback</code> module, is there a way to determine a function's name from within that function?</p>
<p>Say I have a module <code>foo</code> with a function <code>bar</code>.  When executing <code>foo.bar()</code>, is there a way for <code>bar</code> to know <code>bar</code>'s name?  Or better yet, <code>foo.bar</code>'s name?</p>
<pre><code>#foo.py  
def bar():
    print &quot;my name is&quot;, __myname__ # &lt;== how do I calculate this at runtime?
</code></pre>
","Determine function name from within that function (without using traceback)<p>In Python, without using the <code>traceback</code> module, is there a way to determine a function's name from within that function?</p>
<p>Say I have a module <code>foo</code> with a function <code>bar</code>.  When executing <code>foo.bar()</code>, is there a way for <code>bar</code> to know <code>bar</code>'s name?  Or better yet, <code>foo.bar</code>'s name?</p>
<pre><code>#foo.py  
def bar():
    print &quot;my name is&quot;, __myname__ # &lt;== how do I calculate this at runtime?
</code></pre>
",<python><function><introspection><traceback>,bar function foo traceback determine module executing using way say,"<p>Python doesn't have a feature to access the function or its name within the function itself. It has been <a href=""http://www.python.org/dev/peps/pep-3130/"" rel=""noreferrer"">proposed</a> but rejected. If you don't want to play with the stack yourself, you should either use <code>""bar""</code> or <code>bar.__name__</code> depending on context.</p>

<p>The given rejection notice is:</p>

<blockquote>
  <p>This PEP is rejected. It is not clear how it should be implemented or what the precise semantics should be in edge cases, and there aren't enough important use cases given. response has been lukewarm at best.</p>
</blockquote>
",,
430,1,"How to install psycopg2 with ""pip"" on Python?","<p>I'm using <em><code>virtualenv</code></em> and I need to install ""psycopg2"".</p>

<p>I have done the following:</p>

<pre><code>pip install http://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160
</code></pre>

<p>And I have the following messages:</p>

<pre><code>Downloading/unpacking http://pypi.python.org/packages/source/p/psycopg2/psycopg2
-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160
  Downloading psycopg2-2.4.tar.gz (607Kb): 607Kb downloaded
  Running setup.py egg_info for package from http://pypi.python.org/packages/sou
rce/p/psycopg2/psycopg2-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160
    Error: pg_config executable not found.

    Please add the directory containing pg_config to the PATH
    or specify the full executable path with the option:

        python setup.py build_ext --pg-config /path/to/pg_config build ...

    or with the pg_config option in 'setup.cfg'.
    Complete output from command python setup.py egg_info:
    running egg_info

creating pip-egg-info\psycopg2.egg-info

writing pip-egg-info\psycopg2.egg-info\PKG-INFO

writing top-level names to pip-egg-info\psycopg2.egg-info\top_level.txt

writing dependency_links to pip-egg-info\psycopg2.egg-info\dependency_links.txt

writing manifest file 'pip-egg-info\psycopg2.egg-info\SOURCES.txt'

warning: manifest_maker: standard file '-c' not found

Error: pg_config executable not found.



Please add the directory containing pg_config to the PATH

or specify the full executable path with the option:



    python setup.py build_ext --pg-config /path/to/pg_config build ...



or with the pg_config option in 'setup.cfg'.

----------------------------------------
Command python setup.py egg_info failed with error code 1
Storing complete log in C:\Documents and Settings\anlopes\Application Data\pip\p
ip.log
</code></pre>

<p>My question, I only need to do this to get the psycopg2 working?</p>

<pre><code>python setup.py build_ext --pg-config /path/to/pg_config build ...
</code></pre>
","How to install psycopg2 with ""pip"" on Python?<p>I'm using <em><code>virtualenv</code></em> and I need to install ""psycopg2"".</p>

<p>I have done the following:</p>

<pre><code>pip install http://pypi.python.org/packages/source/p/psycopg2/psycopg2-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160
</code></pre>

<p>And I have the following messages:</p>

<pre><code>Downloading/unpacking http://pypi.python.org/packages/source/p/psycopg2/psycopg2
-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160
  Downloading psycopg2-2.4.tar.gz (607Kb): 607Kb downloaded
  Running setup.py egg_info for package from http://pypi.python.org/packages/sou
rce/p/psycopg2/psycopg2-2.4.tar.gz#md5=24f4368e2cfdc1a2b03282ddda814160
    Error: pg_config executable not found.

    Please add the directory containing pg_config to the PATH
    or specify the full executable path with the option:

        python setup.py build_ext --pg-config /path/to/pg_config build ...

    or with the pg_config option in 'setup.cfg'.
    Complete output from command python setup.py egg_info:
    running egg_info

creating pip-egg-info\psycopg2.egg-info

writing pip-egg-info\psycopg2.egg-info\PKG-INFO

writing top-level names to pip-egg-info\psycopg2.egg-info\top_level.txt

writing dependency_links to pip-egg-info\psycopg2.egg-info\dependency_links.txt

writing manifest file 'pip-egg-info\psycopg2.egg-info\SOURCES.txt'

warning: manifest_maker: standard file '-c' not found

Error: pg_config executable not found.



Please add the directory containing pg_config to the PATH

or specify the full executable path with the option:



    python setup.py build_ext --pg-config /path/to/pg_config build ...



or with the pg_config option in 'setup.cfg'.

----------------------------------------
Command python setup.py egg_info failed with error code 1
Storing complete log in C:\Documents and Settings\anlopes\Application Data\pip\p
ip.log
</code></pre>

<p>My question, I only need to do this to get the psycopg2 working?</p>

<pre><code>python setup.py build_ext --pg-config /path/to/pg_config build ...
</code></pre>
",<python><virtualenv><psycopg2><pip>,psycopg install need following messages virtualenv working pip question using,"<p><em><strong>Note</strong>: Since a while back, there are binary wheels for Windows in PyPI, so this should no longer be an issue for Windows users. Below are solutions for Linux, Mac users, since lots of them find this post through web searches.</em></p>
<hr />
<h1>Option 1</h1>
<p>Install the <code>psycopg2-binary</code> PyPI package instead, it has Python wheels for Linux and Mac OS.</p>
<pre><code>pip install psycopg2-binary
</code></pre>
<hr />
<h1>Option 2</h1>
<p>Install the prerequsisites for building the <code>psycopg2</code> package from source:</p>
<h2>Debian/Ubuntu</h2>
<h3>Python 3</h3>
<pre><code>sudo apt install libpq-dev python3-dev
</code></pre>
<p>You might need to install <code>python3.8-dev</code> or similar for e.g. Python 3.8.</p>
<h3>Python 2</h3>
<pre><code>sudo apt install libpq-dev python-dev
</code></pre>
<p>If that's not enough, try</p>
<pre><code>sudo apt install build-essential
</code></pre>
<p>or</p>
<pre><code>sudo apt install postgresql-server-dev-all
</code></pre>
<p>as well before installing psycopg2 again.</p>
<h2>CentOS 6</h2>
<p>See <a href=""https://stackoverflow.com/a/13158616/202522"">Banjer's answer</a></p>
",,
431,2,Import multiple csv files into pandas and concatenate into one DataFrame,"<p>I would like to read several csv files from a directory into pandas and concatenate them into one big DataFrame. I have not been able to figure it out though. Here is what I have so far:</p>

<pre><code>import glob
import pandas as pd

# get data file names
path =r'C:\DRO\DCL_rawdata_files'
filenames = glob.glob(path + ""/*.csv"")

dfs = []
for filename in filenames:
    dfs.append(pd.read_csv(filename))

# Concatenate all data into one DataFrame
big_frame = pd.concat(dfs, ignore_index=True)
</code></pre>

<p>I guess I need some help within the for loop???</p>
","Import multiple csv files into pandas and concatenate into one DataFrame<p>I would like to read several csv files from a directory into pandas and concatenate them into one big DataFrame. I have not been able to figure it out though. Here is what I have so far:</p>

<pre><code>import glob
import pandas as pd

# get data file names
path =r'C:\DRO\DCL_rawdata_files'
filenames = glob.glob(path + ""/*.csv"")

dfs = []
for filename in filenames:
    dfs.append(pd.read_csv(filename))

# Concatenate all data into one DataFrame
big_frame = pd.concat(dfs, ignore_index=True)
</code></pre>

<p>I guess I need some help within the for loop???</p>
",<python><pandas><csv><dataframe><concatenation>,concatenate csv files pandas big guess dataframe help far figure,"<p>If you have same columns in all your <code>csv</code> files then you can try the code below.
I have added <code>header=0</code> so that after reading <code>csv</code> first row can be assigned as the column names.</p>

<pre><code>import pandas as pd
import glob

path = r'C:\DRO\DCL_rawdata_files' # use your path
all_files = glob.glob(path + ""/*.csv"")

li = []

for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    li.append(df)

frame = pd.concat(li, axis=0, ignore_index=True)
</code></pre>
",,
432,3,"Simple argparse example wanted: 1 argument, 3 results","<p>The <a href=""http://docs.python.org/library/argparse.html"" rel=""noreferrer"">documentation</a> for the <a href=""http://www.doughellmann.com/PyMOTW/argparse/"" rel=""noreferrer"">argparse python module</a>, while excellent I'm sure, is too much for my tiny beginner brain to grasp right now. I don't need to do math on the command line or meddle with formatting lines on the screen or change option characters. All I want to do is <em>""If arg is A, do this, if B do that, if none of the above show help and quit""</em>.</p>
","Simple argparse example wanted: 1 argument, 3 results<p>The <a href=""http://docs.python.org/library/argparse.html"" rel=""noreferrer"">documentation</a> for the <a href=""http://www.doughellmann.com/PyMOTW/argparse/"" rel=""noreferrer"">argparse python module</a>, while excellent I'm sure, is too much for my tiny beginner brain to grasp right now. I don't need to do math on the command line or meddle with formatting lines on the screen or change option characters. All I want to do is <em>""If arg is A, do this, if B do that, if none of the above show help and quit""</em>.</p>
",<python><argparse>,argparse meddle resultsthe excellent arg math quit tiny screen grasp,"<p>My understanding of the original question is two-fold. First, in terms of the simplest possible argparse example, I'm surprised that I haven't seen it here. Of course, to be dead-simple, it's also all overhead with little power, but it might get you started.</p>

<pre><code>import argparse

parser = argparse.ArgumentParser()
parser.add_argument(""a"")
args = parser.parse_args()

if args.a == 'magic.name':
    print 'You nailed it!'
</code></pre>

<p>But this positional argument is now required. If you leave it out when invoking this program, you'll get an error about missing arguments. This leads me to the second part of the original question. Matt Wilkie seems to want a single <strong>optional</strong> argument without a named label (the --option labels). My suggestion would be to modify the code above as follows:</p>

<pre><code>...
parser.add_argument(""a"", nargs='?', default=""check_string_for_empty"")
...
if args.a == 'check_string_for_empty':
    print 'I can tell that no argument was given and I can deal with that here.'
elif args.a == 'magic.name':
    print 'You nailed it!'
else:
    print args.a
</code></pre>

<p>There may well be a more elegant solution, but this works and is minimalist.</p>
",,
433,4,How to split a string into a list?,"<p>I want my Python function to split a sentence (input) and store each word in a list. My current code splits the sentence, but does not store the words as a list. How do I do that?</p>

<pre><code>def split_line(text):

    # split the text
    words = text.split()

    # for each word in the line:
    for word in words:

        # print the word
        print(words)
</code></pre>
","How to split a string into a list?<p>I want my Python function to split a sentence (input) and store each word in a list. My current code splits the sentence, but does not store the words as a list. How do I do that?</p>

<pre><code>def split_line(text):

    # split the text
    words = text.split()

    # for each word in the line:
    for word in words:

        # print the word
        print(words)
</code></pre>
",<python><list><split><text-segmentation>,sentence store split list splits word words input current function,"<pre><code>text.split()
</code></pre>

<p>This should be enough to store each word in a list.  <code>words</code> is already a list of the words from the sentence, so there is no need for the loop.</p>

<p>Second, it might be a typo, but you have your loop a little messed up. If you really did want to use append, it would be:</p>

<pre><code>words.append(word)
</code></pre>

<p>not </p>

<pre><code>word.append(words)
</code></pre>
",,
434,3,How can I see normal print output created during pytest run?,"<p>Sometimes I want to just insert some print statements in my code, and see what gets printed out when I exercise it. My usual way to ""exercise"" it is with existing pytest tests. But when I run these, I don't seem able to see any standard output (at least from within PyCharm, my IDE).</p>

<p>Is there a simple way to see standard output during a pytest run?</p>
","How can I see normal print output created during pytest run?<p>Sometimes I want to just insert some print statements in my code, and see what gets printed out when I exercise it. My usual way to ""exercise"" it is with existing pytest tests. But when I run these, I don't seem able to see any standard output (at least from within PyCharm, my IDE).</p>

<p>Is there a simple way to see standard output during a pytest run?</p>
",<python><logging><output><pytest>,pytest exercise output run standard print pycharm usual statements ide,"<p>The <a href=""https://docs.pytest.org/en/latest/capture.html#setting-capturing-methods-or-disabling-capturing"" rel=""noreferrer""><code>-s</code> switch</a> disables per-test capturing (only if a test fails).</p>
<p><code>-s</code> is equivalent to <code>--capture=no</code>.</p>
",,
435,4,Getting a map() to return a list in Python 3.x,"<p>I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:</p>

<p><strong>A:</strong> Python 2.6:</p>

<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])
['B', '5', '\x00', '^']
</code></pre>

<p>However, in Python 3.1, the above returns a map object.</p>

<p><strong>B:</strong> Python 3.1:</p>

<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])
&lt;map object at 0x00AF5570&gt;
</code></pre>

<p>How do I retrieve the mapped list (as in <strong>A</strong> above) on Python 3.x? </p>

<p>Alternatively, is there a better way of doing this? My initial list object has around 45 items and id like to convert them to hex.</p>
","Getting a map() to return a list in Python 3.x<p>I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:</p>

<p><strong>A:</strong> Python 2.6:</p>

<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])
['B', '5', '\x00', '^']
</code></pre>

<p>However, in Python 3.1, the above returns a map object.</p>

<p><strong>B:</strong> Python 3.1:</p>

<pre><code>&gt;&gt;&gt; map(chr, [66, 53, 0, 94])
&lt;map object at 0x00AF5570&gt;
</code></pre>

<p>How do I retrieve the mapped list (as in <strong>A</strong> above) on Python 3.x? </p>

<p>Alternatively, is there a better way of doing this? My initial list object has around 45 items and id like to convert them to hex.</p>
",<python><list><python-3.x><map-function>,map list hex python object alternatively xi mapped initial id,"<p>Do this:</p>

<pre><code>list(map(chr,[66,53,0,94]))
</code></pre>

<p>In Python 3+, many processes that iterate over iterables return iterators themselves.  In most cases, this ends up saving memory, and should make things go faster.   </p>

<p>If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the <code>map</code> object like so:</p>

<pre><code># Prints ""ABCD""
for ch in map(chr,[65,66,67,68]):
    print(ch)
</code></pre>
",,
436,6,How to state in requirements.txt a direct github source,"<p>I've installed a library using the command</p>
<pre><code>pip install git+git://github.com/mozilla/elasticutils.git
</code></pre>
<p>which installs it directly from a Github repository.  This works fine and I want to have that dependency in my <code>requirements.txt</code>.  I've looked at other tickets like <a href=""https://stackoverflow.com/questions/9024607/how-to-link-to-forked-package-in-distutils-without-breaking-pip-freeze"">this</a> but that didn't solve my problem.  If I put something like</p>
<pre><code>-f git+git://github.com/mozilla/elasticutils.git
elasticutils==0.7.dev
</code></pre>
<p>in the <code>requirements.txt</code> file, a <code>pip install -r requirements.txt</code> results in the following output:</p>
<pre><code>Downloading/unpacking elasticutils==0.7.dev (from -r requirements.txt (line 20))
  Could not find a version that satisfies the requirement elasticutils==0.7.dev (from -r requirements.txt (line 20)) (from versions: )
No distributions matching the version for elasticutils==0.7.dev (from -r requirements.txt (line 20))
</code></pre>
<p>The <a href=""https://pip.pypa.io/en/stable/reference/pip_install/#requirements-file-format"" rel=""noreferrer"">documentation of the requirements file</a> does not mention links using the <code>git+git</code> protocol specifier, so maybe this is just not supported.</p>
<p>Does anybody have a solution for my problem?</p>
","How to state in requirements.txt a direct github source<p>I've installed a library using the command</p>
<pre><code>pip install git+git://github.com/mozilla/elasticutils.git
</code></pre>
<p>which installs it directly from a Github repository.  This works fine and I want to have that dependency in my <code>requirements.txt</code>.  I've looked at other tickets like <a href=""https://stackoverflow.com/questions/9024607/how-to-link-to-forked-package-in-distutils-without-breaking-pip-freeze"">this</a> but that didn't solve my problem.  If I put something like</p>
<pre><code>-f git+git://github.com/mozilla/elasticutils.git
elasticutils==0.7.dev
</code></pre>
<p>in the <code>requirements.txt</code> file, a <code>pip install -r requirements.txt</code> results in the following output:</p>
<pre><code>Downloading/unpacking elasticutils==0.7.dev (from -r requirements.txt (line 20))
  Could not find a version that satisfies the requirement elasticutils==0.7.dev (from -r requirements.txt (line 20)) (from versions: )
No distributions matching the version for elasticutils==0.7.dev (from -r requirements.txt (line 20))
</code></pre>
<p>The <a href=""https://pip.pypa.io/en/stable/reference/pip_install/#requirements-file-format"" rel=""noreferrer"">documentation of the requirements file</a> does not mention links using the <code>git+git</code> protocol specifier, so maybe this is just not supported.</p>
<p>Does anybody have a solution for my problem?</p>
",<python><github><pip><requirements.txt>,requirements txt git github problem direct protocol specifier source,"<p>Normally your <code>requirements.txt</code> file would look something like this:</p>

<pre><code>package-one==1.9.4
package-two==3.7.1
package-three==1.0.1
...
</code></pre>

<p>To specify a Github repo, you do not need the <code>package-name==</code> convention. </p>

<p>The examples below update <code>package-two</code> using a GitHub repo. The text between <code>@</code> and <code>#</code> denotes the specifics of the package.</p>

<h2>Specify commit hash (<code>41b95ec</code> in the context of updated <code>requirements.txt</code>):</h2>

<pre><code>package-one==1.9.4
git+git://github.com/path/to/package-two@41b95ec#egg=package-two
package-three==1.0.1
</code></pre>

<h2>Specify branch name (<code>master</code>):</h2>

<pre><code>git+git://github.com/path/to/package-two@master#egg=package-two
</code></pre>

<h2>Specify tag (<code>0.1</code>):</h2>

<pre><code>git+git://github.com/path/to/package-two@0.1#egg=package-two
</code></pre>

<h2>Specify release (<code>3.7.1</code>):</h2>

<pre><code>git+git://github.com/path/to/package-two@releases/tag/v3.7.1#egg=package-two
</code></pre>

<p>Note that <code>#egg=package-two</code> is not a comment here, it is to <a href=""https://pip.pypa.io/en/stable/reference/pip_install/#working-out-the-name-and-version"" rel=""noreferrer"">explicitly state the package name</a></p>

<p><a href=""http://codeinthehole.com/writing/using-pip-and-requirementstxt-to-install-from-the-head-of-a-github-branch/"" rel=""noreferrer"">This blog post</a> has some more discussion on the topic.</p>
",,
437,3,How do I log a Python error with debug information?,"<p>I am printing Python exception messages to a log file with <code>logging.error</code>:</p>

<pre><code>import logging
try:
    1/0
except ZeroDivisionError as e:
    logging.error(e)  # ERROR:root:division by zero
</code></pre>

<p>Is it possible to print more detailed information about the exception and the code that generated it than just the exception string? Things like line numbers or stack traces would be great.</p>
","How do I log a Python error with debug information?<p>I am printing Python exception messages to a log file with <code>logging.error</code>:</p>

<pre><code>import logging
try:
    1/0
except ZeroDivisionError as e:
    logging.error(e)  # ERROR:root:division by zero
</code></pre>

<p>Is it possible to print more detailed information about the exception and the code that generated it than just the exception string? Things like line numbers or stack traces would be great.</p>
",<python><exception><logging><exception-handling>,exception log information error traces detailed debug printing generated messages,"<p><a href=""http://docs.python.org/library/logging.html#logging.Logger.exception"" rel=""noreferrer""><code>logger.exception</code></a> will output a stack trace alongside the error message.</p>
<p>For example:</p>
<pre><code>import logging
try:
    1/0
except ZeroDivisionError:
    logging.exception(&quot;message&quot;)
</code></pre>
<p>Output:</p>
<pre><code>ERROR:root:message
Traceback (most recent call last):
  File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;
ZeroDivisionError: integer division or modulo by zero
</code></pre>
<p><a href=""https://stackoverflow.com/users/1163081/paulo-cheque"">@Paulo Cheque</a> notes, &quot;be aware that in Python 3 you must call the <code>logging.exception</code> method just inside the <code>except</code> part. If you call this method in an arbitrary place you may get a bizarre exception. The docs alert about that.&quot;</p>
",,
438,3,How do I use itertools.groupby()?,"<p>I haven't been able to find an understandable explanation of how to actually use Python's <code>itertools.groupby()</code> function.  What I'm trying to do is this:</p>
<ul>
<li>Take a list - in this case, the children of an objectified <code>lxml</code> element</li>
<li>Divide it into groups based on some criteria</li>
<li>Then later iterate over each of these groups separately.</li>
</ul>
<p>I've reviewed <a href=""https://docs.python.org/3/library/itertools.html#itertools.groupby"" rel=""noreferrer"">the documentation</a>, but I've had trouble trying to apply them beyond a simple list of numbers.</p>
<p>So, how do I use of <code>itertools.groupby()</code>?  Is there another technique I should be using?  Pointers to good &quot;prerequisite&quot; reading would also be appreciated.</p>
","How do I use itertools.groupby()?<p>I haven't been able to find an understandable explanation of how to actually use Python's <code>itertools.groupby()</code> function.  What I'm trying to do is this:</p>
<ul>
<li>Take a list - in this case, the children of an objectified <code>lxml</code> element</li>
<li>Divide it into groups based on some criteria</li>
<li>Then later iterate over each of these groups separately.</li>
</ul>
<p>I've reviewed <a href=""https://docs.python.org/3/library/itertools.html#itertools.groupby"" rel=""noreferrer"">the documentation</a>, but I've had trouble trying to apply them beyond a simple list of numbers.</p>
<p>So, how do I use of <code>itertools.groupby()</code>?  Is there another technique I should be using?  Pointers to good &quot;prerequisite&quot; reading would also be appreciated.</p>
",<python><itertools>,itertools groupby groups use trying element divide technique reviewed prerequisite lxml,"<p><strong>IMPORTANT NOTE:</strong> You have to <strong>sort your data</strong> first.</p>
<hr />
<p>The part I didn't get is that in the example construction</p>
<pre><code>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
   groups.append(list(g))    # Store group iterator as a list
   uniquekeys.append(k)
</code></pre>
<p><code>k</code> is the current grouping key, and <code>g</code> is an iterator that you can use to iterate over the group defined by that grouping key. In other words, the <code>groupby</code> iterator itself returns iterators.</p>
<p>Here's an example of that, using clearer variable names:</p>
<pre><code>from itertools import groupby

things = [(&quot;animal&quot;, &quot;bear&quot;), (&quot;animal&quot;, &quot;duck&quot;), (&quot;plant&quot;, &quot;cactus&quot;), (&quot;vehicle&quot;, &quot;speed boat&quot;), (&quot;vehicle&quot;, &quot;school bus&quot;)]

for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print(&quot;A %s is a %s.&quot; % (thing[1], key))
    print(&quot;&quot;)
    
</code></pre>
<p>This will give you the output:</p>
<blockquote>
<p>A bear is a animal.<br />
A duck is a animal.</p>
<p>A cactus is a plant.</p>
<p>A speed boat is a vehicle.<br />
A school bus is a vehicle.</p>
</blockquote>
<p>In this example, <code>things</code> is a list of tuples where the first item in each tuple is the group the second item belongs to.</p>
<p>The <code>groupby()</code> function takes two arguments: (1) the data to group and (2) the function to group it with.</p>
<p>Here, <code>lambda x: x[0]</code> tells <code>groupby()</code> to use the first item in each tuple as the grouping key.</p>
<p>In the above <code>for</code> statement, <code>groupby</code> returns three (key, group iterator) pairs - once for each unique key. You can use the returned iterator to iterate over each individual item in that group.</p>
<p>Here's a slightly different example with the same data, using a list comprehension:</p>
<pre><code>for key, group in groupby(things, lambda x: x[0]):
    listOfThings = &quot; and &quot;.join([thing[1] for thing in group])
    print(key + &quot;s:  &quot; + listOfThings + &quot;.&quot;)
</code></pre>
<p>This will give you the output:</p>
<blockquote>
<p>animals: bear and duck.<br />
plants: cactus.<br />
vehicles: speed boat and school bus.</p>
</blockquote>
",,
439,2,Converting a Pandas GroupBy output from Series to DataFrame,"<p>I'm starting with input data like this</p>

<pre><code>df1 = pandas.DataFrame( { 
    ""Name"" : [""Alice"", ""Bob"", ""Mallory"", ""Mallory"", ""Bob"" , ""Mallory""] , 
    ""City"" : [""Seattle"", ""Seattle"", ""Portland"", ""Seattle"", ""Seattle"", ""Portland""] } )
</code></pre>

<p>Which when printed appears as this:</p>

<pre><code>   City     Name
0   Seattle    Alice
1   Seattle      Bob
2  Portland  Mallory
3   Seattle  Mallory
4   Seattle      Bob
5  Portland  Mallory
</code></pre>

<p>Grouping is simple enough:</p>

<pre><code>g1 = df1.groupby( [ ""Name"", ""City""] ).count()
</code></pre>

<p>and printing yields a <code>GroupBy</code> object:</p>

<pre><code>                  City  Name
Name    City
Alice   Seattle      1     1
Bob     Seattle      2     2
Mallory Portland     2     2
        Seattle      1     1
</code></pre>

<p>But what I want eventually is another DataFrame object that contains all the rows in the GroupBy object. In other words I want to get the following result:</p>

<pre><code>                  City  Name
Name    City
Alice   Seattle      1     1
Bob     Seattle      2     2
Mallory Portland     2     2
Mallory Seattle      1     1
</code></pre>

<p>I can't quite see how to accomplish this in the pandas documentation. Any hints would be welcome.</p>
","Converting a Pandas GroupBy output from Series to DataFrame<p>I'm starting with input data like this</p>

<pre><code>df1 = pandas.DataFrame( { 
    ""Name"" : [""Alice"", ""Bob"", ""Mallory"", ""Mallory"", ""Bob"" , ""Mallory""] , 
    ""City"" : [""Seattle"", ""Seattle"", ""Portland"", ""Seattle"", ""Seattle"", ""Portland""] } )
</code></pre>

<p>Which when printed appears as this:</p>

<pre><code>   City     Name
0   Seattle    Alice
1   Seattle      Bob
2  Portland  Mallory
3   Seattle  Mallory
4   Seattle      Bob
5  Portland  Mallory
</code></pre>

<p>Grouping is simple enough:</p>

<pre><code>g1 = df1.groupby( [ ""Name"", ""City""] ).count()
</code></pre>

<p>and printing yields a <code>GroupBy</code> object:</p>

<pre><code>                  City  Name
Name    City
Alice   Seattle      1     1
Bob     Seattle      2     2
Mallory Portland     2     2
        Seattle      1     1
</code></pre>

<p>But what I want eventually is another DataFrame object that contains all the rows in the GroupBy object. In other words I want to get the following result:</p>

<pre><code>                  City  Name
Name    City
Alice   Seattle      1     1
Bob     Seattle      2     2
Mallory Portland     2     2
Mallory Seattle      1     1
</code></pre>

<p>I can't quite see how to accomplish this in the pandas documentation. Any hints would be welcome.</p>
",<python><pandas><dataframe><pandas-groupby><multi-index>,groupby object pandas eventually grouping yields welcome starting accomplish,"<p><code>g1</code> here <em>is</em> a DataFrame. It has a hierarchical index, though:</p>

<pre><code>In [19]: type(g1)
Out[19]: pandas.core.frame.DataFrame

In [20]: g1.index
Out[20]: 
MultiIndex([('Alice', 'Seattle'), ('Bob', 'Seattle'), ('Mallory', 'Portland'),
       ('Mallory', 'Seattle')], dtype=object)
</code></pre>

<p>Perhaps you want something like this?</p>

<pre><code>In [21]: g1.add_suffix('_Count').reset_index()
Out[21]: 
      Name      City  City_Count  Name_Count
0    Alice   Seattle           1           1
1      Bob   Seattle           2           2
2  Mallory  Portland           2           2
3  Mallory   Seattle           1           1
</code></pre>

<p>Or something like:</p>

<pre><code>In [36]: DataFrame({'count' : df1.groupby( [ ""Name"", ""City""] ).size()}).reset_index()
Out[36]: 
      Name      City  count
0    Alice   Seattle      1
1      Bob   Seattle      2
2  Mallory  Portland      2
3  Mallory   Seattle      1
</code></pre>
",,
440,3,Disable output buffering,"<p>Is output buffering enabled by default in Python's interpreter for <code>sys.stdout</code>?</p>

<p>If the answer is positive, what are all the ways to disable it?</p>

<p>Suggestions so far:</p>

<ol>
<li>Use the <code>-u</code> command line switch</li>
<li>Wrap <code>sys.stdout</code> in an object that flushes after every write</li>
<li>Set <code>PYTHONUNBUFFERED</code> env var</li>
<li><code>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)</code></li>
</ol>

<p>Is there any other way to set some global flag in <code>sys</code>/<code>sys.stdout</code> programmatically during execution?</p>
","Disable output buffering<p>Is output buffering enabled by default in Python's interpreter for <code>sys.stdout</code>?</p>

<p>If the answer is positive, what are all the ways to disable it?</p>

<p>Suggestions so far:</p>

<ol>
<li>Use the <code>-u</code> command line switch</li>
<li>Wrap <code>sys.stdout</code> in an object that flushes after every write</li>
<li>Set <code>PYTHONUNBUFFERED</code> env var</li>
<li><code>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)</code></li>
</ol>

<p>Is there any other way to set some global flag in <code>sys</code>/<code>sys.stdout</code> programmatically during execution?</p>
",<python><stdout><buffered>,stdout sys disable output varsys buffering positive fdopen writeset buffering,"<p>From <a href=""http://mail.python.org/pipermail/tutor/2003-November/026645.html"" rel=""noreferrer"">Magnus Lycka answer on a mailing list</a>:</p>
<blockquote>
<p>You can skip buffering for a whole
python process using &quot;python -u&quot;
(or#!/usr/bin/env python -u etc) or by
setting the environment variable
PYTHONUNBUFFERED.</p>
<p>You could also replace sys.stdout with
some other stream like wrapper which
does a flush after every call.</p>
<pre><code>class Unbuffered(object):
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def writelines(self, datas):
       self.stream.writelines(datas)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)

import sys
sys.stdout = Unbuffered(sys.stdout)
print 'Hello'
</code></pre>
</blockquote>
",,
441,6,How can I find script's directory?,"<p>Consider the following Python code:</p>

<pre><code>import os
print os.getcwd()
</code></pre>

<p>I use <code>os.getcwd()</code> to <a href=""http://www.faqs.org/docs/diveintopython/regression_path.html"" rel=""noreferrer"">get the script file's directory location</a>. When I run the script from the command line it gives me the correct path whereas when I run it from a script run by code in a Django view it prints <code>/</code>.</p>

<p>How can I get the path to the script from within a script run by a Django view?</p>

<p><strong>UPDATE:</strong><br>
Summing up the answers thus far - <code>os.getcwd()</code> and <code>os.path.abspath()</code> both give the current working directory which may or may not be the directory where the script resides. In my web host setup <code><code>__file__</code></code> gives only the filename without the path.</p>

<p>Isn't there any way in Python to (always) be able to receive the path in which the script resides?</p>
","How can I find script's directory?<p>Consider the following Python code:</p>

<pre><code>import os
print os.getcwd()
</code></pre>

<p>I use <code>os.getcwd()</code> to <a href=""http://www.faqs.org/docs/diveintopython/regression_path.html"" rel=""noreferrer"">get the script file's directory location</a>. When I run the script from the command line it gives me the correct path whereas when I run it from a script run by code in a Django view it prints <code>/</code>.</p>

<p>How can I get the path to the script from within a script run by a Django view?</p>

<p><strong>UPDATE:</strong><br>
Summing up the answers thus far - <code>os.getcwd()</code> and <code>os.path.abspath()</code> both give the current working directory which may or may not be the directory where the script resides. In my web host setup <code><code>__file__</code></code> gives only the filename without the path.</p>

<p>Isn't there any way in Python to (always) be able to receive the path in which the script resides?</p>
",<python><directory><django-views><getcwd>,script path run directory os getcwd resides view django gives,"<p>You need to call <code>os.path.realpath</code> on <code>__file__</code>, so that when <code>__file__</code> is a filename without the path you still get the dir path:</p>

<pre><code>import os
print(os.path.dirname(os.path.realpath(__file__)))
</code></pre>
",,
442,3,Does Python have an ordered set?,"<p>Python has an <a href=""http://www.python.org/dev/peps/pep-0372/"" rel=""noreferrer"">ordered dictionary</a>. What about an ordered set?</p>
","Does Python have an ordered set?<p>Python has an <a href=""http://www.python.org/dev/peps/pep-0372/"" rel=""noreferrer"">ordered dictionary</a>. What about an ordered set?</p>
",<python><set>,ordered set dictionary python zone forthen formatting formatted formats,"<p>There is an <a href=""http://code.activestate.com/recipes/576694/"" rel=""noreferrer"">ordered set</a> (possible <a href=""https://github.com/ActiveState/code/blob/3b27230f418b714bc9a0f897cb8ea189c3515e99/recipes/Python/576696_OrderedSet_with_Weakrefs/README.md"" rel=""noreferrer"">new link</a>) recipe for this which is referred to from the <a href=""https://docs.python.org/2/library/collections.html"" rel=""noreferrer"">Python 2 Documentation</a>. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.</p>

<pre><code>OrderedSet([1, 2, 3])
</code></pre>

<p>This is a MutableSet, so the signature for <code>.union</code> doesn't match that of set, but since it includes <code>__or__</code> something similar can easily be added:</p>

<pre><code>@staticmethod
def union(*sets):
    union = OrderedSet()
    union.union(*sets)
    return union

def union(self, *sets):
    for set in sets:
        self |= set
</code></pre>
",,
443,4,Sort a list by multiple attributes?,"<p>I have a list of lists:</p>

<pre><code>[[12, 'tall', 'blue', 1],
[2, 'short', 'red', 9],
[4, 'tall', 'blue', 13]]
</code></pre>

<p>If I wanted to sort by one element, say the tall/short element, I could do it via <code>s = sorted(s, key = itemgetter(1))</code>.</p>

<p>If I wanted to sort by <em>both</em> tall/short and colour, I could do the sort twice, once for each element, but is there a quicker way?</p>
","Sort a list by multiple attributes?<p>I have a list of lists:</p>

<pre><code>[[12, 'tall', 'blue', 1],
[2, 'short', 'red', 9],
[4, 'tall', 'blue', 13]]
</code></pre>

<p>If I wanted to sort by one element, say the tall/short element, I could do it via <code>s = sorted(s, key = itemgetter(1))</code>.</p>

<p>If I wanted to sort by <em>both</em> tall/short and colour, I could do the sort twice, once for each element, but is there a quicker way?</p>
",<python><sorting>,sort element tall short wanted quicker colour itemgetter twice attributes,"<p>A key can be a function that returns a tuple:</p>

<pre><code>s = sorted(s, key = lambda x: (x[1], x[2]))
</code></pre>

<p>Or you can achieve the same using <code>itemgetter</code> (which is faster and avoids a Python function call):</p>

<pre><code>import operator
s = sorted(s, key = operator.itemgetter(1, 2))
</code></pre>

<p>And notice that here you can use <code>sort</code> instead of using <code>sorted</code> and then reassigning:</p>

<pre><code>s.sort(key = operator.itemgetter(1, 2))
</code></pre>
",,
444,6,Why use def main()?,"<p>I've seen some code samples and tutorials that use</p>

<pre><code>def main():
    # my code here

if __name__ == ""__main__"":
    main()
</code></pre>

<p>But why? Is there any reason not do define your functions at the top of the file, then just write code under it? ie</p>

<pre><code>def my_function()
    # my code here

def my_function_two()
    # my code here

# some code
# call function
# print(something)
</code></pre>

<p>I just wonder if there is any rhyme to the main?</p>
","Why use def main()?<p>I've seen some code samples and tutorials that use</p>

<pre><code>def main():
    # my code here

if __name__ == ""__main__"":
    main()
</code></pre>

<p>But why? Is there any reason not do define your functions at the top of the file, then just write code under it? ie</p>

<pre><code>def my_function()
    # my code here

def my_function_two()
    # my code here

# some code
# call function
# print(something)
</code></pre>

<p>I just wonder if there is any rhyme to the main?</p>
",<python><coding-style>,main usebut tutorials iei rhyme def samples code wonder define,"<p>Without the main sentinel, the code would be executed even if the script were imported as a module.</p>
",,
445,3,"How do I convert seconds to hours, minutes and seconds?","<p>I have a function that returns information in seconds, but I need to store that information in hours:minutes:seconds.</p>

<p>Is there an easy way to convert the seconds to this format in Python?</p>
","How do I convert seconds to hours, minutes and seconds?<p>I have a function that returns information in seconds, but I need to store that information in hours:minutes:seconds.</p>

<p>Is there an easy way to convert the seconds to this format in Python?</p>
",<python><datetime>,seconds minutes hours information convert store format easy returns need,"<p>You can use <a href=""https://docs.python.org/library/datetime.html#datetime.timedelta"" rel=""noreferrer""><code>datetime.timedelta</code></a> function:</p>

<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str(datetime.timedelta(seconds=666))
'0:11:06'
</code></pre>
",,
446,3,Python exit commands - why so many and when should each be used?,"<p>It seems that python supports many different commands to stop script execution.<br>The choices I've found are:  <code>quit()</code>, <code>exit()</code>, <code>sys.exit()</code>, <code>os._exit()</code> </p>

<p>Have I missed any?
What's the difference between them? When would you use each?</p>
","Python exit commands - why so many and when should each be used?<p>It seems that python supports many different commands to stop script execution.<br>The choices I've found are:  <code>quit()</code>, <code>exit()</code>, <code>sys.exit()</code>, <code>os._exit()</code> </p>

<p>Have I missed any?
What's the difference between them? When would you use each?</p>
",<python>,exit commands choices supports quit missed stop sys execution os,"<p>The functions<sup>*</sup> <code>quit()</code>, <code>exit()</code>, and <code>sys.exit()</code> function in the same way: they raise the <code>SystemExit</code> exception.  So there is no real difference, except that <code>sys.exit()</code> is always available but <code>exit()</code> and <code>quit()</code> are only available if the <code>site</code> module is imported.</p>

<p>The <code>os._exit()</code> function is special, it exits immediately without calling any cleanup functions (it doesn't flush buffers, for example).  This is designed for highly specialized use cases... basically, only in the child after an <code>os.fork()</code> call.</p>

<h2>Conclusion</h2>

<ul>
<li><p>Use <code>exit()</code> or <code>quit()</code> in the REPL.</p></li>
<li><p>Use <code>sys.exit()</code> in scripts, or <code>raise SystemExit()</code> if you prefer.</p></li>
<li><p>Use <code>os._exit()</code> for child processes to exit after a call to <code>os.fork()</code>.</p></li>
</ul>

<p>All of these can be called without arguments, or you can specify the exit status, e.g., <code>exit(1)</code> or <code>raise SystemExit(1)</code> to exit with status 1. Note that portable programs are limited to exit status codes in the range 0-255, if you <code>raise SystemExit(256)</code> on many systems this will get truncated and your process will actually exit with status 0.</p>

<h3>Footnotes</h3>

<p><sup>*</sup> Actually, <code>quit()</code> and <code>exit()</code> are callable instance objects, but I think it's okay to call them functions.</p>
",,
447,2,How to check if any value is NaN in a Pandas DataFrame,"<p>In Python Pandas, what's the best way to check whether a DataFrame has one (or more) NaN values?</p>

<p>I know about the function <code>pd.isnan</code>, but this returns a DataFrame of booleans for each element. <a href=""https://stackoverflow.com/questions/27754891/python-nan-value-in-pandas"">This post</a> right here doesn't exactly answer my question either.</p>
","How to check if any value is NaN in a Pandas DataFrame<p>In Python Pandas, what's the best way to check whether a DataFrame has one (or more) NaN values?</p>

<p>I know about the function <code>pd.isnan</code>, but this returns a DataFrame of booleans for each element. <a href=""https://stackoverflow.com/questions/27754891/python-nan-value-in-pandas"">This post</a> right here doesn't exactly answer my question either.</p>
",<python><pandas><dataframe><nan>,nan check dataframe pandas pd booleans  isnan post exactly,"<p><a href=""https://stackoverflow.com/users/1567452/jwilner"">jwilner</a>'s response is spot on. I was exploring to see if there's a faster option, since in my experience, summing flat arrays is (strangely) faster than counting. This code seems faster:</p>
<pre class=""lang-py prettyprint-override""><code>df.isnull().values.any()
</code></pre>
<p><a href=""https://i.stack.imgur.com/7l80g.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/7l80g.png"" alt=""enter image description here"" /></a></p>
<pre class=""lang-py prettyprint-override""><code>import numpy as np
import pandas as pd
import perfplot


def setup(n):
    df = pd.DataFrame(np.random.randn(n))
    df[df &gt; 0.9] = np.nan
    return df


def isnull_any(df):
    return df.isnull().any()


def isnull_values_sum(df):
    return df.isnull().values.sum() &gt; 0


def isnull_sum(df):
    return df.isnull().sum() &gt; 0


def isnull_values_any(df):
    return df.isnull().values.any()


perfplot.save(
    &quot;out.png&quot;,
    setup=setup,
    kernels=[isnull_any, isnull_values_sum, isnull_sum, isnull_values_any],
    n_range=[2 ** k for k in range(25)],
)
</code></pre>
<p><code>df.isnull().sum().sum()</code> is a bit slower, but of course, has additional information -- the number of <code>NaNs</code>.</p>
",,
448,4,Finding the average of a list,"<p>I have to find the average of a list in Python. This is my code so far</p>

<pre><code>l = [15, 18, 2, 36, 12, 78, 5, 6, 9]
print reduce(lambda x, y: x + y, l)
</code></pre>

<p>I've got it so it adds together the values in the list, but I don't know how to make it divide into them?</p>
","Finding the average of a list<p>I have to find the average of a list in Python. This is my code so far</p>

<pre><code>l = [15, 18, 2, 36, 12, 78, 5, 6, 9]
print reduce(lambda x, y: x + y, l)
</code></pre>

<p>I've got it so it adds together the values in the list, but I don't know how to make it divide into them?</p>
",<python><list><lambda><average><reduce>,average far adds divide list finding got make values,"<p>On Python 3.4+ you can use <a href=""https://docs.python.org/library/statistics.html#statistics.mean"" rel=""noreferrer""><code>statistics.mean()</code></a></p>

<pre><code>l = [15, 18, 2, 36, 12, 78, 5, 6, 9]

import statistics
statistics.mean(l)  # 20.11111111111111
</code></pre>

<p>On older versions of Python you can do</p>

<pre><code>sum(l) / len(l)
</code></pre>

<p>On Python 2 you need to convert <code>len</code> to a float to get float division</p>

<pre><code>sum(l) / float(len(l))
</code></pre>

<p>There is no need to use <code>reduce</code>. It is much slower and was <a href=""https://www.artima.com/weblogs/viewpost.jsp?thread=98196"" rel=""noreferrer"">removed</a> in Python 3.</p>
",,
449,5,Difference between abstract class and interface in Python,"<p>What is the difference between abstract class and interface in Python?</p>
","Difference between abstract class and interface in Python<p>What is the difference between abstract class and interface in Python?</p>
",<python><interface><abstract-class>,abstract interface class difference pythonwhat python zone forgotten formatwhich formatting,"<p>What you'll see sometimes is the following:</p>
<pre class=""lang-py prettyprint-override""><code>class Abstract1:
    &quot;&quot;&quot;Some description that tells you it's abstract,
    often listing the methods you're expected to supply.&quot;&quot;&quot;

    def aMethod(self):
        raise NotImplementedError(&quot;Should have implemented this&quot;)
</code></pre>
<p>Because Python doesn't have (and doesn't need) a formal Interface contract, the Java-style distinction between abstraction and interface doesn't exist.  If someone goes through the effort to define a formal interface, it will also be an abstract class.  The only differences would be in the stated intent in the docstring.</p>
<p>And the difference between abstract and interface is a hairsplitting thing when you have duck typing.</p>
<p>Java uses interfaces because it doesn't have multiple inheritance.</p>
<p>Because Python has multiple inheritance, you may also see something like this</p>
<pre class=""lang-py prettyprint-override""><code>class SomeAbstraction:
    pass  # lots of stuff - but missing something

class Mixin1:
    def something(self):
        pass  # one implementation

class Mixin2:
    def something(self):
        pass  # another

class Concrete1(SomeAbstraction, Mixin1):
    pass

class Concrete2(SomeAbstraction, Mixin2):
    pass
</code></pre>
<p>This uses a kind of abstract superclass with mixins to create concrete subclasses that are disjoint.</p>
",,
450,6,Directory-tree listing in Python,"<p>How do I get a list of all files (and directories) in a given directory in Python?</p>
","Directory-tree listing in Python<p>How do I get a list of all files (and directories) in a given directory in Python?</p>
",<python><file><directory><subdirectory><directory-tree>,directory directories listing tree pythonhow given files list python formats,"<p>This is a way to traverse every file and directory in a directory tree:</p>

<pre><code>import os

for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))

    # print path to all filenames.
    for filename in filenames:
        print(os.path.join(dirname, filename))

    # Advanced usage:
    # editing the 'dirnames' list will stop os.walk() from recursing into there.
    if '.git' in dirnames:
        # don't go into any .git directories.
        dirnames.remove('.git')
</code></pre>
",,
451,5,"Difference between map, applymap and apply methods in Pandas","<p>Can you tell me when to use these vectorization methods with basic examples? </p>

<p>I see that <code>map</code> is a <code>Series</code> method whereas the rest are <code>DataFrame</code> methods. I got confused about <code>apply</code> and <code>applymap</code> methods though. Why do we have two methods for applying a function to a DataFrame? Again, simple examples which illustrate the usage would be great!</p>
","Difference between map, applymap and apply methods in Pandas<p>Can you tell me when to use these vectorization methods with basic examples? </p>

<p>I see that <code>map</code> is a <code>Series</code> method whereas the rest are <code>DataFrame</code> methods. I got confused about <code>apply</code> and <code>applymap</code> methods though. Why do we have two methods for applying a function to a DataFrame? Again, simple examples which illustrate the usage would be great!</p>
",<python><pandas><dataframe><vectorization>,methods applymap apply map examples dataframe pandascan vectorization applying illustrate,"<h1>Comparing <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.map.html"" rel=""noreferrer""><code>map</code></a>, <a href=""https://www.google.com/search?client=safari&amp;rls=en&amp;q=pandas+applymap&amp;ie=UTF-8&amp;oe=UTF-8"" rel=""noreferrer""><code>applymap</code></a> and <a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html"" rel=""noreferrer""><code>ap</code></a><a href=""https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html"" rel=""noreferrer""><code>ply</code></a>: Context Matters</h1>
<p>First major difference: <strong>DEFINITION</strong></p>
<ul>
<li><code>map</code> is defined on Series ONLY</li>
<li><code>applymap</code> is defined on DataFrames ONLY</li>
<li><code>apply</code> is defined on BOTH</li>
</ul>
<p>Second major difference: <strong>INPUT ARGUMENT</strong></p>
<ul>
<li><code>map</code> accepts <code>dict</code>s, <code>Series</code>, or callable</li>
<li><code>applymap</code> and <code>apply</code> accept callables only</li>
</ul>
<p>Third major difference: <strong>BEHAVIOR</strong></p>
<ul>
<li><code>map</code> is elementwise for Series</li>
<li><code>applymap</code> is elementwise for DataFrames</li>
<li><code>apply</code> also works elementwise but is suited to more complex operations and aggregation. The behaviour and return value depends on the function.</li>
</ul>
<p>Fourth major difference (the most important one): <strong>USE CASE</strong></p>
<ul>
<li><code>map</code> is meant for mapping values from one domain to another, so is optimised for performance (e.g., <code>df['A'].map({1:'a', 2:'b', 3:'c'})</code>)</li>
<li><code>applymap</code> is good for elementwise transformations across multiple rows/columns (e.g., <code>df[['A', 'B', 'C']].applymap(str.strip)</code>)</li>
<li><code>apply</code> is for applying any function that cannot be vectorised (e.g., <code>df['sentences'].apply(nltk.sent_tokenize)</code>).</li>
</ul>
<p>Also see <a href=""https://stackoverflow.com/questions/54432583/when-should-i-not-want-to-use-pandas-apply-in-my-code"">When should I (not) want to use pandas apply() in my code?</a> for a writeup I made a while back on the most appropriate scenarios for using <code>apply</code> (note that there aren't many, but there are a few -- apply is generally <em>slow</em>`).</p>
<hr />
<p>#Summarising</p>
<p><a href=""https://i.stack.imgur.com/IZys3.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/IZys3.png"" alt=""enter image description here"" /></a></p>
<blockquote>
<p><strong>Footnotes</strong></p>
<ol>
<li><p><code>map</code> when passed a dictionary/Series will map elements based on the keys in that dictionary/Series. Missing values will be recorded as
NaN in the output.</p>
</li>
<li><p><code>applymap</code> in more recent versions has been optimised for some operations. You will find <code>applymap</code> slightly faster than <code>apply</code> in
some cases. My suggestion is to test them both and use whatever works
better.</p>
</li>
<li><p><code>map</code> is optimised for elementwise mappings and transformation. Operations that involve dictionaries or Series will enable pandas to
use faster code paths for better performance.</p>
</li>
<li><p><code>Series.apply</code> returns a scalar for aggregating operations, Series otherwise. Similarly for <code>DataFrame.apply</code>. Note that <code>apply</code> also has
fastpaths when called with certain NumPy functions such as <code>mean</code>,
<code>sum</code>, etc.</p>
</li>
</ol>
</blockquote>
",,
452,1,Removing pip's cache?,"<p>I need to install psycopg2 v2.4.1 specifically. I accidentally did:</p>

<pre><code> pip install psycopg2
</code></pre>

<p>Instead of:</p>

<pre><code> pip install psycopg2==2.4.1
</code></pre>

<p>That installs 2.4.4 instead of the earlier version. </p>

<p>Now even after I pip uninstall psycopg2 and attempt to reinstall with the correct version, it appears that pip is re-using the cache it downloaded the first time.</p>

<p>How can I force pip to clear out its download cache and use the specific version I'm including in the command?</p>
","Removing pip's cache?<p>I need to install psycopg2 v2.4.1 specifically. I accidentally did:</p>

<pre><code> pip install psycopg2
</code></pre>

<p>Instead of:</p>

<pre><code> pip install psycopg2==2.4.1
</code></pre>

<p>That installs 2.4.4 instead of the earlier version. </p>

<p>Now even after I pip uninstall psycopg2 and attempt to reinstall with the correct version, it appears that pip is re-using the cache it downloaded the first time.</p>

<p>How can I force pip to clear out its download cache and use the specific version I'm including in the command?</p>
",<python><pip>,cache pip version psycopg instead including accidentally earlier reinstall installs,"<p>If using pip 6.0 or newer, try adding the <code>--no-cache-dir</code> option (<a href=""https://pip.pypa.io/en/stable/reference/pip_install/#caching"" rel=""noreferrer"">source</a>).</p>
<p>If using pip older than pip 6.0, upgrade it with <code>pip install -U pip</code>.</p>
",,
453,4,"What is the most ""pythonic"" way to iterate over a list in chunks?","<p>I have a Python script which takes as input a list of integers, which I need to work with four integers at a time.  Unfortunately, I don't have control of the input, or I'd have it passed in as a list of four-element tuples.  Currently, I'm iterating over it this way:</p>
<pre><code>for i in range(0, len(ints), 4):
    # dummy op for example code
    foo += ints[i] * ints[i + 1] + ints[i + 2] * ints[i + 3]
</code></pre>
<p>It looks a lot like &quot;C-think&quot;, though, which makes me suspect there's a more pythonic way of dealing with this situation.  The list is discarded after iterating, so it needn't be preserved.  Perhaps something like this would be better?</p>
<pre><code>while ints:
    foo += ints[0] * ints[1] + ints[2] * ints[3]
    ints[0:4] = []
</code></pre>
<p>Still doesn't quite &quot;feel&quot; right, though.  :-/</p>
<p>Related question: <a href=""https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python"">How do you split a list into evenly sized chunks in Python?</a></p>
","What is the most ""pythonic"" way to iterate over a list in chunks?<p>I have a Python script which takes as input a list of integers, which I need to work with four integers at a time.  Unfortunately, I don't have control of the input, or I'd have it passed in as a list of four-element tuples.  Currently, I'm iterating over it this way:</p>
<pre><code>for i in range(0, len(ints), 4):
    # dummy op for example code
    foo += ints[i] * ints[i + 1] + ints[i + 2] * ints[i + 3]
</code></pre>
<p>It looks a lot like &quot;C-think&quot;, though, which makes me suspect there's a more pythonic way of dealing with this situation.  The list is discarded after iterating, so it needn't be preserved.  Perhaps something like this would be better?</p>
<pre><code>while ints:
    foo += ints[0] * ints[1] + ints[2] * ints[3]
    ints[0:4] = []
</code></pre>
<p>Still doesn't quite &quot;feel&quot; right, though.  :-/</p>
<p>Related question: <a href=""https://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python"">How do you split a list into evenly sized chunks in Python?</a></p>
",<python><list><loops><optimization><chunks>,list chunks iterating integers input pythonic discarded preserved way evenly,"<p>Modified from the <a href=""https://docs.python.org/library/itertools.html#itertools-recipes"" rel=""noreferrer"">Recipes</a> section of Python's <a href=""http://docs.python.org/library/itertools.html"" rel=""noreferrer""><code>itertools</code></a> docs:</p>
<pre><code>from itertools import zip_longest

def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
</code></pre>
<p><strong>Example</strong></p>
<pre><code>grouper('ABCDEFG', 3, 'x')  # --&gt; 'ABC' 'DEF' 'Gxx'
</code></pre>
<p><strong>Note:</strong> on Python 2 use <code>izip_longest</code> instead of <code>zip_longest</code>.</p>
",,
454,3,Get HTML source of WebElement in Selenium WebDriver using Python,"<p>I'm using the Python bindings to run Selenium WebDriver:</p>
<pre><code>from selenium import webdriver
wd = webdriver.Firefox()
</code></pre>
<p>I know I can grab a webelement like so:</p>
<pre><code>elem = wd.find_element_by_css_selector('#my-id')
</code></pre>
<p>And I know I can get the full page source with...</p>
<pre><code>wd.page_source
</code></pre>
<p>But is there a way to get the &quot;element source&quot;?</p>
<pre><code>elem.source   # &lt;-- returns the HTML as a string
</code></pre>
<p>The Selenium WebDriver documentation for Python are basically non-existent and I don't see anything in the code that seems to enable that functionality.</p>
<p>What is the best way to access the HTML of an element (and its children)?</p>
","Get HTML source of WebElement in Selenium WebDriver using Python<p>I'm using the Python bindings to run Selenium WebDriver:</p>
<pre><code>from selenium import webdriver
wd = webdriver.Firefox()
</code></pre>
<p>I know I can grab a webelement like so:</p>
<pre><code>elem = wd.find_element_by_css_selector('#my-id')
</code></pre>
<p>And I know I can get the full page source with...</p>
<pre><code>wd.page_source
</code></pre>
<p>But is there a way to get the &quot;element source&quot;?</p>
<pre><code>elem.source   # &lt;-- returns the HTML as a string
</code></pre>
<p>The Selenium WebDriver documentation for Python are basically non-existent and I don't see anything in the code that seems to enable that functionality.</p>
<p>What is the best way to access the HTML of an element (and its children)?</p>
",<python><selenium><selenium-webdriver><webdriver><automated-tests>,selenium webdriver webelement source html element bindings existent enable page,"<p>You can read the <code>innerHTML</code> attribute to get the source of the <em>content</em> of the element or <code>outerHTML</code> for the source with the current element.</p>
<p>Python:</p>
<pre><code>element.get_attribute('innerHTML')
</code></pre>
<p>Java:</p>
<pre><code>elem.getAttribute(&quot;innerHTML&quot;);
</code></pre>
<p>C#:</p>
<pre><code>element.GetAttribute(&quot;innerHTML&quot;);
</code></pre>
<p>Ruby:</p>
<pre><code>element.attribute(&quot;innerHTML&quot;)
</code></pre>
<p>JavaScript:</p>
<pre><code>element.getAttribute('innerHTML');
</code></pre>
<p>PHP:</p>
<pre><code>$element-&gt;getAttribute('innerHTML');
</code></pre>
<p>It was tested and worked with the <code>ChromeDriver</code>.</p>
",,
455,3,String comparison in Python: is vs. ==,"<p>I noticed a Python script I was writing was acting squirrelly, and traced it to an infinite loop, where the loop condition was <code>while line is not ''</code>. Running through it in the debugger, it turned out that line was in fact <code>''</code>. When I changed it to <code>!=''</code> rather than <code>is not ''</code>, it worked fine. </p>

<p>Also, is it generally considered better to just use '==' by default, even when comparing int or Boolean values? I've always liked to use 'is' because I find it more aesthetically pleasing and pythonic (which is how I fell into this trap...), but I wonder if it's intended to just be reserved for when you care about finding two objects with the same id.</p>
","String comparison in Python: is vs. ==<p>I noticed a Python script I was writing was acting squirrelly, and traced it to an infinite loop, where the loop condition was <code>while line is not ''</code>. Running through it in the debugger, it turned out that line was in fact <code>''</code>. When I changed it to <code>!=''</code> rather than <code>is not ''</code>, it worked fine. </p>

<p>Also, is it generally considered better to just use '==' by default, even when comparing int or Boolean values? I've always liked to use 'is' because I find it more aesthetically pleasing and pythonic (which is how I fell into this trap...), but I wonder if it's intended to just be reserved for when you care about finding two objects with the same id.</p>
",<python><string><comparison><equality>,loop line liked trap acting squirrelly debugger aesthetically pleasing traced,"<blockquote>
  <p>For all built-in Python objects (like
  strings, lists, dicts, functions,
  etc.), if x is y, then x==y is also
  True.</p>
</blockquote>

<p>Not always.  NaN is a counterexample.  But <em>usually</em>, identity (<code>is</code>) implies equality (<code>==</code>).  The converse is not true: Two distinct objects can have the same value.</p>

<blockquote>
  <p>Also, is it generally considered better to just use '==' by default, even
  when comparing int or Boolean values?</p>
</blockquote>

<p>You use <code>==</code> when comparing values and <code>is</code> when comparing identities.</p>

<p>When comparing ints (or immutable types in general), you pretty much always want the former.  There's an optimization that allows small integers to be compared with <code>is</code>, but don't rely on it.</p>

<p>For boolean values, you shouldn't be doing comparisons at all.   Instead of:</p>

<pre><code>if x == True:
    # do something
</code></pre>

<p>write:</p>

<pre><code>if x:
    # do something
</code></pre>

<p>For comparing against <code>None</code>, <code>is None</code> is preferred over <code>== None</code>.</p>

<blockquote>
  <p>I've always liked to use 'is' because
  I find it more aesthetically pleasing
  and pythonic (which is how I fell into
  this trap...), but I wonder if it's
  intended to just be reserved for when
  you care about finding two objects
  with the same id.</p>
</blockquote>

<p>Yes, that's exactly what it's for.</p>
",,
456,3,"What is the maximum recursion depth in Python, and how to increase it?","<p>I have this tail recursive function here:</p>

<pre><code>def recursive_function(n, sum):
    if n &lt; 1:
        return sum
    else:
        return recursive_function(n-1, sum+n)

c = 998
print(recursive_function(c, 0))
</code></pre>

<p>It works up to <code>n=997</code>, then it just breaks and spits out a <code>RecursionError: maximum recursion depth exceeded in comparison</code>. Is this just a stack overflow? Is there a way to get around it?</p>
","What is the maximum recursion depth in Python, and how to increase it?<p>I have this tail recursive function here:</p>

<pre><code>def recursive_function(n, sum):
    if n &lt; 1:
        return sum
    else:
        return recursive_function(n-1, sum+n)

c = 998
print(recursive_function(c, 0))
</code></pre>

<p>It works up to <code>n=997</code>, then it just breaks and spits out a <code>RecursionError: maximum recursion depth exceeded in comparison</code>. Is this just a stack overflow? Is there a way to get around it?</p>
",<python><recursion>,depth recursion maximum spits exceeded recursionerror recursive increase breaks tail,"<p>It is a guard against a stack overflow, yes. Python (or rather, the CPython implementation) doesn't optimize tail recursion, and unbridled recursion causes stack overflows. You can check the recursion limit with <a href=""https://docs.python.org/library/sys.html#sys.getrecursionlimit"" rel=""noreferrer""><code>sys.getrecursionlimit</code></a>:</p>
<pre><code>import sys
print(sys.getrecursionlimit())
</code></pre>
<p>and change the recursion limit with <a href=""https://docs.python.org/library/sys.html#sys.setrecursionlimit"" rel=""noreferrer""><code>sys.setrecursionlimit</code></a>:</p>
<pre><code>sys.setrecursionlimit(1500)
</code></pre>
<p>but doing so is dangerous -- the standard limit is a little conservative, but Python stackframes can be quite big.</p>
<p>Python isn't a functional language and tail recursion is not a particularly efficient technique. Rewriting the algorithm iteratively, if possible, is generally a better idea.</p>
",,
457,3,"""is"" operator behaves unexpectedly with integers","<p>Why does the following behave unexpectedly in Python?</p>

<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; a is b
True           # This is an expected result
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; a is b
False          # What happened here? Why is this False?
&gt;&gt;&gt; 257 is 257
True           # Yet the literal numbers compare properly
</code></pre>

<p>I am using Python 2.5.2. Trying some different versions of Python, it appears that Python 2.3.3 shows the above behaviour between 99 and 100.</p>

<p>Based on the above, I can hypothesize that Python is internally implemented such that ""small"" integers are stored in a different way than larger integers and the <code>is</code> operator can tell the difference. Why the leaky abstraction? What is a better way of comparing two arbitrary objects to see whether they are the same when I don't know in advance whether they are numbers or not?</p>
","""is"" operator behaves unexpectedly with integers<p>Why does the following behave unexpectedly in Python?</p>

<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; a is b
True           # This is an expected result
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; a is b
False          # What happened here? Why is this False?
&gt;&gt;&gt; 257 is 257
True           # Yet the literal numbers compare properly
</code></pre>

<p>I am using Python 2.5.2. Trying some different versions of Python, it appears that Python 2.3.3 shows the above behaviour between 99 and 100.</p>

<p>Based on the above, I can hypothesize that Python is internally implemented such that ""small"" integers are stored in a different way than larger integers and the <code>is</code> operator can tell the difference. Why the leaky abstraction? What is a better way of comparing two arbitrary objects to see whether they are the same when I don't know in advance whether they are numbers or not?</p>
",<python><int><operators><identity><python-internals>,unexpectedly operator integers different python advance behave behaves abstraction hypothesize,"<p>Take a look at this:</p>

<pre><code>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; id(a)
9987148
&gt;&gt;&gt; id(b)
9987148
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; id(a)
11662816
&gt;&gt;&gt; id(b)
11662828
</code></pre>

<p>Here's what I found in the Python 2 documentation, <a href=""https://docs.python.org/2/c-api/int.html"" rel=""noreferrer"">""Plain Integer Objects""</a> (It's the same for <a href=""https://docs.python.org/3/c-api/long.html"" rel=""noreferrer"">Python 3</a>):</p>

<blockquote>
  <p>The current implementation keeps an
  array of integer objects for all
  integers between -5 and 256, when you
  create an int in that range you
  actually just get back a reference to
  the existing object. So it should be
  possible to change the value of 1. I
  suspect the behaviour of Python in
  this case is undefined. :-)</p>
</blockquote>
",,
458,3,Configure Flask dev server to be visible across the network,"<p>I'm not sure if this is Flask specific, but when I run an app in dev mode (<code>http://localhost:5000</code>), I cannot access it from other machines on the network (with <code>http://[dev-host-ip]:5000</code>). With Rails in dev mode, for example, it works fine. I couldn't find any docs regarding the Flask dev server configuration. Any idea what should be configured to enable this?</p>
","Configure Flask dev server to be visible across the network<p>I'm not sure if this is Flask specific, but when I run an app in dev mode (<code>http://localhost:5000</code>), I cannot access it from other machines on the network (with <code>http://[dev-host-ip]:5000</code>). With Rails in dev mode, for example, it works fine. I couldn't find any docs regarding the Flask dev server configuration. Any idea what should be configured to enable this?</p>
",<python><flask><werkzeug>,dev flask mode server http localhost machines networki rails visible,"<p>While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on <a href=""https://flask.palletsprojects.com/deploying/index.html"" rel=""noreferrer"">deploying</a> for correct solutions.</p>
<hr />
<p>The <code>--host</code> option to <code>flask run</code>, or the <code>host</code> parameter to <code>app.run()</code>, controls what address the development server listens to. By default it runs on <code>localhost</code>, change it to <code>flask run --host=0.0.0.0</code> (or <code>app.run(host=&quot;0.0.0.0&quot;)</code>) to run on all your machine's IP addresses.</p>
<p><code>0.0.0.0</code> is a special value that you can't use in the browser directly, you'll need to navigate to the actual IP address of the machine on the network. You may also need to adjust your firewall to allow external access to the port.</p>
<p>The Flask <a href=""https://flask.palletsprojects.com/quickstart/#a-minimal-application"" rel=""noreferrer"">quickstart docs</a> explain this in the &quot;Externally Visible Server&quot; section:</p>
<blockquote>
<p>If you run the server you will notice that the server is only
accessible from your own computer, not from any other in the network.
This is the default because in debugging mode a user of the
application can execute arbitrary Python code on your computer.</p>
<p>If you have the debugger disabled or trust the users on your network,
you can make the server publicly available simply by adding
<code>--host=0.0.0.0</code> to the command line:</p>
<pre class=""lang-none prettyprint-override""><code>$ flask run --host=0.0.0.0
</code></pre>
<p>This tells your operating system to listen on all public IPs.</p>
</blockquote>
",,
459,2,CSV file written with Python has blank lines between each row,"<pre><code>import csv

with open('thefile.csv', 'rb') as f:
  data = list(csv.reader(f))
  import collections
  counter = collections.defaultdict(int)

  for row in data:
        counter[row[10]] += 1


with open('/pythonwork/thefile_subset11.csv', 'w') as outfile:
    writer = csv.writer(outfile)
    for row in data:
        if counter[row[10]] &gt;= 504:
           writer.writerow(row)
</code></pre>

<p>This code reads <code>thefile.csv</code>, makes changes, and writes results to <code>thefile_subset1</code>.</p>

<p>However, when I open the resulting csv in Microsoft Excel, there is an extra blank line after each record!</p>

<p>Is there a way to make it not put an extra blank line?</p>
","CSV file written with Python has blank lines between each row<pre><code>import csv

with open('thefile.csv', 'rb') as f:
  data = list(csv.reader(f))
  import collections
  counter = collections.defaultdict(int)

  for row in data:
        counter[row[10]] += 1


with open('/pythonwork/thefile_subset11.csv', 'w') as outfile:
    writer = csv.writer(outfile)
    for row in data:
        if counter[row[10]] &gt;= 504:
           writer.writerow(row)
</code></pre>

<p>This code reads <code>thefile.csv</code>, makes changes, and writes results to <code>thefile_subset1</code>.</p>

<p>However, when I open the resulting csv in Microsoft Excel, there is an extra blank line after each record!</p>

<p>Is there a way to make it not put an extra blank line?</p>
",<python><windows><csv>,blank csv extra line thefilesubset thefile writes rowthis microsoft excel,"<p>In Python 2, open <code>outfile</code> with mode <code>'wb'</code> instead of <code>'w'</code>.  The <code>csv.writer</code> writes <code>\r\n</code> into the file directly.  If you don't open the file in <em>binary</em> mode, it will write <code>\r\r\n</code> because on Windows <em>text</em> mode will translate each <code>\n</code> into <code>\r\n</code>.</p>

<p>In Python 3 the required syntax changed (see documentation links below), so open <code>outfile</code> with the additional parameter <code>newline=''</code> (empty string) instead.</p>

<h3>Examples:</h3>

<pre><code># Python 2
with open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:
    writer = csv.writer(outfile)

# Python 3
with open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:
    writer = csv.writer(outfile)
</code></pre>

<h3>Documentation Links</h3>

<ul>
<li><a href=""https://docs.python.org/2/library/csv.html#csv.writer"" rel=""noreferrer"">https://docs.python.org/2/library/csv.html#csv.writer</a></li>
<li><a href=""https://docs.python.org/3/library/csv.html#csv.writer"" rel=""noreferrer"">https://docs.python.org/3/library/csv.html#csv.writer</a></li>
</ul>
",,
460,3,What does on_delete do on Django models?,"<p>I'm quite familiar with Django, but I recently noticed there exists an <code>on_delete=models.CASCADE</code> option with the models. I have searched for the documentation for the same, but I couldn't find anything more than:</p>
<blockquote>
<p><strong>Changed in Django 1.9:</strong></p>
<p><code>on_delete</code> can now be used as the second positional argument (previously it was typically only passed as a keyword argument). It will be a required argument in Django 2.0.</p>
</blockquote>
<p><a href=""https://docs.djangoproject.com/en/stable/ref/models/fields/#django.db.models.ForeignKey"" rel=""noreferrer"">An example case of usage is</a>:</p>
<pre><code>from django.db import models

class Car(models.Model):
    manufacturer = models.ForeignKey(
        'Manufacturer',
        on_delete=models.CASCADE,
    )
    # ...

class Manufacturer(models.Model):
    # ...
    pass
</code></pre>
<p>What does on_delete do? (<em>I guess the actions to be done if the model is deleted</em>.)</p>
<p>What does <code>models.CASCADE</code> do? (<em>any hints in documentation</em>)</p>
<p>What other options are available (<em>if my guess is correct</em>)?</p>
<p>Where does the documentation for this reside?</p>
","What does on_delete do on Django models?<p>I'm quite familiar with Django, but I recently noticed there exists an <code>on_delete=models.CASCADE</code> option with the models. I have searched for the documentation for the same, but I couldn't find anything more than:</p>
<blockquote>
<p><strong>Changed in Django 1.9:</strong></p>
<p><code>on_delete</code> can now be used as the second positional argument (previously it was typically only passed as a keyword argument). It will be a required argument in Django 2.0.</p>
</blockquote>
<p><a href=""https://docs.djangoproject.com/en/stable/ref/models/fields/#django.db.models.ForeignKey"" rel=""noreferrer"">An example case of usage is</a>:</p>
<pre><code>from django.db import models

class Car(models.Model):
    manufacturer = models.ForeignKey(
        'Manufacturer',
        on_delete=models.CASCADE,
    )
    # ...

class Manufacturer(models.Model):
    # ...
    pass
</code></pre>
<p>What does on_delete do? (<em>I guess the actions to be done if the model is deleted</em>.)</p>
<p>What does <code>models.CASCADE</code> do? (<em>any hints in documentation</em>)</p>
<p>What other options are available (<em>if my guess is correct</em>)?</p>
<p>Where does the documentation for this reside?</p>
",<python><django><django-models>,ondelete models django argument cascade documentation guess searched previously deleted,"<p>This is the behaviour to adopt when the <em>referenced</em> object is deleted. It is not specific to Django; this is an SQL standard. Although Django has its own implementation on top of SQL. <strong>(1)</strong></p>
<p>There are seven possible actions to take when such event occurs:</p>
<ul>
<li><code>CASCADE</code>: When the referenced object is deleted, also delete the objects that have references to it (when you remove a blog post for instance, you might want to delete comments as well). SQL equivalent: <code>CASCADE</code>.</li>
<li><code>PROTECT</code>: Forbid the deletion of the referenced object. To delete it you will have to delete all objects that reference it manually. SQL equivalent: <code>RESTRICT</code>.</li>
<li><code>RESTRICT</code>: <em>(introduced in Django 3.1)</em> Similar behavior as <code>PROTECT</code> that matches SQL's <code>RESTRICT</code> more accurately. (See <a href=""https://docs.djangoproject.com/en/stable/ref/models/fields/#django.db.models.RESTRICT"" rel=""noreferrer"">django documentation example</a>)</li>
<li><code>SET_NULL</code>: Set the reference to NULL (requires the field to be nullable). For instance, when you delete a User, you might want to keep the comments he posted on blog posts, but say it was posted by an anonymous (or deleted) user. SQL equivalent: <code>SET NULL</code>.</li>
<li><code>SET_DEFAULT</code>: Set the default value. SQL equivalent: <code>SET DEFAULT</code>.</li>
<li><code>SET(...)</code>: Set a given value. This one is not part of the SQL standard and is entirely handled by Django.</li>
<li><code>DO_NOTHING</code>: Probably a very bad idea since this would create integrity issues in your database (referencing an object that actually doesn't exist). SQL equivalent: <code>NO ACTION</code>. <strong>(2)</strong></li>
</ul>
<p>Source: <a href=""https://docs.djangoproject.com/en/stable/ref/models/fields/#django.db.models.ForeignKey.on_delete"" rel=""noreferrer"">Django documentation</a></p>
<p>See also <a href=""https://www.postgresql.org/docs/current/static/sql-createtable.html"" rel=""noreferrer"">the documentation of PostgreSQL</a> for instance.</p>
<p>In most cases, <code>CASCADE</code> is the expected behaviour, but for every ForeignKey, you should always ask yourself what is the expected behaviour in this situation. <code>PROTECT</code> and <code>SET_NULL</code> are often useful. Setting <code>CASCADE</code> where it should not, can potentially delete all of your database in cascade, by simply deleting a single user.</p>
<hr />
<p><strong>Additional note to clarify cascade direction</strong></p>
<p>It's funny to notice that the direction of the <code>CASCADE</code> action is not clear to many people. Actually, it's funny to notice that <strong>only</strong> the <code>CASCADE</code> action is not clear. I understand the cascade behavior might be confusing, however you must think that <strong>it is the same direction as any other action</strong>. Thus, if you feel that <code>CASCADE</code> direction is not clear to you, it actually means that <code>on_delete</code> behavior is not clear to you.</p>
<p>In your database, a foreign key is basically represented by an integer field which value is the primary key of the foreign object. Let's say you have an entry <strong>comment_A</strong>, which has a foreign key to an entry <strong>article_B</strong>. If you delete the entry <strong>comment_A</strong>, everything is fine. <strong>article_B</strong> used to live without <strong>comment_A</strong> and don't bother if it's deleted. However, if you delete <strong>article_B</strong>, then <strong>comment_A</strong> panics! It never lived without <strong>article_B</strong> and needs it, and it's part of its attributes (<code>article=article_B</code>, but what is <strong>article_B</strong>???). This is where <code>on_delete</code> steps in, to determine how to resolve this <em>integrity error</em>, either by saying:</p>
<ul>
<li><em>&quot;No! Please! Don't! I can't live without you!&quot;</em> (which is said <code>PROTECT</code> or <code>RESTRICT</code> in Django/SQL)</li>
<li><em>&quot;All right, if I'm not yours, then I'm nobody's&quot;</em> (which is said <code>SET_NULL</code>)</li>
<li><em>&quot;Good bye world, I can't live without article_B&quot;</em> and commit suicide (this is the <code>CASCADE</code> behavior).</li>
<li><em>&quot;It's OK, I've got spare lover, and I'll reference article_C from now&quot;</em> (<code>SET_DEFAULT</code>, or even <code>SET(...)</code>).</li>
<li><em>&quot;I can't face reality, and I'll keep calling your name even if that's the only thing left to me!&quot;</em> (<code>DO_NOTHING</code>)</li>
</ul>
<p>I hope it makes cascade direction clearer. :)</p>
<hr />
<p><strong>Footnotes</strong></p>
<blockquote>
<p><strong>(1)</strong> Django has its own implementation on top of SQL. And, as <a href=""https://stackoverflow.com/questions/38388423/what-does-on-delete-do-on-django-models/38389488#comment107117244_38389488"">mentioned by @JoeMjr2 in the comments below</a>, Django will not create the SQL constraints. If you want the constraints to be ensured by your database (for instance, if your database is used by another application, or if you hang in the database console from time to time), you might want to set the related constraints manually yourself. There is <a href=""https://code.djangoproject.com/ticket/21961"" rel=""noreferrer"">an open ticket</a> to add support for database-level on delete constrains in Django.</p>
</blockquote>
<blockquote>
<p><strong>(2)</strong> Actually, there is one case where <code>DO_NOTHING</code> can be useful: If you want to skip Django's implementation and implement the constraint yourself at the database-level.</p>
</blockquote>
",,
461,3,How to get all possible combinations of a listƒ??s elements?,"<p>I have a list with 15 numbers in, and I need to write some code that produces all 32,768 combinations of those numbers. </p>

<p>I've found <a href=""http://desk.stinkpot.org:8080/tricks/index.php/2008/04/get-all-possible-combinations-of-a-lists-elements-in-python/"" rel=""noreferrer"">some code</a> (by Googling) that apparently does what I'm looking for, but I found the code fairly opaque and am wary of using it. Plus I have a feeling there must be a more elegant solution.</p>

<p>The only thing that occurs to me would be to just loop through the decimal integers 1ƒ??32768 and convert those to binary, and use the binary representation as a filter to pick out the appropriate numbers. </p>

<p>Does anyone know of a better way? Using <code>map()</code>, maybe?</p>
","How to get all possible combinations of a listƒ??s elements?<p>I have a list with 15 numbers in, and I need to write some code that produces all 32,768 combinations of those numbers. </p>

<p>I've found <a href=""http://desk.stinkpot.org:8080/tricks/index.php/2008/04/get-all-possible-combinations-of-a-lists-elements-in-python/"" rel=""noreferrer"">some code</a> (by Googling) that apparently does what I'm looking for, but I found the code fairly opaque and am wary of using it. Plus I have a feeling there must be a more elegant solution.</p>

<p>The only thing that occurs to me would be to just loop through the decimal integers 1ƒ??32768 and convert those to binary, and use the binary representation as a filter to pick out the appropriate numbers. </p>

<p>Does anyone know of a better way? Using <code>map()</code>, maybe?</p>
",<python><combinations>,numbers combinations binary code opaque wary pick occurs feeling googling,"<p>Have a look at <a href=""http://docs.python.org/library/itertools.html#itertools.combinations"" rel=""noreferrer"">itertools.combinations</a>:</p>

<blockquote>
<pre><code>itertools.combinations(iterable, r)
</code></pre>
  
  <p>Return r length subsequences of elements from
  the input iterable.</p>
  
  <p>Combinations are emitted in lexicographic sort order. So, if the
  input iterable is sorted, the
  combination tuples will be produced in
  sorted order.</p>
</blockquote>

<p>Since 2.6, batteries are included!</p>
",,
462,3,What is the common header format of Python files?,"<p>I came across the following header format for Python source files in a document about Python coding guidelines:</p>

<pre><code>#!/usr/bin/env python

""""""Foobar.py: Description of what foobar does.""""""

__author__      = ""Barack Obama""
__copyright__   = ""Copyright 2009, Planet Earth""
</code></pre>

<p>Is this the standard format of headers in the Python world?
What other fields/information can I put in the header?
Python gurus share your guidelines for good Python source headers :-)</p>
","What is the common header format of Python files?<p>I came across the following header format for Python source files in a document about Python coding guidelines:</p>

<pre><code>#!/usr/bin/env python

""""""Foobar.py: Description of what foobar does.""""""

__author__      = ""Barack Obama""
__copyright__   = ""Copyright 2009, Planet Earth""
</code></pre>

<p>Is this the standard format of headers in the Python world?
What other fields/information can I put in the header?
Python gurus share your guidelines for good Python source headers :-)</p>
",<python><header><comments>,header format guidelines headers python source files gurus share document,"<p>Its all metadata for the <code>Foobar</code> module.</p>
<p>The first one is the <code>docstring</code> of the module, that is already explained in <a href=""https://stackoverflow.com/questions/1523427/python-what-is-the-common-header-format/1523435#1523435"">Peter's answer</a>.</p>
<blockquote>
<h2><a href=""http://web.archive.org/web/20111010053227/http://jaynes.colorado.edu/PythonGuidelines.html#module_formatting"" rel=""noreferrer"">How do I organize my modules (source files)? (Archive)</a></h2>
<p><strong>The first line of each file shoud be <code>#!/usr/bin/env python</code>.</strong> This makes it possible to run the file as a script invoking the interpreter implicitly, e.g. in a CGI context.</p>
<p><em><strong>Next should be the docstring with a description.</strong></em> If the description is long, the first line should be a short summary that makes sense on its own, separated from the rest by a newline.</p>
<p><strong>All code, including import statements, should follow the docstring.</strong> Otherwise, the docstring will not be recognized by the interpreter, and you will not have access to it in interactive sessions (i.e. through <code>obj.__doc__</code>) or when generating documentation with automated tools.</p>
<p><strong>Import built-in modules first, followed by third-party modules, followed by any changes to the path and your own modules.</strong> Especially, additions to the path and names of your modules are likely to change rapidly: keeping them in one place makes them easier to find.</p>
<p><strong>Next should be authorship information.</strong> This information should follow this format:</p>
<pre><code>__author__ = &quot;Rob Knight, Gavin Huttley, and Peter Maxwell&quot;
__copyright__ = &quot;Copyright 2007, The Cogent Project&quot;
__credits__ = [&quot;Rob Knight&quot;, &quot;Peter Maxwell&quot;, &quot;Gavin Huttley&quot;,
                    &quot;Matthew Wakefield&quot;]
__license__ = &quot;GPL&quot;
__version__ = &quot;1.0.1&quot;
__maintainer__ = &quot;Rob Knight&quot;
__email__ = &quot;rob@spot.colorado.edu&quot;
__status__ = &quot;Production&quot;
</code></pre>
<p>Status should typically be one of &quot;Prototype&quot;, &quot;Development&quot;, or &quot;Production&quot;. <code>__maintainer__</code> should be the person who will fix bugs and make improvements if imported. <code>__credits__</code> differs from <code>__author__</code> in that <code>__credits__</code> includes people who reported bug fixes, made suggestions, etc. but did not actually write the code.</p>
</blockquote>
<p><a href=""http://epydoc.sourceforge.net/manual-fields.html#module-metadata-variables"" rel=""noreferrer"">Here</a> you have more information, listing <code>__author__</code>, <code>__authors__</code>, <code>__contact__</code>, <code>__copyright__</code>, <code>__license__</code>, <code>__deprecated__</code>, <code>__date__</code> and <code>__version__</code> as recognized metadata.</p>
",,
463,4,Split string on whitespace in Python,"<p>I'm looking for the Python equivalent of </p>

<pre><code>String str = ""many   fancy word \nhello    \thi"";
String whiteSpaceRegex = ""\\s"";
String[] words = str.split(whiteSpaceRegex);

[""many"", ""fancy"", ""word"", ""hello"", ""hi""]
</code></pre>
","Split string on whitespace in Python<p>I'm looking for the Python equivalent of </p>

<pre><code>String str = ""many   fancy word \nhello    \thi"";
String whiteSpaceRegex = ""\\s"";
String[] words = str.split(whiteSpaceRegex);

[""many"", ""fancy"", ""word"", ""hello"", ""hi""]
</code></pre>
",<python><regex><string><split><whitespace>,whitespace split equivalent pythoni looking string python formatted formats format,"<p>The <code>str.split()</code> method without an argument splits on whitespace:</p>

<pre><code>&gt;&gt;&gt; ""many   fancy word \nhello    \thi"".split()
['many', 'fancy', 'word', 'hello', 'hi']
</code></pre>
",,
464,3,How to access the ith column of a NumPy multidimensional array?,"<p>Suppose I have:</p>

<pre><code>test = numpy.array([[1, 2], [3, 4], [5, 6]])
</code></pre>

<p><code>test[i]</code> gets me <em>ith</em> line of the array (eg <code>[1, 2]</code>). How can I access the <em>ith</em> column? (eg <code>[1, 3, 5]</code>). Also, would this be an expensive operation?</p>
","How to access the ith column of a NumPy multidimensional array?<p>Suppose I have:</p>

<pre><code>test = numpy.array([[1, 2], [3, 4], [5, 6]])
</code></pre>

<p><code>test[i]</code> gets me <em>ith</em> line of the array (eg <code>[1, 2]</code>). How can I access the <em>ith</em> column? (eg <code>[1, 3, 5]</code>). Also, would this be an expensive operation?</p>
",<python><arrays><numpy>,ith array column access multidimensional operation expensive suppose gets numpy,"<pre><code>&gt;&gt;&gt; test[:,0]
array([1, 3, 5])
</code></pre>

<p>Similarly, </p>

<pre><code>&gt;&gt;&gt; test[1,:]
array([3, 4])
</code></pre>

<p>lets you access rows.  This is covered in Section 1.4 (Indexing) of the <a href=""http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html"" rel=""noreferrer"">NumPy reference</a>.  This is quick, at least in my experience.  It's certainly much quicker than accessing each element in a loop.</p>
",,
465,3,How to prompt for user input and read command-line arguments,"<p>How do I have a Python script that a) can accept user input and how do I make it b) read in arguments if run from the command line?</p>
","How to prompt for user input and read command-line arguments<p>How do I have a Python script that a) can accept user input and how do I make it b) read in arguments if run from the command line?</p>
",<python><input><command-line-arguments>,input user read command line argumentshow accept prompt arguments script,"<p>To read user input you can try <a href=""https://docs.python.org/dev/library/cmd.html"" rel=""noreferrer"">the <code>cmd</code> module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href=""https://docs.python.org/2/library/functions.html#raw_input"" rel=""noreferrer""><code>raw_input</code></a> (<a href=""https://docs.python.org/dev/library/functions.html#input"" rel=""noreferrer""><code>input</code></a> for Python 3+) for reading a line of text from the user.</p>

<pre><code>text = raw_input(""prompt"")  # Python 2
text = input(""prompt"")  # Python 3
</code></pre>

<p>Command line inputs are in <code>sys.argv</code>. Try this in your script:</p>

<pre><code>import sys
print (sys.argv)
</code></pre>

<p>There are two modules for parsing command line options: <a href=""https://docs.python.org/dev/library/optparse.html"" rel=""noreferrer""><s><code>optparse</code></s></a> (deprecated since Python 2.7, use <a href=""https://docs.python.org/dev/library/argparse.html"" rel=""noreferrer""><code>argparse</code></a> instead) and <a href=""https://docs.python.org/dev/library/getopt.html"" rel=""noreferrer""><code>getopt</code></a>. If you just want to input files to your script, behold the power of <a href=""https://docs.python.org/dev/library/fileinput.html"" rel=""noreferrer""><code>fileinput</code></a>.</p>

<p>The <a href=""https://docs.python.org/dev/library/"" rel=""noreferrer"">Python library reference</a> is your friend.</p>
",,
466,6,How to read a large file - line by line?,"<p>I want to iterate over each line of an entire file. One way to do this is by reading the entire file, saving it to a list, then going over the line of interest. This method uses a lot of memory, so I am looking for an alternative.</p>

<p>My code so far:</p>

<pre><code>for each_line in fileinput.input(input_file):
    do_something(each_line)

    for each_line_again in fileinput.input(input_file):
        do_something(each_line_again)
</code></pre>

<p>Executing this code gives an error message: <code>device active</code>.</p>

<p>Any suggestions?</p>

<p>The purpose is to calculate pair-wise string similarity, meaning for each line in file, I want to calculate the Levenshtein distance with every other line.</p>
","How to read a large file - line by line?<p>I want to iterate over each line of an entire file. One way to do this is by reading the entire file, saving it to a list, then going over the line of interest. This method uses a lot of memory, so I am looking for an alternative.</p>

<p>My code so far:</p>

<pre><code>for each_line in fileinput.input(input_file):
    do_something(each_line)

    for each_line_again in fileinput.input(input_file):
        do_something(each_line_again)
</code></pre>

<p>Executing this code gives an error message: <code>device active</code>.</p>

<p>Any suggestions?</p>

<p>The purpose is to calculate pair-wise string similarity, meaning for each line in file, I want to calculate the Levenshtein distance with every other line.</p>
",<python><file-read>,line file calculate entire levenshtein pair similarity device distance saving,"<p>The correct, fully Pythonic way to read a file is the following:</p>

<pre><code>with open(...) as f:
    for line in f:
        # Do something with 'line'
</code></pre>

<p>The <code>with</code> statement handles opening and closing the file, including if an exception is raised in the inner block. The <code>for line in f</code> treats the file object <code>f</code> as an iterable, which automatically uses buffered I/O and memory management so you don't have to worry about large files.</p>

<blockquote>
  <p>There should be one -- and preferably only one -- obvious way to do it.</p>
</blockquote>
",,
467,6,UnicodeDecodeError when reading CSV file in Pandas with Python,"<p>I'm running a program which is processing 30,000 similar files. A random number of them are stopping and producing this error...</p>
<pre><code>File &quot;C:\Importer\src\dfman\importer.py&quot;, line 26, in import_chr
     data = pd.read_csv(filepath, names=fields)
File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 400, in parser_f
     return _read(filepath_or_buffer, kwds)
File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 205, in _read
     return parser.read()
   File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 608, in read
     ret = self._engine.read(nrows)
File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 1028, in read
     data = self._reader.read(nrows)
File &quot;parser.pyx&quot;, line 706, in pandas.parser.TextReader.read (pandas\parser.c:6745)
File &quot;parser.pyx&quot;, line 728, in pandas.parser.TextReader._read_low_memory (pandas\parser.c:6964)
File &quot;parser.pyx&quot;, line 804, in pandas.parser.TextReader._read_rows (pandas\parser.c:7780)
File &quot;parser.pyx&quot;, line 890, in pandas.parser.TextReader._convert_column_data (pandas\parser.c:8793)
File &quot;parser.pyx&quot;, line 950, in pandas.parser.TextReader._convert_tokens (pandas\parser.c:9484)
File &quot;parser.pyx&quot;, line 1026, in pandas.parser.TextReader._convert_with_dtype (pandas\parser.c:10642)
File &quot;parser.pyx&quot;, line 1046, in pandas.parser.TextReader._string_convert (pandas\parser.c:10853)
File &quot;parser.pyx&quot;, line 1278, in pandas.parser._string_box_utf8 (pandas\parser.c:15657)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xda in position 6: invalid    continuation byte
</code></pre>
<p>The source/creation of these files all come from the same place. What's the best way to correct this to proceed with the import?</p>
","UnicodeDecodeError when reading CSV file in Pandas with Python<p>I'm running a program which is processing 30,000 similar files. A random number of them are stopping and producing this error...</p>
<pre><code>File &quot;C:\Importer\src\dfman\importer.py&quot;, line 26, in import_chr
     data = pd.read_csv(filepath, names=fields)
File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 400, in parser_f
     return _read(filepath_or_buffer, kwds)
File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 205, in _read
     return parser.read()
   File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 608, in read
     ret = self._engine.read(nrows)
File &quot;C:\Python33\lib\site-packages\pandas\io\parsers.py&quot;, line 1028, in read
     data = self._reader.read(nrows)
File &quot;parser.pyx&quot;, line 706, in pandas.parser.TextReader.read (pandas\parser.c:6745)
File &quot;parser.pyx&quot;, line 728, in pandas.parser.TextReader._read_low_memory (pandas\parser.c:6964)
File &quot;parser.pyx&quot;, line 804, in pandas.parser.TextReader._read_rows (pandas\parser.c:7780)
File &quot;parser.pyx&quot;, line 890, in pandas.parser.TextReader._convert_column_data (pandas\parser.c:8793)
File &quot;parser.pyx&quot;, line 950, in pandas.parser.TextReader._convert_tokens (pandas\parser.c:9484)
File &quot;parser.pyx&quot;, line 1026, in pandas.parser.TextReader._convert_with_dtype (pandas\parser.c:10642)
File &quot;parser.pyx&quot;, line 1046, in pandas.parser.TextReader._string_convert (pandas\parser.c:10853)
File &quot;parser.pyx&quot;, line 1278, in pandas.parser._string_box_utf8 (pandas\parser.c:15657)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xda in position 6: invalid    continuation byte
</code></pre>
<p>The source/creation of these files all come from the same place. What's the best way to correct this to proceed with the import?</p>
",<python><pandas><csv><dataframe><unicode>,files stopping producing proceed unicodedecodeerror creation processing place csv random,"<p><code>read_csv</code> takes an <code>encoding</code> option to deal with files in different formats. I mostly use <code>read_csv('file', encoding = ""ISO-8859-1"")</code>, or alternatively <code>encoding = ""utf-8""</code> for reading, and generally <code>utf-8</code> for <code>to_csv</code>.</p>

<p>You can also use one of several <code>alias</code> options like <code>'latin'</code> instead of <code>'ISO-8859-1'</code> (see <a href=""https://docs.python.org/3/library/codecs.html#standard-encodings"" rel=""noreferrer"">python docs</a>, also for numerous other encodings you may encounter).</p>

<p>See <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html"" rel=""noreferrer"">relevant Pandas documentation</a>,
<a href=""http://docs.python.org/3/library/csv.html#examples"" rel=""noreferrer"">python docs examples on csv files</a>, and plenty of related questions here on SO. A good background resource is <a href=""https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"" rel=""noreferrer"">What every developer should know about unicode and character sets</a>.</p>

<p>To detect the encoding (assuming the file contains non-ascii characters), you can use <code>enca</code> (see <a href=""https://linux.die.net/man/1/enconv"" rel=""noreferrer"">man page</a>) or <code>file -i</code> (linux) or <code>file -I</code> (osx) (see <a href=""https://linux.die.net/man/1/file"" rel=""noreferrer"">man page</a>). </p>
",,
468,3,Correct way to try/except using Python requests module?,"<pre><code>try:
    r = requests.get(url, params={'s': thing})
except requests.ConnectionError, e:
    print e #should I also sys.exit(1) after this?
</code></pre>

<p>Is this correct? Is there a better way to structure this? Will this cover all my bases? </p>
","Correct way to try/except using Python requests module?<pre><code>try:
    r = requests.get(url, params={'s': thing})
except requests.ConnectionError, e:
    print e #should I also sys.exit(1) after this?
</code></pre>

<p>Is this correct? Is there a better way to structure this? Will this cover all my bases? </p>
",<python><request><python-requests>,correct bases cover requests structure try way module better using,"<p>Have a look at the Requests <a href=""https://requests.readthedocs.io/en/latest/user/quickstart/#errors-and-exceptions"" rel=""noreferrer"">exception docs</a>.  In short:</p>
<blockquote>
<p>In the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a <strong><code>ConnectionError</code></strong> exception.</p>
<p>In the event of the rare invalid HTTP response, Requests will raise an <strong><code>HTTPError</code></strong> exception.</p>
<p>If a request times out, a <strong><code>Timeout</code></strong> exception is raised.</p>
<p>If a request exceeds the configured number of maximum redirections, a <strong><code>TooManyRedirects</code></strong> exception is raised.</p>
<p>All exceptions that Requests explicitly raises inherit from <strong><code>requests.exceptions.RequestException</code></strong>.</p>
</blockquote>
<p>To answer your question, what you show will <em>not</em> cover all of your bases. You'll only catch connection-related errors, not ones that time out.</p>
<p>What to do when you catch the exception is really up to the design of your script/program. Is it acceptable to exit? Can you go on and try again?  If the error is catastrophic and you can't go on, then yes, you may abort your program by raising <a href=""https://docs.python.org/3/library/exceptions.html#SystemExit"" rel=""noreferrer"">SystemExit</a> (a nice way to both print an error and call <code>sys.exit</code>).</p>
<p>You can either catch the base-class exception, which will handle all cases:</p>
<pre><code>try:
    r = requests.get(url, params={'s': thing})
except requests.exceptions.RequestException as e:  # This is the correct syntax
    raise SystemExit(e)
</code></pre>
<p>Or you can catch them separately and do different things.</p>
<pre><code>try:
    r = requests.get(url, params={'s': thing})
except requests.exceptions.Timeout:
    # Maybe set up for a retry, or continue in a retry loop
except requests.exceptions.TooManyRedirects:
    # Tell the user their URL was bad and try a different one
except requests.exceptions.RequestException as e:
    # catastrophic error. bail.
    raise SystemExit(e)
</code></pre>
<hr />
<p>As <a href=""https://stackoverflow.com/users/456550/christian-long"">Christian</a> pointed out:</p>
<blockquote>
<p>If you want http errors (e.g. 401 Unauthorized) to raise exceptions, you can call <a href=""https://requests.readthedocs.io/en/latest/api/#requests.Response.raise_for_status"" rel=""noreferrer""><code>Response.raise_for_status</code></a>. That will raise an <code>HTTPError</code>, if the response was an http error.</p>
</blockquote>
<p>An example:</p>
<pre><code>try:
    r = requests.get('http://www.google.com/nothere')
    r.raise_for_status()
except requests.exceptions.HTTPError as err:
    raise SystemExit(err)
</code></pre>
<p>Will print:</p>
<pre class=""lang-none prettyprint-override""><code>404 Client Error: Not Found for url: http://www.google.com/nothere
</code></pre>
",,
469,3,Making Python loggers output all messages to stdout in addition to log file,"<p>Is there a way to make Python logging using the <code>logging</code> module automatically output things to stdout <em>in addition</em> to the log file where they are supposed to go? For example, I'd like all calls to <code>logger.warning</code>, <code>logger.critical</code>, <code>logger.error</code> to go to their intended places but in addition always be copied to <code>stdout</code>. This is to avoid duplicating messages like:</p>

<pre><code>mylogger.critical(""something failed"")
print ""something failed""
</code></pre>
","Making Python loggers output all messages to stdout in addition to log file<p>Is there a way to make Python logging using the <code>logging</code> module automatically output things to stdout <em>in addition</em> to the log file where they are supposed to go? For example, I'd like all calls to <code>logger.warning</code>, <code>logger.critical</code>, <code>logger.error</code> to go to their intended places but in addition always be copied to <code>stdout</code>. This is to avoid duplicating messages like:</p>

<pre><code>mylogger.critical(""something failed"")
print ""something failed""
</code></pre>
",<python><logging><error-logging>,logger addition stdout log logging messages output loggers duplicating copied,"<p>All logging output is handled by the handlers; just add a <a href=""http://docs.python.org/library/logging.handlers.html#streamhandler"" rel=""noreferrer""><code>logging.StreamHandler()</code></a> to the root logger.</p>

<p>Here's an example configuring a stream handler (using <code>stdout</code> instead of the default <code>stderr</code>) and adding it to the root logger:</p>

<pre><code>import logging
import sys

root = logging.getLogger()
root.setLevel(logging.DEBUG)

handler = logging.StreamHandler(sys.stdout)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
root.addHandler(handler)
</code></pre>
",,
470,4,if else in a list comprehension,"<p>I have a list <code>l</code>:</p>

<pre><code>l = [22, 13, 45, 50, 98, 69, 43, 44, 1]
</code></pre>

<p>For numbers above 45 inclusive, I would like to add 1; and for numbers less than it, 5.</p>

<p>I tried</p>

<pre><code>[x+1 for x in l if x &gt;= 45 else x+5]
</code></pre>

<p>But it gives me a syntax error. How can I achieve an <code>if</code> &ndash; <code>else</code> like this in a list comprehension?</p>
","if else in a list comprehension<p>I have a list <code>l</code>:</p>

<pre><code>l = [22, 13, 45, 50, 98, 69, 43, 44, 1]
</code></pre>

<p>For numbers above 45 inclusive, I would like to add 1; and for numbers less than it, 5.</p>

<p>I tried</p>

<pre><code>[x+1 for x in l if x &gt;= 45 else x+5]
</code></pre>

<p>But it gives me a syntax error. How can I achieve an <code>if</code> &ndash; <code>else</code> like this in a list comprehension?</p>
",<python><list><list-comprehension><if-statement>,numbers list comprehension inclusive comprehension achieve like gives add,"<pre><code>&gt;&gt;&gt; l = [22, 13, 45, 50, 98, 69, 43, 44, 1]
&gt;&gt;&gt; [x+1 if x &gt;= 45 else x+5 for x in l]
[27, 18, 46, 51, 99, 70, 48, 49, 6]
</code></pre>

<p>Do-something if <code>&lt;condition&gt;</code>, else do-something else.</p>
",,
471,3,Calling C/C++ from Python?,"<p>What would be the quickest way to construct a Python binding to a C or C++ library?</p>

<p>(I am using Windows if this matters.)</p>
","Calling C/C++ from Python?<p>What would be the quickest way to construct a Python binding to a C or C++ library?</p>

<p>(I am using Windows if this matters.)</p>
",<c++><python><c>,matters quickest binding construct calling library windows python using way,"<p>You should have a look at <a href=""http://www.boost.org/doc/libs/1_49_0/libs/python/doc/"" rel=""noreferrer"">Boost.Python</a>. Here is the short introduction taken from their website:</p>

<blockquote>
  <p>The Boost Python Library is a framework for interfacing Python and
  C++. It allows you to quickly and seamlessly expose C++ classes
  functions and objects to Python, and vice-versa, using no special
  tools -- just your C++ compiler. It is designed to wrap C++ interfaces
  non-intrusively, so that you should not have to change the C++ code at
  all in order to wrap it, making Boost.Python ideal for exposing
  3rd-party libraries to Python. The library's use of advanced
  metaprogramming techniques simplifies its syntax for users, so that
  wrapping code takes on the look of a kind of declarative interface
  definition language (IDL).</p>
</blockquote>
",,
472,3,"Python ""extend"" for a dictionary","<p>What is the best way to extend a dictionary with another one while avoiding the use of a <code>for</code> loop? For instance:</p>
<pre><code>&gt;&gt;&gt; a = { &quot;a&quot; : 1, &quot;b&quot; : 2 }
&gt;&gt;&gt; b = { &quot;c&quot; : 3, &quot;d&quot; : 4 }
&gt;&gt;&gt; a
{'a': 1, 'b': 2}
&gt;&gt;&gt; b
{'c': 3, 'd': 4}
</code></pre>
<p>Result:</p>
<pre><code>{ &quot;a&quot; : 1, &quot;b&quot; : 2, &quot;c&quot; : 3, &quot;d&quot; : 4 }
</code></pre>
<p>Something like:</p>
<pre><code>a.extend(b)  # This does not work
</code></pre>
","Python ""extend"" for a dictionary<p>What is the best way to extend a dictionary with another one while avoiding the use of a <code>for</code> loop? For instance:</p>
<pre><code>&gt;&gt;&gt; a = { &quot;a&quot; : 1, &quot;b&quot; : 2 }
&gt;&gt;&gt; b = { &quot;c&quot; : 3, &quot;d&quot; : 4 }
&gt;&gt;&gt; a
{'a': 1, 'b': 2}
&gt;&gt;&gt; b
{'c': 3, 'd': 4}
</code></pre>
<p>Result:</p>
<pre><code>{ &quot;a&quot; : 1, &quot;b&quot; : 2, &quot;c&quot; : 3, &quot;d&quot; : 4 }
</code></pre>
<p>Something like:</p>
<pre><code>a.extend(b)  # This does not work
</code></pre>
",<python><dictionary>,extend dictionarywhat avoiding instance loop result dictionary best use like,"<pre><code>a.update(b)
</code></pre>

<p><a href=""http://docs.python.org/library/stdtypes.html#dict.update"" rel=""noreferrer"">Latest Python Standard Library Documentation</a></p>
",,
473,4,How do I find the duplicates in a list and create another list with them?,"<p>How can I find the duplicates in a Python list and create another list of the duplicates? The list only contains integers.</p>
","How do I find the duplicates in a list and create another list with them?<p>How can I find the duplicates in a Python list and create another list of the duplicates? The list only contains integers.</p>
",<python><list><duplicates>,duplicates list create integers contains python zone formatwhich formatting,"<p>To remove duplicates use <code>set(a)</code>. To print duplicates, something like:</p>
<pre><code>a = [1,2,3,2,1,5,6,5,5,5]

import collections
print([item for item, count in collections.Counter(a).items() if count &gt; 1])

## [1, 2, 5]
</code></pre>
<p>Note that <code>Counter</code> is not particularly efficient (<a href=""https://stackoverflow.com/a/25706298/989121"">timings</a>) and probably overkill here. <code>set</code> will perform better. This code computes a list of unique elements in the source order:</p>
<pre><code>seen = set()
uniq = []
for x in a:
    if x not in seen:
        uniq.append(x)
        seen.add(x)
</code></pre>
<p>or, more concisely:</p>
<pre><code>seen = set()
uniq = [x for x in a if x not in seen and not seen.add(x)]    
</code></pre>
<p>I don't recommend the latter style, because it is not obvious what <code>not seen.add(x)</code> is doing  (the set <code>add()</code> method always returns <code>None</code>, hence the need for <code>not</code>).</p>
<p>To compute the list of duplicated elements without libraries:</p>
<pre><code>seen = set()
dupes = []

for x in a:
    if x in seen:
        dupes.append(x)
    else:
        seen.add(x)
</code></pre>
<p>or, more concisely:</p>
<pre><code>seen = set()
dupes = [x for x in a if x in seen or seen.add(x)]    
</code></pre>
<p>If list elements are not hashable, you cannot use sets/dicts and have to resort to a quadratic time solution (compare each with each). For example:</p>
<pre><code>a = [[1], [2], [3], [1], [5], [3]]

no_dupes = [x for n, x in enumerate(a) if x not in a[:n]]
print no_dupes # [[1], [2], [3], [5]]

dupes = [x for n, x in enumerate(a) if x in a[:n]]
print dupes # [[1], [3]]
</code></pre>
",,
474,5,How to extract numbers from a string in Python?,"<p>I would like to extract all the numbers contained in a string. Which is better suited for the purpose, regular expressions or the <code>isdigit()</code> method?</p>
<p>Example:</p>
<pre><code>line = &quot;hello 12 hi 89&quot;
</code></pre>
<p>Result:</p>
<pre><code>[12, 89]
</code></pre>
","How to extract numbers from a string in Python?<p>I would like to extract all the numbers contained in a string. Which is better suited for the purpose, regular expressions or the <code>isdigit()</code> method?</p>
<p>Example:</p>
<pre><code>line = &quot;hello 12 hi 89&quot;
</code></pre>
<p>Result:</p>
<pre><code>[12, 89]
</code></pre>
",<python><regex><string><numbers>,extract numbers suited isdigit contained string expressions regular purpose result,"<p>If you only want to extract only positive integers, try the following:</p>
<pre><code>&gt;&gt;&gt; txt = &quot;h3110 23 cat 444.4 rabbit 11 2 dog&quot;
&gt;&gt;&gt; [int(s) for s in txt.split() if s.isdigit()]
[23, 11, 2]
</code></pre>
<p>I would argue that this is better than the regex example because you don't need another module and it's more readable because you don't need to parse (and learn) the <a href=""https://docs.python.org/3/library/re.html#regular-expression-syntax"" rel=""noreferrer"">regex mini-language</a>.</p>
<p>This will not recognize floats, negative integers, or integers in hexadecimal format.  If you can't accept these limitations, <a href=""https://stackoverflow.com/questions/4289331/python-extract-numbers-of-a-string/4289415#4289415"">jmnas's answer below</a> will do the trick.</p>
",,
475,6,How to do relative imports in Python?,"<p>Imagine this directory structure:</p>

<pre><code>app/
   __init__.py
   sub1/
      __init__.py
      mod1.py
   sub2/
      __init__.py
      mod2.py
</code></pre>

<p>I'm coding <code>mod1</code>, and I need to import something from <code>mod2</code>. How should I do it?  </p>

<p>I tried <code>from ..sub2 import mod2</code> but I'm getting an ""Attempted relative import in non-package"".</p>

<p>I googled around but found only ""<code>sys.path</code> manipulation"" hacks. Isn't there a clean way?  </p>

<hr>

<p>Edit: all my <code>__init__.py</code>'s are currently empty  </p>

<p>Edit2: I'm trying to do this because sub2 contains classes that are shared across sub packages (<code>sub1</code>, <code>subX</code>, etc.).</p>

<p>Edit3: The behaviour I'm looking for is the same as described in <a href=""http://www.python.org/dev/peps/pep-0366/"" rel=""noreferrer"">PEP 366</a> (thanks John B)</p>
","How to do relative imports in Python?<p>Imagine this directory structure:</p>

<pre><code>app/
   __init__.py
   sub1/
      __init__.py
      mod1.py
   sub2/
      __init__.py
      mod2.py
</code></pre>

<p>I'm coding <code>mod1</code>, and I need to import something from <code>mod2</code>. How should I do it?  </p>

<p>I tried <code>from ..sub2 import mod2</code> but I'm getting an ""Attempted relative import in non-package"".</p>

<p>I googled around but found only ""<code>sys.path</code> manipulation"" hacks. Isn't there a clean way?  </p>

<hr>

<p>Edit: all my <code>__init__.py</code>'s are currently empty  </p>

<p>Edit2: I'm trying to do this because sub2 contains classes that are shared across sub packages (<code>sub1</code>, <code>subX</code>, etc.).</p>

<p>Edit3: The behaviour I'm looking for is the same as described in <a href=""http://www.python.org/dev/peps/pep-0366/"" rel=""noreferrer"">PEP 366</a> (thanks John B)</p>
",<python><python-import><python-module>,sub mod edit import relative john subx manipulation described clean,"<p>Everyone seems to want to tell you what you should be doing rather than just answering the question.</p>

<p>The problem is that you're running the module as '__main__' by passing the mod1.py as an argument to the interpreter.</p>

<p>From <a href=""http://www.python.org/dev/peps/pep-0328/"" rel=""noreferrer"">PEP 328</a>:</p>

<blockquote>
  <p>Relative imports use a module's __name__ attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to '__main__') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>
</blockquote>

<p>In Python 2.6, they're adding the ability to reference modules relative to the main module.  <a href=""http://python.org/dev/peps/pep-0366/"" rel=""noreferrer"">PEP 366</a> describes the change.</p>

<p><strong>Update</strong>: According to Nick Coghlan, the recommended alternative is to run the module inside the package using the -m switch.</p>
",,
476,4,Is there a short contains function for lists?,"<p>I see people are using <code>any</code> to gather another list to see if an item exists in a list, but is there a quick way to just do something like this?</p>
<pre><code>if list.contains(myItem):
    # do something
</code></pre>
","Is there a short contains function for lists?<p>I see people are using <code>any</code> to gather another list to see if an item exists in a list, but is there a quick way to just do something like this?</p>
<pre><code>if list.contains(myItem):
    # do something
</code></pre>
",<python><list><search><collections><contains>,gather list people quick short contains item exists lists function,"<p>You can use this syntax:</p>
<pre><code>if myItem in some_list:
    # do something
</code></pre>
<p>Also, inverse operator:</p>
<pre><code>if myItem not in some_list:
    # do something
</code></pre>
<p>It works fine for lists, tuples, sets and dicts (check keys).</p>
<p><strong>Note</strong> that this is an O(n) operation in lists and tuples, but an O(1) operation in sets and dicts.</p>
",,
477,3,Separation of business logic and data access in django,"<p>I am writing a project in Django and I see that 80% of the code is in the file <code>models.py</code>. This code is confusing and, after a certain time, I cease to understand what is really happening.</p>
<p>Here is what bothers me:</p>
<ol>
<li>I find it ugly that my model level (which was supposed to be
responsible only for the work with data from a database) is also
sending email, walking on API to other services, etc.</li>
<li>Also, I find it unacceptable to place business logic in the view, because
this way it becomes difficult to control. For example, in my
application there are at least three ways to create new
instances of <code>User</code>, but technically it should create them uniformly.</li>
<li>I do not always notice when the methods and
properties of my models become non-deterministic and when they develop
side effects.</li>
</ol>
<p>Here is a simple example. At first, the <code>User</code> model was like this:</p>
<pre><code>class User(db.Models):

    def get_present_name(self):
        return self.name or 'Anonymous'

    def activate(self):
        self.status = 'activated'
        self.save()
</code></pre>
<p>Over time, it turned into this:</p>
<pre><code>class User(db.Models):

    def get_present_name(self): 
        # property became non-deterministic in terms of database
        # data is taken from another service by api
        return remote_api.request_user_name(self.uid) or 'Anonymous' 

    def activate(self):
        # method now has a side effect (send message to user)
        self.status = 'activated'
        self.save()
        send_mail('Your account is activated!', 'ƒ??', [self.email])
</code></pre>
<p>What I want is to separate entities in my code:</p>
<ol>
<li><strong>Entities of my database, persistence level: What data does my application keep?</strong></li>
<li><strong>Entities of my application, business logic level: What does my application do?</strong></li>
</ol>
<p>What are the good practices to implement such an approach that can be applied in Django?</p>
","Separation of business logic and data access in django<p>I am writing a project in Django and I see that 80% of the code is in the file <code>models.py</code>. This code is confusing and, after a certain time, I cease to understand what is really happening.</p>
<p>Here is what bothers me:</p>
<ol>
<li>I find it ugly that my model level (which was supposed to be
responsible only for the work with data from a database) is also
sending email, walking on API to other services, etc.</li>
<li>Also, I find it unacceptable to place business logic in the view, because
this way it becomes difficult to control. For example, in my
application there are at least three ways to create new
instances of <code>User</code>, but technically it should create them uniformly.</li>
<li>I do not always notice when the methods and
properties of my models become non-deterministic and when they develop
side effects.</li>
</ol>
<p>Here is a simple example. At first, the <code>User</code> model was like this:</p>
<pre><code>class User(db.Models):

    def get_present_name(self):
        return self.name or 'Anonymous'

    def activate(self):
        self.status = 'activated'
        self.save()
</code></pre>
<p>Over time, it turned into this:</p>
<pre><code>class User(db.Models):

    def get_present_name(self): 
        # property became non-deterministic in terms of database
        # data is taken from another service by api
        return remote_api.request_user_name(self.uid) or 'Anonymous' 

    def activate(self):
        # method now has a side effect (send message to user)
        self.status = 'activated'
        self.save()
        send_mail('Your account is activated!', 'ƒ??', [self.email])
</code></pre>
<p>What I want is to separate entities in my code:</p>
<ol>
<li><strong>Entities of my database, persistence level: What data does my application keep?</strong></li>
<li><strong>Entities of my application, business logic level: What does my application do?</strong></li>
</ol>
<p>What are the good practices to implement such an approach that can be applied in Django?</p>
",<python><django><model-view-controller><data-access-layer><business-logic-layer>,entities business logic level application data models model database django,"<p>It seems like you are asking about the difference between the <em>data model</em> and the <em>domain model</em> ƒ???ÿthe latter is where you can find the business logic and entities as perceived by your end user, the former is where you actually store your data.</p>
<p>Furthermore, I've interpreted the 3rd part of your question as: how to notice failure to keep these models separate.</p>
<p>These are two very different concepts and it's always hard to keep them separate. However, there are some common patterns and tools that can be used for this purpose.</p>
<h2>About the Domain Model</h2>
<p>The first thing you need to recognize is that your domain model is not really about data; it is about <em>actions</em> and <em>questions</em> such as &quot;activate this user&quot;, &quot;deactivate this user&quot;, &quot;which users are currently activated?&quot;, and &quot;what is this user's name?&quot;. In classical terms: it's about <em>queries</em> and <em>commands</em>.</p>
<h2>Thinking in Commands</h2>
<p>Let's start by looking at the commands in your example: &quot;activate this user&quot; and &quot;deactivate this user&quot;. The nice thing about commands is that they can easily be expressed by small given-when-then scenario's:</p>
<blockquote>
<p><strong>given</strong> an inactive user <br/>
<strong>when</strong> the admin activates this user <br/>
<strong>then</strong> the user becomes active <br/>
<strong>and</strong> a confirmation e-mail is sent to the user <br/>
<strong>and</strong> an entry is added to the system log<br/>
(etc. etc.)</p>
</blockquote>
<p>Such scenario's are useful to see how different parts of your infrastructure can be affected by a single command ƒ???ÿin this case your database (some kind of 'active' flag), your mail server, your system log, etc.</p>
<p>Such scenario's also really help you in setting up a Test Driven Development environment.</p>
<p>And finally, thinking in commands really helps you create a task-oriented application. Your users will appreciate this :-)</p>
<h2>Expressing Commands</h2>
<p>Django provides two easy ways of expressing commands; they are both valid options and it is not unusual to mix the two approaches.</p>
<h3>The service layer</h3>
<p>The <em>service module</em> has already been <a href=""https://stackoverflow.com/a/12579490/383793"">described by @Hedde</a>. Here you define a separate module and each command is represented as a function.</p>
<p><strong>services.py</strong></p>
<pre><code>def activate_user(user_id):
    user = User.objects.get(pk=user_id)

    # set active flag
    user.active = True
    user.save()

    # mail user
    send_mail(...)

    # etc etc
</code></pre>
<h3>Using forms</h3>
<p>The other way is to use a Django Form for each command. I prefer this approach, because it combines multiple closely related aspects:</p>
<ul>
<li>execution of the command (what does it do?)</li>
<li>validation of the command parameters (can it do this?)</li>
<li>presentation of the command (how can I do this?)</li>
</ul>
<p><strong>forms.py</strong></p>
<pre><code>class ActivateUserForm(forms.Form):

    user_id = IntegerField(widget = UsernameSelectWidget, verbose_name=&quot;Select a user to activate&quot;)
    # the username select widget is not a standard Django widget, I just made it up

    def clean_user_id(self):
        user_id = self.cleaned_data['user_id']
        if User.objects.get(pk=user_id).active:
            raise ValidationError(&quot;This user cannot be activated&quot;)
        # you can also check authorizations etc. 
        return user_id

    def execute(self):
        &quot;&quot;&quot;
        This is not a standard method in the forms API; it is intended to replace the 
        'extract-data-from-form-in-view-and-do-stuff' pattern by a more testable pattern. 
        &quot;&quot;&quot;
        user_id = self.cleaned_data['user_id']

        user = User.objects.get(pk=user_id)

        # set active flag
        user.active = True
        user.save()

        # mail user
        send_mail(...)

        # etc etc
</code></pre>
<h2>Thinking in Queries</h2>
<p>You example did not contain any queries, so I took the liberty of making up a few useful queries. I prefer to use the term &quot;question&quot;, but queries is the classical terminology. Interesting queries are: &quot;What is the name of this user?&quot;, &quot;Can this user log in?&quot;, &quot;Show me a list of deactivated users&quot;, and &quot;What is the geographical distribution of deactivated users?&quot;</p>
<p>Before embarking on answering these queries, you should always ask yourself this question, is this:</p>
<ul>
<li>a <em>presentational</em> query just for my templates, and/or</li>
<li>a <em>business logic</em> query tied to executing my commands, and/or</li>
<li>a <em>reporting</em> query.</li>
</ul>
<p>Presentational queries are merely made to improve the user interface. The answers to business logic queries directly affect the execution of your commands. Reporting queries are merely for analytical purposes and have looser time constraints. These categories are not mutually exclusive.</p>
<p>The other question is: &quot;do I have complete control over the answers?&quot; For example, when querying the user's name (in this context)  we do not have any control over the outcome, because we rely on an external API.</p>
<h2>Making Queries</h2>
<p>The most basic query in Django is the use of the Manager object:</p>
<pre><code>User.objects.filter(active=True)
</code></pre>
<p>Of course, this only works if the data is actually represented in your data model. This is not always the case. In those cases, you can consider the options below.</p>
<h3>Custom tags and filters</h3>
<p>The first alternative is useful for queries that are merely presentational: custom tags and template filters.</p>
<p><strong>template.html</strong></p>
<pre><code>&lt;h1&gt;Welcome, {{ user|friendly_name }}&lt;/h1&gt;
</code></pre>
<p><strong>template_tags.py</strong></p>
<pre><code>@register.filter
def friendly_name(user):
    return remote_api.get_cached_name(user.id)
</code></pre>
<h3>Query methods</h3>
<p>If your query is not merely presentational, you could add queries to your <strong>services.py</strong> (if you are using that), or introduce a <strong>queries.py</strong> module:</p>
<p><strong>queries.py</strong></p>
<pre><code>def inactive_users():
    return User.objects.filter(active=False)


def users_called_publysher():
    for user in User.objects.all():
        if remote_api.get_cached_name(user.id) == &quot;publysher&quot;:
            yield user 
</code></pre>
<h3>Proxy models</h3>
<p>Proxy models are very useful in the context of business logic and reporting. You basically define an enhanced subset of your model. You can override a Managerƒ??s base QuerySet by overriding the <a href=""https://docs.djangoproject.com/en/2.0/topics/db/managers/#modifying-a-manager-s-initial-queryset"" rel=""noreferrer""><code>Manager.get_queryset()</code></a> method.</p>
<p><strong>models.py</strong></p>
<pre><code>class InactiveUserManager(models.Manager):
    def get_queryset(self):
        query_set = super(InactiveUserManager, self).get_queryset()
        return query_set.filter(active=False)

class InactiveUser(User):
    &quot;&quot;&quot;
    &gt;&gt;&gt; for user in InactiveUser.objects.all():
    ƒ??        assert user.active is False 
    &quot;&quot;&quot;

    objects = InactiveUserManager()
    class Meta:
        proxy = True
</code></pre>
<h3>Query models</h3>
<p>For queries that are inherently complex, but are executed quite often, there is the possibility of query models. A query model is a form of denormalization where relevant data for a single query is stored in a separate model. The trick of course is to keep the denormalized model in sync with the primary model. Query models can only be used if changes are entirely under your control.</p>
<p><strong>models.py</strong></p>
<pre><code>class InactiveUserDistribution(models.Model):
    country = CharField(max_length=200)
    inactive_user_count = IntegerField(default=0)
</code></pre>
<p>The first option is to update these models in your commands. This is very useful if these models are only changed by one or two commands.</p>
<p><strong>forms.py</strong></p>
<pre><code>class ActivateUserForm(forms.Form):
    # see above
   
    def execute(self):
        # see above
        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)
        query_model.inactive_user_count -= 1
        query_model.save()
</code></pre>
<p>A better option would be to use custom signals. These signals are of course emitted by your commands. Signals have the advantage that you can keep multiple query models in sync with your original model. Furthermore, signal processing can be offloaded to background tasks, using Celery or similar frameworks.</p>
<p><strong>signals.py</strong></p>
<pre><code>user_activated = Signal(providing_args = ['user'])
user_deactivated = Signal(providing_args = ['user'])
</code></pre>
<p><strong>forms.py</strong></p>
<pre><code>class ActivateUserForm(forms.Form):
    # see above
   
    def execute(self):
        # see above
        user_activated.send_robust(sender=self, user=user)
</code></pre>
<p><strong>models.py</strong></p>
<pre><code>class InactiveUserDistribution(models.Model):
    # see above

@receiver(user_activated)
def on_user_activated(sender, **kwargs):
        user = kwargs['user']
        query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)
        query_model.inactive_user_count -= 1
        query_model.save()
    
</code></pre>
<h2>Keeping it clean</h2>
<p>When using this approach, it becomes ridiculously easy to determine if your code stays clean. Just follow these guidelines:</p>
<ul>
<li>Does my model contain methods that do more than managing database state? You should extract a command.</li>
<li>Does my model contain properties that do not map to database fields? You should extract a query.</li>
<li>Does my model reference infrastructure that is not my database (such as mail)? You should extract a command.</li>
</ul>
<p>The same goes for views (because views often suffer from the same problem).</p>
<ul>
<li>Does my view actively manage database models? You should extract a command.</li>
</ul>
<h2>Some References</h2>
<p><a href=""https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models"" rel=""noreferrer"">Django documentation: proxy models</a></p>
<p><a href=""https://docs.djangoproject.com/en/dev/topics/signals/"" rel=""noreferrer"">Django documentation: signals</a></p>
<p><a href=""https://rads.stackoverflow.com/amzn/click/com/0321125215"" rel=""noreferrer"" rel=""nofollow noreferrer"">Architecture: Domain Driven Design</a></p>
",,
478,3,Selenium using Python - Geckodriver executable needs to be in PATH,"<p>I'm new to programming and started with Python about two months ago and am going over Sweigart's <em>Automate the Boring Stuff with Python</em> text. I'm using <a href=""https://en.wikipedia.org/wiki/IDLE"" rel=""noreferrer"">IDLE</a> and already installed the Selenium module and the Firefox browser.</p>
<p>Whenever I tried to run the webdriver function, I get this:</p>
<pre><code>from selenium import webdriver
browser = webdriver.Firefox()
</code></pre>
<p>Exception:</p>
<pre><code>Exception ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0DA1080&gt;&gt;
Traceback (most recent call last):
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 163, in __del__
    self.stop()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 135, in stop
    if self.process is None:
AttributeError: 'Service' object has no attribute 'process'
Exception ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0E08128&gt;&gt;
Traceback (most recent call last):
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 163, in __del__
    self.stop()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 135, in stop
    if self.process is None:
AttributeError: 'Service' object has no attribute 'process'
Traceback (most recent call last):
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 64, in start
    stdout=self.log_file, stderr=self.log_file)
  File &quot;C:\Python\Python35\lib\subprocess.py&quot;, line 947, in __init__
    restore_signals, start_new_session)
  File &quot;C:\Python\Python35\lib\subprocess.py&quot;, line 1224, in _execute_child
    startupinfo)
FileNotFoundError: [WinError 2] The system cannot find the file specified

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;&lt;pyshell#11&gt;&quot;, line 1, in &lt;module&gt;
    browser = webdriver.Firefox()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\firefox\webdriver.py&quot;, line 135, in __init__
    self.service.start()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 71, in start
    os.path.basename(self.path), self.start_error_message)
selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.
</code></pre>
<p>I think I need to set the path for <code>geckodriver</code>, but I am not sure how, so how would I do this?</p>
","Selenium using Python - Geckodriver executable needs to be in PATH<p>I'm new to programming and started with Python about two months ago and am going over Sweigart's <em>Automate the Boring Stuff with Python</em> text. I'm using <a href=""https://en.wikipedia.org/wiki/IDLE"" rel=""noreferrer"">IDLE</a> and already installed the Selenium module and the Firefox browser.</p>
<p>Whenever I tried to run the webdriver function, I get this:</p>
<pre><code>from selenium import webdriver
browser = webdriver.Firefox()
</code></pre>
<p>Exception:</p>
<pre><code>Exception ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0DA1080&gt;&gt;
Traceback (most recent call last):
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 163, in __del__
    self.stop()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 135, in stop
    if self.process is None:
AttributeError: 'Service' object has no attribute 'process'
Exception ignored in: &lt;bound method Service.__del__ of &lt;selenium.webdriver.firefox.service.Service object at 0x00000249C0E08128&gt;&gt;
Traceback (most recent call last):
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 163, in __del__
    self.stop()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 135, in stop
    if self.process is None:
AttributeError: 'Service' object has no attribute 'process'
Traceback (most recent call last):
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 64, in start
    stdout=self.log_file, stderr=self.log_file)
  File &quot;C:\Python\Python35\lib\subprocess.py&quot;, line 947, in __init__
    restore_signals, start_new_session)
  File &quot;C:\Python\Python35\lib\subprocess.py&quot;, line 1224, in _execute_child
    startupinfo)
FileNotFoundError: [WinError 2] The system cannot find the file specified

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;&lt;pyshell#11&gt;&quot;, line 1, in &lt;module&gt;
    browser = webdriver.Firefox()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\firefox\webdriver.py&quot;, line 135, in __init__
    self.service.start()
  File &quot;C:\Python\Python35\lib\site-packages\selenium\webdriver\common\service.py&quot;, line 71, in start
    os.path.basename(self.path), self.start_error_message)
selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.
</code></pre>
<p>I think I need to set the path for <code>geckodriver</code>, but I am not sure how, so how would I do this?</p>
",<python><selenium><firefox><selenium-firefoxdriver><geckodriver>,geckodriver selenium boring ago sweigart pathi firefox browser automate months,"<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.</p>
</blockquote>
<p><a href=""https://www.google.co.in/amp/www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/amp/?client=ms-android-motorola"" rel=""noreferrer"">First of all you will need to download latest executable geckodriver from here to run latest Firefox using Selenium</a></p>
<p>Actually, the Selenium client bindings tries to locate the <code>geckodriver</code> executable from the system <code>PATH</code>. You will need to add the directory containing the executable to the system path.</p>
<ul>
<li><p>On Unix systems you can do the following to append it to your systemƒ??s search path, if youƒ??re using a Bash-compatible shell:</p>
<pre><code>  export PATH=$PATH:/path/to/directory/of/executable/downloaded/in/previous/step
</code></pre>
</li>
<li><p>On Windows you will need to update the <strong>Path system variable to add the full directory path to the executable geckodriver</strong> <a href=""https://www.google.co.in/amp/www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/amp/?client=ms-android-motorola"" rel=""noreferrer"">manually</a> or <a href=""https://www.windows-commandline.com/set-path-command-line/"" rel=""noreferrer"">command line</a>** (don't forget to restart your system after adding executable geckodriver into system PATH to take effect)**. The principle is the same as on Unix.</p>
</li>
</ul>
<p>Now you can run your code same as you're doing as below :-</p>
<pre><code>from selenium import webdriver

browser = webdriver.Firefox()
</code></pre>
<blockquote>
<p>selenium.common.exceptions.WebDriverException: Message: Expected browser binary location, but unable to find binary in default location, no 'moz:firefoxOptions.binary' capability provided, and no binary flag set on the command line</p>
</blockquote>
<p>The exception clearly states you have installed Firefox some other location while Selenium is trying to find Firefox and launch from the default location, but it couldn't find it. You need to provide explicitly Firefox installed binary location to launch Firefox as below :-</p>
<pre><code>from selenium import webdriver
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

binary = FirefoxBinary('path/to/installed firefox binary')
browser = webdriver.Firefox(firefox_binary=binary)
</code></pre>
<p><a href=""https://github.com/mozilla/geckodriver/releases"" rel=""noreferrer"">https://github.com/mozilla/geckodriver/releases</a></p>
<p>For Windows:</p>
<p>Download the file from GitHub, extract it, and paste it in Python file. It worked for me.</p>
<p><a href=""https://github.com/mozilla/geckodriver/releases"" rel=""noreferrer"">https://github.com/mozilla/geckodriver/releases</a></p>
<p>For me, my path path is:</p>
<pre><code>C:\Users\MYUSERNAME\AppData\Local\Programs\Python\Python39
</code></pre>
",,
479,3,A non-blocking read on a subprocess.PIPE in Python,"<p>I'm using the <a href=""http://docs.python.org/library/subprocess.html"" rel=""noreferrer"">subprocess module</a> to start a subprocess and connect to its output stream (standard output). I want to be able to execute non-blocking reads on its standard output. Is there a way to make .readline non-blocking or to check if there is data on the stream before I invoke <code>.readline</code>? I'd like this to be portable or at least work under Windows and Linux.</p>
<p>Here is how I do it for now (it's blocking on the <code>.readline</code> if no data is available):</p>
<pre><code>p = subprocess.Popen('myprogram.exe', stdout = subprocess.PIPE)
output_str = p.stdout.readline()
</code></pre>
","A non-blocking read on a subprocess.PIPE in Python<p>I'm using the <a href=""http://docs.python.org/library/subprocess.html"" rel=""noreferrer"">subprocess module</a> to start a subprocess and connect to its output stream (standard output). I want to be able to execute non-blocking reads on its standard output. Is there a way to make .readline non-blocking or to check if there is data on the stream before I invoke <code>.readline</code>? I'd like this to be portable or at least work under Windows and Linux.</p>
<p>Here is how I do it for now (it's blocking on the <code>.readline</code> if no data is available):</p>
<pre><code>p = subprocess.Popen('myprogram.exe', stdout = subprocess.PIPE)
output_str = p.stdout.readline()
</code></pre>
",<python><io><subprocess><nonblocking>,blocking readline subprocess non stream output standard data pipe connect,"<p><a href=""https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/4025909#4025909""><code>fcntl</code></a>, <a href=""https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/375511#375511""><code>select</code></a>, <a href=""https://stackoverflow.com/questions/375427/non-blocking-read-on-a-stream-in-python/437888#437888""><code>asyncproc</code></a> won't help in this case.</p>

<p>A reliable way to read a stream without blocking regardless of operating system is to use <a href=""https://docs.python.org/3/library/queue.html#queue.Queue.get_nowait"" rel=""noreferrer""><code>Queue.get_nowait()</code></a>:</p>

<pre><code>import sys
from subprocess import PIPE, Popen
from threading  import Thread

try:
    from queue import Queue, Empty
except ImportError:
    from Queue import Queue, Empty  # python 2.x

ON_POSIX = 'posix' in sys.builtin_module_names

def enqueue_output(out, queue):
    for line in iter(out.readline, b''):
        queue.put(line)
    out.close()

p = Popen(['myprogram.exe'], stdout=PIPE, bufsize=1, close_fds=ON_POSIX)
q = Queue()
t = Thread(target=enqueue_output, args=(p.stdout, q))
t.daemon = True # thread dies with the program
t.start()

# ... do other things here

# read line without blocking
try:  line = q.get_nowait() # or q.get(timeout=.1)
except Empty:
    print('no output yet')
else: # got line
    # ... do something with line
</code></pre>
",,
480,2,How to replace NaN values by Zeroes in a column of a Pandas Dataframe?,"<p>I have a Pandas Dataframe as below:</p>
<pre><code>      itm Date                  Amount 
67    420 2012-09-30 00:00:00   65211
68    421 2012-09-09 00:00:00   29424
69    421 2012-09-16 00:00:00   29877
70    421 2012-09-23 00:00:00   30990
71    421 2012-09-30 00:00:00   61303
72    485 2012-09-09 00:00:00   71781
73    485 2012-09-16 00:00:00     NaN
74    485 2012-09-23 00:00:00   11072
75    485 2012-09-30 00:00:00  113702
76    489 2012-09-09 00:00:00   64731
77    489 2012-09-16 00:00:00     NaN
</code></pre>
<p>When I try to apply a function to the Amount column, I get the following error:</p>
<pre><code>ValueError: cannot convert float NaN to integer
</code></pre>
<p>I have tried applying a function using .isnan from the Math Module
I have tried the pandas .replace attribute
I tried the .sparse data attribute from pandas 0.9
I have also tried if NaN == NaN statement in a function.
I have also looked at this article <a href=""https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-r"">How do I replace NA values with zeros in an R dataframe?</a> whilst looking at some other articles.
All the methods I have tried have not worked or do not recognise NaN.
Any Hints or solutions would be appreciated.</p>
","How to replace NaN values by Zeroes in a column of a Pandas Dataframe?<p>I have a Pandas Dataframe as below:</p>
<pre><code>      itm Date                  Amount 
67    420 2012-09-30 00:00:00   65211
68    421 2012-09-09 00:00:00   29424
69    421 2012-09-16 00:00:00   29877
70    421 2012-09-23 00:00:00   30990
71    421 2012-09-30 00:00:00   61303
72    485 2012-09-09 00:00:00   71781
73    485 2012-09-16 00:00:00     NaN
74    485 2012-09-23 00:00:00   11072
75    485 2012-09-30 00:00:00  113702
76    489 2012-09-09 00:00:00   64731
77    489 2012-09-16 00:00:00     NaN
</code></pre>
<p>When I try to apply a function to the Amount column, I get the following error:</p>
<pre><code>ValueError: cannot convert float NaN to integer
</code></pre>
<p>I have tried applying a function using .isnan from the Math Module
I have tried the pandas .replace attribute
I tried the .sparse data attribute from pandas 0.9
I have also tried if NaN == NaN statement in a function.
I have also looked at this article <a href=""https://stackoverflow.com/questions/8161836/how-do-i-replace-na-values-with-zeros-in-r"">How do I replace NA values with zeros in an R dataframe?</a> whilst looking at some other articles.
All the methods I have tried have not worked or do not recognise NaN.
Any Hints or solutions would be appreciated.</p>
",<python><pandas><dataframe><nan>,nan tried replace pandas dataframe function column values attribute module,"<p>I believe <code>DataFrame.fillna()</code> will do this for you.</p>

<p>Link to Docs for <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html"" rel=""noreferrer"">a dataframe</a> and for <a href=""http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html"" rel=""noreferrer"">a Series</a>. </p>

<p>Example: </p>

<pre><code>In [7]: df
Out[7]: 
          0         1
0       NaN       NaN
1 -0.494375  0.570994
2       NaN       NaN
3  1.876360 -0.229738
4       NaN       NaN

In [8]: df.fillna(0)
Out[8]: 
          0         1
0  0.000000  0.000000
1 -0.494375  0.570994
2  0.000000  0.000000
3  1.876360 -0.229738
4  0.000000  0.000000
</code></pre>

<p>To fill the NaNs in only one column, select just that column. in this case I'm using inplace=True to actually change the contents of df. </p>

<pre><code>In [12]: df[1].fillna(0, inplace=True)
Out[12]: 
0    0.000000
1    0.570994
2    0.000000
3   -0.229738
4    0.000000
Name: 1

In [13]: df
Out[13]: 
          0         1
0       NaN  0.000000
1 -0.494375  0.570994
2       NaN  0.000000
3  1.876360 -0.229738
4       NaN  0.000000
</code></pre>

<p><strong>EDIT:</strong></p>

<p>To avoid a <code>SettingWithCopyWarning</code>, use the built in column-specific functionality:</p>

<pre><code>df.fillna({1:0}, inplace=True)
</code></pre>
",,
481,3,How to get a random number between a float range?,"<p><code>randrange(start, stop)</code> only takes integer arguments. So how would I get a random number between two float values?</p>
","How to get a random number between a float range?<p><code>randrange(start, stop)</code> only takes integer arguments. So how would I get a random number between two float values?</p>
",<python><random><floating-point>,float random number randrange stop range start takes arguments integer,"<p>Use <a href=""http://docs.python.org/library/random.html#random.uniform"">random.uniform(a, b)</a>:</p>

<pre><code>&gt;&gt;&gt; random.uniform(1.5, 1.9)
1.8733202628557872
</code></pre>
",,
482,4,Is there a NumPy function to return the first index of something in an array?,"<p>I know there is a method for a Python list to return the first index of something:</p>

<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; l.index(2)
1
</code></pre>

<p>Is there something like that for NumPy arrays?</p>
","Is there a NumPy function to return the first index of something in an array?<p>I know there is a method for a Python list to return the first index of something:</p>

<pre><code>&gt;&gt;&gt; l = [1, 2, 3]
&gt;&gt;&gt; l.index(2)
1
</code></pre>

<p>Is there something like that for NumPy arrays?</p>
",<python><arrays><numpy>,numpy index return arrays array method function know list like,"<p>Yes, given an array, <code>array</code>, and a value, <code>item</code> to search for, you can use <a href=""http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html"" rel=""noreferrer""><code>np.where</code></a> as:</p>
<pre><code>itemindex = numpy.where(array==item)
</code></pre>
<p>The result is a tuple with first all the row indices, then all the column indices.</p>
<p>For example, if an array is two dimensions and it contained your item at two locations then</p>
<pre><code>array[itemindex[0][0]][itemindex[1][0]]
</code></pre>
<p>would be equal to your item and so would be:</p>
<pre><code>array[itemindex[0][1]][itemindex[1][1]]
</code></pre>
",,
483,4,Transpose/Unzip Function (inverse of zip)?,"<p>I have a list of 2-item tuples and I'd like to convert them to 2 lists where the first contains the first item in each tuple and the second list holds the second item.</p>

<p><strong>For example:</strong></p>

<pre><code>original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
# and I want to become...
result = (['a', 'b', 'c', 'd'], [1, 2, 3, 4])
</code></pre>

<p>Is there a builtin function that does that?</p>
","Transpose/Unzip Function (inverse of zip)?<p>I have a list of 2-item tuples and I'd like to convert them to 2 lists where the first contains the first item in each tuple and the second list holds the second item.</p>

<p><strong>For example:</strong></p>

<pre><code>original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]
# and I want to become...
result = (['a', 'b', 'c', 'd'], [1, 2, 3, 4])
</code></pre>

<p>Is there a builtin function that does that?</p>
",<python><list><matrix><transpose>,item second transpose holds inverse unzip function builtin zip tuple,"<p><a href=""http://docs.python.org/library/functions.html#zip"" rel=""noreferrer""><code>zip</code></a> is its own inverse! Provided you use the special * operator.</p>

<pre><code>&gt;&gt;&gt; zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
</code></pre>

<p>The way this works is by calling <code>zip</code> with the arguments:</p>

<pre><code>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))
</code></pre>

<p>ƒ?? except the arguments are passed to <code>zip</code> directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big.</p>
",,
484,3,Alphabet range in Python,"<p>Instead of making a list of alphabet characters like this:</p>

<pre><code>alpha = ['a', 'b', 'c', 'd'.........'z']
</code></pre>

<p>is there any way that we can group it to a range or something? For example, for numbers it can be grouped using <code>range()</code>:</p>

<pre><code>range(1, 10)
</code></pre>
","Alphabet range in Python<p>Instead of making a list of alphabet characters like this:</p>

<pre><code>alpha = ['a', 'b', 'c', 'd'.........'z']
</code></pre>

<p>is there any way that we can group it to a range or something? For example, for numbers it can be grouped using <code>range()</code>:</p>

<pre><code>range(1, 10)
</code></pre>
",<python><string><list><alphabet>,range alphabet pythoninstead grouped making group characters numbers example list,"<pre><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
</code></pre>

<p>If you really need a list:</p>

<pre><code>&gt;&gt;&gt; list(string.ascii_lowercase)
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
</code></pre>

<p>And to do it with <code>range</code></p>

<pre><code>&gt;&gt;&gt; list(map(chr, range(97, 123))) #or list(map(chr, range(ord('a'), ord('z')+1)))
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
</code></pre>

<p>Other helpful <code>string</code> module features:</p>

<pre><code>&gt;&gt;&gt; help(string) # on Python 3
....
DATA
    ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
    ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = '0123456789'
    hexdigits = '0123456789abcdefABCDEF'
    octdigits = '01234567'
    printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!""#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
    punctuation = '!""#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~'
    whitespace = ' \t\n\r\x0b\x0c'
</code></pre>
",,
485,3,Is it worth using Python's re.compile?,"<p>Is there any benefit in using compile for regular expressions in Python?</p>

<pre><code>h = re.compile('hello')
h.match('hello world')
</code></pre>

<p>vs</p>

<pre><code>re.match('hello', 'hello world')
</code></pre>
","Is it worth using Python's re.compile?<p>Is there any benefit in using compile for regular expressions in Python?</p>

<pre><code>h = re.compile('hello')
h.match('hello world')
</code></pre>

<p>vs</p>

<pre><code>re.match('hello', 'hello world')
</code></pre>
",<python><regex>,compile benefit worth expressions using regular vs python forget formatted,"<p>I've had a lot of experience running a compiled regex 1000s of times versus compiling on-the-fly, and have not noticed any perceivable difference.  Obviously, this is anecdotal, and certainly not a great argument <em>against</em> compiling, but I've found the difference to be negligible.</p>

<p>EDIT:
After a quick glance at the actual Python 2.5 library code, I see that Python internally compiles AND CACHES regexes whenever you use them anyway (including calls to <code>re.match()</code>), so you're really only changing WHEN the regex gets compiled, and shouldn't be saving much time at all - only the time it takes to check the cache (a key lookup on an internal <code>dict</code> type).</p>

<p>From module re.py (comments are mine):</p>

<pre><code>def match(pattern, string, flags=0):
    return _compile(pattern, flags).match(string)

def _compile(*key):

    # Does cache check at top of function
    cachekey = (type(key[0]),) + key
    p = _cache.get(cachekey)
    if p is not None: return p

    # ...
    # Does actual compilation on cache miss
    # ...

    # Caches compiled regex
    if len(_cache) &gt;= _MAXCACHE:
        _cache.clear()
    _cache[cachekey] = p
    return p
</code></pre>

<p>I still often pre-compile regular expressions, but only to bind them to a nice, reusable name, not for any expected performance gain.</p>
",,
486,3,Decorators with parameters?,"<p>I have a problem with the transfer of variable 'insurance_mode' by the decorator. I would do it by the following decorator statement:</p>
<pre><code>@execute_complete_reservation(True)
def test_booking_gta_object(self):
    self.test_select_gta_object()
</code></pre>
<p>but unfortunately, this statement does not work. Perhaps maybe there is better way to solve this problem.</p>
<pre><code>def execute_complete_reservation(test_case,insurance_mode):
    def inner_function(self,*args,**kwargs):
        self.test_create_qsf_query()
        test_case(self,*args,**kwargs)
        self.test_select_room_option()
        if insurance_mode:
            self.test_accept_insurance_crosseling()
        else:
            self.test_decline_insurance_crosseling()
        self.test_configure_pax_details()
        self.test_configure_payer_details

    return inner_function
</code></pre>
","Decorators with parameters?<p>I have a problem with the transfer of variable 'insurance_mode' by the decorator. I would do it by the following decorator statement:</p>
<pre><code>@execute_complete_reservation(True)
def test_booking_gta_object(self):
    self.test_select_gta_object()
</code></pre>
<p>but unfortunately, this statement does not work. Perhaps maybe there is better way to solve this problem.</p>
<pre><code>def execute_complete_reservation(test_case,insurance_mode):
    def inner_function(self,*args,**kwargs):
        self.test_create_qsf_query()
        test_case(self,*args,**kwargs)
        self.test_select_room_option()
        if insurance_mode:
            self.test_accept_insurance_crosseling()
        else:
            self.test_decline_insurance_crosseling()
        self.test_configure_pax_details()
        self.test_configure_payer_details

    return inner_function
</code></pre>
",<python><decorator>,decorator statement problem insurance mode transfer decorators parameters unfortunately solve maybe,"<p>The syntax for decorators with arguments is a bit different - the decorator with arguments should return a function that will <em>take a function</em> and return another function. So it should really return a normal decorator. A bit confusing, right? What I mean is:</p>

<pre><code>def decorator_factory(argument):
    def decorator(function):
        def wrapper(*args, **kwargs):
            funny_stuff()
            something_with_argument(argument)
            result = function(*args, **kwargs)
            more_funny_stuff()
            return result
        return wrapper
    return decorator
</code></pre>

<p><a href=""https://www.artima.com/weblogs/viewpost.jsp?thread=240845#decorator-functions-with-decorator-arguments"" rel=""noreferrer"">Here</a> you can read more on the subject - it's also possible to implement this using callable objects and that is also explained there.</p>
",,
487,3,Access an arbitrary element in a dictionary in Python,"<p>If a <code>mydict</code> is not empty, I access an arbitrary element as:</p>

<pre><code>mydict[mydict.keys()[0]]
</code></pre>

<p>Is there any better way to do this?</p>
","Access an arbitrary element in a dictionary in Python<p>If a <code>mydict</code> is not empty, I access an arbitrary element as:</p>

<pre><code>mydict[mydict.keys()[0]]
</code></pre>

<p>Is there any better way to do this?</p>
",<python><dictionary>,arbitrary element access pythonif mydict dictionary better way forthen forth,"<p>On Python 3, non-destructively and iteratively:</p>

<pre><code>next(iter(mydict.values()))
</code></pre>

<p>On Python 2, non-destructively and iteratively:</p>

<pre><code>mydict.itervalues().next()
</code></pre>

<p>If you want it to work in both Python 2 and 3, you can use the <code>six</code> package:</p>

<pre><code>six.next(six.itervalues(mydict))
</code></pre>

<p>though at this point it is quite cryptic and I'd rather prefer your code.</p>

<p>If you want to remove any item, do:</p>

<pre><code>key, value = mydict.popitem()
</code></pre>

<p>Note that ""first"" may not be an appropriate term here because <code>dict</code> is not an ordered type in Python &lt; 3.6. Python 3.6+ <code>dicts</code> are ordered.</p>
",,
488,3,Set up a scheduled job?,"<p>I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. </p>

<p>Basically I just want to run through the database and make some calculations/updates on an automatic, regular basis, but I can't seem to find any documentation on doing this.</p>

<p>Does anyone know how to set this up?</p>

<p>To clarify:  I know I can set up a <code>cron</code> job to do this, but I'm curious if there is some feature in Django that provides this functionality.   I'd like people to be able to deploy this app themselves without having to do much config (preferably zero).</p>

<p>I've considered triggering these actions ""retroactively"" by simply checking if a job should have been run since the last time a request was sent to the site, but I'm hoping for something a bit cleaner.</p>
","Set up a scheduled job?<p>I've been working on a web app using Django, and I'm curious if there is a way to schedule a job to run periodically. </p>

<p>Basically I just want to run through the database and make some calculations/updates on an automatic, regular basis, but I can't seem to find any documentation on doing this.</p>

<p>Does anyone know how to set this up?</p>

<p>To clarify:  I know I can set up a <code>cron</code> job to do this, but I'm curious if there is some feature in Django that provides this functionality.   I'd like people to be able to deploy this app themselves without having to do much config (preferably zero).</p>

<p>I've considered triggering these actions ""retroactively"" by simply checking if a job should have been run since the last time a request was sent to the site, but I'm hoping for something a bit cleaner.</p>
",<python><django><web-applications><scheduled-tasks>,job set curious run app django cleaner clarify periodically scheduled,"<p>One solution that I have employed is to do this:</p>

<p>1) Create a <a href=""http://docs.djangoproject.com/en/dev/howto/custom-management-commands/#howto-custom-management-commands"" rel=""noreferrer"">custom management command</a>, e.g. </p>

<pre><code>python manage.py my_cool_command
</code></pre>

<p>2) Use <code>cron</code> (on Linux) or <code>at</code> (on Windows) to run my command at the required times.</p>

<p>This is a simple solution that doesn't require installing a heavy AMQP stack. However there are nice advantages to using something like Celery, mentioned in the other answers. In particular, with Celery it is nice to not have to spread your application logic out into crontab files. However the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies.</p>

<p>EDIT:</p>

<p>In later version of windows the <code>at</code> command is deprecated for Windows 8, Server 2012 and above. You can use <code>schtasks.exe</code> for same use.</p>

<p>**** UPDATE ****
This the new <a href=""https://docs.djangoproject.com/en/2.2/howto/custom-management-commands/#howto-custom-management-commands"" rel=""noreferrer"">link</a> of django doc for writing the custom management command</p>
",,
489,3,How to retrieve an element from a set without removing it?,"<p>Suppose the following:</p>

<pre><code>&gt;&gt;&gt; s = set([1, 2, 3])
</code></pre>

<p>How do I get a value (any value) out of <code>s</code> without doing <code>s.pop()</code>? I want to leave the item in the set until I am sure I can remove it - something I can only be sure of after an asynchronous call to another host.</p>

<p>Quick and dirty:</p>

<pre><code>&gt;&gt;&gt; elem = s.pop()
&gt;&gt;&gt; s.add(elem)
</code></pre>

<p>But do you know of a better way? Ideally in constant time.</p>
","How to retrieve an element from a set without removing it?<p>Suppose the following:</p>

<pre><code>&gt;&gt;&gt; s = set([1, 2, 3])
</code></pre>

<p>How do I get a value (any value) out of <code>s</code> without doing <code>s.pop()</code>? I want to leave the item in the set until I am sure I can remove it - something I can only be sure of after an asynchronous call to another host.</p>

<p>Quick and dirty:</p>

<pre><code>&gt;&gt;&gt; elem = s.pop()
&gt;&gt;&gt; s.add(elem)
</code></pre>

<p>But do you know of a better way? Ideally in constant time.</p>
",<python><set>,sure set value asynchronous dirty constant pop ideally leave host,"<p>Two options that don't require copying the whole set:</p>

<pre><code>for e in s:
    break
# e is now an element from s
</code></pre>

<p>Or...</p>

<pre><code>e = next(iter(s))
</code></pre>

<p>But in general, sets don't support indexing or slicing.</p>
",,
490,5,Finding what methods a Python object has,"<p>Given a Python object of any kind, is there an easy way to get the list of all methods that this object has?</p>

<p>Or,</p>

<p>if this is not possible, is there at least an easy way to check if it has a particular method other than simply checking if an error occurs when the method is called?</p>
","Finding what methods a Python object has<p>Given a Python object of any kind, is there an easy way to get the list of all methods that this object has?</p>

<p>Or,</p>

<p>if this is not possible, is there at least an easy way to check if it has a particular method other than simply checking if an error occurs when the method is called?</p>
",<python><introspection>,object easy methods method occurs checking finding simply particular,"<p><strong>For many objects</strong>, you can use this code, replacing 'object' with the object you're interested in:</p>
<pre><code>object_methods = [method_name for method_name in dir(object)
                  if callable(getattr(object, method_name))]
</code></pre>
<p>I discovered it at <a href=""https://web.archive.org/web/20180901124519/http://www.diveintopython.net/power_of_introspection/index.html"" rel=""noreferrer"">diveintopython.net</a> (now archived). Hopefully, that should provide some further detail!</p>
<p><strong>If you get an <code>AttributeError</code>, you can use this instead</strong>:</p>
<p><code>getattr(</code> is intolerant of pandas style python3.6 abstract virtual sub-classes.  This code does the same as above and ignores exceptions.</p>
<pre><code>import pandas as pd
df = pd.DataFrame([[10, 20, 30], [100, 200, 300]],
                  columns=['foo', 'bar', 'baz'])
def get_methods(object, spacing=20):
  methodList = []
  for method_name in dir(object):
    try:
        if callable(getattr(object, method_name)):
            methodList.append(str(method_name))
    except:
        methodList.append(str(method_name))
  processFunc = (lambda s: ' '.join(s.split())) or (lambda s: s)
  for method in methodList:
    try:
        print(str(method.ljust(spacing)) + ' ' +
              processFunc(str(getattr(object, method).__doc__)[0:90]))
    except:
        print(method.ljust(spacing) + ' ' + ' getattr() failed')

get_methods(df['foo'])
</code></pre>
",,
491,2,"Constructing pandas DataFrame from values in variables gives ""ValueError: If using all scalar values, you must pass an index""","<p>This may be a simple question, but I can not figure out how to do this. Lets say that I have two variables as follows.</p>

<pre><code>a = 2
b = 3
</code></pre>

<p>I want to construct a DataFrame from this:</p>

<pre><code>df2 = pd.DataFrame({'A':a,'B':b})
</code></pre>

<p>This generates an error:  </p>

<blockquote>
  <p>ValueError: If using all scalar values, you must pass an index</p>
</blockquote>

<p>I tried this also:</p>

<pre><code>df2 = (pd.DataFrame({'a':a,'b':b})).reset_index()
</code></pre>

<p>This gives the same error message.</p>
","Constructing pandas DataFrame from values in variables gives ""ValueError: If using all scalar values, you must pass an index""<p>This may be a simple question, but I can not figure out how to do this. Lets say that I have two variables as follows.</p>

<pre><code>a = 2
b = 3
</code></pre>

<p>I want to construct a DataFrame from this:</p>

<pre><code>df2 = pd.DataFrame({'A':a,'B':b})
</code></pre>

<p>This generates an error:  </p>

<blockquote>
  <p>ValueError: If using all scalar values, you must pass an index</p>
</blockquote>

<p>I tried this also:</p>

<pre><code>df2 = (pd.DataFrame({'a':a,'b':b})).reset_index()
</code></pre>

<p>This gives the same error message.</p>
",<python><pandas><dataframe><scalar>,valueerror scalar values pass variables gives dataframe error constructing lets,"<p>The error message says that if you're passing scalar values, you have to pass an index.  So you can either not use scalar values for the columns -- e.g. use a list:</p>

<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'A': [a], 'B': [b]})
&gt;&gt;&gt; df
   A  B
0  2  3
</code></pre>

<p>or use scalar values and pass an index:</p>

<pre><code>&gt;&gt;&gt; df = pd.DataFrame({'A': a, 'B': b}, index=[0])
&gt;&gt;&gt; df
   A  B
0  2  3
</code></pre>
",,
492,2,How to get a value from a cell of a dataframe?,"<p>I have constructed a condition that extract exactly one row from my data frame:</p>

<pre><code>d2 = df[(df['l_ext']==l_ext) &amp; (df['item']==item) &amp; (df['wn']==wn) &amp; (df['wd']==1)]
</code></pre>

<p>Now I would like to take a value from a particular column:</p>

<pre><code>val = d2['col_name']
</code></pre>

<p>But as a result I get a data frame that contains one row and one column (<em>i.e.</em> one cell). It is not what I need. I need one value (one float number). How can I do it in pandas?</p>
","How to get a value from a cell of a dataframe?<p>I have constructed a condition that extract exactly one row from my data frame:</p>

<pre><code>d2 = df[(df['l_ext']==l_ext) &amp; (df['item']==item) &amp; (df['wn']==wn) &amp; (df['wd']==1)]
</code></pre>

<p>Now I would like to take a value from a particular column:</p>

<pre><code>val = d2['col_name']
</code></pre>

<p>But as a result I get a data frame that contains one row and one column (<em>i.e.</em> one cell). It is not what I need. I need one value (one float number). How can I do it in pandas?</p>
",<python><pandas><dataframe>,cell frame value row column data constructed need condition float,"<p>If you have a DataFrame with only one row, then access the first (only) row as a Series using <code>iloc</code>, and then the value using the column name:</p>

<pre><code>In [3]: sub_df
Out[3]:
          A         B
2 -0.133653 -0.030854

In [4]: sub_df.iloc[0]
Out[4]:
A   -0.133653
B   -0.030854
Name: 2, dtype: float64

In [5]: sub_df.iloc[0]['A']
Out[5]: -0.13365288513107493
</code></pre>
",,
493,3,Python vs Cpython,"<p>What's all this fuss about Python and CPython <em>(Jython,IronPython)</em>, I don't get it:</p>

<p><a href=""http://www.python.org/"" rel=""noreferrer"">python.org</a> mentions that CPython is:</p>

<blockquote>
  <p><em>The ""traditional"" implementation of Python (nicknamed CPython)</em></p>
</blockquote>

<p><a href=""https://stackoverflow.com/a/2324217/2425215"">yet another Stack Overflow question</a> mentions that:</p>

<blockquote>
  <p><em>CPython is the default byte-code interpreter of Python, which is written in C.</em></p>
</blockquote>

<p>Honestly I don't get what both of those explanations practically mean but what I thought was that, <em>if I use CPython does that mean when I run a sample python code, it compiles it to C language and then executes it as if it were C code</em></p>

<p><strong>So what exactly is CPython and how does it differ when compared with python and should I probably use CPython over Python and if so what are its advantages?</strong></p>
","Python vs Cpython<p>What's all this fuss about Python and CPython <em>(Jython,IronPython)</em>, I don't get it:</p>

<p><a href=""http://www.python.org/"" rel=""noreferrer"">python.org</a> mentions that CPython is:</p>

<blockquote>
  <p><em>The ""traditional"" implementation of Python (nicknamed CPython)</em></p>
</blockquote>

<p><a href=""https://stackoverflow.com/a/2324217/2425215"">yet another Stack Overflow question</a> mentions that:</p>

<blockquote>
  <p><em>CPython is the default byte-code interpreter of Python, which is written in C.</em></p>
</blockquote>

<p>Honestly I don't get what both of those explanations practically mean but what I thought was that, <em>if I use CPython does that mean when I run a sample python code, it compiles it to C language and then executes it as if it were C code</em></p>

<p><strong>So what exactly is CPython and how does it differ when compared with python and should I probably use CPython over Python and if so what are its advantages?</strong></p>
",<python><cpython>,cpython mentions python mean honestly traditional nicknamed executes,"<h2>So what is CPython?</h2>
<p>CPython is the <em>original</em> Python implementation. It is the implementation you download from Python.org. People call it CPython to distinguish it from other, later, Python implementations, and to distinguish the implementation of the language engine from the Python <em>programming language</em> itself.</p>
<p>The latter part is where your confusion comes from; you need to keep Python-the-language separate from whatever <em>runs</em> the Python code.</p>
<p>CPython <em>happens</em> to be implemented in C. That is just an implementation detail, really. CPython compiles your Python code into bytecode (transparently) and interprets that bytecode in a evaluation loop.</p>
<p>CPython is also the first to implement new features; Python-the-language development uses CPython as the base; other implementations follow.</p>
<h2>What about Jython, etc.?</h2>
<p><a href=""http://www.jython.org/"" rel=""noreferrer"">Jython</a>, <a href=""http://ironpython.net/"" rel=""noreferrer"">IronPython</a> and <a href=""https://pypy.org/"" rel=""noreferrer"">PyPy</a> are the current &quot;other&quot; implementations of the Python programming language; these are implemented in Java, C# and RPython (a subset of Python), respectively. Jython compiles your Python code to <em>Java</em> bytecode, so your Python code can run on the JVM. IronPython lets you run Python on the <a href=""https://docs.microsoft.com/en-us/dotnet/standard/clr"" rel=""noreferrer"">Microsoft CLR</a>. And PyPy, being implemented in (a subset of) Python, lets you run Python code faster than CPython, which rightly should blow your mind. :-)</p>
<h2>Actually compiling to C</h2>
<p>So CPython does <strong>not</strong> translate your Python code to C by itself. Instead, it runs an interpreter loop. There <em>is</em> a project that <em>does</em> translate Python-ish code to C, and that is called <a href=""http://cython.org/"" rel=""noreferrer"">Cython</a>. Cython adds a few extensions to the Python language, and lets you compile your code to C extensions, code that plugs <em>into</em> the CPython interpreter.</p>
",,
494,5,How do you access the query string in Flask routes?,"<p>How do you access query parameters or the query string in Flask routes? It's not obvious from the Flask documentation.</p>
<p>The example route <code>/data</code> below illustrates the context that I would like to access that data. If someone requests something like <code>example.com/data?abc=123</code>, I would like access to the string <code>?abc=123</code> or to be able to retrieve the value of parameters like <code>abc</code>.</p>
<pre><code>@app.route(&quot;/data&quot;)
def data():
    # query_string = ???
    return render_template(&quot;data.html&quot;)
</code></pre>
","How do you access the query string in Flask routes?<p>How do you access query parameters or the query string in Flask routes? It's not obvious from the Flask documentation.</p>
<p>The example route <code>/data</code> below illustrates the context that I would like to access that data. If someone requests something like <code>example.com/data?abc=123</code>, I would like access to the string <code>?abc=123</code> or to be able to retrieve the value of parameters like <code>abc</code>.</p>
<pre><code>@app.route(&quot;/data&quot;)
def data():
    # query_string = ???
    return render_template(&quot;data.html&quot;)
</code></pre>
",<python><flask><query-string>,query abc access flask routes data parameters like string route,"<pre><code>from flask import request

@app.route('/data')
def data():
    # here we want to get the value of user (i.e. ?user=some-value)
    user = request.args.get('user')
</code></pre>
",,
495,6,Import a file from a subdirectory?,"<p>I have a file called <code>tester.py</code>, located on <code>/project</code>.</p>

<p><code>/project</code> has a subdirectory called <code>lib</code>, with a file called <code>BoxTime.py</code>:</p>

<pre class=""lang-none prettyprint-override""><code>/project/tester.py
/project/lib/BoxTime.py
</code></pre>

<p>I want to import <code>BoxTime</code> from <code>tester</code>. I have tried this:</p>

<pre><code>import lib.BoxTime
</code></pre>

<p>Which resulted:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""./tester.py"", line 3, in &lt;module&gt;
    import lib.BoxTime
ImportError: No module named lib.BoxTime
</code></pre>

<p>Any ideas how to import <code>BoxTime</code> from the subdirectory?</p>

<p><strong>EDIT</strong></p>

<p>The <code>__init__.py</code> was the problem, but don't forget to refer to <code>BoxTime</code> as <code>lib.BoxTime</code>, or use:</p>

<pre><code>import lib.BoxTime as BT
...
BT.bt_function()
</code></pre>
","Import a file from a subdirectory?<p>I have a file called <code>tester.py</code>, located on <code>/project</code>.</p>

<p><code>/project</code> has a subdirectory called <code>lib</code>, with a file called <code>BoxTime.py</code>:</p>

<pre class=""lang-none prettyprint-override""><code>/project/tester.py
/project/lib/BoxTime.py
</code></pre>

<p>I want to import <code>BoxTime</code> from <code>tester</code>. I have tried this:</p>

<pre><code>import lib.BoxTime
</code></pre>

<p>Which resulted:</p>

<pre class=""lang-none prettyprint-override""><code>Traceback (most recent call last):
  File ""./tester.py"", line 3, in &lt;module&gt;
    import lib.BoxTime
ImportError: No module named lib.BoxTime
</code></pre>

<p>Any ideas how to import <code>BoxTime</code> from the subdirectory?</p>

<p><strong>EDIT</strong></p>

<p>The <code>__init__.py</code> was the problem, but don't forget to refer to <code>BoxTime</code> as <code>lib.BoxTime</code>, or use:</p>

<pre><code>import lib.BoxTime as BT
...
BT.bt_function()
</code></pre>
",<python><python-import>,boxtime subdirectory called tester import lib py file project forget,"<p>Take a look at the <strong><a href=""https://docs.python.org/3/tutorial/modules.html#packages"" rel=""noreferrer"">Packages documentation (Section 6.4)</a></strong>.</p>
<p>In short, you need to put a blank file named</p>
<pre><code>__init__.py
</code></pre>
<p>in the <code>lib</code> directory.</p>
",,
496,6,Most pythonic way to delete a file which may not exist,"<p>I want to delete the file <code>filename</code> if it exists.  Is it proper to say</p>

<pre><code>if os.path.exists(filename):
    os.remove(filename)
</code></pre>

<p>Is there a better way? A one-line way? </p>
","Most pythonic way to delete a file which may not exist<p>I want to delete the file <code>filename</code> if it exists.  Is it proper to say</p>

<pre><code>if os.path.exists(filename):
    os.remove(filename)
</code></pre>

<p>Is there a better way? A one-line way? </p>
",<python>,delete sayis exist way file filename proper pythonic exists better,"<p>A more pythonic way would be:</p>

<pre><code>try:
    os.remove(filename)
except OSError:
    pass
</code></pre>

<p>Although this takes even more lines and looks very ugly, it avoids the unnecessary call to <code>os.path.exists()</code> and follows the python convention of overusing exceptions.</p>

<p>It may be worthwhile to write a function to do this for you:</p>

<pre><code>import os, errno

def silentremove(filename):
    try:
        os.remove(filename)
    except OSError as e: # this would be ""except OSError, e:"" before Python 2.6
        if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
            raise # re-raise exception if a different error occurred
</code></pre>
",,
497,3,SQLAlchemy ORDER BY DESCENDING?,"<p>How can I use ORDER BY <code>descending</code> in a SQLAlchemy query like the following?</p>

<p>This query works, but returns them in ascending order:</p>

<pre class=""lang-py prettyprint-override""><code>query = (model.Session.query(model.Entry)
        .join(model.ClassificationItem)
        .join(model.EnumerationValue)
        .filter_by(id=c.row.id)
        .order_by(model.Entry.amount) #?ÿThis row :)
        )
</code></pre>

<p>If I try:</p>

<pre><code>.order_by(desc(model.Entry.amount))
</code></pre>

<p>then I get: <code>NameError: global name 'desc' is not defined</code>.</p>
","SQLAlchemy ORDER BY DESCENDING?<p>How can I use ORDER BY <code>descending</code> in a SQLAlchemy query like the following?</p>

<p>This query works, but returns them in ascending order:</p>

<pre class=""lang-py prettyprint-override""><code>query = (model.Session.query(model.Entry)
        .join(model.ClassificationItem)
        .join(model.EnumerationValue)
        .filter_by(id=c.row.id)
        .order_by(model.Entry.amount) #?ÿThis row :)
        )
</code></pre>

<p>If I try:</p>

<pre><code>.order_by(desc(model.Entry.amount))
</code></pre>

<p>then I get: <code>NameError: global name 'desc' is not defined</code>.</p>
",<python><sqlalchemy>,order sqlalchemy descending query desc nameerror ascending defined global returns,"<pre><code>from sqlalchemy import desc
someselect.order_by(desc(table1.mycol))
</code></pre>

<p><a href=""http://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.desc"" rel=""noreferrer"">Usage</a> from @jpmc26</p>
",,
498,3,How do I resize an image using PIL and maintain its aspect ratio?,"<p>Is there an obvious way to do this that I'm missing?  I'm just trying to make thumbnails.</p>
","How do I resize an image using PIL and maintain its aspect ratio?<p>Is there an obvious way to do this that I'm missing?  I'm just trying to make thumbnails.</p>
",<python><image><python-imaging-library><thumbnails>,resize maintain thumbnails pil ratio image aspect obvious missing make,"<p>Define a maximum size.
Then, compute a resize ratio by taking <code>min(maxwidth/width, maxheight/height)</code>.</p>

<p>The proper size is <code>oldsize*ratio</code>.</p>

<p>There is of course also a library method to do this: the method <code>Image.thumbnail</code>.<br>
Below is an (edited) example from the <a href=""http://effbot.org/imagingbook/introduction.htm"" rel=""noreferrer"">PIL documentation</a>.</p>

<pre><code>import os, sys
import Image

size = 128, 128

for infile in sys.argv[1:]:
    outfile = os.path.splitext(infile)[0] + "".thumbnail""
    if infile != outfile:
        try:
            im = Image.open(infile)
            im.thumbnail(size, Image.ANTIALIAS)
            im.save(outfile, ""JPEG"")
        except IOError:
            print ""cannot create thumbnail for '%s'"" % infile
</code></pre>
",,
499,6,"Python error ""ImportError: No module named""","<p>Python is installed in a local directory.  </p>

<p>My directory tree looks like this:</p>

<pre><code>(local directory)/site-packages/toolkit/interface.py
</code></pre>

<p>My code is in here:</p>

<pre><code>(local directory)/site-packages/toolkit/examples/mountain.py
</code></pre>

<p>To run the example, I write <code>python mountain.py</code>, and in the code I have:</p>

<pre><code>from toolkit.interface import interface
</code></pre>

<p>And I get the error:</p>

<pre><code>Traceback (most recent call last):
  File ""mountain.py"", line 28, in ?
    from toolkit.interface import interface
ImportError: No module named toolkit.interface
</code></pre>

<p>I have already checked <code>sys.path</code> and there I have the directory <code>/site-packages</code>. Also, I have the file <code>__init__.py.bin</code> in the toolkit folder to indicate to Python that this is a package. I also have a <code>__init__.py.bin</code> in the examples directory.</p>

<p>I do not know why Python cannot find the file when it is in <code>sys.path</code>.  Any ideas?  Can it be a permissions problem?  Do I need some execution permission?</p>
","Python error ""ImportError: No module named""<p>Python is installed in a local directory.  </p>

<p>My directory tree looks like this:</p>

<pre><code>(local directory)/site-packages/toolkit/interface.py
</code></pre>

<p>My code is in here:</p>

<pre><code>(local directory)/site-packages/toolkit/examples/mountain.py
</code></pre>

<p>To run the example, I write <code>python mountain.py</code>, and in the code I have:</p>

<pre><code>from toolkit.interface import interface
</code></pre>

<p>And I get the error:</p>

<pre><code>Traceback (most recent call last):
  File ""mountain.py"", line 28, in ?
    from toolkit.interface import interface
ImportError: No module named toolkit.interface
</code></pre>

<p>I have already checked <code>sys.path</code> and there I have the directory <code>/site-packages</code>. Also, I have the file <code>__init__.py.bin</code> in the toolkit folder to indicate to Python that this is a package. I also have a <code>__init__.py.bin</code> in the examples directory.</p>

<p>I do not know why Python cannot find the file when it is in <code>sys.path</code>.  Any ideas?  Can it be a permissions problem?  Do I need some execution permission?</p>
",<python><importerror><python-import>,directory bin py sys init path python error toolkit mountain,"<p>Based on your comments to orip's post, I guess this is what happened:</p>

<ol>
<li>You edited <code>__init__.py</code> on windows.</li>
<li>The windows editor added something non-printing, perhaps a carriage-return (end-of-line in Windows is CR/LF; in unix it is LF only), or perhaps a CTRL-Z (windows end-of-file).</li>
<li>You used WinSCP to copy the file to your unix box.</li>
<li>WinSCP thought: ""This has something that's not basic text; I'll put a .bin extension to indicate binary data.""</li>
<li>The missing <code>__init__.py</code> (now called <code>__init__.py.bin</code>) means python doesn't understand toolkit as a package.</li>
<li>You create <code>__init__.py</code> in the appropriate directory and everything works... ?</li>
</ol>
",,
